<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Elasticsearch 集群环境搭建</title>
    <url>/2021/10/12/Elasticsearch%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ol>
<li>本次打算使用虚拟机来搭建 Elasticsearch 集群，所以需要准备一台刚安装完成的虚拟机</li>
<li>如果虚拟机不会安装的小伙伴可以参考 <a href="https://www.bilibili.com/video/BV1Sv411r7vd?spm_id_from=333.999.0.0">2021韩顺平 一周学会Linux</a> 的前10节</li>
<li>下载软件可能需要科学上网，如有需要请参考 <a href="https://github.com/bannedbook/fanqiang">github-科学上网</a></li>
<li>网络拓扑图、配置文件，来自于<a href="https://ke.qq.com/course/3615877#term_id=104092654">Elastic认证特训班-吴磊老师</a></li>
</ol>
<span id="more"></span>

<h2 id="安装-Elasticsearch"><a href="#安装-Elasticsearch" class="headerlink" title="安装 Elasticsearch"></a>安装 Elasticsearch</h2><h3 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h3><ol>
<li>从刚安装完成的虚拟机中克隆一份</li>
</ol>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20211012225319.png" alt="image-20211012225314421"></p>
<ol start="2">
<li>选择克隆类型为创建完整克隆</li>
</ol>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20211012225629.png" alt="image-20211012225627802"></p>
<h3 id="安装-ifconfig-和-wget-命令"><a href="#安装-ifconfig-和-wget-命令" class="headerlink" title="安装 ifconfig 和 wget 命令"></a>安装 ifconfig 和 wget 命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install net-tools.x86_64</span><br><span class="line">yum install wget</span><br></pre></td></tr></table></figure>

<h3 id="设置桥接模式并设置静态-IP-Address"><a href="#设置桥接模式并设置静态-IP-Address" class="headerlink" title="设置桥接模式并设置静态 IP Address"></a>设置桥接模式并设置静态 IP Address</h3><ol>
<li><p>设置桥接模式</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20211013223953.png" alt="image-20211013223948681"></p>
</li>
<li><p>设置静态 IP Address，</p>
<ol>
<li>虚拟机的 子网掩码、网关、DNS 必须与主机相同</li>
<li>修改虚拟机 IP Address</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20211013224757.png" alt="image-20211013224755301"></p>
</li>
</ol>
<h3 id="安装-java-运行环境"><a href="#安装-java-运行环境" class="headerlink" title="安装 java 运行环境"></a>安装 java 运行环境</h3><ol>
<li>通过 <a href="https://www.elastic.co/cn/support/matrix#matrix_jvm">官网</a> 可以查询不同版本的 ES 所捆绑的 JDK 版本，7.13 和 7.15 版本都支持 OpenJDK 1.8 和 OpenJDK 11</li>
<li>我下载了 11 版本</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum search jdk</span><br><span class="line">yum install java-11-openjdk.x86_64</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>注意 <em>java-11-openjdk.x86_64</em> 代表的是 JRE（运行时环境），而 <em>java-11-openjdk-devel.x86_64</em> 代表的是 JDK（开发环境）</li>
<li>因为无需调试 java 程序，我只下载了 JRE</li>
<li>输入 <code>java -version</code> 判断是否安装成功</li>
</ol>
<h3 id="安装-Elasticsearch-1"><a href="#安装-Elasticsearch-1" class="headerlink" title="安装 Elasticsearch"></a>安装 Elasticsearch</h3><ol>
<li><p>参考官方文档 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.15/index.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.15/index.html</a></p>
</li>
<li><p>由于 Elasticsearch 不能用 root 用户启动，因此创建一个用户用于启动程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd -m -G wheel eitan  <span class="comment">#wheel附加组可sudo进行提权 -m同时创建用户家目录</span></span><br></pre></td></tr></table></figure></li>
<li><p>下载压缩包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.15.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>

<p>如果想下载 7.13 版本直接将命令中的 <code>elasticsearch-7.15.0-linux-x86_64.tar.gz</code> 改为 <code>elasticsearch-7.13.0-linux-x86_64.tar.gz</code></p>
</li>
<li><p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf elasticsearch-7.15.0-linux-x86_64.tar.gz </span><br></pre></td></tr></table></figure></li>
<li><p>修改 elasticsearch.yml</p>
</li>
<li><p>使程序通过 <em>Bootstrap Checks</em></p>
<ol>
<li><p>在 <em>/etc/sysctl.conf</em> 文件末尾添加一行 <em>vm.max_map_count=262144</em></p>
</li>
<li><p>在 <em>/etc/security/limits.conf</em> 文件末尾添加</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line">用户名 hard nofile <span class="number">65536</span></span><br><span class="line">用户名 <span class="keyword">soft</span> nofile <span class="number">65536</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>检测是否安装成功</p>
<ol>
<li><p>停用防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停用防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment"># 禁止开启自启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure></li>
<li><p>访问 ip:port，成功启动会出现一下 JSON</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;node-1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cluster_name&quot;</span>: <span class="string">&quot;dsl-cluster&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cluster_uuid&quot;</span>: <span class="string">&quot;61AMVhXhQS2FXjr_L0N4oA&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;number&quot;</span>: <span class="string">&quot;7.13.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_flavor&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_type&quot;</span>: <span class="string">&quot;tar&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_hash&quot;</span>: <span class="string">&quot;5ca8591c6fcdb1260ce95b08a8e023559635c6f3&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_date&quot;</span>: <span class="string">&quot;2021-05-19T22:22:26.081971330Z&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_snapshot&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;lucene_version&quot;</span>: <span class="string">&quot;8.8.2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;minimum_wire_compatibility_version&quot;</span>: <span class="string">&quot;6.8.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;minimum_index_compatibility_version&quot;</span>: <span class="string">&quot;6.0.0-beta1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;tagline&quot;</span>: <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<ol start="8">
<li><p>常见错误</p>
<ol>
<li><p>引导检查报错：文件描述符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/security/limits.conf</span><br><span class="line"><span class="comment"># 添加以下内容</span></span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line">* soft nproc 32000</span><br><span class="line">* hard nproc 32000</span><br><span class="line">* hard memlock unlimited</span><br><span class="line">* soft memlock unlimited</span><br><span class="line"></span><br><span class="line">vim /etc/systemd/system.conf ，分别修改以下内容。</span><br><span class="line">DefaultLimitNOFILE=65536</span><br><span class="line">DefaultLimitNPROC=32000</span><br><span class="line">DefaultLimitMEMLOCK=infinity</span><br><span class="line"></span><br><span class="line"><span class="built_in">ulimit</span> -n 65535(需使用root账号)</span><br></pre></td></tr></table></figure></li>
<li><p>引导检查报错：虚拟内存不足</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br><span class="line">vm.max_map_count=262144</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>位置：<code>vi elasticsearch-7.13.0/config/elasticsearch.yml</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cluster.name: cfg-cluster01</span><br><span class="line">node.roles: [ data, master, remote_cluster_client, ingest, data_warm ]</span><br><span class="line">node.name: node-1</span><br><span class="line">network.host: 192.168.0.181</span><br><span class="line">http.port: 9200</span><br><span class="line">discovery.seed_hosts: [<span class="string">&quot;192.168.0.181&quot;</span>, <span class="string">&quot;192.168.0.182&quot;</span>]</span><br><span class="line">cluster.initial_master_nodes: [<span class="string">&quot;node-1&quot;</span>]</span><br><span class="line">node.attr.rack_id: rack1</span><br><span class="line">node.attr.hot_warm_cold: hot</span><br></pre></td></tr></table></figure>

<h2 id="安装-Kibana"><a href="#安装-Kibana" class="headerlink" title="安装 Kibana"></a>安装 Kibana</h2><h3 id="官网下载并解压"><a href="#官网下载并解压" class="headerlink" title="官网下载并解压"></a>官网下载并解压</h3><h3 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h3>]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop（二）：HDFS</title>
    <url>/2022/05/09/Hadoop%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AHDFS/</url>
    <content><![CDATA[<p>本文为学习笔记，对应视频教程来自<a href="https://www.bilibili.com/video/BV1Qp4y1n7EN">尚硅谷大数据Hadoop 3.x</a></p>
<h3 id="HDFS概述"><a href="#HDFS概述" class="headerlink" title="HDFS概述"></a>HDFS概述</h3><h4 id="HDFS产出背景及定义"><a href="#HDFS产出背景及定义" class="headerlink" title="HDFS产出背景及定义"></a>HDFS产出背景及定义</h4><h4 id="HDFS优缺点"><a href="#HDFS优缺点" class="headerlink" title="HDFS优缺点"></a>HDFS优缺点</h4><h4 id="HDFS组成架构"><a href="#HDFS组成架构" class="headerlink" title="HDFS组成架构"></a>HDFS组成架构</h4><h4 id="HDFS文件块大小（面试重点）"><a href="#HDFS文件块大小（面试重点）" class="headerlink" title="HDFS文件块大小（面试重点）"></a>HDFS文件块大小（面试重点）</h4><span id="more"></span>

<h3 id="HDFS的Shell操作"><a href="#HDFS的Shell操作" class="headerlink" title="HDFS的Shell操作"></a>HDFS的Shell操作</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs</span><br><span class="line">Usage: hadoop fs [generic options]</span><br><span class="line">	[-appendToFile &lt;localsrc&gt; ... &lt;dst&gt;]</span><br><span class="line">	[-cat [-ignoreCrc] &lt;src&gt; ...]</span><br><span class="line">	[-checksum [-v] &lt;src&gt; ...]</span><br><span class="line">	[-chgrp [-R] GROUP PATH...]</span><br><span class="line">	[-chmod [-R] &lt;MODE[,MODE]... | OCTALMODE&gt; PATH...]</span><br><span class="line">	[-chown [-R] [OWNER][:[GROUP]] PATH...]</span><br><span class="line">	[-concat &lt;target path&gt; &lt;src path&gt; &lt;src path&gt; ...]</span><br><span class="line">	[-copyFromLocal [-f] [-p] [-l] [-d] [-t &lt;thread count&gt;] [-q &lt;thread pool queue size&gt;] &lt;localsrc&gt; ... &lt;dst&gt;]</span><br><span class="line">	[-copyToLocal [-f] [-p] [-crc] [-ignoreCrc] [-t &lt;thread count&gt;] [-q &lt;thread pool queue size&gt;] &lt;src&gt; ... &lt;localdst&gt;]</span><br><span class="line">	[-count [-q] [-h] [-v] [-t [&lt;storage type&gt;]] [-u] [-x] [-e] [-s] &lt;path&gt; ...]</span><br><span class="line">	[-cp [-f] [-p | -p[topax]] [-d] [-t &lt;thread count&gt;] [-q &lt;thread pool queue size&gt;] &lt;src&gt; ... &lt;dst&gt;]</span><br><span class="line">	[-createSnapshot &lt;snapshotDir&gt; [&lt;snapshotName&gt;]]</span><br><span class="line">	[-deleteSnapshot &lt;snapshotDir&gt; &lt;snapshotName&gt;]</span><br><span class="line">	[-df [-h] [&lt;path&gt; ...]]</span><br><span class="line">	[-du [-s] [-h] [-v] [-x] &lt;path&gt; ...]</span><br><span class="line">	[-expunge [-immediate] [-fs &lt;path&gt;]]</span><br><span class="line">	[-find &lt;path&gt; ... &lt;expression&gt; ...]</span><br><span class="line">	[-get [-f] [-p] [-crc] [-ignoreCrc] [-t &lt;thread count&gt;] [-q &lt;thread pool queue size&gt;] &lt;src&gt; ... &lt;localdst&gt;]</span><br><span class="line">	[-getfacl [-R] &lt;path&gt;]</span><br><span class="line">	[-getfattr [-R] &#123;-n name | -d&#125; [-e en] &lt;path&gt;]</span><br><span class="line">	[-getmerge [-nl] [-skip-empty-file] &lt;src&gt; &lt;localdst&gt;]</span><br><span class="line">	[-head &lt;file&gt;]</span><br><span class="line">	[-help [cmd ...]]</span><br><span class="line">	[-ls [-C] [-d] [-h] [-q] [-R] [-t] [-S] [-r] [-u] [-e] [&lt;path&gt; ...]]</span><br><span class="line">	[-mkdir [-p] &lt;path&gt; ...]</span><br><span class="line">	[-moveFromLocal [-f] [-p] [-l] [-d] &lt;localsrc&gt; ... &lt;dst&gt;]</span><br><span class="line">	[-moveToLocal &lt;src&gt; &lt;localdst&gt;]</span><br><span class="line">	[-mv &lt;src&gt; ... &lt;dst&gt;]</span><br><span class="line">	[-put [-f] [-p] [-l] [-d] [-t &lt;thread count&gt;] [-q &lt;thread pool queue size&gt;] &lt;localsrc&gt; ... &lt;dst&gt;]</span><br><span class="line">	[-renameSnapshot &lt;snapshotDir&gt; &lt;oldName&gt; &lt;newName&gt;]</span><br><span class="line">	[-rm [-f] [-r|-R] [-skipTrash] [-safely] &lt;src&gt; ...]</span><br><span class="line">	[-rmdir [--ignore-fail-on-non-empty] &lt;dir&gt; ...]</span><br><span class="line">	[-setfacl [-R] [&#123;-b|-k&#125; &#123;-m|-x &lt;acl_spec&gt;&#125; &lt;path&gt;]|[--set &lt;acl_spec&gt; &lt;path&gt;]]</span><br><span class="line">	[-setfattr &#123;-n name [-v value] | -x name&#125; &lt;path&gt;]</span><br><span class="line">	[-setrep [-R] [-w] &lt;rep&gt; &lt;path&gt; ...]</span><br><span class="line">	[-stat [format] &lt;path&gt; ...]</span><br><span class="line">	[-tail [-f] [-s &lt;sleep interval&gt;] &lt;file&gt;]</span><br><span class="line">	[-test -[defswrz] &lt;path&gt;]</span><br><span class="line">	[-text [-ignoreCrc] &lt;src&gt; ...]</span><br><span class="line">	[-touch [-a] [-m] [-t TIMESTAMP (yyyyMMdd:HHmmss) ] [-c] &lt;path&gt; ...]</span><br><span class="line">	[-touchz &lt;path&gt; ...]</span><br><span class="line">	[-truncate [-w] &lt;length&gt; &lt;path&gt; ...]</span><br><span class="line">	[-usage [cmd ...]]</span><br><span class="line"></span><br><span class="line">Generic options supported are:</span><br><span class="line">-conf &lt;configuration file&gt;        specify an application configuration file</span><br><span class="line">-D &lt;property=value&gt;               define a value for a given property</span><br><span class="line">-fs &lt;file:///|hdfs://namenode:port&gt; specify default filesystem URL to use, overrides &#x27;fs.defaultFS&#x27; property from configurations.</span><br><span class="line">-jt &lt;local|resourcemanager:port&gt;  specify a ResourceManager</span><br><span class="line">-files &lt;file1,...&gt;                specify a comma-separated list of files to be copied to the map reduce cluster</span><br><span class="line">-libjars &lt;jar1,...&gt;               specify a comma-separated list of jar files to be included in the classpath</span><br><span class="line">-archives &lt;archive1,...&gt;          specify a comma-separated list of archives to be unarchived on the compute machines</span><br><span class="line"></span><br><span class="line">The general command line syntax is:</span><br><span class="line">command [genericOptions] [commandOptions]</span><br></pre></td></tr></table></figure>

<h4 id="常用命令实操"><a href="#常用命令实操" class="headerlink" title="常用命令实操"></a>常用命令实操</h4><h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><ol>
<li><p>启动 Hadoop 集群</p>
</li>
<li><p>-help：输出这个命令参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -help rm</span><br><span class="line">-rm [-f] [-r|-R] [-skipTrash] [-safely] &lt;src&gt; ... :</span><br><span class="line">  Delete all files that match the specified file pattern. Equivalent to the Unix</span><br><span class="line">  command &quot;rm &lt;src&gt;&quot;</span><br><span class="line">                                                                                 </span><br><span class="line">  -f          If the file does not exist, do not display a diagnostic message or </span><br><span class="line">              modify the exit status to reflect an error.                        </span><br><span class="line">  -[rR]       Recursively deletes directories.                                   </span><br><span class="line">  -skipTrash  option bypasses trash, if enabled, and immediately deletes &lt;src&gt;.  </span><br><span class="line">  -safely     option requires safety confirmation, if enabled, requires          </span><br><span class="line">              confirmation before deleting large directory with more than        </span><br><span class="line">              &lt;hadoop.shell.delete.limit.num.files&gt; files. Delay is expected when</span><br><span class="line">              walking over large directory recursively to count the number of    </span><br><span class="line">              files to be deleted before the confirmation. </span><br></pre></td></tr></table></figure></li>
<li><p>创建/sanguo文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -mkdir /sanguo</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h5><ol>
<li><p>-moveFromLocal：从本地剪切粘贴到HDFS</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ echo shuguo &gt;&gt; shuguo.txt</span><br><span class="line"></span><br><span class="line">[eitan@hadoop102 ~]$ hadoop fs -moveFromLocal shuguo.txt /sanguo</span><br></pre></td></tr></table></figure></li>
<li><p>-copyFromLocal：从本地文件系统中拷贝文件到HDFS路径去</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ echo weiguo &gt;&gt; .<span class="regexp">/documents/</span>txt/weiguo.txt</span><br><span class="line"></span><br><span class="line">[eitan@hadoop102 ~]$ hadoop fs -copyFromLocal .<span class="regexp">/documents/</span>txt<span class="regexp">/weiguo.txt /</span>sanguo</span><br></pre></td></tr></table></figure></li>
<li><p>-put：等同于copyFromLocal，生产环境更习惯用put</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ echo wuguo &gt;&gt; ./documents/txt/wuguo.txt</span><br><span class="line"></span><br><span class="line">[eitan@hadoop102 ~]$ hadoop fs -put ./documents/txt/wuguo.txt /sanguo</span><br></pre></td></tr></table></figure></li>
<li><p>-appendToFile：追加一个文件到已经存在的文件末尾</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -appendToFile ./documents/txt/liubei.txt /sanguo/shuguo.txt</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><ol>
<li><p>-copyToLocal/-get：从HDFS拷贝到本地，生产环境更习惯用get</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -copyToLocal/-get /sanguo/shuguo.txt ./documents/txt/</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="HDFS直接操作"><a href="#HDFS直接操作" class="headerlink" title="HDFS直接操作"></a>HDFS直接操作</h5><ol>
<li><p>-ls: 显示目录信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -ls /sanguo</span><br><span class="line">Found 3 items</span><br><span class="line">-rw-r--r--   3 eitan supergroup         14 2022-05-09 19:42 /sanguo/shuguo.txt</span><br><span class="line">-rw-r--r--   3 eitan supergroup          7 2022-05-09 19:35 /sanguo/weiguo.txt</span><br><span class="line">-rw-r--r--   3 eitan supergroup          6 2022-05-09 19:37 /sanguo/wuguo.txt</span><br></pre></td></tr></table></figure></li>
<li><p>-cat：显示文件内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -cat /sanguo/shuguo.txt</span><br><span class="line">shuguo</span><br><span class="line">liubei</span><br></pre></td></tr></table></figure></li>
<li><p>-chgrp、-chmod、-chown：Linux文件系统中的用法一样，修改文件所属权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -chmod 666 /sanguo/shuguo.txt</span><br><span class="line">[eitan@hadoop102 ~]$ hadoop fs -chown eitan:eitan /sanguo/shuguo.txt</span><br></pre></td></tr></table></figure></li>
<li><p>-mkdir：创建路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -mkdir /jinguo</span><br></pre></td></tr></table></figure></li>
<li><p>-cp：从HDFS的一个路径拷贝到HDFS的另一个路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -cp /sanguo/shuguo.txt /jinguo</span><br></pre></td></tr></table></figure></li>
<li><p>-mv：在HDFS目录中移动文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -mv /sanguo/wuguo.txt /jinguo</span><br><span class="line">[eitan@hadoop102 ~]$ hadoop fs -mv /sanguo/weiguo.txt /jinguo</span><br></pre></td></tr></table></figure></li>
<li><p>-tail：显示一个文件的末尾1kb的数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -tail /jinguo/shuguo.txt</span><br><span class="line">shuguo</span><br><span class="line">liubei</span><br></pre></td></tr></table></figure></li>
<li><p>-rm：删除文件或文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -rm /sanguo/shuguo.txt</span><br><span class="line">Deleted /sanguo/shuguo.txt</span><br></pre></td></tr></table></figure></li>
<li><p>-rm -r：递归删除目录及目录里面内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -rm -r /sanguo</span><br></pre></td></tr></table></figure></li>
<li><p>-du统计文件夹的大小信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -du /jinguo</span><br><span class="line">14  42  /jinguo/shuguo.txt</span><br><span class="line">7   21  /jinguo/weiguo.txt</span><br><span class="line">6   18  /jinguo/wuguo.txt</span><br><span class="line"></span><br><span class="line">[eitan@hadoop102 ~]$ hadoop fs -du -s /jinguo</span><br><span class="line">27  179  /jinguo</span><br></pre></td></tr></table></figure></li>
<li><p>-setrep：设置HDFS中文件的副本数量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -setrep 10 /jinguo/shuguo.txt</span><br><span class="line">Replication 10 set: /jinguo/shuguo.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里设置的副本数只是记录在NameNode的元数据中，是否真的会有这么多副本，还得看DataNode的数量。因为目前只有3台设备，最多也就3个副本，只有节点数的增加到10台时，副本数才能达到10。</p>
</blockquote>
</li>
</ol>
<h4 id="HDFS的客户端API"><a href="#HDFS的客户端API" class="headerlink" title="HDFS的客户端API"></a>HDFS的客户端API</h4><h5 id="客户端环境准备"><a href="#客户端环境准备" class="headerlink" title="客户端环境准备"></a>客户端环境准备</h5><h5 id="HDFS的API案例实操"><a href="#HDFS的API案例实操" class="headerlink" title="HDFS的API案例实操"></a>HDFS的API案例实操</h5>]]></content>
      <categories>
        <category>Big Data</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap 源码阅读</title>
    <url>/2022/04/30/HashMap%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<h3 id="HashMap-的静态变量"><a href="#HashMap-的静态变量" class="headerlink" title="HashMap 的静态变量"></a>HashMap 的静态变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">362498820763181265L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment">     * 默认初始容量 - 必须是2的幂次方</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The maximum capacity, used if a higher value is implicitly specified</span></span><br><span class="line"><span class="comment">     * by either of the constructors with arguments.</span></span><br><span class="line"><span class="comment">     * MUST be a power of two &lt;= 1&lt;&lt;30.</span></span><br><span class="line"><span class="comment">     * 最大容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The load factor used when none specified in constructor.</span></span><br><span class="line"><span class="comment">     * 默认负载因子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bin count threshold for using a tree rather than list for a</span></span><br><span class="line"><span class="comment">     * bin.  Bins are converted to trees when adding an element to a</span></span><br><span class="line"><span class="comment">     * bin with at least this many nodes. The value must be greater</span></span><br><span class="line"><span class="comment">     * than 2 and should be at least 8 to mesh with assumptions in</span></span><br><span class="line"><span class="comment">     * tree removal about conversion back to plain bins upon</span></span><br><span class="line"><span class="comment">     * shrinkage.</span></span><br><span class="line"><span class="comment">     * 树化的阈值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bin count threshold for untreeifying a (split) bin during a</span></span><br><span class="line"><span class="comment">     * resize operation. Should be less than TREEIFY_THRESHOLD, and at</span></span><br><span class="line"><span class="comment">     * most 6 to mesh with shrinkage detection under removal.</span></span><br><span class="line"><span class="comment">     * 取消树化的阈值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The smallest table capacity for which bins may be treeified.</span></span><br><span class="line"><span class="comment">     * (Otherwise the table is resized if too many nodes in a bin.)</span></span><br><span class="line"><span class="comment">     * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts</span></span><br><span class="line"><span class="comment">     * between resizing and treeification thresholds.</span></span><br><span class="line"><span class="comment">     * 进行树化时表的最小容量，否则将进行resized来减少链表长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="MashMap-的成员变量"><a href="#MashMap-的成员变量" class="headerlink" title="MashMap 的成员变量"></a>MashMap 的成员变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The table, initialized on first use, and resized as</span></span><br><span class="line"><span class="comment"> * necessary. When allocated, length is always a power of two.</span></span><br><span class="line"><span class="comment"> * (We also tolerate length zero in some operations to allow</span></span><br><span class="line"><span class="comment"> * bootstrapping mechanics that are currently not needed.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Holds cached entrySet(). Note that AbstractMap fields are used</span></span><br><span class="line"><span class="comment"> * for keySet() and values().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The number of key-value mappings contained in this map.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The number of times this HashMap has been structurally modified</span></span><br><span class="line"><span class="comment"> * Structural modifications are those that change the number of mappings in</span></span><br><span class="line"><span class="comment"> * the HashMap or otherwise modify its internal structure (e.g.,</span></span><br><span class="line"><span class="comment"> * rehash).  This field is used to make iterators on Collection-views of</span></span><br><span class="line"><span class="comment"> * the HashMap fail-fast.  (See ConcurrentModificationException).</span></span><br><span class="line"><span class="comment"> * HashMap的结构被修改次数，被使用于迭代器的快速失败上</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The next size value at which to resize (capacity * load factor).</span></span><br><span class="line"><span class="comment"> * 下一次扩容的阈值 = 当前容量 * 负载因子</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// (The javadoc description is true upon serialization.</span></span><br><span class="line"><span class="comment">// Additionally, if the table array has not been allocated, this</span></span><br><span class="line"><span class="comment">// field holds the initial array capacity, or zero signifying</span></span><br><span class="line"><span class="comment">// DEFAULT_INITIAL_CAPACITY.)</span></span><br><span class="line"><span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The load factor for the hash table.</span></span><br><span class="line"><span class="comment"> * 负载因子</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br></pre></td></tr></table></figure>

<h3 id="HashMap-的构造方法"><a href="#HashMap-的构造方法" class="headerlink" title="HashMap 的构造方法"></a>HashMap 的构造方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="comment">// 设置初始容量</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    <span class="comment">// 设置负载因子</span></span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="comment">// 计算下次扩容的阈值</span></span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="tableSizeFor-int-cap"><a href="#tableSizeFor-int-cap" class="headerlink" title="tableSizeFor(int cap)"></a>tableSizeFor(int cap)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取了比cap大的最小2次幂数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// numberOfLeadingZeros(int i): 返回最高位前0的个数</span></span><br><span class="line">       <span class="keyword">int</span> n = -<span class="number">1</span> &gt;&gt;&gt; Integer.numberOfLeadingZeros(cap - <span class="number">1</span>);</span><br><span class="line">       <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="HashMap-的常用方法"><a href="#HashMap-的常用方法" class="headerlink" title="HashMap 的常用方法"></a>HashMap 的常用方法</h3><h4 id="get-Object-key"><a href="#get-Object-key" class="headerlink" title="get(Object key)"></a>get(Object key)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="hash-Object-key"><a href="#hash-Object-key" class="headerlink" title="hash(Object key)"></a>hash(Object key)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 计算key.hashCode()并与其高位进行异或运算提高散列</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> h;</span><br><span class="line">       <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h5 id="getNode-int-hash-Object-key"><a href="#getNode-int-hash-Object-key" class="headerlink" title="getNode(int hash, Object key)"></a>getNode(int hash, Object key)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="comment">// tab[(n - 1) &amp; hash]: 计算该key在Node数组的下标</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 比较两个对象是否相等：hash相等&amp;&amp;且(==内存地址相等||或者equals值相等)</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="comment">// 如果第一个节点不是则判断该节点是否为TreeNode，不是则依次遍历进行比对</span></span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="put-K-key-V-value"><a href="#put-K-key-V-value" class="headerlink" title="put(K key, V value)"></a>put(K key, V value)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don&#x27;t change existing value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="params"><span class="function">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// n代表Node数组的大小即当前Map的容量</span></span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// 如果table为空则利用resize()进行初始化</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// 若key所对应Node数组位置为空，就创建一个Node放入对应位置</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 还是先比较头节点</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">// 如果头节点是树节点则调用树的put方法</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 循环遍历Node链表</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">// 如果找不到相等的Key，则新建一个Node放入链表末尾</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 当链表长度&gt;=树化阈值时尝试将Node链表树化</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 找到了对应Key所在的Node</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// e != null 说明找到了Key对应的Node，只需修改value即可</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="comment">// onlyIfAbsent如果为true，则不能改变已经存在的值</span></span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 如果放入的Node数量大于了扩容阈值则进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">after<span class="constructor">NodeAccess(<span class="params">e</span>)</span> 和 after<span class="constructor">NodeInsertion(<span class="params">evict</span>)</span> 为模板方法，在HashMap中无实现</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="resize"><a href="#resize" class="headerlink" title="resize()"></a>resize()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    <span class="comment">// 计算新容量newCap和新扩容阈值newThr</span></span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="comment">// 具体扩容步骤</span></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="comment">// 如果当前Node无下一位置，则直接将其放入新的Node[]</span></span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="comment">// 如果是树节点</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="comment">// 将原先链表根据 ((e.hash &amp; oldCap) == 0 拆成两个</span></span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 将这两个链表放入新Node数组对应的位置</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap（一）</title>
    <url>/2021/05/13/HashMap%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>基于 <em>jkd1.8</em> 源码认识 HashMap。包含以下内容：</p>
<ol>
<li>扰动函数</li>
<li>初始化容量</li>
<li>负载因子</li>
</ol>
<span id="more"></span>

<h2 id="扰动函数"><a href="#扰动函数" class="headerlink" title="扰动函数"></a>扰动函数</h2><p>在 HashMap 存放元素时候有这样一段代码来处理哈希值，用于优化散列效果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-运算符"><a href="#1-运算符" class="headerlink" title="1.运算符"></a>1.运算符</h3><ul>
<li>&gt;&gt;&gt;：无符号右移。无论是正数还是负数，高位通通补0；</li>
<li>^：异或运算符。相同为 0，不同为 1；</li>
<li>&amp;：与运算符。同为 1 时才为 1，否则为 0。</li>
</ul>
<h3 id="2-元素在数组中的位置"><a href="#2-元素在数组中的位置" class="headerlink" title="2.元素在数组中的位置"></a>2.元素在数组中的位置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 找到元素在数组中的位置，n为数组长度。</span></span><br><span class="line">i = (n - <span class="number">1</span>) &amp; hash</span><br></pre></td></tr></table></figure>

<h3 id="3-为什么-HashMap-数组的长度-n-要是2的整数幂"><a href="#3-为什么-HashMap-数组的长度-n-要是2的整数幂" class="headerlink" title="3.为什么 HashMap 数组的长度 n 要是2的整数幂"></a>3.为什么 HashMap 数组的长度 n 要是2的整数幂</h3><p>为使 hash 值散列分布在数组的下标当中。</p>
<p>假设我们有一个长度为16的数组，则他的下标范围为 0~15。而任何一个2的整数幂，减1得到的二进制位全部是1。让 hash 值与其就行与运算，结果将保留 hash 值小于数组下标范围的低位。当 hash 足够散列时，得到的结果必为在数组下标内散列的值。</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">    <span class="number">00100100</span> <span class="number">10100101</span> <span class="number">11000100</span> <span class="number">00100101</span>    // Hash值</span><br><span class="line">&amp;   <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001111</span>    // <span class="number">16</span> - <span class="number">1</span> = <span class="number">15</span></span><br><span class="line">----------------------------------</span><br><span class="line">    <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000101</span>    // 高位全部归零，只保留末四位。</span><br></pre></td></tr></table></figure>

<h3 id="4-扰动函数里为何无符号右移16位"><a href="#4-扰动函数里为何无符号右移16位" class="headerlink" title="4.扰动函数里为何无符号右移16位"></a>4.扰动函数里为何无符号右移16位</h3><p>为使 hash 值的高位也能影响到该元素在数组中的位置，提高散列性。</p>
<p>因为获取元素在数组中的位置时取的是 hash 值在数组下标范围内的低位，则将Hash值的高16位右移并与原Hash值取异或运算（^），混合高16位和低16位的值，会得到一个更加散列的低16位的Hash值。</p>
<h2 id="初始化容量"><a href="#初始化容量" class="headerlink" title="初始化容量"></a>初始化容量</h2><p>在 HashMap 的初始化中，有这样一段方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>其中 <em>threshold</em> 的取值为比 <em>initialCapacity</em> 大的最小2的整数幂：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="负载因子"><a href="#负载因子" class="headerlink" title="负载因子"></a>负载因子</h2><p>负载因子决定了数据量达到多少了以后，hashmap 会进行扩容，默认值为 0.75。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL调优（一）未完成</title>
    <url>/2021/05/14/MySQL%E8%B0%83%E4%BC%98%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Server-处理-Client-的请求过程"><a href="#Server-处理-Client-的请求过程" class="headerlink" title="Server 处理 Client 的请求过程"></a>Server 处理 Client 的请求过程</h2><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210514091718.png" alt="image-20210514091715754"></p>
<span id="more"></span>

<h2 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h2><h3 id="SHOW-PROFILE-分析SQL执行耗时"><a href="#SHOW-PROFILE-分析SQL执行耗时" class="headerlink" title="SHOW PROFILE 分析SQL执行耗时"></a>SHOW PROFILE 分析SQL执行耗时</h3><ol>
<li><p>开启分析</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> profiling<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>运行查询语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> category;</span><br></pre></td></tr></table></figure></li>
<li><p>查看查询语句耗时</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> profiles;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+------------------------+</span></span><br><span class="line"><span class="operator">|</span> Query_ID <span class="operator">|</span> Duration   <span class="operator">|</span> Query                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+------------------------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span> <span class="number">0.00019575</span> <span class="operator">|</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span> <span class="number">0.00018800</span> <span class="operator">|</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> category <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+------------------------+</span></span><br></pre></td></tr></table></figure></li>
<li><p>查询单个语句的详细信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> profile <span class="keyword">for</span> query <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> Status               <span class="operator">|</span> Duration <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> starting             <span class="operator">|</span> <span class="number">0.000052</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> checking permissions <span class="operator">|</span> <span class="number">0.000005</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Opening tables       <span class="operator">|</span> <span class="number">0.000014</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> init                 <span class="operator">|</span> <span class="number">0.000014</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">System</span> lock          <span class="operator">|</span> <span class="number">0.000006</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> optimizing           <span class="operator">|</span> <span class="number">0.000003</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> statistics           <span class="operator">|</span> <span class="number">0.000008</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> preparing            <span class="operator">|</span> <span class="number">0.000006</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> executing            <span class="operator">|</span> <span class="number">0.000002</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Sending data         <span class="operator">|</span> <span class="number">0.000034</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">end</span>                  <span class="operator">|</span> <span class="number">0.000003</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> query <span class="keyword">end</span>            <span class="operator">|</span> <span class="number">0.000004</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> closing tables       <span class="operator">|</span> <span class="number">0.000006</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> freeing items        <span class="operator">|</span> <span class="number">0.000031</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cleaning up          <span class="operator">|</span> <span class="number">0.000008</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+----------+</span></span><br></pre></td></tr></table></figure></li>
<li><p>查看sql相关的所有分析【主要看i/o与cpu】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> profile <span class="keyword">all</span> <span class="keyword">for</span> query <span class="number">1</span> \G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: starting</span><br><span class="line">           Duration: <span class="number">0.000052</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="keyword">NULL</span></span><br><span class="line">        Source_file: <span class="keyword">NULL</span></span><br><span class="line">        Source_line: <span class="keyword">NULL</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">2.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: checking permissions</span><br><span class="line">           Duration: <span class="number">0.000005</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_parse.cc</span><br><span class="line">        Source_line: <span class="number">5266</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">3.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: Opening tables</span><br><span class="line">           Duration: <span class="number">0.000014</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_base.cc</span><br><span class="line">        Source_line: <span class="number">5018</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">4.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: init</span><br><span class="line">           Duration: <span class="number">0.000014</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_select.cc</span><br><span class="line">        Source_line: <span class="number">1050</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">5.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: <span class="keyword">System</span> lock</span><br><span class="line">           Duration: <span class="number">0.000006</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: lock.cc</span><br><span class="line">        Source_line: <span class="number">304</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">6.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: optimizing</span><br><span class="line">           Duration: <span class="number">0.000003</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_optimizer.cc</span><br><span class="line">        Source_line: <span class="number">138</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">7.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: statistics</span><br><span class="line">           Duration: <span class="number">0.000008</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_optimizer.cc</span><br><span class="line">        Source_line: <span class="number">362</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">8.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: preparing</span><br><span class="line">           Duration: <span class="number">0.000006</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_optimizer.cc</span><br><span class="line">        Source_line: <span class="number">485</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">9.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: executing</span><br><span class="line">           Duration: <span class="number">0.000002</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_executor.cc</span><br><span class="line">        Source_line: <span class="number">110</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">10.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: Sending data</span><br><span class="line">           Duration: <span class="number">0.000034</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_executor.cc</span><br><span class="line">        Source_line: <span class="number">190</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">11.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: <span class="keyword">end</span></span><br><span class="line">           Duration: <span class="number">0.000003</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_select.cc</span><br><span class="line">        Source_line: <span class="number">1105</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">12.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: query <span class="keyword">end</span></span><br><span class="line">           Duration: <span class="number">0.000004</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_parse.cc</span><br><span class="line">        Source_line: <span class="number">4965</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">13.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: closing tables</span><br><span class="line">           Duration: <span class="number">0.000006</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_parse.cc</span><br><span class="line">        Source_line: <span class="number">5013</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">14.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: freeing items</span><br><span class="line">           Duration: <span class="number">0.000031</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_parse.cc</span><br><span class="line">        Source_line: <span class="number">6404</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">15.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: cleaning up</span><br><span class="line">           Duration: <span class="number">0.000008</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_parse.cc</span><br><span class="line">        Source_line: <span class="number">1772</span></span><br></pre></td></tr></table></figure></li>
<li><p>关闭分析</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> profiling<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="MySQL-Performance-Schema"><a href="#MySQL-Performance-Schema" class="headerlink" title="MySQL Performance Schema"></a>MySQL Performance Schema</h3><p>详细可以查看<a href="https://dev.mysql.com/doc/refman/8.0/en/performance-schema.html">官方文档</a></p>
<h3 id="查看线程连接个数-SHOW-PROCESSLIST"><a href="#查看线程连接个数-SHOW-PROCESSLIST" class="headerlink" title="查看线程连接个数 SHOW PROCESSLIST"></a>查看线程连接个数 SHOW PROCESSLIST</h3><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">+----+------+-----------------+----------+---------+------+-------+------------------+</span><br><span class="line">|<span class="string"> Id </span>|<span class="string"> User </span>|<span class="string"> Host            </span>|<span class="string"> db       </span>|<span class="string"> Command </span>|<span class="string"> Time </span>|<span class="string"> State </span>|<span class="string"> Info             </span>|</span><br><span class="line">+----+------+-----------------+----------+---------+------+-------+------------------+</span><br><span class="line">|<span class="string"> 45 </span>|<span class="string"> root </span>|<span class="string"> localhost:11156 </span>|<span class="string"> bugstack </span>|<span class="string"> Sleep   </span>|<span class="string">  210 </span>|<span class="string">       </span>|<span class="string"> NULL             </span>|</span><br><span class="line">|<span class="string"> 46 </span>|<span class="string"> root </span>|<span class="string"> localhost:13537 </span>|<span class="string"> NULL     </span>|<span class="string"> Query   </span>|<span class="string">    0 </span>|<span class="string"> init  </span>|<span class="string"> show processlist </span>|</span><br><span class="line">+----+------+-----------------+----------+---------+------+-------+------------------+</span><br></pre></td></tr></table></figure>

<ul>
<li>id：表示session id</li>
<li>user：表示操作的用户</li>
<li>host：表示操作的主机</li>
<li>db：表示操作的数据库</li>
<li>command：表示命令类型</li>
<li>info：表示详细的sql语句</li>
<li>time：表示相应命令执行时间</li>
<li>state：表示命令执行状态</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK 分析工具学习（未完成）</title>
    <url>/2021/09/29/JDK%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="常用分析工具"><a href="#常用分析工具" class="headerlink" title="常用分析工具"></a>常用分析工具</h2><table>
<thead>
<tr>
<th>工具名称</th>
<th>作用描述</th>
</tr>
</thead>
<tbody><tr>
<td>jps.exe</td>
<td>JVM 进程状态工具（JVM Process Status Tool），用于显示目标系统上 JVM 的 Java 进程信息</td>
</tr>
<tr>
<td>jstat.exe</td>
<td>JVM 统计检测工具（JVM Statistics Monitorng Tool），主要用于检测并显示 JVM 的性能统计信息</td>
</tr>
<tr>
<td>jinfo.exe</td>
<td>Java 配置信息工具（Java Configuration Information），用于打印指定 Java 进程、核心文件或者远程调试服务器的配置信息</td>
</tr>
<tr>
<td>jhat.exe</td>
<td>Java 堆分析工具（Java Heap Analysis Tool），用于分析 Java 堆内存中的对象信息</td>
</tr>
<tr>
<td>jmap.exe</td>
<td>Java 内存映射工具（Java Memory Map），主要用于打印指定 Java 进程、核心文件或者远程调试服务器的共享对象内存映射或堆内存细节</td>
</tr>
<tr>
<td>jstack.exe</td>
<td>Java 堆栈跟踪工具，主要用于打印指定 Java 进程，核心文件或者远程调试服务器的 Java 线程的堆栈跟踪信息</td>
</tr>
<tr>
<td>jmc.exe</td>
<td>Java 任务控制工具（Java Mission Control），主要用于 JVM 的生产时间监测、分析、诊断</td>
</tr>
<tr>
<td>jvisualvm.exe</td>
<td>JVM 监测、故障排除、分析工具，主要以图形化界面的方式提供运行与指定虚拟机的 Java 应用程序的详细信息</td>
</tr>
<tr>
<td>jconsole.exe</td>
<td>图形化用户界面的监测工具，主要用于监测并显示运行与 Java 平台的应用程序的性能和资源占用等信息</td>
</tr>
</tbody></table>
<span id="more"></span>

<h2 id="jps-jps-options-hostid"><a href="#jps-jps-options-hostid" class="headerlink" title="jps : jps [ options ] [ hostid ]"></a>jps : jps [ options ] [ hostid ]</h2><h3 id="options"><a href="#options" class="headerlink" title="options"></a>options</h3><ul>
<li>-q :  只显示 pid，不显示 class 名称，jar 文件名和传递给 main 方法的参数</li>
<li>-m : 输出传递给main方法的参数</li>
<li>-l : 输出应用程序 main class 的完整 package 名或者应用程序的 jar 文件完整路径名</li>
<li>-v : 显示传入给 JVM 的参数</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM 发生 GC 导致线程卡死问题</title>
    <url>/2021/09/20/JVM%E5%8F%91%E7%94%9FGC%E5%AF%BC%E8%87%B4%E7%BA%BF%E7%A8%8B%E5%8D%A1%E6%AD%BB%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>案例出自 <a href="https://ke.qq.com/webcourse/3583073/103725980#taid=11648638505102433&vid=3701925920872990005">马士兵MAC课程</a></p>
<h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OSRDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> counter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main start&quot;</span>);</span><br><span class="line">        startBusinessThread();</span><br><span class="line">        startProblemThread();</span><br><span class="line">        <span class="comment">// 等待线程启动执行</span></span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        <span class="comment">// 执行GC</span></span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(<span class="string">&quot;main end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startProblemThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Problem start&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100000</span>; j++) &#123;</span><br><span class="line">                    counter += i % <span class="number">33</span>;</span><br><span class="line">                    counter += i % <span class="number">333</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startBusinessThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; start&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;执行业务一&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;thread-01&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="案例现象"><a href="#案例现象" class="headerlink" title="案例现象"></a>案例现象</h2><ol>
<li>主线程创建两个线程，其中一个线程执行业务逻辑，每秒进行一次打印；另一个线程执行循环运算</li>
<li>启动线程后，JVM 进行 GC 垃圾回收，此时可以发现业务线程和主线程均被阻塞</li>
</ol>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210920161354.png" alt="image-20210920161351031"></p>
<h2 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h2><ol>
<li>JVM 进行 GC 时，线程需要中断，因此所有线程都需要‘跑’到线程安全点(save point)后，再停顿下来。</li>
<li>在 JDK1.8 及之前版本，C2 编辑器认为 int 的循环为有限循环，因此 startProblemThread() 创建的线程将不会进入线程安全点</li>
<li>主线程和业务线程则进入线程安全点阻塞等待，而 startProblemThread() 创建的线程并不会发生中断，导致 GC 没法完成</li>
<li>因此主线程和业务线程一直阻塞</li>
</ol>
<h2 id="解决措施"><a href="#解决措施" class="headerlink" title="解决措施"></a>解决措施</h2><h3 id="将-JDK-版本换成-11"><a href="#将-JDK-版本换成-11" class="headerlink" title="将 JDK 版本换成 11"></a>将 JDK 版本换成 11</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210920163642.png" alt="image-20210920163640802"></p>
<p>重新运行后发现不会阻塞</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210920163734.png" alt="image-20210920163732266"></p>
<h3 id="将-int-循环改为-long-值循环"><a href="#将-int-循环改为-long-值循环" class="headerlink" title="将 int 循环改为 long 值循环"></a>将 int 循环改为 long 值循环</h3><p>因为 long 值循环意味着这是一个较大的循环，JVM 会进行线程安全点的检查</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210920163956.png" alt="image-20210920163954285"></p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210920163922.png" alt="image-20210920163920287"></p>
<h3 id="在循环中加入方法调用"><a href="#在循环中加入方法调用" class="headerlink" title="在循环中加入方法调用"></a>在循环中加入方法调用</h3><p>线程安全点的检查发生在方法调用前</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210920164651.png" alt="image-20210920164649165"></p>
<p>注意：如果调用的方法是空方法或者简单循环，则编译器会将其优化，不会继续线程安全点的检测，因此还是会阻塞</p>
<h3 id="用-volatile-修饰-counter"><a href="#用-volatile-修饰-counter" class="headerlink" title="用 volatile 修饰 counter"></a>用 volatile 修饰 counter</h3><p>volatile 修饰的代码不会进行优化</p>
<h3 id="添加-JVM-参数-XX-UseOnStackReplacement"><a href="#添加-JVM-参数-XX-UseOnStackReplacement" class="headerlink" title="添加 JVM 参数 -XX:-UseOnStackReplacement"></a>添加 JVM 参数 -XX:-UseOnStackReplacement</h3><p>关闭 OnStackReplacement 优化</p>
<h3 id="添加-JVM-参数-XX-TieredStopAtLevel-3"><a href="#添加-JVM-参数-XX-TieredStopAtLevel-3" class="headerlink" title="添加 JVM 参数 -XX:TieredStopAtLevel=3"></a>添加 JVM 参数 -XX:TieredStopAtLevel=3</h3><p>不使用 C2 编译器的优化</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中@Conditional是如何生效的</title>
    <url>/2021/08/07/Spring%E4%B8%AD@Conditional%E6%98%AF%E5%A6%82%E4%BD%95%E7%94%9F%E6%95%88%E7%9A%84/</url>
    <content><![CDATA[<p>本文灵感源自<a href="https://ke.qq.com/course/package/20773">马士兵MAC课程-源码五班</a></p>
<h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><h3 id="实体类-Boss-和-Bar"><a href="#实体类-Boss-和-Bar" class="headerlink" title="实体类 Boss 和 Bar"></a>实体类 Boss 和 Bar</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.condition.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.condition.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以看到，Boss 上是添加了 @Component 注解的，Spring 通过包扫描可以将其添加进容器</p>
</blockquote>
<span id="more"></span>

<h3 id="BarConfiguration"><a href="#BarConfiguration" class="headerlink" title="BarConfiguration"></a>BarConfiguration</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.condition.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eitan.condition.condition.ExistBossCondition;</span><br><span class="line"><span class="keyword">import</span> com.eitan.condition.entity.Bar;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Conditional;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BarConfiguration</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@Conditional(ExistBossCondition.class)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Bar <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Bar();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Bar 通过配置类将其注入进容器，@Conditional 注解表示必须满足 ExistBossCondition.class 是匹配才会将其注入进容器</p>
</blockquote>
<h3 id="ExistBossCondition"><a href="#ExistBossCondition" class="headerlink" title="ExistBossCondition"></a>ExistBossCondition</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.condition.condition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eitan.condition.entity.Boss;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Condition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExistBossCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> context.getBeanFactory().containsBeanDefinition(Boss.class.getSimpleName().toLowerCase());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里的匹配规则是，如果容器中已经存在了 boss 的定义信息，才会将其所影响的类加载进容器</p>
</blockquote>
<h3 id="MyApplicationContext"><a href="#MyApplicationContext" class="headerlink" title="MyApplicationContext"></a>MyApplicationContext</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.condition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationContext</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(<span class="string">&quot;com.eitan.condition&quot;</span>);</span><br><span class="line">		Arrays.stream(context.getBeanDefinitionNames()).forEach(System.out::println);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>允许代码后，可以发现打印出了 bar 和 boss</li>
<li>当除去 Boss.class 上的 @Component 之后，bar 和 boss 都不会被打印</li>
</ul>
</blockquote>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="Boss-和-BarConfiguration-是怎么加载进容器的"><a href="#Boss-和-BarConfiguration-是怎么加载进容器的" class="headerlink" title="Boss 和 BarConfiguration 是怎么加载进容器的"></a>Boss 和 BarConfiguration 是怎么加载进容器的</h3><h4 id="AnnotationConfigApplicationContext的构造方法"><a href="#AnnotationConfigApplicationContext的构造方法" class="headerlink" title="AnnotationConfigApplicationContext的构造方法"></a>AnnotationConfigApplicationContext的构造方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AnnotationConfigApplicationContext</span><span class="params">(String... basePackages)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>();</span><br><span class="line">	scan(basePackages);</span><br><span class="line">	refresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>发生在 scan(basePackages) 方法中，最终调用的是 <strong>ClassPathBeanDefinitionScanner</strong> 的 <strong>doSacn</strong> 方法</p>
</blockquote>
<h4 id="doScan"><a href="#doScan" class="headerlink" title="doScan"></a>doScan</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Set&lt;BeanDefinitionHolder&gt; <span class="title">doScan</span><span class="params">(String... basePackages)</span> </span>&#123;</span><br><span class="line">	Assert.notEmpty(basePackages, <span class="string">&quot;At least one base package must be specified&quot;</span>);</span><br><span class="line">	Set&lt;BeanDefinitionHolder&gt; beanDefinitions = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">	<span class="comment">// 遍历 basePackages</span></span><br><span class="line">	<span class="keyword">for</span> (String basePackage : basePackages) &#123;</span><br><span class="line">		<span class="comment">// 扫描 basePackage 找出符合要求的beanDefinition</span></span><br><span class="line">		Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</span><br><span class="line">		<span class="comment">// 遍历</span></span><br><span class="line">		<span class="keyword">for</span> (BeanDefinition candidate : candidates) &#123;</span><br><span class="line">			<span class="comment">// 解析@Scope注解，包括scopeName和proxyMode</span></span><br><span class="line">			ScopeMetadata scopeMetadata = <span class="keyword">this</span>.scopeMetadataResolver.resolveScopeMetadata(candidate);</span><br><span class="line">			candidate.setScope(scopeMetadata.getScopeName());</span><br><span class="line">			<span class="comment">// 使用beanName生成器生成beanName</span></span><br><span class="line">			String beanName = <span class="keyword">this</span>.beanNameGenerator.generateBeanName(candidate, <span class="keyword">this</span>.registry);</span><br><span class="line">			<span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line">				<span class="comment">// 处理beanDefinition对象，例如，此bean是否可以自动装配到其它bean中</span></span><br><span class="line">				postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">				<span class="comment">// 处理定义在目标类上的通用注解，包括@Lazy、@Primary、@DependsOn、@Role、@Description</span></span><br><span class="line">				AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 检查beanName是否已经被注册过</span></span><br><span class="line">			<span class="keyword">if</span> (checkCandidate(beanName, candidate)) &#123;</span><br><span class="line">				<span class="comment">// 将当前遍历的bean的bean定义和beanName封装为Holder</span></span><br><span class="line">				BeanDefinitionHolder definitionHolder = <span class="keyword">new</span> BeanDefinitionHolder(candidate, beanName);</span><br><span class="line">				<span class="comment">// 根据proxyMode的值，选择是否创建作用域代理</span></span><br><span class="line">				definitionHolder =</span><br><span class="line">						AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">				beanDefinitions.add(definitionHolder);</span><br><span class="line">				<span class="comment">// 注册 beanDefinition</span></span><br><span class="line">				registerBeanDefinition(definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> beanDefinitions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>继续跟踪 <em>findCandidateComponents(basePackage);</em> 方法，通过 <em>doScan</em> 方法扫描到的 BeanDefinition 都是 <em>ScannedGenericBeanDefinition</em></p>
</blockquote>
<h4 id="查看扫描到的类"><a href="#查看扫描到的类" class="headerlink" title="查看扫描到的类"></a>查看扫描到的类</h4><p>可以看到，Boss 和 BarConfiguration 已经被扫描到了，但是 Bar 没有被扫描到</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210807150310.png" alt="image-20210807150305597"></p>
<h3 id="Bar-的加载时机"><a href="#Bar-的加载时机" class="headerlink" title="Bar 的加载时机"></a>Bar 的加载时机</h3><h4 id="发生在-ConfigurationClassPostProcessor-的-postProcessBeanDefinitionRegistry"><a href="#发生在-ConfigurationClassPostProcessor-的-postProcessBeanDefinitionRegistry" class="headerlink" title="发生在 ConfigurationClassPostProcessor 的 postProcessBeanDefinitionRegistry"></a>发生在 ConfigurationClassPostProcessor 的 postProcessBeanDefinitionRegistry</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> registryId = System.identityHashCode(registry);</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.registriesPostProcessed.contains(registryId)) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">				<span class="string">&quot;postProcessBeanDefinitionRegistry already called on this post-processor against &quot;</span> + registry);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.factoriesPostProcessed.contains(registryId)) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">				<span class="string">&quot;postProcessBeanFactory already called on this post-processor against &quot;</span> + registry);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">this</span>.registriesPostProcessed.add(registryId);</span><br><span class="line"></span><br><span class="line">	processConfigBeanDefinitions(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ConfigurationClassPostProcessor 永远是最先被调用的 PostProcessor，其作用是用来处理容器中的配置类</p>
</blockquote>
<h4 id="processConfigBeanDefinitions"><a href="#processConfigBeanDefinitions" class="headerlink" title="processConfigBeanDefinitions"></a>processConfigBeanDefinitions</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processConfigBeanDefinitions</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 存放BeanDefinitionHolder对象的集合</span></span><br><span class="line">		List&lt;BeanDefinitionHolder&gt; configCandidates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		<span class="comment">// 当前registry就是DefaultListableBeanFactory，获取所有已经注册的BeanDefinition的beanName</span></span><br><span class="line">		String[] candidateNames = registry.getBeanDefinitionNames();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 遍历所有要处理的beanDefinition的名称</span></span><br><span class="line">		<span class="keyword">for</span> (String beanName : candidateNames) &#123;</span><br><span class="line">			<span class="comment">// 获取指定名称的BeanDefinition对象</span></span><br><span class="line">			BeanDefinition beanDef = registry.getBeanDefinition(beanName);</span><br><span class="line">			<span class="comment">// 如果beanDef中的configurationClass属性不等于空，那么意味着已经处理过了</span></span><br><span class="line">			<span class="keyword">if</span> (beanDef.getAttribute(ConfigurationClassUtils.CONFIGURATION_CLASS_ATTRIBUTE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">					logger.debug(<span class="string">&quot;Bean definition has already been processed as a configuration class: &quot;</span> + beanDef);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 判断当前beanDef是否是一个配置类，并为BeanDefinition设置属性为lite或者full，此处设置属性值是为了进行后续调用</span></span><br><span class="line">			<span class="comment">// 如果Configuration配置了proxyBeanMethods代理为true则为full</span></span><br><span class="line">			<span class="comment">// 如果加了@Bean、@Component、@ComponentScan、@Import、@ImportSource注解则为lite</span></span><br><span class="line">			<span class="comment">// 判断当前beanDef是否加了@Configuration注解或者是@Bean,@Component,@ComponentScan,@Import,@ImportSource注解</span></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, <span class="keyword">this</span>.metadataReaderFactory)) &#123;</span><br><span class="line">				<span class="comment">// 添加到对应的集合中</span></span><br><span class="line">				configCandidates.add(<span class="keyword">new</span> BeanDefinitionHolder(beanDef, beanName));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		......</span><br><span class="line">            </span><br><span class="line">		<span class="comment">// 配置类的解析类 ConfigurationClassParse</span></span><br><span class="line">		ConfigurationClassParser parser = <span class="keyword">new</span> ConfigurationClassParser(</span><br><span class="line">				<span class="keyword">this</span>.metadataReaderFactory, <span class="keyword">this</span>.problemReporter, <span class="keyword">this</span>.environment,</span><br><span class="line">				<span class="keyword">this</span>.resourceLoader, <span class="keyword">this</span>.componentScanBeanNameGenerator, registry);</span><br><span class="line">		<span class="comment">// 存放 BeanDefinitionHolder 对象</span></span><br><span class="line">		Set&lt;BeanDefinitionHolder&gt; candidates = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(configCandidates);</span><br><span class="line">		<span class="comment">// 存放扫描包下的所有 bean</span></span><br><span class="line">		Set&lt;ConfigurationClass&gt; alreadyParsed = <span class="keyword">new</span> HashSet&lt;&gt;(configCandidates.size());</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			StartupStep processConfig = <span class="keyword">this</span>.applicationStartup.start(<span class="string">&quot;spring.context.config-classes.parse&quot;</span>);</span><br><span class="line">			<span class="comment">// 解析 @Controller、@Import、@ImportSource、@ComponentScan、@ComponentScans、@Bean的BeanDefinition</span></span><br><span class="line">			parser.parse(candidates);</span><br><span class="line">			parser.validate();</span><br><span class="line"></span><br><span class="line">			Set&lt;ConfigurationClass&gt; configClasses = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(parser.getConfigurationClasses());</span><br><span class="line">			configClasses.removeAll(alreadyParsed);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Read the model and create bean definitions based on its content</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.reader == <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">this</span>.reader = <span class="keyword">new</span> ConfigurationClassBeanDefinitionReader(</span><br><span class="line">						registry, <span class="keyword">this</span>.sourceExtractor, <span class="keyword">this</span>.resourceLoader, <span class="keyword">this</span>.environment,</span><br><span class="line">						<span class="keyword">this</span>.importBeanNameGenerator, parser.getImportRegistry());</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>.reader.loadBeanDefinitions(configClasses);</span><br><span class="line">            </span><br><span class="line">			......</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="loadBeanDefinitionsForConfigurationClass"><a href="#loadBeanDefinitionsForConfigurationClass" class="headerlink" title="loadBeanDefinitionsForConfigurationClass"></a>loadBeanDefinitionsForConfigurationClass</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitionsForConfigurationClass</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">		ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (trackedConditionEvaluator.shouldSkip(configClass)) &#123;</span><br><span class="line">		String beanName = configClass.getBeanName();</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasLength(beanName) &amp;&amp; <span class="keyword">this</span>.registry.containsBeanDefinition(beanName)) &#123;</span><br><span class="line">			<span class="keyword">this</span>.registry.removeBeanDefinition(beanName);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>.importRegistry.removeImportingClass(configClass.getMetadata().getClassName());</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (configClass.isImported()) &#123;</span><br><span class="line">		registerBeanDefinitionForImportedConfigurationClass(configClass);</span><br><span class="line">	&#125;</span><br><span class="line">       <span class="comment">// 从@Bean修饰的方法中加载BeanDefinition</span></span><br><span class="line">	<span class="keyword">for</span> (BeanMethod beanMethod : configClass.getBeanMethods()) &#123;</span><br><span class="line">		loadBeanDefinitionsForBeanMethod(beanMethod);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	loadBeanDefinitionsFromImportedResources(configClass.getImportedResources());</span><br><span class="line">	loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="loadBeanDefinitionsForBeanMethod"><a href="#loadBeanDefinitionsForBeanMethod" class="headerlink" title="loadBeanDefinitionsForBeanMethod"></a>loadBeanDefinitionsForBeanMethod</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitionsForBeanMethod</span><span class="params">(BeanMethod beanMethod)</span> </span>&#123;</span><br><span class="line">	ConfigurationClass configClass = beanMethod.getConfigurationClass();</span><br><span class="line">	MethodMetadata metadata = beanMethod.getMetadata();</span><br><span class="line">	String methodName = metadata.getMethodName();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Do we need to mark the bean as skipped by its condition?</span></span><br><span class="line">      	<span class="comment">// 这里就是 @Conditional 生效的地方</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) &#123;</span><br><span class="line">		configClass.skippedBeanMethods.add(methodName);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (configClass.skippedBeanMethods.contains(methodName)) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">   ....</span><br></pre></td></tr></table></figure>

<h4 id="shouldSkip"><a href="#shouldSkip" class="headerlink" title="shouldSkip"></a>shouldSkip</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldSkip</span><span class="params">(<span class="meta">@Nullable</span> AnnotatedTypeMetadata metadata, <span class="meta">@Nullable</span> ConfigurationPhase phase)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// metadata为空或者配置类中不存在@Conditional标签</span></span><br><span class="line">	<span class="keyword">if</span> (metadata == <span class="keyword">null</span> || !metadata.isAnnotated(Conditional.class.getName())) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 采用递归的方式判断，第一次执行是phase必为空</span></span><br><span class="line">	<span class="keyword">if</span> (phase == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="comment">// 下面的逻辑判断中，需要进入ConfigurationClassUtils.isConfigurationCandidate方法，主要逻辑如下</span></span><br><span class="line">		<span class="comment">// 1.metadata是AnnotationMetadata类的一个实例</span></span><br><span class="line">		<span class="comment">// 2.检测bean中是否使用@Configuration注解</span></span><br><span class="line">		<span class="comment">// 3.检测bean不是另一个接口</span></span><br><span class="line">		<span class="comment">// 4.检查bean中是否包含@Component、@ComponentScan、@Import、@ImportResource中任意一个</span></span><br><span class="line">		<span class="comment">// 5.检查bean中是否有@Bean注解</span></span><br><span class="line">		<span class="keyword">if</span> (metadata <span class="keyword">instanceof</span> AnnotationMetadata &amp;&amp;</span><br><span class="line">				ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) &#123;</span><br><span class="line">			<span class="keyword">return</span> shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	List&lt;Condition&gt; conditions = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	<span class="keyword">for</span> (String[] conditionClasses : getConditionClasses(metadata)) &#123;</span><br><span class="line">		<span class="keyword">for</span> (String conditionClass : conditionClasses) &#123;</span><br><span class="line">			Condition condition = getCondition(conditionClass, <span class="keyword">this</span>.context.getClassLoader());</span><br><span class="line">			conditions.add(condition);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 对相关的条件进行排序操作</span></span><br><span class="line">	AnnotationAwareOrderComparator.sort(conditions);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (Condition condition : conditions) &#123;</span><br><span class="line">		ConfigurationPhase requiredPhase = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (condition <span class="keyword">instanceof</span> ConfigurationCondition) &#123;</span><br><span class="line">			requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// requiredPhase只可能是空或者是ConfigurationCondition的一个实例对象</span></span><br><span class="line">		<span class="keyword">if</span> ((requiredPhase == <span class="keyword">null</span> || requiredPhase == phase) &amp;&amp; !condition.matches(<span class="keyword">this</span>.context, metadata)) &#123;</span><br><span class="line">			<span class="comment">// 此逻辑为：1.requiredPhase不是ConfigurationCondition的实例</span></span><br><span class="line">			<span class="comment">// 2.phase==requiredPhase，从上述的递归可知，phase可为ConfigurationPhase.PARSE_CONFIGURATION或者metadata, ConfigurationPhase.REGISTER_BEAN</span></span><br><span class="line">			<span class="comment">// 3.condition.matches(this.context,metadata)返回false</span></span><br><span class="line">			<span class="comment">// 如果条件成立，则在此函数上层将阻断bean注入Spring容器</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里获取了该方法上的 conditionClasses，然后调用了这些 conditionClasses 的 matches 方法，只要有一个 matches 返回 false，则这个方法就返回 true，上层方法就会跳过这个类的加载</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><em>doScan</em> 方法会扫描加载 basePackages 下所有注释了 @Component 的类</li>
<li>@Configuration 包含了 @Component</li>
<li>在调用 BeanDefinitionRegistryPostProcessor 和 BeanFactoryPostProcessor 时最先调用的就是 ConfigurationClassPostProcessor，该类中解析了对配置类的解析。</li>
<li>该类处理了 @Component、@ComponentScan、@Import、@ImportSource、@Bean 注解</li>
<li>在解析配置类或者方法时，会先调用 shouldSkip 方法，该方法中会获取方法或类上修饰的 @Conditional 注解的 conditionClasses</li>
<li>遍历调用这些 conditionClasses 实现了 Condition 接口的 matches 方法，当有一个返回 false 这跳过解析</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ（一）</title>
    <url>/2021/05/17/RocketMQ%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul>
<li>编译安装</li>
<li>HelloWorld</li>
</ul>
<h3 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h3><p><a href="http://rocketmq.apache.org/">http://rocketmq.apache.org/</a></p>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><p><a href="https://github.com/apache/rocketmq">https://github.com/apache/rocketmq</a></p>
<span id="more"></span>



<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="在-Linux-上安装-JDK"><a href="#在-Linux-上安装-JDK" class="headerlink" title="在 Linux 上安装 JDK"></a>在 Linux 上安装 JDK</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum search jdk</span><br><span class="line"></span><br><span class="line">yum install java-1.8.0-openjdk.x86_64</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 找到安装位置</span></span><br><span class="line">java -verbose</span><br><span class="line"></span><br><span class="line">[Loaded java.lang.Shutdown from /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.292.b10-1.el7_9.x86_64/jre/lib/rt.jar]</span><br><span class="line">[Loaded java.lang.Shutdown$Lock from /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.292.b10-1.el7_9.x86_64/jre/lib/rt.jar]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置 JAVA_HOME</span></span><br><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="在-Linux-上安装-Maven"><a href="#在-Linux-上安装-Maven" class="headerlink" title="在 Linux 上安装 Maven"></a>在 Linux 上安装 Maven</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载压缩包</span></span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -zxvf apache-maven-3.6.3-bin.tar.gz</span><br><span class="line"></span><br><span class="line">mv apache-maven-3.6.3 /usr/local/</span><br><span class="line"></span><br><span class="line">vim /usr/local/apache-maven-3.6.3/conf/settings.xml</span><br><span class="line">   &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;aliyun-maven&lt;/id&gt;</span><br><span class="line">      &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">      &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">    </span><br><span class="line">vim /etc/profile</span><br><span class="line">export MAVEN_HOME=/usr/local/apache-maven-3.6.3</span><br><span class="line">export PATH=$PATH:$MAVEN_HAOM/bin</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="安装-RocketMQ"><a href="#安装-RocketMQ" class="headerlink" title="安装 RocketMQ"></a>安装 RocketMQ</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.8.0/rocketmq-all-4.8.0-source-release.zip</span><br><span class="line"></span><br><span class="line">unzip rocketmq-all-4.8.0-source-release.zip</span><br><span class="line"></span><br><span class="line">mvn -Prelease-all -DskipTests clean install -U</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">./mqnamesrv</span><br><span class="line">./mqbroker</span><br><span class="line"></span><br><span class="line"># 测试</span><br><span class="line">./tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br></pre></td></tr></table></figure>

<p>若遇到错误：linux No compiler is provided in this environment. Perhaps you are running on a JRE rather than a JDK，则执行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install java-devel</span><br></pre></td></tr></table></figure>

<p>启动报错：Native memory allocation (mmap) failed to map 2147483648 bytes for committing reserved memory</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/local/rocketmq-4.8.0/bin/runserver.sh</span><br><span class="line">vim /usr/local/rocketmq-4.8.0/bin/runbroker.sh</span><br><span class="line"></span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改为</span></span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span><br></pre></td></tr></table></figure>

<p>测试报错：connect to null failed</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim tools.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 放在 JVM Configuration 之前</span></span><br><span class="line">export NAMESRV_ADDR=localhost:9876</span><br></pre></td></tr></table></figure>

<p>测试报错：org.apache.rocketmq.client.exception.MQClientException: No route info of this topic: TopicTest</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动broker指定连接的ip：port</span></span><br><span class="line">./mqbroker -n localhost:9876</span><br></pre></td></tr></table></figure>

<h3 id="控制台rocketmq-console编译安装"><a href="#控制台rocketmq-console编译安装" class="headerlink" title="控制台rocketmq-console编译安装"></a>控制台rocketmq-console编译安装</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><a href="https://github.com/apache/rocketmq-externals">github仓库</a></p>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>

<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar rocketmq-console-ng-2.0.0.jar --rocketmq.config.namesrvAddr=172.17.0.2:9876</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中bean的几种注入方式</title>
    <url>/2021/06/30/Spring%E4%B8%ADbean%E7%9A%84%E5%87%A0%E7%A7%8D%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="声明式注入"><a href="#声明式注入" class="headerlink" title="声明式注入"></a>声明式注入</h3><h4 id="Configuration-Bean"><a href="#Configuration-Bean" class="headerlink" title="@Configuration + @Bean"></a>@Configuration + @Bean</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickstartConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Component-ComponentScan"><a href="#Component-ComponentScan" class="headerlink" title="@Component + @ComponentScan"></a>@Component + @ComponentScan</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.linkedbear.spring.annotation.c_scan&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComponentScanConfiguration</span></span></span><br></pre></td></tr></table></figure>

<h4 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Boss.class, BartenderConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableTavern</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="配置式注入"><a href="#配置式注入" class="headerlink" title="配置式注入"></a>配置式注入</h3><h4 id="lt-bean-gt-标签声明"><a href="#lt-bean-gt-标签声明" class="headerlink" title="&lt;bean&gt;标签声明"></a>&lt;bean&gt;标签声明</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.linkedbear.spring.basic_dl.a_quickstart_byname.bean.Person&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编程式注入-BeanDefinition"><a href="#编程式注入-BeanDefinition" class="headerlink" title="编程式注入 BeanDefinition"></a>编程式注入 <em>BeanDefinition</em></h3><h4 id="ImportBeanDefinitionRegistrar"><a href="#ImportBeanDefinitionRegistrar" class="headerlink" title="ImportBeanDefinitionRegistrar"></a>ImportBeanDefinitionRegistrar</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaiterRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.registerBeanDefinition(<span class="string">&quot;waiter&quot;</span>, <span class="keyword">new</span> RootBeanDefinition(Waiter.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="手动构造-BeanDefinition-注入"><a href="#手动构造-BeanDefinition-注入" class="headerlink" title="手动构造 BeanDefinition 注入"></a>手动构造 <em>BeanDefinition</em> 注入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationConfigApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line"></span><br><span class="line">BeanDefinition personDefinition = BeanDefinitionBuilder.rootBeanDefinition(Person.class)</span><br><span class="line">        .addPropertyValue(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>).getBeanDefinition();</span><br><span class="line">ctx.registerBeanDefinition(<span class="string">&quot;person&quot;</span>, personDefinition);</span><br><span class="line"></span><br><span class="line">ctx.refresh();</span><br></pre></td></tr></table></figure>

<h4 id="借助-BeanDefinitionRegistryPostProcessor-注入"><a href="#借助-BeanDefinitionRegistryPostProcessor-注入" class="headerlink" title="借助 BeanDefinitionRegistryPostProcessor 注入"></a>借助 BeanDefinitionRegistryPostProcessor 注入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    registry.registerBeanDefinition(<span class="string">&quot;animalNameSetterPostProcessor&quot;</span>, </span><br><span class="line">            <span class="keyword">new</span> RootBeanDefinition(AnimalNameSetterPostProcessor.class));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中SPI的使用</title>
    <url>/2021/06/25/Spring%E4%B8%ADSPI%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="什么是SPI"><a href="#什么是SPI" class="headerlink" title="什么是SPI"></a>什么是SPI</h3><p>SPI 全程叫 <strong>Service Provider Interface</strong> 服务提供接口，它可以通过一个指定的接口 / 抽象类，寻找到预先配置好的实现类（并创建实现类对象）。</p>
<p>Spring 通过 <em>SpringFactoriesLoader</em> 读取放在 <em>META-INF</em> 目录下名为 <em>spring.factories</em> 的文件，获取文件中的权限定类名转化为实体对象。</p>
<span id="more"></span>

<h3 id="spring-factories"><a href="#spring-factories" class="headerlink" title="spring.factories"></a>spring.factories</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">com.eitan.spring.spi.dao.DemoDao</span>=<span class="string">\</span></span><br><span class="line"><span class="string">  com.eitan.spring.spi.daoImpl.MysqlDemoDao,\</span></span><br><span class="line"><span class="string">  com.eitan.spring.spi.daoImpl.OracleDemoDao</span></span><br></pre></td></tr></table></figure>



<h3 id="接口和实现类"><a href="#接口和实现类" class="headerlink" title="接口和实现类"></a>接口和实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoDao</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlDemoDao</span> <span class="keyword">implements</span> <span class="title">DemoDao</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OracleDemoDao</span> <span class="keyword">implements</span> <span class="title">DemoDao</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="SpringApplication"><a href="#SpringApplication" class="headerlink" title="SpringApplication"></a>SpringApplication</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;DemoDao&gt; demoDaoList = SpringFactoriesLoader.loadFactories(DemoDao.class, SpringApplication.class.getClassLoader());</span><br><span class="line">        demoDaoList.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; factoryNames = SpringFactoriesLoader.loadFactoryNames(DemoDao.class, SpringApplication.class.getClassLoader());</span><br><span class="line">        factoryNames.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">com<span class="selector-class">.eitan</span><span class="selector-class">.spring</span><span class="selector-class">.spi</span><span class="selector-class">.daoImpl</span>.MysqlDemoDao@f2a0b8e</span><br><span class="line">com<span class="selector-class">.eitan</span><span class="selector-class">.spring</span><span class="selector-class">.spi</span><span class="selector-class">.daoImpl</span>.OracleDemoDao@<span class="number">593634</span>ad</span><br><span class="line">com<span class="selector-class">.eitan</span><span class="selector-class">.spring</span><span class="selector-class">.spi</span><span class="selector-class">.daoImpl</span><span class="selector-class">.MysqlDemoDao</span></span><br><span class="line">com<span class="selector-class">.eitan</span><span class="selector-class">.spring</span><span class="selector-class">.spi</span><span class="selector-class">.daoImpl</span>.OracleDemoDao</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中三种后置处理器对比</title>
    <url>/2021/06/24/Spring%E4%B8%AD%E4%B8%89%E7%A7%8D%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th></th>
<th>BeanPostProcessor</th>
<th>BeanFactoryPostProcessor</th>
<th>BeanDefinitionRegistryPostProcessor</th>
</tr>
</thead>
<tbody><tr>
<td>处理目标</td>
<td>bean 实例</td>
<td>BeanDefinition</td>
<td>BeanDefinition、.class 文件等</td>
</tr>
<tr>
<td>执行时机</td>
<td>bena 的初始化阶段前后（已创建出 bean 对象）</td>
<td>BeanDefinition解析完毕并注册进 BeanFactory 之后（此时 bean 未实例化）</td>
<td>配置文件、配置类已解析完毕并注册进 BeanFactory，但还未被 BeanFactoryPostProcessor 处理</td>
</tr>
<tr>
<td>可操作空间</td>
<td>对 bean 的属性赋值、创建代理对象等</td>
<td>给 BeanDefinition 中增删属性，移除 BeanDefinition 等</td>
<td>向 BeanFactory 中注册新的 BeanDefinition 和 BeanFactoryPostProcessor</td>
</tr>
</tbody></table>
<span id="more"></span>

<h3 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="function"><span class="keyword">default</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="function"><span class="keyword">default</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>入参中的 <em>bean</em> 为根据 <em>BeanDefinition</em> 生成的 bean</p>
<p>出参中的 <em>bean</em>，如果不为 null 则会替换掉 BeanFactory 中传入的 <em>bean</em></p>
<p>如果该 bean，是通过 <em>factoryBean</em> 生成的，则不会执行 <em>postProcesserBeforeInitialization</em> 方法</p>
</blockquote>
<h3 id="BeanFactoryPostProcessor"><a href="#BeanFactoryPostProcessor" class="headerlink" title="BeanFactoryPostProcessor"></a>BeanFactoryPostProcessor</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Modify the application context&#x27;s internal bean factory after its standard</span></span><br><span class="line"><span class="comment">	 * initialization. All bean definitions will have been loaded, but no beans</span></span><br><span class="line"><span class="comment">	 * will have been instantiated yet. This allows for overriding or adding</span></span><br><span class="line"><span class="comment">	 * properties even to eager-initializing beans.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> beanFactory the bean factory used by the application context</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过入参 <em>beanfactory</em> 就可以获取到对应的 <em>beanDefinition</em></p>
</blockquote>
<h3 id="BeanDefinitionRegistryPostProcessor"><a href="#BeanDefinitionRegistryPostProcessor" class="headerlink" title="BeanDefinitionRegistryPostProcessor"></a>BeanDefinitionRegistryPostProcessor</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinitionRegistryPostProcessor</span> <span class="keyword">extends</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Modify the application context&#x27;s internal bean definition registry after its</span></span><br><span class="line"><span class="comment">	 * standard initialization. All regular bean definitions will have been loaded,</span></span><br><span class="line"><span class="comment">	 * but no beans will have been instantiated yet. This allows for adding further</span></span><br><span class="line"><span class="comment">	 * bean definitions before the next post-processing phase kicks in.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> registry the bean definition registry used by the application context</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过 <em>BeanDefinitionRegistry</em> 的 <em>registerBeanDefinition</em> 方法就可以向容器中注入 <em>beanDefinition</em></p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中事件广播原理</title>
    <url>/2021/06/25/Spring%E4%B8%AD%E4%BA%8B%E4%BB%B6%E5%B9%BF%E6%92%AD%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="SpringFramework-的事件模型"><a href="#SpringFramework-的事件模型" class="headerlink" title="SpringFramework 的事件模型"></a>SpringFramework 的事件模型</h2><ul>
<li>ApplicationEventPublisher：事件发布器，是用来接受事件，并交给事件广播器处理</li>
<li>ApplicationEventMulticaster：事件广播器，拿到事件发布器的事件，并广播给监听器</li>
</ul>
<blockquote>
<p><em>ApplicationContext</em> 接口继承了 <em>ApplicationEventPublisher</em> ，拥有事件发布的功能；<em>ApplicationContext</em> 的第一个抽象实现类 <em>AbstractApplicationContext</em> 组合了一个 <em>ApplicationEventMulticaster</em> ，拥有事件广播的能力。综合来看，<em>ApplicationContext</em> 的落地实现就已经能够完成事件驱动模型中的 “观察者” 身份了</p>
</blockquote>
<span id="more"></span>



<h2 id="publishEvent"><a href="#publishEvent" class="headerlink" title="publishEvent()"></a>publishEvent()</h2><p>该方法的实现在 <em>AbstractApplicationContext</em> 中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">publishEvent</span><span class="params">(Object event, <span class="meta">@Nullable</span> ResolvableType eventType)</span> </span>&#123;</span><br><span class="line">    Assert.notNull(event, <span class="string">&quot;Event must not be null&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decorate event as an ApplicationEvent if necessary</span></span><br><span class="line">    <span class="comment">// 这里要给普通的对象封装为PayloadApplicationEvent</span></span><br><span class="line">    ApplicationEvent applicationEvent;</span><br><span class="line">    <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationEvent) &#123;</span><br><span class="line">        applicationEvent = (ApplicationEvent) event;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        applicationEvent = <span class="keyword">new</span> PayloadApplicationEvent&lt;&gt;(<span class="keyword">this</span>, event);</span><br><span class="line">        <span class="keyword">if</span> (eventType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            eventType = ((PayloadApplicationEvent&lt;?&gt;) applicationEvent).getResolvableType();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Multicast right now if possible - or lazily once the multicaster is initialized</span></span><br><span class="line">    <span class="comment">// 添加事件广播（earlyApplicationEvents太过于复杂，会考虑后续加餐内容解释）</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.earlyApplicationEvents != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.earlyApplicationEvents.add(applicationEvent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        getApplicationEventMulticaster().multicastEvent(applicationEvent, eventType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Publish event via parent context as well...</span></span><br><span class="line">    <span class="comment">// 通知父容器发布事件</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.parent <span class="keyword">instanceof</span> AbstractApplicationContext) &#123;</span><br><span class="line">            ((AbstractApplicationContext) <span class="keyword">this</span>.parent).publishEvent(event, eventType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.parent.publishEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>广播事件的行为可以分为三部分：</p>
<ol>
<li>适配 payload 类型的 <em>ApplicationEvent</em>，即如果入参不是 <em>Event</em> 的子类则包装成 <em>PayloadApplicationEvent</em></li>
<li>在本容器中广播事件</li>
<li>通知父容器发布事件（正好知道了为什么子容器的事件会广播到父容器）</li>
</ol>
</blockquote>
<h2 id="multicastEvent"><a href="#multicastEvent" class="headerlink" title="multicastEvent()"></a>multicastEvent()</h2><p>该方法位于 <em>ApplicationEventMulticaster</em> 的唯一落地实现类 <em>SimpleApplicationEventMulticaster</em> 中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multicastEvent</span><span class="params">(<span class="keyword">final</span> ApplicationEvent event, <span class="meta">@Nullable</span> ResolvableType eventType)</span> </span>&#123;</span><br><span class="line">    ResolvableType type = (eventType != <span class="keyword">null</span> ? eventType : resolveDefaultEventType(event));</span><br><span class="line">    Executor executor = getTaskExecutor();</span><br><span class="line">    <span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : getApplicationListeners(event, type)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (executor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            executor.execute(() -&gt; invokeListener(listener, event));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            invokeListener(listener, event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ResolvableType type = (eventType != null ? eventType : resolveDefaultEventType(event))：包装 <em>ApplicationEvent</em> 的具体类型，目的是可以更方便的获取对象和类的一些信息（父类、接口、泛型等）</li>
<li>getApplicationListeners(event, type)：获取该事件对应的 <em>Listeners</em></li>
<li>invokeListener(listener, event)：调用 <em>doInvokeListener(listener, event)</em> 方法，最终调用 <em>Listener</em> 的 <em>onApplicationEvent(E event)</em> 方法实现监听器方法的调用</li>
</ul>
<h2 id="getApplicationListeners-event-type"><a href="#getApplicationListeners-event-type" class="headerlink" title="getApplicationListeners(event, type)"></a>getApplicationListeners(event, type)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Collection&lt;ApplicationListener&lt;?&gt;&gt; getApplicationListeners(</span><br><span class="line">			ApplicationEvent event, ResolvableType eventType) &#123;</span><br><span class="line"></span><br><span class="line">		Object source = event.getSource();</span><br><span class="line">		Class&lt;?&gt; sourceType = (source != <span class="keyword">null</span> ? source.getClass() : <span class="keyword">null</span>);</span><br><span class="line">		ListenerCacheKey cacheKey = <span class="keyword">new</span> ListenerCacheKey(eventType, sourceType);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Potential new retriever to populate</span></span><br><span class="line">		CachedListenerRetriever newRetriever = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Quick check for existing entry on ConcurrentHashMap</span></span><br><span class="line">		CachedListenerRetriever existingRetriever = <span class="keyword">this</span>.retrieverCache.get(cacheKey);</span><br><span class="line">		<span class="keyword">if</span> (existingRetriever == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">// Caching a new ListenerRetriever if possible</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.beanClassLoader == <span class="keyword">null</span> ||</span><br><span class="line">					(ClassUtils.isCacheSafe(event.getClass(), <span class="keyword">this</span>.beanClassLoader) &amp;&amp;</span><br><span class="line">							(sourceType == <span class="keyword">null</span> || ClassUtils.isCacheSafe(sourceType, <span class="keyword">this</span>.beanClassLoader)))) &#123;</span><br><span class="line">				newRetriever = <span class="keyword">new</span> CachedListenerRetriever();</span><br><span class="line">				existingRetriever = <span class="keyword">this</span>.retrieverCache.putIfAbsent(cacheKey, newRetriever);</span><br><span class="line">				<span class="keyword">if</span> (existingRetriever != <span class="keyword">null</span>) &#123;</span><br><span class="line">					newRetriever = <span class="keyword">null</span>;  <span class="comment">// no need to populate it in retrieveApplicationListeners</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (existingRetriever != <span class="keyword">null</span>) &#123;</span><br><span class="line">			Collection&lt;ApplicationListener&lt;?&gt;&gt; result = existingRetriever.getApplicationListeners();</span><br><span class="line">			<span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> result;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// If result is null, the existing retriever is not fully populated yet by another thread.</span></span><br><span class="line">			<span class="comment">// Proceed like caching wasn&#x27;t possible for this current local attempt.</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> retrieveApplicationListeners(eventType, sourceType, newRetriever);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>先从 <em>retrieverCache</em> 中获取，如果能获取到则直接返回</li>
<li>获取不到则调用 <em>retrieveApplicationListeners(eventType, sourceType, newRetriever)</em> ，并将结果放入 <em>retrieverCache</em> 中</li>
</ul>
</blockquote>
<h2 id="retrieveApplicationListeners-eventType-sourceType-newRetriever"><a href="#retrieveApplicationListeners-eventType-sourceType-newRetriever" class="headerlink" title="retrieveApplicationListeners(eventType, sourceType, newRetriever)"></a>retrieveApplicationListeners(eventType, sourceType, newRetriever)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Collection&lt;ApplicationListener&lt;?&gt;&gt; retrieveApplicationListeners(</span><br><span class="line">		ResolvableType eventType, <span class="meta">@Nullable</span> Class&lt;?&gt; sourceType, <span class="meta">@Nullable</span> CachedListenerRetriever retriever) &#123;</span><br><span class="line"></span><br><span class="line">	List&lt;ApplicationListener&lt;?&gt;&gt; allListeners = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	Set&lt;ApplicationListener&lt;?&gt;&gt; filteredListeners = (retriever != <span class="keyword">null</span> ? <span class="keyword">new</span> LinkedHashSet&lt;&gt;() : <span class="keyword">null</span>);</span><br><span class="line">	Set&lt;String&gt; filteredListenerBeans = (retriever != <span class="keyword">null</span> ? <span class="keyword">new</span> LinkedHashSet&lt;&gt;() : <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">	Set&lt;ApplicationListener&lt;?&gt;&gt; listeners;</span><br><span class="line">	Set&lt;String&gt; listenerBeans;</span><br><span class="line">	<span class="keyword">synchronized</span> (<span class="keyword">this</span>.defaultRetriever) &#123;</span><br><span class="line">		listeners = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="keyword">this</span>.defaultRetriever.applicationListeners);</span><br><span class="line">		listenerBeans = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="keyword">this</span>.defaultRetriever.applicationListenerBeans);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Add programmatically registered listeners, including ones coming</span></span><br><span class="line">	<span class="comment">// from ApplicationListenerDetector (singleton beans and inner beans).</span></span><br><span class="line">	<span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : listeners) &#123;</span><br><span class="line">		<span class="keyword">if</span> (supportsEvent(listener, eventType, sourceType)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (retriever != <span class="keyword">null</span>) &#123;</span><br><span class="line">				filteredListeners.add(listener);</span><br><span class="line">			&#125;</span><br><span class="line">			allListeners.add(listener);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Add listeners by bean name, potentially overlapping with programmatically</span></span><br><span class="line">	<span class="comment">// registered listeners above - but here potentially with additional metadata.</span></span><br><span class="line">	<span class="keyword">if</span> (!listenerBeans.isEmpty()) &#123;</span><br><span class="line">		ConfigurableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">		<span class="keyword">for</span> (String listenerBeanName : listenerBeans) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> (supportsEvent(beanFactory, listenerBeanName, eventType)) &#123;</span><br><span class="line">					ApplicationListener&lt;?&gt; listener =</span><br><span class="line">							beanFactory.getBean(listenerBeanName, ApplicationListener.class);</span><br><span class="line">					<span class="keyword">if</span> (!allListeners.contains(listener) &amp;&amp; supportsEvent(listener, eventType, sourceType)) &#123;</span><br><span class="line">						<span class="keyword">if</span> (retriever != <span class="keyword">null</span>) &#123;</span><br><span class="line">							<span class="keyword">if</span> (beanFactory.isSingleton(listenerBeanName)) &#123;</span><br><span class="line">								filteredListeners.add(listener);</span><br><span class="line">							&#125;</span><br><span class="line">							<span class="keyword">else</span> &#123;</span><br><span class="line">								filteredListenerBeans.add(listenerBeanName);</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">						allListeners.add(listener);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">// Remove non-matching listeners that originally came from</span></span><br><span class="line">					<span class="comment">// ApplicationListenerDetector, possibly ruled out by additional</span></span><br><span class="line">					<span class="comment">// BeanDefinition metadata (e.g. factory method generics) above.</span></span><br><span class="line">					Object listener = beanFactory.getSingleton(listenerBeanName);</span><br><span class="line">					<span class="keyword">if</span> (retriever != <span class="keyword">null</span>) &#123;</span><br><span class="line">						filteredListeners.remove(listener);</span><br><span class="line">					&#125;</span><br><span class="line">					allListeners.remove(listener);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">				<span class="comment">// Singleton listener instance (without backing bean definition) disappeared -</span></span><br><span class="line">				<span class="comment">// probably in the middle of the destruction phase</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	AnnotationAwareOrderComparator.sort(allListeners);</span><br><span class="line">	<span class="keyword">if</span> (retriever != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (filteredListenerBeans.isEmpty()) &#123;</span><br><span class="line">			retriever.applicationListeners = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(allListeners);</span><br><span class="line">			retriever.applicationListenerBeans = filteredListenerBeans;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			retriever.applicationListeners = filteredListeners;</span><br><span class="line">			retriever.applicationListenerBeans = filteredListenerBeans;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> allListeners;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>筛选出由<strong>编程式</strong>注入到 IOC 容器的，监听当前发布事件的监听器</li>
<li>筛选出由<strong>声明式 / 配置式</strong>注入到 IOC 容器的，监听当前发布事件的监听器</li>
<li>监听器排序</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中控制Bean生命周期的三种方式</title>
    <url>/2021/06/22/Spring%E4%B8%AD%E6%8E%A7%E5%88%B6Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th></th>
<th>@PostConstruct &amp; @PreDestroy</th>
<th>InitializingBean &amp; DisposableBean</th>
<th>init-method &amp; destory-method</th>
</tr>
</thead>
<tbody><tr>
<td>执行顺序</td>
<td>最先</td>
<td>中间</td>
<td>最后</td>
</tr>
<tr>
<td>组件耦合度</td>
<td>与 JSR 规范耦合</td>
<td>与 SpringFramework 耦合</td>
<td>无侵入（只有 <code>&lt;bean&gt;</code> 和 <code>@Bean</code> 中使用）</td>
</tr>
<tr>
<td>容器支持</td>
<td>注解原生支持，xml需开启注解驱动</td>
<td>xml 、注解原生支持</td>
<td>xml 、注解原生支持</td>
</tr>
<tr>
<td>单实例Bean</td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td>原型Bean</td>
<td>✔</td>
<td>✔</td>
<td>只支持 init-method</td>
</tr>
</tbody></table>
<span id="more"></span>

<h3 id="Pen"><a href="#Pen" class="headerlink" title="Pen"></a>Pen</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pen</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;initMethod...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destoryMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destoryMethod...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postConstruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postConstruct...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preDestroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;disposableBean&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;initializingBean&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="LifecycleConfiguration"><a href="#LifecycleConfiguration" class="headerlink" title="LifecycleConfiguration"></a>LifecycleConfiguration</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(initMethod = &quot;initMethod&quot;,destroyMethod = &quot;destoryMethod&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pen <span class="title">pen</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="LifecycleApplication"><a href="#LifecycleApplication" class="headerlink" title="LifecycleApplication"></a>LifecycleApplication</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(LifecycleConfiguration.class);</span><br><span class="line">        applicationContext.getBean(Pen.class);</span><br><span class="line">        applicationContext.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">postConstruct</span></span>...</span><br><span class="line">initializingBean</span><br><span class="line"><span class="function"><span class="title">initMethod</span></span>...</span><br><span class="line"><span class="function"><span class="title">preDestroy</span></span>...</span><br><span class="line">disposableBean</span><br><span class="line"><span class="function"><span class="title">destoryMethod</span></span>...</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中模块装配的三种方式</title>
    <url>/2021/06/25/Spring%E4%B8%AD%E6%A8%A1%E5%9D%97%E8%A3%85%E9%85%8D%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h3><p>可直接导入普通类、配置类、ImportSeletor 的实现类和 ImportBeanDefinitionRegistrar 的实现类，通常情况下是写在自定义注解上</p>
<h3 id="编写-ImportSeletor-的实现类"><a href="#编写-ImportSeletor-的实现类" class="headerlink" title="编写 ImportSeletor 的实现类"></a>编写 ImportSeletor 的实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Select and return the names of which class(es) should be imported based on</span></span><br><span class="line"><span class="comment">	 * the &#123;<span class="doctag">@link</span> AnnotationMetadata&#125; of the importing @&#123;<span class="doctag">@link</span> Configuration&#125; class.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the class names, or an empty array if none</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	String[] selectImports(AnnotationMetadata importingClassMetadata);</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> Predicate&lt;String&gt; <span class="title">getExclusionFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过 selectImports 方法导入对象，返回的是一组需要导入的类的全限定类名</p>
</blockquote>
<span id="more"></span>

<h3 id="编写-ImportBeanDefinitionRegistrar-的实现类"><a href="#编写-ImportBeanDefinitionRegistrar-的实现类" class="headerlink" title="编写 ImportBeanDefinitionRegistrar 的实现类"></a>编写 ImportBeanDefinitionRegistrar 的实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry,</span></span></span><br><span class="line"><span class="params"><span class="function">			BeanNameGenerator importBeanNameGenerator)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		registerBeanDefinitions(importingClassMetadata, registry);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>直接通过 BeanDefinitionRegistry 的 registerBeanDefinition 方法注册 BeanDefinition 到容器中</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring扩展自定义属性编辑器</title>
    <url>/2021/07/15/Spring%E6%89%A9%E5%B1%95%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    <content><![CDATA[<p>本文学习自<a href="https://ke.qq.com/course/package/20773">马士兵MAC课程-源码五班</a></p>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>自定义一个 <em>Address</em> 类，包含三个字段 <em>province、city、town</em>，给 <em>Address</em> 用字符串进行赋值，字符串用下划线分割 <em>province、city、town</em>，最终能使 <em>BeanFactory</em> 成功解析。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.eitan.editor.entity.Customer&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;福建省_福州市_闽侯县&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>    

<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> address;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.address = address;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Customer&#123;&quot;</span> +</span><br><span class="line">				<span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, address=&quot;</span> + address +</span><br><span class="line">				<span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String province;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String town;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getProvince</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> province;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProvince</span><span class="params">(String province)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.province = province;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> city;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.city = city;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> town;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTown</span><span class="params">(String town)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.town = town;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +</span><br><span class="line">				<span class="string">&quot;province=&#x27;&quot;</span> + province + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, city=&#x27;&quot;</span> + city + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, town=&#x27;&quot;</span> + town + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义一个继承-PropertyEditorSupport-的子类"><a href="#自定义一个继承-PropertyEditorSupport-的子类" class="headerlink" title="自定义一个继承 PropertyEditorSupport 的子类"></a>自定义一个继承 <em>PropertyEditorSupport</em> 的子类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressPropertyEditor</span> <span class="keyword">extends</span> <span class="title">PropertyEditorSupport</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAsText</span><span class="params">(String text)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">		String[] s = text.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">		Address address = <span class="keyword">new</span> Address();</span><br><span class="line">		address.setProvince(s[<span class="number">0</span>]);</span><br><span class="line">		address.setCity(s[<span class="number">1</span>]);</span><br><span class="line">		address.setTown(s[<span class="number">2</span>]);</span><br><span class="line">		<span class="keyword">this</span>.setValue(address);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该方法用于编写处理属性的具体逻辑</p>
</blockquote>
<h3 id="自定义一个实现-PropertyEditorRegistrar-接口的子类"><a href="#自定义一个实现-PropertyEditorRegistrar-接口的子类" class="headerlink" title="自定义一个实现 PropertyEditorRegistrar 接口的子类"></a>自定义一个实现 <em>PropertyEditorRegistrar</em> 接口的子类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressPropertyEditorRegistrar</span> <span class="keyword">implements</span> <span class="title">PropertyEditorRegistrar</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerCustomEditors</span><span class="params">(PropertyEditorRegistry registry)</span> </span>&#123;</span><br><span class="line">		registry.registerCustomEditor(Address.class,<span class="keyword">new</span> AddressPropertyEditor());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对-Spring-中注册一个-CustomEditorConfigurer"><a href="#对-Spring-中注册一个-CustomEditorConfigurer" class="headerlink" title="对 Spring 中注册一个 CustomEditorConfigurer"></a>对 <em>Spring</em> 中注册一个 <em>CustomEditorConfigurer</em></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.eitan.editor.entity.Customer&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;福建省_福州市_闽侯县&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 方式一 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.beans.factory.config.CustomEditorConfigurer&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;propertyEditorRegistrars&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.eitan.editor.registrar.AddressPropertyEditorRegistrar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 方式二 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.beans.factory.config.CustomEditorConfigurer&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;customEditors&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;com.eitan.editor.entity.Address&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">value</span>&gt;</span>com.eitan.editor.editor.AddressPropertyEditor<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注册 <em>CustomEditorConfigurer</em> 主要是为了将 <em>PropertyEditor</em> 注册进 <em>BeanFactory</em></p>
<p>注：<em>PropertyEditor</em> 的实现类是 <em>PropertyEditorSupport</em> </p>
</blockquote>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="CustomEditorConfigurer-是怎么将-PropertyEditorRegistrar-注册进-BeanFactory"><a href="#CustomEditorConfigurer-是怎么将-PropertyEditorRegistrar-注册进-BeanFactory" class="headerlink" title="CustomEditorConfigurer 是怎么将 PropertyEditorRegistrar 注册进 BeanFactory"></a><em>CustomEditorConfigurer</em> 是怎么将 <em>PropertyEditorRegistrar</em> 注册进 <em>BeanFactory</em></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ublic <span class="class"><span class="keyword">class</span> <span class="title">CustomEditorConfigurer</span> <span class="keyword">implements</span> <span class="title">BeanFactoryPostProcessor</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(getClass());</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> order = Ordered.LOWEST_PRECEDENCE;  <span class="comment">// default: same as non-Ordered</span></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">private</span> PropertyEditorRegistrar[] propertyEditorRegistrars;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">private</span> Map&lt;Class&lt;?&gt;, Class&lt;? extends PropertyEditor&gt;&gt; customEditors;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrder</span><span class="params">(<span class="keyword">int</span> order)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.order = order;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.order;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Specify the &#123;<span class="doctag">@link</span> PropertyEditorRegistrar PropertyEditorRegistrars&#125;</span></span><br><span class="line"><span class="comment">	 * to apply to beans defined within the current application context.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;This allows for sharing &#123;<span class="doctag">@code</span> PropertyEditorRegistrars&#125; with</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> org.springframework.validation.DataBinder DataBinders&#125;, etc.</span></span><br><span class="line"><span class="comment">	 * Furthermore, it avoids the need for synchronization on custom editors:</span></span><br><span class="line"><span class="comment">	 * A &#123;<span class="doctag">@code</span> PropertyEditorRegistrar&#125; will always create fresh editor</span></span><br><span class="line"><span class="comment">	 * instances for each bean creation attempt.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> ConfigurableListableBeanFactory#addPropertyEditorRegistrar</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPropertyEditorRegistrars</span><span class="params">(PropertyEditorRegistrar[] propertyEditorRegistrars)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.propertyEditorRegistrars = propertyEditorRegistrars;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Specify the custom editors to register via a &#123;<span class="doctag">@link</span> Map&#125;, using the</span></span><br><span class="line"><span class="comment">	 * class name of the required type as the key and the class name of the</span></span><br><span class="line"><span class="comment">	 * associated &#123;<span class="doctag">@link</span> PropertyEditor&#125; as value.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> ConfigurableListableBeanFactory#registerCustomEditor</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomEditors</span><span class="params">(Map&lt;Class&lt;?&gt;, Class&lt;? extends PropertyEditor&gt;&gt; customEditors)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.customEditors = customEditors;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.propertyEditorRegistrars != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (PropertyEditorRegistrar propertyEditorRegistrar : <span class="keyword">this</span>.propertyEditorRegistrars) &#123;</span><br><span class="line">				beanFactory.addPropertyEditorRegistrar(propertyEditorRegistrar);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.customEditors != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>.customEditors.forEach(beanFactory::registerCustomEditor);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>从源码可知：<em>CustomEditorConfigurer</em> 实现了 <em>BeanFactoryPostProcessor</em>，因此在 <em>BeanFactory</em> 加载完 <em>BeanDefinition</em> 后会调用 <em>postProcessBeanFactory</em> 方法</li>
<li>在 <em>postProcessBeanFactory</em> 中会将 <em>propertyEditorRegistrar</em> 放入 <em>BeanFactory</em> 的 <em>propertyEditorRegistrars</em> 集合(Set)中，将 customEditors 放入 <em>BeanFactory</em> 的 <em>customEditors</em> 集合(Map)中</li>
<li><em>customEditors</em> 的数据类型为： Map&lt;Class&lt;?&gt;, Class&lt;? extends PropertyEditor&gt;&gt;，其中 <em>key</em> 为要处理的类，而 <em>value</em> 的是对应的处理逻辑类</li>
</ol>
</blockquote>
<h3 id="BeanFactory-是怎么讲-PropertyEditor-放入-BeanWrapper-中"><a href="#BeanFactory-是怎么讲-PropertyEditor-放入-BeanWrapper-中" class="headerlink" title="BeanFactory 是怎么讲 PropertyEditor 放入 BeanWrapper 中"></a>BeanFactory 是怎么讲 <em>PropertyEditor</em> 放入 <em>BeanWrapper</em> 中</h3><p>代码在 <em>doCreateBean</em> 中的 <em>createBeanInstance(beanName, mbd, args)</em> 里，该方法最终掉了一个 <em>instantiateBean(beanName, mbd)</em> 返回一个 <em>BeanWrapper</em>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> BeanWrapper <span class="title">instantiateBean</span><span class="params">(String beanName, RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		Object beanInstance;</span><br><span class="line">		<span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">			beanInstance = AccessController.doPrivileged(</span><br><span class="line">					(PrivilegedAction&lt;Object&gt;) () -&gt; getInstantiationStrategy().instantiate(mbd, beanName, <span class="keyword">this</span>),</span><br><span class="line">					getAccessControlContext());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			beanInstance = getInstantiationStrategy().instantiate(mbd, beanName, <span class="keyword">this</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		BeanWrapper bw = <span class="keyword">new</span> BeanWrapperImpl(beanInstance);</span><br><span class="line">		initBeanWrapper(bw);</span><br><span class="line">		<span class="keyword">return</span> bw;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">				mbd.getResourceDescription(), beanName, <span class="string">&quot;Instantiation of bean failed&quot;</span>, ex);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <em>initBeanWrapper(bw)</em> 中，会将 <em>BeanFactory</em> 的 <em>propertyEditorRegistrars</em> 调用 <em>registerCustomEditors</em>，并把 <em>BeanFactory</em> 的 customEditors 放入 <em>BeanWrapper</em> 中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initBeanWrapper</span><span class="params">(BeanWrapper bw)</span> </span>&#123;</span><br><span class="line">	bw.setConversionService(getConversionService());</span><br><span class="line">	registerCustomEditors(bw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerCustomEditors</span><span class="params">(PropertyEditorRegistry registry)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (registry <span class="keyword">instanceof</span> PropertyEditorRegistrySupport) &#123;</span><br><span class="line">		((PropertyEditorRegistrySupport) registry).useConfigValueEditors();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">this</span>.propertyEditorRegistrars.isEmpty()) &#123;</span><br><span class="line">		<span class="keyword">for</span> (PropertyEditorRegistrar registrar : <span class="keyword">this</span>.propertyEditorRegistrars) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="comment">// 调用 PropertyEditorRegistrar 的 registerCustomEditors 方法</span></span><br><span class="line">				registrar.registerCustomEditors(registry);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (BeanCreationException ex) &#123;</span><br><span class="line">				Throwable rootCause = ex.getMostSpecificCause();</span><br><span class="line">				<span class="keyword">if</span> (rootCause <span class="keyword">instanceof</span> BeanCurrentlyInCreationException) &#123;</span><br><span class="line">					BeanCreationException bce = (BeanCreationException) rootCause;</span><br><span class="line">					String bceBeanName = bce.getBeanName();</span><br><span class="line">					<span class="keyword">if</span> (bceBeanName != <span class="keyword">null</span> &amp;&amp; isCurrentlyInCreation(bceBeanName)) &#123;</span><br><span class="line">						<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">							logger.debug(<span class="string">&quot;PropertyEditorRegistrar [&quot;</span> + registrar.getClass().getName() +</span><br><span class="line">									<span class="string">&quot;] failed because it tried to obtain currently created bean &#x27;&quot;</span> +</span><br><span class="line">									ex.getBeanName() + <span class="string">&quot;&#x27;: &quot;</span> + ex.getMessage());</span><br><span class="line">						&#125;</span><br><span class="line">						onSuppressedException(ex);</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">throw</span> ex;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">this</span>.customEditors.isEmpty()) &#123;</span><br><span class="line">           <span class="comment">// 直接将 customEditors 注册到 BeanWrapper 中</span></span><br><span class="line">		<span class="keyword">this</span>.customEditors.forEach((requiredType, editorClass) -&gt;</span><br><span class="line">				registry.registerCustomEditor(requiredType, BeanUtils.instantiateClass(editorClass)));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="BeanWrapper-是怎么编辑属性的"><a href="#BeanWrapper-是怎么编辑属性的" class="headerlink" title="BeanWrapper 是怎么编辑属性的"></a>BeanWrapper 是怎么编辑属性的</h3><p>即如何把 <em>福建省_福州市_闽侯县</em> 转化为对象 <em>Address</em></p>
<p>该过程发生在 <em>doCreateBean</em> 的 <em>populateBean(beanName, mbd, instanceWrapper)</em> 方法中，该方法是对对bean的属性进行填充，将各个属性值注入</p>
<p>继续 <em>DeBug</em> 源码，找到 <em>applyPropertyValues</em> 方法里的 *valueResolver.resolveValueIfNecessary(pv, originalValue)*，最终找到 <em>typeConverter.convertIfNecessary(valueObject, resolvedTargetType)</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">convertIfNecessary</span><span class="params">(<span class="meta">@Nullable</span> String propertyName, <span class="meta">@Nullable</span> Object oldValue, <span class="meta">@Nullable</span> Object newValue,</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="meta">@Nullable</span> Class&lt;T&gt; requiredType, <span class="meta">@Nullable</span> TypeDescriptor typeDescriptor)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Custom editor for this type?</span></span><br><span class="line">       <span class="comment">// 找到对应的 PropertyEditor</span></span><br><span class="line">	PropertyEditor editor = <span class="keyword">this</span>.propertyEditorRegistry.findCustomEditor(requiredType, propertyName);</span><br><span class="line"></span><br><span class="line">	ConversionFailedException conversionAttemptEx = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// No custom editor but custom ConversionService specified?</span></span><br><span class="line">	ConversionService conversionService = <span class="keyword">this</span>.propertyEditorRegistry.getConversionService();</span><br><span class="line">	<span class="keyword">if</span> (editor == <span class="keyword">null</span> &amp;&amp; conversionService != <span class="keyword">null</span> &amp;&amp; newValue != <span class="keyword">null</span> &amp;&amp; typeDescriptor != <span class="keyword">null</span>) &#123;</span><br><span class="line">		TypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(newValue);</span><br><span class="line">		<span class="keyword">if</span> (conversionService.canConvert(sourceTypeDesc, typeDescriptor)) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> (T) conversionService.convert(newValue, sourceTypeDesc, typeDescriptor);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (ConversionFailedException ex) &#123;</span><br><span class="line">				<span class="comment">// fallback to default conversion logic below</span></span><br><span class="line">				conversionAttemptEx = ex;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Object convertedValue = newValue;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Value not of required type?</span></span><br><span class="line">	<span class="keyword">if</span> (editor != <span class="keyword">null</span> || (requiredType != <span class="keyword">null</span> &amp;&amp; !ClassUtils.isAssignableValue(requiredType, convertedValue))) &#123;</span><br><span class="line">		<span class="keyword">if</span> (typeDescriptor != <span class="keyword">null</span> &amp;&amp; requiredType != <span class="keyword">null</span> &amp;&amp; Collection.class.isAssignableFrom(requiredType) &amp;&amp;</span><br><span class="line">				convertedValue <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">			TypeDescriptor elementTypeDesc = typeDescriptor.getElementTypeDescriptor();</span><br><span class="line">			<span class="keyword">if</span> (elementTypeDesc != <span class="keyword">null</span>) &#123;</span><br><span class="line">				Class&lt;?&gt; elementType = elementTypeDesc.getType();</span><br><span class="line">				<span class="keyword">if</span> (Class.class == elementType || Enum.class.isAssignableFrom(elementType)) &#123;</span><br><span class="line">					convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (editor == <span class="keyword">null</span>) &#123;</span><br><span class="line">			editor = findDefaultEditor(requiredType);</span><br><span class="line">		&#125;</span><br><span class="line">           <span class="comment">// 在此进行转化</span></span><br><span class="line">		convertedValue = doConvertValue(oldValue, convertedValue, requiredType, editor);</span><br><span class="line">	&#125;</span><br><span class="line">       </span><br><span class="line">	......</span><br><span class="line">           </span><br><span class="line">	<span class="keyword">return</span> (T) convertedValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入 <em>doConvertValue</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">doConvertValue</span><span class="params">(<span class="meta">@Nullable</span> Object oldValue, <span class="meta">@Nullable</span> Object newValue,</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="meta">@Nullable</span> Class&lt;?&gt; requiredType, <span class="meta">@Nullable</span> PropertyEditor editor)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Object convertedValue = newValue;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (editor != <span class="keyword">null</span> &amp;&amp; !(convertedValue <span class="keyword">instanceof</span> String)) &#123;</span><br><span class="line">		<span class="comment">// Not a String -&gt; use PropertyEditor&#x27;s setValue.</span></span><br><span class="line">		<span class="comment">// With standard PropertyEditors, this will return the very same object;</span></span><br><span class="line">		<span class="comment">// we just want to allow special PropertyEditors to override setValue</span></span><br><span class="line">		<span class="comment">// for type conversion from non-String values to the required type.</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			editor.setValue(convertedValue);</span><br><span class="line">			Object newConvertedValue = editor.getValue();</span><br><span class="line">			<span class="keyword">if</span> (newConvertedValue != convertedValue) &#123;</span><br><span class="line">				convertedValue = newConvertedValue;</span><br><span class="line">				<span class="comment">// Reset PropertyEditor: It already did a proper conversion.</span></span><br><span class="line">				<span class="comment">// Don&#x27;t use it again for a setAsText call.</span></span><br><span class="line">				editor = <span class="keyword">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">				logger.debug(<span class="string">&quot;PropertyEditor [&quot;</span> + editor.getClass().getName() + <span class="string">&quot;] does not support setValue call&quot;</span>, ex);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// Swallow and proceed.</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Object returnValue = convertedValue;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (requiredType != <span class="keyword">null</span> &amp;&amp; !requiredType.isArray() &amp;&amp; convertedValue <span class="keyword">instanceof</span> String[]) &#123;</span><br><span class="line">		<span class="comment">// Convert String array to a comma-separated String.</span></span><br><span class="line">		<span class="comment">// Only applies if no PropertyEditor converted the String array before.</span></span><br><span class="line">		<span class="comment">// The CSV String will be passed into a PropertyEditor&#x27;s setAsText method, if any.</span></span><br><span class="line">		<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">			logger.trace(<span class="string">&quot;Converting String array to comma-delimited String [&quot;</span> + convertedValue + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		convertedValue = StringUtils.arrayToCommaDelimitedString((String[]) convertedValue);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (convertedValue <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">		<span class="keyword">if</span> (editor != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">// Use PropertyEditor&#x27;s setAsText in case of a String value.</span></span><br><span class="line">			<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">				logger.trace(<span class="string">&quot;Converting String to [&quot;</span> + requiredType + <span class="string">&quot;] using property editor [&quot;</span> + editor + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			String newTextValue = (String) convertedValue;</span><br><span class="line">               <span class="comment">// 最终做事的方法</span></span><br><span class="line">			<span class="keyword">return</span> doConvertTextValue(oldValue, newTextValue, editor);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (String.class == requiredType) &#123;</span><br><span class="line">			returnValue = convertedValue;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> returnValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>追踪 <em>doConvertTextValue</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">doConvertTextValue</span><span class="params">(<span class="meta">@Nullable</span> Object oldValue, String newTextValue, PropertyEditor editor)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		editor.setValue(oldValue);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">		<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">			logger.debug(<span class="string">&quot;PropertyEditor [&quot;</span> + editor.getClass().getName() + <span class="string">&quot;] does not support setValue call&quot;</span>, ex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// Swallow and proceed.</span></span><br><span class="line">	&#125;</span><br><span class="line">	editor.setAsText(newTextValue);</span><br><span class="line">	<span class="keyword">return</span> editor.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，最终将调用我们自定义继承 <em>PropertyEditorSupport</em> 的子类的 <em>setAstext()</em> 方法，并且通过 <em>editor.getValue()</em> 获取处理后的值</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><em>CustomEditorConfigurer</em> 会在 <em>BeanFactoryPostProcessor</em> 调用 <em>postProcessBeanFactory</em> 时将 <em>PropertyEditor</em> 和 <em>PropertyEditorRegistrar</em> 注册进 <em>BeanFactory</em></li>
<li>在 <em>doCreateBean</em> 时，BeanFactory 会在初始化 <em>BeanWrapper</em> 时将 <em>PropertyEditor</em> 和 <em>PropertyEditorRegistrar</em> 放入 <em>BeanWrapper</em></li>
<li>最终在调用 <em>populateBean</em> 是会遍历各个属性，找到其类对应的 <em>PropertyEditor</em></li>
<li>再通过调用 <em>PropertyEditor</em> 的 setAsText(newTextValue) 方法实现自定义处理属性，通过 <em>editor.getValue()</em> 获取处理后的值</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring源码阅读环境下使用AOP导致代码启动失败问题解决办法</title>
    <url>/2021/08/26/Spring%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8AOP%E5%AF%BC%E8%87%B4%E4%BB%A3%E7%A0%81%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li>在下载Spring源码并正常编译之后，编写与IOC相关代码能够正常运行</li>
<li>但是在进行AOP代理后，程序不能正常启动 <em>java.lang.NoClassDefFoundError: org/aspectj/lang/JoinPoint</em></li>
</ol>
<span id="more"></span>

<h2 id="解决措施"><a href="#解决措施" class="headerlink" title="解决措施"></a>解决措施</h2><ol>
<li><p>百度输入报错信息，发现缺少jar包 <em>aspectjweaver</em></p>
</li>
<li><p>打开 <a href="https://mvnrepository.com/">mvnrepository</a>，搜索找到相应jar包的依赖</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210826103243.png" alt="image-20210826103238882"></p>
</li>
<li><p>复杂后添加到 <em>build.gradle</em> 中，并刷新</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210826103601.png" alt="image-20210826103559148"></p>
</li>
<li><p>重新运行成功</p>
</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring是怎么实现@Bean注解的</title>
    <url>/2022/03/30/Spring%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0@Bean%E6%B3%A8%E8%A7%A3%E7%9A%84/</url>
    <content><![CDATA[<h2 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h2><p>在 Spring 中，我们通过在配置类中使用 @Bean 注解是能成功将其标注的方法返回的 Bean 对象注入到 Spring 容器中。但是如果我们通过容器获取到配置类的对象，在调用配置类对象被 @Bean 修饰的方法是否会重新生成对象呢?代码如下：</p>
<h3 id="MyApplicationContext"><a href="#MyApplicationContext" class="headerlink" title="MyApplicationContext"></a>MyApplicationContext</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationContext</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MyConfiguration.class);</span><br><span class="line">        MyConfiguration myConfiguration = context.getBean(MyConfiguration.class);</span><br><span class="line">        Cat cat1 = myConfiguration.getCat();</span><br><span class="line">        Cat cat2 = myConfiguration.getCat();</span><br><span class="line">        System.out.println(cat1 == cat2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="MyConfiguration"><a href="#MyConfiguration" class="headerlink" title="MyConfiguration"></a>MyConfiguration</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">		cat.setName(<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> cat;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Cat"><a href="#Cat" class="headerlink" title="Cat"></a>Cat</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实验结果为 true，表明调用代理对象 <em><strong>myConfiguration.getCat()</strong></em> 并不会重新生成新的对象，这显然与我们的认知截然不同。而这一次我们将探究 Spring 是如何实现这一功能的。</p>
<span id="more"></span>

<h2 id="Cat-的-BeanDefinition-进入-BeanFactory-的时机"><a href="#Cat-的-BeanDefinition-进入-BeanFactory-的时机" class="headerlink" title="Cat 的 BeanDefinition 进入 BeanFactory 的时机"></a>Cat 的 BeanDefinition 进入 BeanFactory 的时机</h2><p>这个过程发生在类名为 <em><strong>AbstractApplicationContext</strong></em> 的核心代码 <em><strong>refresh()</strong></em> 的 <em><strong>invokeBeanFactoryPostProcessors(beanFactory)</strong></em> 方法中。该方法会遍历 <em><strong>BeanFactory</strong></em> 中所有实现了 <em><strong>BeanDefinitionRegistryPostProcessor</strong></em> 接口的对象，调用该对象实现了接口的方法 ***postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry)***，而 <em><strong>ConfigurationClassPostProcessor</strong></em> 便实现了这个接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigurationClassPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanDefinitionRegistryPostProcessor</span>,</span></span><br><span class="line"><span class="class">		<span class="title">PriorityOrdered</span>, <span class="title">ResourceLoaderAware</span>, <span class="title">ApplicationStartupAware</span>, <span class="title">BeanClassLoaderAware</span>, <span class="title">EnvironmentAware</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> registryId = System.identityHashCode(registry);</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.registriesPostProcessed.contains(registryId)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">					<span class="string">&quot;postProcessBeanDefinitionRegistry already called on this post-processor against &quot;</span> + registry);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.factoriesPostProcessed.contains(registryId)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">					<span class="string">&quot;postProcessBeanFactory already called on this post-processor against &quot;</span> + registry);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>.registriesPostProcessed.add(registryId);</span><br><span class="line"></span><br><span class="line">		processConfigBeanDefinitions(registry);</span><br><span class="line">	&#125;</span><br><span class="line">      </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processConfigBeanDefinitions</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">		List&lt;BeanDefinitionHolder&gt; configCandidates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		String[] candidateNames = registry.getBeanDefinitionNames();</span><br><span class="line">		<span class="comment">// 获取配置类</span></span><br><span class="line">		<span class="keyword">for</span> (String beanName : candidateNames) &#123;</span><br><span class="line">			BeanDefinition beanDef = registry.getBeanDefinition(beanName);</span><br><span class="line">			<span class="keyword">if</span> (beanDef.getAttribute(ConfigurationClassUtils.CONFIGURATION_CLASS_ATTRIBUTE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">					logger.debug(<span class="string">&quot;Bean definition has already been processed as a configuration class: &quot;</span> + beanDef);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, <span class="keyword">this</span>.metadataReaderFactory)) &#123;</span><br><span class="line">				configCandidates.add(<span class="keyword">new</span> BeanDefinitionHolder(beanDef, beanName));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Parse each @Configuration class</span></span><br><span class="line">		ConfigurationClassParser parser = <span class="keyword">new</span> ConfigurationClassParser(</span><br><span class="line">				<span class="keyword">this</span>.metadataReaderFactory, <span class="keyword">this</span>.problemReporter, <span class="keyword">this</span>.environment,</span><br><span class="line">				<span class="keyword">this</span>.resourceLoader, <span class="keyword">this</span>.componentScanBeanNameGenerator, registry);</span><br><span class="line"></span><br><span class="line">		Set&lt;BeanDefinitionHolder&gt; candidates = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(configCandidates);</span><br><span class="line">		Set&lt;ConfigurationClass&gt; alreadyParsed = <span class="keyword">new</span> HashSet&lt;&gt;(configCandidates.size());</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			StartupStep processConfig = <span class="keyword">this</span>.applicationStartup.start(<span class="string">&quot;spring.context.config-classes.parse&quot;</span>);</span><br><span class="line">            <span class="comment">// 解析配置类</span></span><br><span class="line">			parser.parse(candidates);</span><br><span class="line">            parser.validate();</span><br><span class="line">			<span class="comment">// 通过解析器获取以及解析过的配置类的信息 configClasses</span></span><br><span class="line">			Set&lt;ConfigurationClass&gt; configClasses = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(parser.getConfigurationClasses());</span><br><span class="line">			...</span><br><span class="line">            <span class="comment">// 这一步才是将解析到被@Bean修饰的方法创建成BeanDefinition并添加进BeanFactory</span></span><br><span class="line">            <span class="keyword">this</span>.reader.loadBeanDefinitions(configClasses);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里会创建一个配置文件的解析器 <em><strong>ConfigurationClassParser</strong></em>，通过该解析器的 <em><strong>parser.parse(candidates)</strong></em> 进行解析。该方法经过一系列调用，最终真正干活的是 ***doProcessConfigurationClass(configClass, sourceClass, filter)***，它会解析标注在配置类上 @PropertySource、@ComponentScan、 @Import、@ImportResource 和 @Bean 的标签。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> SourceClass <span class="title">doProcessConfigurationClass</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">		ConfigurationClass configClass, SourceClass sourceClass, Predicate&lt;String&gt; filter)</span></span></span><br><span class="line"><span class="function">		<span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   	...</span><br><span class="line">       <span class="comment">// Process any @PropertySource annotations</span></span><br><span class="line">       ...</span><br><span class="line">       <span class="comment">// Process any @ComponentScan annotations</span></span><br><span class="line">       ...</span><br><span class="line">       <span class="comment">// Process any @Import annotations</span></span><br><span class="line">       ...</span><br><span class="line">       <span class="comment">// Process any @ImportResource annotations</span></span><br><span class="line">       ...</span><br><span class="line">       <span class="comment">// Process individual @Bean methods</span></span><br><span class="line">	Set&lt;MethodMetadata&gt; beanMethods = retrieveBeanMethodMetadata(sourceClass);</span><br><span class="line">	<span class="keyword">for</span> (MethodMetadata methodMetadata : beanMethods) &#123;</span><br><span class="line">		configClass.addBeanMethod(<span class="keyword">new</span> BeanMethod(methodMetadata, configClass));</span><br><span class="line">	&#125;</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>这里做的工作只是将配置类上标注了 @Bean 的方法包装成 MethodMetadata 并添加进配置类的包装对象 configClass 中。当解析器 <em><strong>ConfigurationClassParser</strong></em> 解析完成之后，<em><strong>ConfigurationClassPostProcessor</strong></em> 的 <em><strong>ConfigurationClassPostProcessor(…)</strong></em> 方法会从解析器中拿到解析过的配置文件的包装对象 configClass，将对应的方法分装为 <em><strong>ConfigurationClassBeanDefinition</strong></em> 并注册进 BeanFactory。</p>
<h2 id="Car-对象的生成时机"><a href="#Car-对象的生成时机" class="headerlink" title="Car 对象的生成时机"></a>Car 对象的生成时机</h2><p>同样发送在 <em><strong>refresh()</strong></em> 方法中，在其 <em><strong>finishBeanFactoryInitialization(beanFactory)</strong></em> 方法里会遍历容器中所有的注册了的BeanDefinitionNames，并使用 <em><strong>getBean(beanName)</strong></em> 创建实例。</p>
<p>在经过 <em><strong>getBean</strong></em> -&gt; <em><strong>doGetBean</strong></em> -&gt; <em><strong>createBean</strong></em> -&gt; <em><strong>doCreateBean</strong></em> 的一系列方法调用后，会进入 <em><strong>createBeanInstance</strong></em> 方法，在该方法中，会判断出传入的 BeanDefinition 包含一个工厂方法，则会使用工厂方法的方式创建对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> BeanWrapper <span class="title">createBeanInstance</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// Make sure bean class is actually resolved at this point.</span></span><br><span class="line">	Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (beanClass != <span class="keyword">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">				<span class="string">&quot;Bean class isn&#x27;t public, and non-public access not allowed: &quot;</span> + beanClass.getName());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 使用Supplier的方式创建对象</span></span><br><span class="line">	Supplier&lt;?&gt; instanceSupplier = mbd.getInstanceSupplier();</span><br><span class="line">	<span class="keyword">if</span> (instanceSupplier != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> obtainFromSupplier(instanceSupplier, beanName);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 使用工厂方法FactoryMethod的方式创建对象</span></span><br><span class="line">	<span class="keyword">if</span> (mbd.getFactoryMethodName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class="line">	&#125;</span><br><span class="line">       <span class="comment">// 使用构成方法创建对象</span></span><br><span class="line">       ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后在经过一系列的方法调用，最终会获取到 <em><strong>getCar()</strong></em> 的 Method 对象和 <em><strong>MyConfiguration</strong></em> 类的实例，通过反射的方式创建 <em><strong>Object result = factoryMethod.invoke(factoryBean, args)</strong></em> 。</p>
<h2 id="为何多次调用-myConfiguration-getCat-方法会返回同一对象"><a href="#为何多次调用-myConfiguration-getCat-方法会返回同一对象" class="headerlink" title="为何多次调用 myConfiguration.getCat() 方法会返回同一对象"></a>为何多次调用 myConfiguration.getCat() 方法会返回同一对象</h2><p>Spring 通过动态代理的方式对配置类 <em><strong>MyConfiguration</strong></em> 进行了增强。当调用 <em><strong>getCar()</strong></em> 方法后会进入 <em><strong>ConfigurationClassEnhancer</strong></em> 的内部子类 <em><strong>BeanMethodInterceptor</strong></em> 的 <em><strong>intercept</strong></em> 方法中，该方法最终通过获取到 BeanFactory 并调用 <em><strong>getBean(beanName)</strong></em> 的方法获取对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object enhancedConfigInstance, Method beanMethod, Object[] beanMethodArgs,</span></span></span><br><span class="line"><span class="params"><span class="function">			MethodProxy cglibMethodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">	ConfigurableBeanFactory beanFactory = getBeanFactory(enhancedConfigInstance);</span><br><span class="line">	String beanName = BeanAnnotationHelper.determineBeanNameFor(beanMethod);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Determine whether this bean is a scoped-proxy</span></span><br><span class="line">	<span class="keyword">if</span> (BeanAnnotationHelper.isScopedProxy(beanMethod)) &#123;</span><br><span class="line">		String scopedBeanName = ScopedProxyCreator.getTargetBeanName(beanName);</span><br><span class="line">		<span class="keyword">if</span> (beanFactory.isCurrentlyInCreation(scopedBeanName)) &#123;</span><br><span class="line">			beanName = scopedBeanName;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// To handle the case of an inter-bean method reference, we must explicitly check the</span></span><br><span class="line">	<span class="comment">// container for already cached instances.</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// First, check to see if the requested bean is a FactoryBean. If so, create a subclass</span></span><br><span class="line">	<span class="comment">// proxy that intercepts calls to getObject() and returns any cached bean instance.</span></span><br><span class="line">	<span class="comment">// This ensures that the semantics of calling a FactoryBean from within @Bean methods</span></span><br><span class="line">	<span class="comment">// is the same as that of referring to a FactoryBean within XML. See SPR-6602.</span></span><br><span class="line">          <span class="comment">// 如果要生成对象的类是 FactoryBean时，走以下逻辑</span></span><br><span class="line">	<span class="keyword">if</span> (factoryContainsBean(beanFactory, BeanFactory.FACTORY_BEAN_PREFIX + beanName) &amp;&amp;</span><br><span class="line">			factoryContainsBean(beanFactory, beanName)) &#123;</span><br><span class="line">		Object factoryBean = beanFactory.getBean(BeanFactory.FACTORY_BEAN_PREFIX + beanName);</span><br><span class="line">		<span class="keyword">if</span> (factoryBean <span class="keyword">instanceof</span> ScopedProxyFactoryBean) &#123;</span><br><span class="line">			<span class="comment">// Scoped proxy factory beans are a special case and should not be further proxied</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// It is a candidate FactoryBean - go ahead with enhancement</span></span><br><span class="line">			<span class="keyword">return</span> enhanceFactoryBean(factoryBean, beanMethod.getReturnType(), beanFactory, beanName);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 如果该对象正在创建，则调用被代理对象的方法创建实例</span></span><br><span class="line">	<span class="keyword">if</span> (isCurrentlyInvokedFactoryMethod(beanMethod)) &#123;</span><br><span class="line">		<span class="comment">// The factory is calling the bean method in order to instantiate and register the bean</span></span><br><span class="line">		<span class="comment">// (i.e. via a getBean() call) -&gt; invoke the super implementation of the method to actually</span></span><br><span class="line">		<span class="comment">// create the bean instance.</span></span><br><span class="line">		<span class="keyword">if</span> (logger.isInfoEnabled() &amp;&amp;</span><br><span class="line">				BeanFactoryPostProcessor.class.isAssignableFrom(beanMethod.getReturnType())) &#123;</span><br><span class="line">			logger.info(String.format(<span class="string">&quot;@Bean method %s.%s is non-static and returns an object &quot;</span> +</span><br><span class="line">							<span class="string">&quot;assignable to Spring&#x27;s BeanFactoryPostProcessor interface. This will &quot;</span> +</span><br><span class="line">							<span class="string">&quot;result in a failure to process annotations such as @Autowired, &quot;</span> +</span><br><span class="line">							<span class="string">&quot;@Resource and @PostConstruct within the method&#x27;s declaring &quot;</span> +</span><br><span class="line">							<span class="string">&quot;@Configuration class. Add the &#x27;static&#x27; modifier to this method to avoid &quot;</span> +</span><br><span class="line">							<span class="string">&quot;these container lifecycle issues; see @Bean javadoc for complete details.&quot;</span>,</span><br><span class="line">					beanMethod.getDeclaringClass().getSimpleName(), beanMethod.getName()));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cglibMethodProxy.invokeSuper(enhancedConfigInstance, beanMethodArgs);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 这方法最终还是调用 beanFactory.getBean(beanName)</span></span><br><span class="line">	<span class="keyword">return</span> resolveBeanReference(beanMethod, beanMethodArgs, beanFactory, beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MyConfiguration类增强的时机"><a href="#MyConfiguration类增强的时机" class="headerlink" title="MyConfiguration类增强的时机"></a>MyConfiguration类增强的时机</h2><p>发送在 <em><strong>refresh()</strong></em> 的 <em><strong>invokeBeanFactoryPostProcessors(beanFactory)</strong></em> 方法中，该方法会遍历实现了 <em><strong>BeanFactoryPostProcessor</strong></em> 的子类并调用其 <em><strong>postProcessBeanFactory</strong></em> 方法。而 <em><strong>ConfigurationClassPostProcessor</strong></em> 便实现了这个方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> factoryId = System.identityHashCode(beanFactory);</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.factoriesPostProcessed.contains(factoryId)) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">				<span class="string">&quot;postProcessBeanFactory already called on this post-processor against &quot;</span> + beanFactory);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">this</span>.factoriesPostProcessed.add(factoryId);</span><br><span class="line">       <span class="comment">// 如果进入该判断，表明 BDRPP 的回调方法没用被调用，则先调用该方法解析配置类，也就是解析 @Bean、@ComponentScan、@Import等注解</span></span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">this</span>.registriesPostProcessed.contains(factoryId)) &#123;</span><br><span class="line">		<span class="comment">// BeanDefinitionRegistryPostProcessor hook apparently not supported...</span></span><br><span class="line">		<span class="comment">// Simply call processConfigurationClasses lazily at this point then.</span></span><br><span class="line">		processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 这一步便是增强配置类的方法</span></span><br><span class="line">	enhanceConfigurationClasses(beanFactory);</span><br><span class="line">	beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ImportAwareBeanPostProcessor(beanFactory));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续 Debug 代码，最终发现他会调用 <em><strong>ConfigurationClassEnhancer</strong></em> 类中的 <em><strong>newEnhancer</strong></em> 方法完成代理类的增强。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Enhancer <span class="title">newEnhancer</span><span class="params">(Class&lt;?&gt; configSuperClass, <span class="meta">@Nullable</span> ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">	Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">	enhancer.setSuperclass(configSuperClass);</span><br><span class="line">	enhancer.setInterfaces(<span class="keyword">new</span> Class&lt;?&gt;[] &#123;EnhancedConfiguration.class&#125;);</span><br><span class="line">	enhancer.setUseFactory(<span class="keyword">false</span>);</span><br><span class="line">	enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);</span><br><span class="line">	enhancer.setStrategy(<span class="keyword">new</span> BeanFactoryAwareGeneratorStrategy(classLoader));</span><br><span class="line">	enhancer.setCallbackFilter(CALLBACK_FILTER);</span><br><span class="line">	enhancer.setCallbackTypes(CALLBACK_FILTER.getCallbackTypes());</span><br><span class="line">	<span class="keyword">return</span> enhancer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring自定义标签</title>
    <url>/2021/07/08/Spring%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210708133248.png" alt="image-20210708133243955"></p>
<p>本文学习自<a href="https://ke.qq.com/course/package/20773">马士兵MAC课程-源码五班</a></p>
<span id="more"></span>

<h2 id="添加自定义标签步骤"><a href="#添加自定义标签步骤" class="headerlink" title="添加自定义标签步骤"></a>添加自定义标签步骤</h2><h3 id="添加-xsd-XML-Schema-Definition-文件"><a href="#添加-xsd-XML-Schema-Definition-文件" class="headerlink" title="添加 xsd(XML Schema Definition) 文件"></a>添加 xsd(XML Schema Definition) 文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:schema</span> <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">targetNamespace</span>=<span class="string">&quot;http://eitan-blog.github.io/schema/eitan&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">elementFormDefault</span>=<span class="string">&quot;qualified&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">attributeFormDefault</span>=<span class="string">&quot;unqualified&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:string&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:string&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:string&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:string&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>xmlns:xsd=”<a href="http://www.w3.org/2001/XMLSchema&quot;%EF%BC%9A%E8%A1%A8%E7%A4%BA%E8%AF%A5%E5%BC%95%E7%94%A8%E8%AF%A5%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%9A%84%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83">http://www.w3.org/2001/XMLSchema&quot;：表示该引用该命名空间的编写规范</a></li>
<li>targetNamespace=”<a href="http://eitan-blog.github.io/schema/eitan&quot;%EF%BC%9A%E8%A1%A8%E7%A4%BA%E5%BD%93%E5%89%8D%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%9A%84%E5%9C%B0%E5%9D%80">http://eitan-blog.github.io/schema/eitan&quot;：表示当前命名空间的地址</a></li>
<li>elementFormDefault=”qualified” attributeFormDefault=”unqualified”：表示使用该命名空间的规范时，元素必须使用前缀短名，而属性可以不用，如 **&lt;eitan:user id=”user1” userName=”eitan” email=”<a href="mailto:&#x65;&#x69;&#116;&#97;&#110;&#x5f;&#98;&#x6c;&#x6f;&#x67;&#x40;&#49;&#54;&#51;&#46;&#x63;&#x6f;&#x6d;">&#x65;&#x69;&#116;&#97;&#110;&#x5f;&#98;&#x6c;&#x6f;&#x67;&#x40;&#49;&#54;&#51;&#46;&#x63;&#x6f;&#x6d;</a>“ password=”123456”&gt;&lt;/eitan:user&gt;<em><em>中 <em>eitan</em> 就是前缀短名，</em>user* 是元素，*userName</em> 是属性</li>
</ol>
</blockquote>
<h3 id="添加-spring-handlers"><a href="#添加-spring-handlers" class="headerlink" title="添加 spring.handlers"></a>添加 spring.handlers</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">http\://eitan-blog.github.io/schema/eitan</span>=<span class="string">com.eitan.tag.handler.UserNamespaceHandler</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>http://eitan-blog.github.io/schema/eitan：表示你的命名空间</li>
<li>com.eitan.tag.handler.UserNamespaceHandler：表示你对该命名空间的处理器的全限定类名</li>
</ol>
</blockquote>
<h3 id="添加-Spring-shemas"><a href="#添加-Spring-shemas" class="headerlink" title="添加 Spring.shemas"></a>添加 Spring.shemas</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">http\://eitan-blog.github.io/schema/eitan/user.xsd</span>=<span class="string">com.eitan.tag/user.xsd</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>编写命名空间映射关系，目的是为了在 xml 中找到映射对于的 xsd 文件</p>
</blockquote>
<h3 id="编写-UserNamespaceHandler"><a href="#编写-UserNamespaceHandler" class="headerlink" title="编写 UserNamespaceHandler"></a>编写 UserNamespaceHandler</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		registerBeanDefinitionParser(<span class="string">&quot;user&quot;</span>, <span class="keyword">new</span> UserBeanDefinitionPaser());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该类主要是用于初始化 <em>xml</em> 每一个元素对应的解析类 </p>
</blockquote>
<h3 id="编写-UserBeanDefinitionPaser"><a href="#编写-UserBeanDefinitionPaser" class="headerlink" title="编写 UserBeanDefinitionPaser"></a>编写 UserBeanDefinitionPaser</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBeanDefinitionPaser</span> <span class="keyword">extends</span> <span class="title">AbstractSingleBeanDefinitionParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回属性值所对应的对象</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> Class&lt;?&gt; getBeanClass(Element element) &#123;</span><br><span class="line">		<span class="keyword">return</span> User.class;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doParse</span><span class="params">(Element element, BeanDefinitionBuilder builder)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 获取标签对应的属性值</span></span><br><span class="line">		String userName = element.getAttribute(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">		String email = element.getAttribute(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">		String password = element.getAttribute(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasText(userName)) &#123;</span><br><span class="line">			builder.addPropertyValue(<span class="string">&quot;userName&quot;</span>, userName);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasText(email)) &#123;</span><br><span class="line">			builder.addPropertyValue(<span class="string">&quot;email&quot;</span>, email);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasText(password)) &#123;</span><br><span class="line">			builder.addPropertyValue(<span class="string">&quot;password&quot;</span>, password);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:eitan</span>=<span class="string">&quot;http://eitan-blog.github.io/schema/eitan&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">							http://eitan-blog.github.io/schema/eitan  http://eitan-blog.github.io/schema/eitan/user.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">							http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">eitan:user</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">userName</span>=<span class="string">&quot;eitan&quot;</span> <span class="attr">email</span>=<span class="string">&quot;eitan_blog@163.com&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">eitan:user</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:db.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.eitan.quickstart.entity.Person&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>在文件中引入自己的 xsd<ol>
<li>xmlns:eitan=”<a href="http://eitan-blog.github.io/schema/eitan&quot;">http://eitan-blog.github.io/schema/eitan&quot;</a></li>
<li> xsi:schemaLocation=<a href="http://eitan-blog.github.io/schema/eitan">http://eitan-blog.github.io/schema/eitan</a>  <a href="http://eitan-blog.github.io/schema/eitan/user.xsd">http://eitan-blog.github.io/schema/eitan/user.xsd</a></li>
</ol>
</li>
<li>在文件中使用自己的标签：*&lt;eitan:user id=”user1” userName=”eitan” email=”<a href="mailto:&#x65;&#x69;&#116;&#x61;&#110;&#x5f;&#x62;&#x6c;&#x6f;&#x67;&#64;&#49;&#x36;&#51;&#46;&#99;&#111;&#109;">&#x65;&#x69;&#116;&#x61;&#110;&#x5f;&#x62;&#x6c;&#x6f;&#x67;&#64;&#49;&#x36;&#51;&#46;&#99;&#111;&#109;</a>“ password=”123456”&gt;&lt;/eitan:user&gt;*</li>
</ol>
</blockquote>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationContext</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring-$&#123;username&#125;.xml&quot;</span>);</span><br><span class="line">		User user = ac.getBean(User.class);</span><br><span class="line">		System.out.println(user);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 <em>MyApplicationContext</em> 中获取并打印 <em>User.class</em>，可以发现写在 <em>xml</em> 中的属性成功注入进 <em>user</em> 中</p>
<p>Connected to the target VM, address: ‘127.0.0.1:12821’, transport: ‘socket’<br>User{userName=’eitan’, email=’eitan<a href="mailto:&#x5f;&#x62;&#108;&#x6f;&#103;&#64;&#x31;&#x36;&#51;&#46;&#99;&#x6f;&#x6d;">&#x5f;&#x62;&#108;&#x6f;&#103;&#64;&#x31;&#x36;&#51;&#46;&#99;&#x6f;&#x6d;</a>‘, password=’123456’}</p>
</blockquote>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><ol>
<li>该过程发生在 <em>AbstractApplicationContext</em> 的 <em>refresh()</em> 方法中</li>
<li>在 <em>refresh()</em> 的 <em>obtainFreshBeanFactory()</em> 的 <em>loadBeanDefinitions(beanFactory)</em> 重载方法里</li>
<li>在 <em>doLoadBeanDefinitions(inputSource, encodedResource.getResource())</em> 的 <em>registerBeanDefinitions(doc, resource)</em> 方法中，调用 <em>documentReader.registerBeanDefinitions(doc, createReaderContext(resource))</em> 方法完成对 <em>Document</em> 对象完成具体的解析过程</li>
<li>核心处理代码在 <em>doRegisterBeanDefinitions(doc.getDocumentElement())</em> 的 parseBeanDefinitions(root, this.delegate) 里</li>
</ol>
<h3 id="parseBeanDefinitions"><a href="#parseBeanDefinitions" class="headerlink" title="parseBeanDefinitions"></a>parseBeanDefinitions</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">		NodeList nl = root.getChildNodes();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">			Node node = nl.item(i);</span><br><span class="line">			<span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">				Element ele = (Element) node;</span><br><span class="line">				<span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">					<span class="comment">// 解析 import、alias、bean 标签</span></span><br><span class="line">					parseDefaultElement(ele, delegate);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					delegate.parseCustomElement(ele);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		delegate.parseCustomElement(root);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>这里是判断元素是默认命名空间的元素 <em>delegate.isDefaultNamespace(ele)</em></li>
<li>我们这里现在不是默认的命名空间，所以调用的是解析自定义元素的方法 <em>delegate.parseCustomElement(ele)</em></li>
</ol>
</blockquote>
<h3 id="parseCustomElement"><a href="#parseCustomElement" class="headerlink" title="parseCustomElement"></a>parseCustomElement</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parseCustomElement</span><span class="params">(Element ele, <span class="meta">@Nullable</span> BeanDefinition containingBd)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 获取对应的命名空间</span></span><br><span class="line">	String namespaceUri = getNamespaceURI(ele);</span><br><span class="line">	<span class="keyword">if</span> (namespaceUri == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 根据命名空间找到对应的NamespaceHandler</span></span><br><span class="line">	NamespaceHandler handler = <span class="keyword">this</span>.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);</span><br><span class="line">	<span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">		error(<span class="string">&quot;Unable to locate Spring NamespaceHandler for XML schema namespace [&quot;</span> + namespaceUri + <span class="string">&quot;]&quot;</span>, ele);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 调用自定义的NamespaceHandler进行解析</span></span><br><span class="line">	<span class="keyword">return</span> handler.parse(ele, <span class="keyword">new</span> ParserContext(<span class="keyword">this</span>.readerContext, <span class="keyword">this</span>, containingBd));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>我们先从上下文中获取对应的 <em>handler</em></li>
<li>再调用 <em>handler</em> 的 <em>parse(Element element, ParserContext parserContext)</em> 方法</li>
</ol>
</blockquote>
<h3 id="resolver-方法"><a href="#resolver-方法" class="headerlink" title="resolver 方法"></a>resolver 方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> NamespaceHandler <span class="title">resolve</span><span class="params">(String namespaceUri)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 获取所有已经配置好的handler映射</span></span><br><span class="line">	Map&lt;String, Object&gt; handlerMappings = getHandlerMappings();</span><br><span class="line">	<span class="comment">// 根据命名空间找到对应信息</span></span><br><span class="line">	Object handlerOrClassName = handlerMappings.get(namespaceUri);</span><br><span class="line">	<span class="keyword">if</span> (handlerOrClassName == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (handlerOrClassName <span class="keyword">instanceof</span> NamespaceHandler) &#123;</span><br><span class="line">		<span class="comment">// 如果已经做过解析，handlerMappings中存放的就是对应的处理器对象，直接返回</span></span><br><span class="line">		<span class="keyword">return</span> (NamespaceHandler) handlerOrClassName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// 如果没有做过解析，handlerMappings.get(namespaceUri)则返回的是类路径</span></span><br><span class="line">		String className = (String) handlerOrClassName;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 通过反射将类路径转化为类</span></span><br><span class="line">			Class&lt;?&gt; handlerClass = ClassUtils.forName(className, <span class="keyword">this</span>.classLoader);</span><br><span class="line">			<span class="keyword">if</span> (!NamespaceHandler.class.isAssignableFrom(handlerClass)) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> FatalBeanException(<span class="string">&quot;Class [&quot;</span> + className + <span class="string">&quot;] for namespace [&quot;</span> + namespaceUri +</span><br><span class="line">						<span class="string">&quot;] does not implement the [&quot;</span> + NamespaceHandler.class.getName() + <span class="string">&quot;] interface&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 实例化类</span></span><br><span class="line">			NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass);</span><br><span class="line">			<span class="comment">// 调用自定义namespaceHandler的初始化init()方法</span></span><br><span class="line">			namespaceHandler.init();</span><br><span class="line">			<span class="comment">// 将结果记录到缓存中</span></span><br><span class="line">			handlerMappings.put(namespaceUri, namespaceHandler);</span><br><span class="line">			<span class="keyword">return</span> namespaceHandler;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> FatalBeanException(<span class="string">&quot;Could not find NamespaceHandler class [&quot;</span> + className +</span><br><span class="line">					<span class="string">&quot;] for namespace [&quot;</span> + namespaceUri + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (LinkageError err) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> FatalBeanException(<span class="string">&quot;Unresolvable class definition for NamespaceHandler class [&quot;</span> +</span><br><span class="line">					className + <span class="string">&quot;] for namespace [&quot;</span> + namespaceUri + <span class="string">&quot;]&quot;</span>, err);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="映射关系是什么时候加载到程序中的"><a href="#映射关系是什么时候加载到程序中的" class="headerlink" title="映射关系是什么时候加载到程序中的"></a>映射关系是什么时候加载到程序中的</h3><h4 id="首先再创造上下文对象的时候会对路径赋值"><a href="#首先再创造上下文对象的时候会对路径赋值" class="headerlink" title="首先再创造上下文对象的时候会对路径赋值"></a>首先再创造上下文对象的时候会对路径赋值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">	BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();</span><br><span class="line">	<span class="keyword">int</span> countBefore = getRegistry().getBeanDefinitionCount();</span><br><span class="line">	<span class="comment">// 对Document对象完成具体的解析过程</span></span><br><span class="line">	documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class="line">	<span class="keyword">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> XmlReaderContext <span class="title">createReaderContext</span><span class="params">(Resource resource)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> XmlReaderContext(resource, <span class="keyword">this</span>.problemReporter, <span class="keyword">this</span>.eventListener,</span><br><span class="line">			<span class="keyword">this</span>.sourceExtractor, <span class="keyword">this</span>, getNamespaceHandlerResolver());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> NamespaceHandlerResolver <span class="title">getNamespaceHandlerResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.namespaceHandlerResolver == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">this</span>.namespaceHandlerResolver = createDefaultNamespaceHandlerResolver();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.namespaceHandlerResolver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> NamespaceHandlerResolver <span class="title">createDefaultNamespaceHandlerResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ClassLoader cl = (getResourceLoader() != <span class="keyword">null</span> ? getResourceLoader().getClassLoader() : getBeanClassLoader());</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> DefaultNamespaceHandlerResolver(cl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultNamespaceHandlerResolver</span><span class="params">(<span class="meta">@Nullable</span> ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>(classLoader, DEFAULT_HANDLER_MAPPINGS_LOCATION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_HANDLER_MAPPINGS_LOCATION = <span class="string">&quot;META-INF/spring.handlers&quot;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="在-resolve-方法时会调用-getHandlerMappings-获取对应的映射关系"><a href="#在-resolve-方法时会调用-getHandlerMappings-获取对应的映射关系" class="headerlink" title="在 resolve 方法时会调用 getHandlerMappings() 获取对应的映射关系"></a>在 resolve 方法时会调用 getHandlerMappings() 获取对应的映射关系</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">getHandlerMappings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Map&lt;String, Object&gt; handlerMappings = <span class="keyword">this</span>.handlerMappings;</span><br><span class="line">	<span class="keyword">if</span> (handlerMappings == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">			handlerMappings = <span class="keyword">this</span>.handlerMappings;</span><br><span class="line">			<span class="keyword">if</span> (handlerMappings == <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">					logger.trace(<span class="string">&quot;Loading NamespaceHandler mappings from [&quot;</span> + <span class="keyword">this</span>.handlerMappingsLocation + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					Properties mappings =</span><br><span class="line">							PropertiesLoaderUtils.loadAllProperties(<span class="keyword">this</span>.handlerMappingsLocation, <span class="keyword">this</span>.classLoader);</span><br><span class="line">					<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">						logger.trace(<span class="string">&quot;Loaded NamespaceHandler mappings: &quot;</span> + mappings);</span><br><span class="line">					&#125;</span><br><span class="line">					handlerMappings = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(mappings.size());</span><br><span class="line">					CollectionUtils.mergePropertiesIntoMap(mappings, handlerMappings);</span><br><span class="line">					<span class="keyword">this</span>.handlerMappings = handlerMappings;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">							<span class="string">&quot;Unable to load NamespaceHandler mappings from location [&quot;</span> + <span class="keyword">this</span>.handlerMappingsLocation + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> handlerMappings;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="趣事：在-Debug-中，代码没有调用-getHandlerMappings-方法，但是我们却能看到对应的映射关系"><a href="#趣事：在-Debug-中，代码没有调用-getHandlerMappings-方法，但是我们却能看到对应的映射关系" class="headerlink" title="趣事：在 Debug 中，代码没有调用 getHandlerMappings() 方法，但是我们却能看到对应的映射关系"></a>趣事：在 Debug 中，代码没有调用 getHandlerMappings() 方法，但是我们却能看到对应的映射关系</h4><p>原因是 <em>Debug</em> 过程中，IDEA 自动调用了 <em>toString()</em> 方法，而 <em>toString()</em> 方法中有 <em>getHandlerMappings()</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;NamespaceHandlerResolver using mappings &quot;</span> + getHandlerMappings();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="小问题-为什么-Spring-schemas-文件开头要大写"><a href="#小问题-为什么-Spring-schemas-文件开头要大写" class="headerlink" title="小问题-为什么 Spring.schemas 文件开头要大写"></a>小问题-为什么 <em>Spring.schemas</em> 文件开头要大写</h2><p>当该文件改成 <em>spring.schemas</em>时，<em>gradle</em> 会报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Cause: assert shortName != key</span><br><span class="line">       |         |  |</span><br><span class="line">       |         |  &#x27;http://eitan-blog.github.io/schema/eitan/user.xsd&#x27;</span><br><span class="line">       |         false</span><br><span class="line">       &#x27;http://eitan-blog.github.io/schema/eitan/user.xsd&#x27;</span><br></pre></td></tr></table></figure>

<p>原因是发生在 <em>gradle</em> 文件夹下面的 <em>docs.gradle</em> 的注释代码，注释掉后不管大小写都能正常运行。</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210713094818.png" alt="image-20210713094814309"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring源码阅读环境搭建</title>
    <url>/2021/07/06/Spring%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="安装-Gradle"><a href="#安装-Gradle" class="headerlink" title="安装 Gradle"></a>安装 Gradle</h2><h3 id="下载压缩包"><a href="#下载压缩包" class="headerlink" title="下载压缩包"></a>下载压缩包</h3><p><a href="https://services.gradle.org/distributions/">下载链接</a>，选择 <em>gradle-6.5.1-all .zip</em></p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210706125653.png" alt="image-20210706125648901"></p>
<p>并在 <strong>Path</strong> 中添加 <em>%GRADLE_HOME%\bin</em></p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210706125852.png" alt="image-20210706125850699"></p>
<span id="more"></span>

<h3 id="验证是否生效"><a href="#验证是否生效" class="headerlink" title="验证是否生效"></a>验证是否生效</h3><p><em>Win</em> + <em>R</em> 打开 <em>cmd</em>，输入 <em>gradle -v</em> 验证是否安装成功</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210706130129.png" alt="image-20210706130127447"></p>
<h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><p>将<a href="https://github.com/eitan-blog/spring-framework">官方仓库</a>的代码<strong>fork</strong>到自己的仓库</p>
<h3 id="拉取代码到本地"><a href="#拉取代码到本地" class="headerlink" title="拉取代码到本地"></a>拉取代码到本地</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/eitan-blog/spring-framework.git</span><br></pre></td></tr></table></figure>



<h2 id="开始构建"><a href="#开始构建" class="headerlink" title="开始构建"></a>开始构建</h2><h3 id="为源码安装对应版本的-Gradle"><a href="#为源码安装对应版本的-Gradle" class="headerlink" title="为源码安装对应版本的 Gradle"></a>为源码安装对应版本的 Gradle</h3><p>运行源码根目录下的 <em>gradlew.bat</em> 文件</p>
<h3 id="使用-IDEA-打开源码，设置-Gradle-本地仓库"><a href="#使用-IDEA-打开源码，设置-Gradle-本地仓库" class="headerlink" title="使用 IDEA 打开源码，设置 Gradle 本地仓库"></a>使用 IDEA 打开源码，设置 Gradle 本地仓库</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210706141630.png" alt="image-20210706141627600"></p>
<h3 id="修改-build-gradle-文件"><a href="#修改-build-gradle-文件" class="headerlink" title="修改 build.gradle 文件"></a>修改 build.gradle 文件</h3><ol>
<li><p>在头部添加</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">buildscript</span> &#123;</span><br><span class="line">    <span class="section">repositories</span> &#123;</span><br><span class="line">		<span class="section">maven</span> &#123; <span class="attribute">url</span> <span class="string">&quot;https://repo.spring.io/plugins-release&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>添加镜像</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210706142921.png" alt="image-20210706142917838"></p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="class">repositories </span>&#123;</span><br><span class="line">    <span class="comment">// 新增两个阿里云镜像</span></span><br><span class="line">    <span class="class">maven </span>&#123; url <span class="string">&quot;https://maven.aliyun.com/nexus/content/groups/public&quot;</span> &#125;</span><br><span class="line">    <span class="class">maven </span>&#123; url <span class="string">&quot;https://maven.aliyun.com/nexus/content/repositories/jcenter&quot;</span> &#125;</span><br><span class="line">    <span class="comment">// 新增spring插件库</span></span><br><span class="line">    <span class="class">maven </span>&#123; url <span class="string">&quot;https://repo.spring.io/plugins-release&quot;</span> &#125;</span><br><span class="line">    mavenCentral()</span><br><span class="line">    <span class="class">maven </span>&#123; url <span class="string">&quot;https://repo.spring.io/libs-spring-framework-build&quot;</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>点击 <em>Reload Gradle Project</em> 按钮，将自动下载相关依赖进行项目构建。若是出现失败，有可能是网络不好，多尝试几次或者翻墙后再次尝试</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210706154348.png" alt="image-20210706154344453"></p>
<h3 id="验证是否构建成功"><a href="#验证是否构建成功" class="headerlink" title="验证是否构建成功"></a>验证是否构建成功</h3><ol>
<li>打开 <em>ApplicationContext</em></li>
<li>按住 <em>Ctrl + Alt + u</em>，若能显示相关依赖说明构建成功</li>
</ol>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h3 id="首先编译-spring-oxm"><a href="#首先编译-spring-oxm" class="headerlink" title="首先编译 spring-oxm"></a>首先编译 spring-oxm</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210706160227.png" alt="image-20210706160216070"></p>
<h3 id="其次编译-spring-core"><a href="#其次编译-spring-core" class="headerlink" title="其次编译 spring-core"></a>其次编译 spring-core</h3><p>同样是点击 <em>compileTestJava</em></p>
<h3 id="编译整个项目"><a href="#编译整个项目" class="headerlink" title="编译整个项目"></a>编译整个项目</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210706161013.png" alt="image-20210706161001977"></p>
<p>自此，spring 源码阅读环境搭建完成。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Tags Testing Article</title>
    <url>/2021/05/11/Tags-Testing-Article/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/xyq-material/blog/master/LeetCode/20210512131715.png" alt="逸"></p>
]]></content>
      <tags>
        <tag>Testing</tag>
        <tag>Another Tag</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/05/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>/2021/09/19/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="Leetcode-912-排序数组"><a href="#Leetcode-912-排序数组" class="headerlink" title="Leetcode-912.排序数组"></a><a href="https://leetcode-cn.com/problems/sort-an-array/">Leetcode-912.排序数组</a></h2><p>给你一个整数数组 nums，请你将该数组升序排列。</p>
<h3 id="递归版本"><a href="#递归版本" class="headerlink" title="递归版本"></a>递归版本</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sortArray(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums;</span><br><span class="line">        &#125;</span><br><span class="line">        process(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        process(nums, left, mid);</span><br><span class="line">        process(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">        merge(nums, left, right, mid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> mid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] help = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> leftPoint = left;</span><br><span class="line">        <span class="keyword">int</span> rightPoint = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (leftPoint &lt;= mid &amp;&amp; rightPoint &lt;= right) &#123;</span><br><span class="line">            help[i++] = nums[leftPoint] &lt; nums[rightPoint] ? nums[leftPoint++] : nums[rightPoint++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (leftPoint &lt;= mid) &#123;</span><br><span class="line">            help[i++] = nums[leftPoint++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (rightPoint &lt;= right)&#123;</span><br><span class="line">            help[i++] = nums[rightPoint++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; help.length; j++) &#123;</span><br><span class="line">            nums[left + j] = help[j]; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="非递归版本"><a href="#非递归版本" class="headerlink" title="非递归版本"></a>非递归版本</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210920094231.png" alt="image-20210920094229297"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sortArray(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> stepSize = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (nums.length &gt; stepSize) &#123;</span><br><span class="line">            process(nums, stepSize);</span><br><span class="line">            stepSize &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> stepSize)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; nums.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + stepSize - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (mid &gt;= nums.length -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> right = Math.min(mid + stepSize, nums.length - <span class="number">1</span>);</span><br><span class="line">            merge(nums, left, right, mid);</span><br><span class="line">            left += stepSize &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> mid)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span>[] help = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> leftPoint = left;</span><br><span class="line">            <span class="keyword">int</span> rightPoint = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (leftPoint &lt;= mid &amp;&amp; rightPoint &lt;= right) &#123;</span><br><span class="line">                help[i++] = nums[leftPoint] &lt; nums[rightPoint] ? nums[leftPoint++] : nums[rightPoint++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (leftPoint &lt;= mid) &#123;</span><br><span class="line">                help[i++] = nums[leftPoint++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (rightPoint &lt;= right) &#123;</span><br><span class="line">                help[i++] = nums[rightPoint++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; help.length; j++) &#123;</span><br><span class="line">                nums[left + j] = help[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>算法题-二维数组中的查找</title>
    <url>/2021/07/01/%E7%AE%97%E6%B3%95%E9%A2%98-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<p>示例:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">现有矩阵 matrix 如下：</span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">  [1,   4,  7, 11, 15]</span>,</span><br><span class="line"><span class="string">  [2,   5,  8, 12, 19]</span>,</span><br><span class="line"><span class="string">  [3,   6,  9, 16, 22]</span>,</span><br><span class="line"><span class="string">  [10, 13, 14, 17, 24]</span>,</span><br><span class="line"><span class="string">  [18, 21, 23, 26, 30]</span></span><br><span class="line">]</span><br><span class="line">给定 target = <span class="number">5</span>，返回 <span class="literal">true</span>。</span><br><span class="line">给定 target = <span class="number">20</span>，返回 <span class="literal">false</span>。</span><br><span class="line"></span><br><span class="line">限制：</span><br><span class="line"><span class="number">0</span> &lt;= n &lt;= <span class="number">1000</span></span><br><span class="line"><span class="number">0</span> &lt;= m &lt;= <span class="number">1000</span></span><br></pre></td></tr></table></figure>



<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof">https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<span id="more"></span>



<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li>由题可知：每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序</li>
<li>因此可以关注左上和右下两点，以左上顶点为例，若 <em>target</em> 小于 *matrix[i][j]*，则 <em>target</em> 所在区域必在其 <em>左侧（即 i–）</em>，若 <em>target</em> 大于 *matrix[i][j]*，则 <em>target</em> 所在区域必在其 <em>下方（即j++）</em>;</li>
<li>若 <em>索引越界</em> 则表示在 <em>matrix</em> 中找不到对应的 <em>target</em>，返回 <em>false</em></li>
</ol>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = matrix[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= matrix.length || j &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] &lt; target) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>对于从左到右递增且从上到下递增的二维数组的遍历可以考虑从左上或者右下开始</li>
</ul>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>算法题-实现LRU缓存机制</title>
    <url>/2021/05/26/%E7%AE%97%E6%B3%95%E9%A2%98-%E5%AE%9E%E7%8E%B0LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/lru-cache/">leetcode第146题</a></p>
<p>运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制 。<br>实现 LRUCache 类：</p>
<ul>
<li>LRUCache(int capacity) 以正整数作为容量 capacity 初始化 LRU 缓存</li>
<li>int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。</li>
<li>void put(int key, int value) 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">输入</span><br><span class="line">[<span class="string">&quot;LRUCache&quot;</span>, <span class="string">&quot;put&quot;</span>, <span class="string">&quot;put&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;put&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;put&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;get&quot;</span>]</span><br><span class="line">[[<span class="number">2</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">1</span>], [<span class="number">3</span>, <span class="number">3</span>], [<span class="number">2</span>], [<span class="number">4</span>, <span class="number">4</span>], [<span class="number">1</span>], [<span class="number">3</span>], [<span class="number">4</span>]]</span><br><span class="line">输出</span><br><span class="line">[<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">1</span>, <span class="literal">null</span>, <span class="number">-1</span>, <span class="literal">null</span>, <span class="number">-1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">LRUCache lRUCache = <span class="keyword">new</span> <span class="type">LRUCache</span>(<span class="number">2</span>);</span><br><span class="line">lRUCache.put(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">// 缓存是 &#123;1=1&#125;</span></span><br><span class="line">lRUCache.put(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">// 缓存是 &#123;1=1, 2=2&#125;</span></span><br><span class="line">lRUCache.<span class="keyword">get</span>(<span class="number">1</span>);    <span class="comment">// 返回 1</span></span><br><span class="line">lRUCache.put(<span class="number">3</span>, <span class="number">3</span>); <span class="comment">// 该操作会使得关键字 2 作废，缓存是 &#123;1=1, 3=3&#125;</span></span><br><span class="line">lRUCache.<span class="keyword">get</span>(<span class="number">2</span>);    <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">lRUCache.put(<span class="number">4</span>, <span class="number">4</span>); <span class="comment">// 该操作会使得关键字 1 作废，缓存是 &#123;4=4, 3=3&#125;</span></span><br><span class="line">lRUCache.<span class="keyword">get</span>(<span class="number">1</span>);    <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">lRUCache.<span class="keyword">get</span>(<span class="number">3</span>);    <span class="comment">// 返回 3</span></span><br><span class="line">lRUCache.<span class="keyword">get</span>(<span class="number">4</span>);    <span class="comment">// 返回 4</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>使用 map 来实现 get(int key) 方法的 O(1) 时间复杂度</li>
<li>使用一个链表来维护数据的使用时间</li>
<li>当调用 put(int key, int value) 方法时，先无脑往 map 里添加数据，再判断大小是否超过 capacity，超过了就删除链表中最后一个元素</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LRUNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> key;</span><br><span class="line">        <span class="keyword">int</span> value;</span><br><span class="line">        LRUNode prev;</span><br><span class="line">        LRUNode next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LRUNode</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LRUNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">int</span> currentSize = <span class="number">0</span>;</span><br><span class="line">    LRUNode start = <span class="keyword">new</span> LRUNode();</span><br><span class="line">    LRUNode end = <span class="keyword">new</span> LRUNode();</span><br><span class="line">    Map&lt;Integer, LRUNode&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;Integer, LRUNode&gt;(capacity);</span><br><span class="line">        start.next = end;</span><br><span class="line">        end.prev = start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        LRUNode node = map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        remove(node);</span><br><span class="line">        moveToHead(node);</span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        LRUNode node = map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            node = <span class="keyword">new</span> LRUNode(key, value);</span><br><span class="line">            moveToHead(node);</span><br><span class="line">            map.put(key, node);</span><br><span class="line">            currentSize++;</span><br><span class="line">            <span class="keyword">if</span> (currentSize &gt; capacity) &#123;</span><br><span class="line">                map.remove(end.prev.key);</span><br><span class="line">                remove(end.prev);</span><br><span class="line">                currentSize--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.value = value;</span><br><span class="line">            remove(node);</span><br><span class="line">            moveToHead(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveToHead</span><span class="params">(LRUNode node)</span> </span>&#123;</span><br><span class="line">        node.next = start.next;</span><br><span class="line">        node.prev = start;</span><br><span class="line">        start.next.prev = node;</span><br><span class="line">        start.next = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(LRUNode node)</span> </span>&#123;</span><br><span class="line">        node.prev.next = node.next;</span><br><span class="line">        node.next.prev = node.prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LRUCache lruCache = <span class="keyword">new</span> LRUCache(<span class="number">2</span>);</span><br><span class="line">        lruCache.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        lruCache.put(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(lruCache.get(<span class="number">1</span>));</span><br><span class="line">        lruCache.put(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>通过 LRU 如何实现一个 LFU？</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ul>
<li>使用一个 Map&lt;int, LFUNode&gt; 来保存元素</li>
<li>再使用一个 Map&lt;int, LRUNode&gt; 维护使用频率，其中 key 为使用频率，value 为一个维护使用时间的链表</li>
<li>在 LFUNode 中需要存储当前元素的使用频率，在调取 get(int key) 方法时，将其从原链表移除，更新该node的频率并将其添加至新频率所在的链表</li>
</ul>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>算法题-查询给定目录下的文件数量</title>
    <url>/2021/05/19/%E7%AE%97%E6%B3%95%E9%A2%98-%E6%9F%A5%E8%AF%A2%E7%BB%99%E5%AE%9A%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%E6%95%B0%E9%87%8F/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ol>
<li>给定一个文件目录的路径，写一个函数统计这个目录下的所有文件</li>
<li>隐藏文件也算，但是文件夹不算</li>
</ol>
<span id="more"></span>

<h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getFileNumber</span><span class="params">(String folderPath)</span> </span>&#123;</span><br><span class="line">    File root = <span class="keyword">new</span> File(folderPath);</span><br><span class="line">    <span class="keyword">if</span> (!root.isDirectory() &amp;&amp; !root.isFile()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root.isFile()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack&lt;File&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    stack.add(root);</span><br><span class="line">    <span class="keyword">int</span> files = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        File folder = stack.pop();</span><br><span class="line">        <span class="keyword">for</span> (File next : folder.listFiles()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (next.isFile()) &#123;</span><br><span class="line">                files++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (next.isDirectory()) &#123;</span><br><span class="line">                stack.push(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> files;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> mySolution(String path) &#123;</span><br><span class="line">    <span class="keyword">int</span> fileNumber = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(path);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">file</span>.exists()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">file</span>.isFile()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">file</span>.isDirectory()) &#123;</span><br><span class="line">        <span class="keyword">File</span>[] files = <span class="keyword">file</span>.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">File</span> f : files) &#123;</span><br><span class="line">            fileNumber = fileNumber + mySolution(f.getPath());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fileNumber;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>算法题-线段点最多覆盖</title>
    <url>/2021/05/19/%E7%AE%97%E6%B3%95%E9%A2%98-%E7%BA%BF%E6%AE%B5%E7%82%B9%E6%9C%80%E5%A4%9A%E8%A6%86%E7%9B%96/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ol>
<li>给定一个有序数组 arr ，代表坐落在 X 轴上的点</li>
<li>给定一个正数K，代表绳子的长度</li>
<li>返回绳子最多压中几个点，即使绳子边缘处被盖住了也算盖住</li>
</ol>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li>采用左右指针，指针为数组下标</li>
<li>右指针 - 左指针 = 当前覆盖点数</li>
<li>右指针指向的值 - 左指针指向的值代表坐落在 X 轴上的点的跨度，要小于对于绳子长度</li>
</ol>
<h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mySolution</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; arr.length) &#123;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; arr.length &amp;&amp; arr[right] - arr[left] &lt;= l) &#123;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        max = Math.max(max, right - left++);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>系统调用的大致过程</title>
    <url>/2021/05/13/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E5%A4%A7%E8%87%B4%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p>操作系统(operating system)内核中有一组实现系统功能的代码，系统调用就是对上述代码的调用。程序利用系统调用，向OS提出服务请求，由OS代为完成。</p>
<h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><p>中断是一种使CPU中止正在执行的程序而转去处理特殊事件的操作，这些引起中断的事件称为中断源，它们可能是来自外设的输入输出请求，也可能是计算机的一些异常事故或其它内部原因。</p>
<span id="more"></span>

<h2 id="系统调用过程"><a href="#系统调用过程" class="headerlink" title="系统调用过程"></a>系统调用过程</h2><ol>
<li>触发中断：硬件或软件发出中断请求（电信号），要求CPU暂停当前工作转手处理更重要的事情。</li>
<li>查询中断向量表：通过中断传来的参数 <em>int 0x80</em>，在 kernel 里的中断向量表中找到对应方法</li>
<li>切换用户态到内核态：保护现场，切换用户态到内核态</li>
<li>执行对应方法</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>system call</tag>
      </tags>
  </entry>
  <entry>
    <title>线程对象锁被暂用，导致线程无法正常结束问题</title>
    <url>/2021/09/21/%E7%BA%BF%E7%A8%8B%E5%AF%B9%E8%B1%A1%E9%94%81%E8%A2%AB%E6%9A%82%E7%94%A8%EF%BC%8C%E5%AF%BC%E8%87%B4%E7%BA%BF%E7%A8%8B%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E7%BB%93%E6%9D%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>案例出自 <a href="https://ke.qq.com/webcourse/3583073/103725980#taid=11648638505102433&vid=3701925920872990005">马士兵MAC课程</a></p>
<h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t1 start&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;t1 end&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;thread-0&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (t1) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;t2 start&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;t1 isAlive: &quot;</span> + t1.isAlive());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;thread-1&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="案例现象"><a href="#案例现象" class="headerlink" title="案例现象"></a>案例现象</h2><ol>
<li><p>在主线程中创建并启动两个线程，线程 t1 睡眠两秒后打印 “t1 end” 后结束，线程 t2 睡眠五秒后打印了 t1 线程的状态</p>
</li>
<li><p>正常来说，t1 线程睡眠两秒并打印 “t1 end” 后就结束了，因此线程 t2 在打印线程 t1 的存活状态应该为 false</p>
</li>
<li><p>然而实际结果为 true</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210921222459.png" alt="image-20210921222454716"></p>
</li>
</ol>
<h2 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h2><p>​    1. 线程 t1 在结束的时候需要获取自身对象这把锁，而这把锁被线程 t2 通过 synchronized 持有，因此没有结束</p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>在 synchronized 之前加上 *t1.join()*。</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210921223728.png" alt="image-20210921223726569"></p>
<p>此时 t1 结束时，t2 并为持有 t1 对象作为锁，可以正常结束，因此 t2 打印 t1 线程状态是否存活为 false。</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210921223908.png" alt="image-20210921223906639"></p>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>在 synchronized 之后加上 *t1.join()*。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t1 start&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;t1 end&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;thread-0&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (t1) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    t1.join();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;t2 start&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;t1 isAlive: &quot;</span> + t1.isAlive());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;thread-1&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210921224109.png" alt="image-20210921224107485"></p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ol>
<li>当代码运行到 <em>t1.join()</em> 时，t2 持有的 t1 线程的对象锁，并且等待 t1 线程执行完成才能继续往下执行</li>
<li>然而 t1 线程需要获取自身对象锁才能结束，只有当 t1 线程结束了 t2 线程才能继续往下执行释放 t1 线程的对象锁</li>
<li>这段代码为什么可以正常结束而不发生死锁问题呢？</li>
</ol>
<h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>这时我们去关注 <em>join()</em> 方法的源代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    join(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millis)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> base = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> now = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;timeout value is negative&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (millis == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            wait(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            <span class="keyword">long</span> delay = millis - now;</span><br><span class="line">            <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            wait(delay);</span><br><span class="line">            now = System.currentTimeMillis() - base;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们发现，<em>join()</em> 方法的实现最终是通过循环判断当前线程的活跃状态 *isAlive()*，并调用 <em>wait(0)</em> 方法。而 <em>wait(0)</em> 方法是 Object 的方法，他会让当前线程释放它所持有的锁。因此 t1 线程就可以获取其自身的对象锁成功结束。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>multithreading</tag>
      </tags>
  </entry>
  <entry>
    <title>网络IO-tcp是怎么建立通信的</title>
    <url>/2021/05/25/%E7%BD%91%E7%BB%9CIO-tcp%E6%98%AF%E6%80%8E%E4%B9%88%E5%BB%BA%E7%AB%8B%E9%80%9A%E4%BF%A1%E7%9A%84/</url>
    <content><![CDATA[<p>学习马士兵课程-内存与IO，通过 <em>netstat</em>、<em>lsof</em>、<em>tcpdump</em> 观察tcp连接时内核在每一步都就行了什么相应的操作。</p>
<p>本文资料来自于马士兵MAC课程-内存与IO。</p>
<p>通过 netstat、lsof、tcpdump 观察 tcp 连接时内核在每一步都就行了什么相应的操作。</p>
<p>阅读本文，你可以知道在编写 java 代码时的每一步对应内核会产生哪些操作，其探究范围在客户端、服务端代码启动到客户端、服务端建立连接。</p>
<span id="more"></span>

<h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 马士兵教育</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-05-17 05:34</span></span><br><span class="line"><span class="comment"> * BIO  多线程的方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketIOPropertites</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//server socket listen property:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RECEIVE_BUFFER = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SO_TIMEOUT = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> REUSE_ADDR = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BACK_LOG = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//client socket listen property on server endpoint:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> CLI_KEEPALIVE = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> CLI_OOB = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CLI_REC_BUF = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> CLI_REUSE_ADDR = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CLI_SEND_BUF = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> CLI_LINGER = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CLI_LINGER_N = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CLI_TIMEOUT = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> CLI_NO_DELAY = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    StandardSocketOptions.TCP_NODELAY</span></span><br><span class="line"><span class="comment">    StandardSocketOptions.SO_KEEPALIVE</span></span><br><span class="line"><span class="comment">    StandardSocketOptions.SO_LINGER</span></span><br><span class="line"><span class="comment">    StandardSocketOptions.SO_RCVBUF</span></span><br><span class="line"><span class="comment">    StandardSocketOptions.SO_SNDBUF</span></span><br><span class="line"><span class="comment">    StandardSocketOptions.SO_REUSEADDR</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ServerSocket server = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server = <span class="keyword">new</span> ServerSocket();</span><br><span class="line">            server.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9090</span>), BACK_LOG);</span><br><span class="line">            server.setReceiveBufferSize(RECEIVE_BUFFER);</span><br><span class="line">            server.setReuseAddress(REUSE_ADDR);</span><br><span class="line">            server.setSoTimeout(SO_TIMEOUT);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;server up use 9090!&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                System.in.read();  <span class="comment">//分水岭：</span></span><br><span class="line"></span><br><span class="line">                Socket client = server.accept();  <span class="comment">//阻塞的，没有 -1  一直卡着不动  accept(4,</span></span><br><span class="line">                System.out.println(<span class="string">&quot;client port: &quot;</span> + client.getPort());</span><br><span class="line"></span><br><span class="line">                client.setKeepAlive(CLI_KEEPALIVE);</span><br><span class="line">                client.setOOBInline(CLI_OOB);</span><br><span class="line">                client.setReceiveBufferSize(CLI_REC_BUF);</span><br><span class="line">                client.setReuseAddress(CLI_REUSE_ADDR);</span><br><span class="line">                client.setSendBufferSize(CLI_SEND_BUF);</span><br><span class="line">                client.setSoLinger(CLI_LINGER, CLI_LINGER_N);</span><br><span class="line">                client.setSoTimeout(CLI_TIMEOUT);</span><br><span class="line">                client.setTcpNoDelay(CLI_NO_DELAY);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//client.read   //阻塞   没有  -1 0</span></span><br><span class="line">                <span class="keyword">new</span> Thread(</span><br><span class="line">                        () -&gt; &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                InputStream in = client.getInputStream();</span><br><span class="line">                                BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">                                <span class="keyword">char</span>[] data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">                                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">int</span> num = reader.read(data);</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                        System.out.println(<span class="string">&quot;client read some data is :&quot;</span> + num + <span class="string">&quot; val :&quot;</span> + <span class="keyword">new</span> String(data, <span class="number">0</span>, num));</span><br><span class="line">                                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">                                        System.out.println(<span class="string">&quot;client readed nothing!&quot;</span>);</span><br><span class="line">                                        <span class="keyword">continue</span>;</span><br><span class="line">                                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                        System.out.println(<span class="string">&quot;client readed -1...&quot;</span>);</span><br><span class="line">                                        System.in.read();</span><br><span class="line">                                        client.close();</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                ).start();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                server.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 马士兵教育</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-05-17 16:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Socket client = <span class="keyword">new</span> Socket(<span class="string">&quot;192.168.150.11&quot;</span>,<span class="number">9090</span>);</span><br><span class="line"></span><br><span class="line">            client.setSendBufferSize(<span class="number">20</span>);</span><br><span class="line">            client.setTcpNoDelay(<span class="keyword">true</span>);</span><br><span class="line">            OutputStream out = client.getOutputStream();</span><br><span class="line"></span><br><span class="line">            InputStream in = System.in;</span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                String line = reader.readLine();</span><br><span class="line">                <span class="keyword">if</span>(line != <span class="keyword">null</span> )&#123;</span><br><span class="line">                    <span class="keyword">byte</span>[] bb = line.getBytes();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">byte</span> b : bb) &#123;</span><br><span class="line">                        out.write(b);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在服务器端启动但客户端未连接时"><a href="#在服务器端启动但客户端未连接时" class="headerlink" title="在服务器端启动但客户端未连接时"></a>在服务器端启动但客户端未连接时</h2><ul>
<li><p>启动服务器端代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javac SocketIOPropertites.java</span><br><span class="line">java SocketIOPropertites</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时客户端创建了 serverSocket 并绑定了端口9090，阻塞在 System.in.read() 处</p>
</blockquote>
</li>
<li><p>netstat</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-a 显示所有状态的socket  </span><br><span class="line">-n 不做名字解析，不加此参数，80端口会显示成http,127.0.0.1显示成localhost,uid为0显示成root等等    </span><br><span class="line">-e 显示更多信息如用户，inode</span><br><span class="line">-p 显示pid和程序名字</span><br><span class="line">-t 显示tcp链接</span><br><span class="line">-u 显示udp链接</span><br><span class="line">-x 显示unix套接字</span><br></pre></td></tr></table></figure>
<p>通过 netstat 可以看出系统中多了一行监听9090端口的tcp连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -natp</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      7631/sshd           </span><br><span class="line">tcp        0      0 192.168.203.133:22      192.168.203.1:3137      ESTABLISHED 7846/sshd: root@pts </span><br><span class="line">tcp        0      0 192.168.203.133:22      192.168.203.1:7070      ESTABLISHED 15711/sshd: root@pt </span><br><span class="line">tcp        0     36 192.168.203.133:22      192.168.203.1:6022      ESTABLISHED 7942/sshd: root@pts </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      7631/sshd           </span><br><span class="line">tcp6       0      0 :::9090                 :::*                    LISTEN      15853/java</span><br></pre></td></tr></table></figure></li>
<li><p>lsof</p>
<p>通过 lsof 观察到运行java代码的进程出现了一个文件描述符处于Listen状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsof -p 15853</span><br><span class="line">COMMAND   PID USER   FD   TYPE             DEVICE  SIZE/OFF   NODE NAME</span><br><span class="line">...</span><br><span class="line">java    15853 root    6u  IPv6              53184       0t0    TCP *:websm (LISTEN)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="客户端请求连接但服务器端未accept"><a href="#客户端请求连接但服务器端未accept" class="headerlink" title="客户端请求连接但服务器端未accept"></a>客户端请求连接但服务器端未accept</h2><ul>
<li><p>启动客户端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javac SocketClient.java</span><br><span class="line">java SocketClient</span><br></pre></td></tr></table></figure></li>
<li><p>解决异常<em>java.net.NoRouteToHostException: 没有到主机的路由</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure></li>
<li><p>tcpdump</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump -nn -i ens33 port 9090</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on ens33, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">15:00:49.829735 IP 192.168.203.132.37058 &gt; 192.168.203.133.9090: Flags [S], seq 493363808, win 29200, options [mss 1460,sackOK,TS val 14267030 ecr 0,nop,wscale 7], length 0</span><br><span class="line">15:00:49.829764 IP 192.168.203.133.9090 &gt; 192.168.203.132.37058: Flags [S.], seq 2693402151, ack 493363809, win 1152, options [mss 1460,sackOK,TS val 15102986 ecr 14267030,nop,wscale 0], length 0</span><br><span class="line">15:00:49.829979 IP 192.168.203.132.37058 &gt; 192.168.203.133.9090: Flags [.], ack 1, win 229, options [nop,nop,TS val 14267031 ecr 15102986], length 0</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以发现已经发生了三次握手</p>
</blockquote>
</li>
<li><p>netstat</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -natp</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      7631/sshd           </span><br><span class="line">tcp        0      0 192.168.203.133:22      192.168.203.1:3137      ESTABLISHED 7846/sshd: root@pts </span><br><span class="line">tcp        0      0 192.168.203.133:22      192.168.203.1:7070      ESTABLISHED 15711/sshd: root@pt </span><br><span class="line">tcp        0     36 192.168.203.133:22      192.168.203.1:6022      ESTABLISHED 7942/sshd: root@pts </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      7631/sshd           </span><br><span class="line">tcp6       1      0 :::9090                 :::*                    LISTEN      16423/java          </span><br><span class="line">tcp6       0      0 192.168.203.133:9090    192.168.203.132:37058   ESTABLISHED -                   </span><br></pre></td></tr></table></figure>

<blockquote>
<p>在内核层面已经建立起了socket连接，并且当客户端发出信息后，服务器端是已经被接受了，即使这个连接没有分配给任何一个进程</p>
</blockquote>
</li>
</ul>
<h2 id="当服务器端accept后"><a href="#当服务器端accept后" class="headerlink" title="当服务器端accept后"></a>当服务器端accept后</h2><ul>
<li><p>netstat</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -natp</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      7631/sshd           </span><br><span class="line">tcp        0      0 192.168.203.133:22      192.168.203.1:3137      ESTABLISHED 7846/sshd: root@pts </span><br><span class="line">tcp        0      0 192.168.203.133:22      192.168.203.1:7070      ESTABLISHED 15711/sshd: root@pt </span><br><span class="line">tcp        0     36 192.168.203.133:22      192.168.203.1:6022      ESTABLISHED 7942/sshd: root@pts </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      7631/sshd           </span><br><span class="line">tcp6       0      0 :::9090                 :::*                    LISTEN      16423/java          </span><br><span class="line">tcp6       0      0 192.168.203.133:9090    192.168.203.132:37058   ESTABLISHED 16423/java </span><br></pre></td></tr></table></figure>

<blockquote>
<p>该连接已经分配给了对应进程</p>
</blockquote>
</li>
<li><p>lsof</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsof -p 16423</span><br><span class="line">COMMAND   PID USER   FD   TYPE             DEVICE  SIZE/OFF   NODE NAME</span><br><span class="line">...</span><br><span class="line">java    16423 root    7u  IPv6              70977       0t0    TCP CentOS7.6:websm-&gt;192.168.203.132:37058 (ESTABLISHED)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以发现该进程已经被分配了文件描述符</p>
</blockquote>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>socket本质是一个四元组，通过 CIP_CPORT + SIP_SPORT 能确认唯一socket</li>
<li>new ServerSocket() 在内核层面的操作就是开启了一个监听 port 的 socket</li>
<li>当两台服务器之间建立连接时并未将此 socket 分配给进程，即进程并未分配对应的文件描述符 fd，但服务器之间已经可以就行信息传递</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>io</tag>
      </tags>
  </entry>
  <entry>
    <title>网络IO-探究poll和epoll在内核层面的不同</title>
    <url>/2021/06/03/%E7%BD%91%E7%BB%9CIO-%E6%8E%A2%E7%A9%B6poll%E5%92%8Cepoll%E5%9C%A8%E5%86%85%E6%A0%B8%E5%B1%82%E9%9D%A2%E7%9A%84%E4%B8%8D%E5%90%8C/</url>
    <content><![CDATA[<p>代码、资料来自于马士兵MAC课程。</p>
<p>本文通过 strace 命令来监控使用 poll 和 epoll 不同模型的同一代码在内核方法调用上的不同。</p>
<p>阅读本文，你将切实体会到 poll 和 epoll 的不同实现方式。对于两种模型的介绍推荐阅读：<a href="https://eitan-blog.github.io/2021/05/26/%E7%BD%91%E7%BB%9CIO-IO%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%BC%94%E5%8F%98/">网络IO-IO模型的演变</a>。</p>
<h2 id="前置：如何用同一段代码使用-poll-和-epoll-两种不同模型"><a href="#前置：如何用同一段代码使用-poll-和-epoll-两种不同模型" class="headerlink" title="前置：如何用同一段代码使用 poll 和 epoll 两种不同模型"></a>前置：如何用同一段代码使用 poll 和 epoll 两种不同模型</h2><p>代码 <em>Selector selector = Selector.open();</em> 在 poll 和 epoll 模型都支持的情况下优先选择 epoll。</p>
<p>可以通过 JVM 参数 <em>-Djava.nio.channels.spi.SelectorProvider=sun.nio.ch.PollSelectorProvider</em> 手动选择 poll 模型。</p>
<span id="more"></span>



<h2 id="代码-SocketMultiplexingSingleThread"><a href="#代码-SocketMultiplexingSingleThread" class="headerlink" title="代码 - SocketMultiplexingSingleThread"></a>代码 - SocketMultiplexingSingleThread</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketMultiplexingSingleThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServerSocketChannel server;</span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port = <span class="number">9090</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立监听，并注册进 selector</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server = ServerSocketChannel.open();</span><br><span class="line">            server.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            server.bind(<span class="keyword">new</span> InetSocketAddress(port));</span><br><span class="line"></span><br><span class="line">            selector = Selector.open();</span><br><span class="line">            server.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        initServer();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器初始化完成...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                Set&lt;SelectionKey&gt; keys = selector.keys();</span><br><span class="line">                System.out.println(keys.size() + <span class="string">&quot; size&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (selector.select() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">                    Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                        SelectionKey key = iterator.next();</span><br><span class="line">                        iterator.remove();</span><br><span class="line">                        <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                            acceptHandler(key);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                            readHandler(key);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、建立 socket</span></span><br><span class="line"><span class="comment">     * 2、将指向这个 socket 注册进 select</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">acceptHandler</span><span class="params">(SelectionKey key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel();</span><br><span class="line">            SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">            socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">8192</span>);</span><br><span class="line">            socketChannel.register(selector, SelectionKey.OP_READ, buffer);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;-------------------------------------------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;新客户端：&quot;</span> + socketChannel.getRemoteAddress());</span><br><span class="line">            System.out.println(<span class="string">&quot;-------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readHandler</span><span class="params">(SelectionKey key)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;read handler...&quot;</span>);</span><br><span class="line">        SocketChannel client = (SocketChannel) key.channel();</span><br><span class="line">        ByteBuffer buffer = (ByteBuffer) key.attachment();</span><br><span class="line">        buffer.clear();</span><br><span class="line">        <span class="keyword">int</span> read = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                read = client.read(buffer);</span><br><span class="line">                <span class="keyword">if</span> (read &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    buffer.flip();</span><br><span class="line">                    <span class="keyword">while</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">                        client.write(buffer);</span><br><span class="line">                    &#125;</span><br><span class="line">                    buffer.clear();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (read == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    client.close();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SocketMultiplexingSingleThread socketMultiplexingSingleThread = <span class="keyword">new</span> SocketMultiplexingSingleThread();</span><br><span class="line">        socketMultiplexingSingleThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="用-strace-追踪两种模型"><a href="#用-strace-追踪两种模型" class="headerlink" title="用 strace 追踪两种模型"></a>用 strace 追踪两种模型</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">strace -ff -o poll java -Djava.nio.channels.spi.SelectorProvider=sun.nio.ch.PollSelectorProvider SocketMultiplexingSingleThread</span><br><span class="line"></span><br><span class="line">strace -ff -o epoll java SocketMultiplexingSingleThread</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 nc 命令连接 java 代码并发送一条数据</span></span><br><span class="line">nc 192.168.203.133 9090</span><br></pre></td></tr></table></figure>

<p>这时在文件架下将会出现以下文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-rw-r--r--. 1 root root  13893 6月   3 13:27 epoll.8306</span><br><span class="line">-rw-r--r--. 1 root root 227300 6月   3 13:27 epoll.8307</span><br><span class="line">-rw-r--r--. 1 root root  18207 6月   3 13:27 epoll.8308</span><br><span class="line">-rw-r--r--. 1 root root   1005 6月   3 13:27 epoll.8309</span><br><span class="line">-rw-r--r--. 1 root root   1128 6月   3 13:27 epoll.8310</span><br><span class="line">-rw-r--r--. 1 root root   2166 6月   3 13:27 epoll.8311</span><br><span class="line">-rw-r--r--. 1 root root  11073 6月   3 13:27 epoll.8312</span><br><span class="line">-rw-r--r--. 1 root root   8025 6月   3 13:27 epoll.8313</span><br><span class="line">-rw-r--r--. 1 root root   1004 6月   3 13:27 epoll.8314</span><br><span class="line">-rw-r--r--. 1 root root 182136 6月   3 13:27 epoll.8315</span><br><span class="line">-rw-r--r--. 1 root root   1925 6月   3 13:27 epoll.8317</span><br><span class="line">-rw-r--r--. 1 root root  13932 6月   3 13:26 poll.8292</span><br><span class="line">-rw-r--r--. 1 root root 213812 6月   3 13:26 poll.8293</span><br><span class="line">-rw-r--r--. 1 root root  11598 6月   3 13:26 poll.8294</span><br><span class="line">-rw-r--r--. 1 root root   1005 6月   3 13:26 poll.8295</span><br><span class="line">-rw-r--r--. 1 root root   1128 6月   3 13:26 poll.8296</span><br><span class="line">-rw-r--r--. 1 root root   2166 6月   3 13:26 poll.8297</span><br><span class="line">-rw-r--r--. 1 root root   7734 6月   3 13:26 poll.8298</span><br><span class="line">-rw-r--r--. 1 root root   4650 6月   3 13:26 poll.8299</span><br><span class="line">-rw-r--r--. 1 root root   1004 6月   3 13:26 poll.8300</span><br><span class="line">-rw-r--r--. 1 root root  76215 6月   3 13:26 poll.8301</span><br><span class="line">-rw-r--r--. 1 root root   1925 6月   3 13:26 poll.8303</span><br><span class="line">-rw-r--r--. 1 root root   3574 6月   3 12:48 SocketMultiplexingSingleThread.class</span><br><span class="line">-rw-r--r--. 1 root root   3773 6月   3 11:43 SocketMultiplexingSingleThread.java</span><br></pre></td></tr></table></figure>

<p>我们观察 <em>poll.8293</em> 和 <em>epoll.8307</em> 这两个文件。</p>
<h3 id="poll-8293-的内核方法调用"><a href="#poll-8293-的内核方法调用" class="headerlink" title="poll.8293 的内核方法调用"></a>poll.8293 的内核方法调用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ServerSocketChannel.open()</span></span><br><span class="line">socket(AF_INET6, SOCK_STREAM, IPPROTO_IP) = 5</span><br><span class="line"><span class="meta">#</span><span class="bash"> server.configureBlocking(<span class="literal">false</span>)</span></span><br><span class="line">fcntl(5, F_SETFL, O_RDWR|O_NONBLOCK)    = 0</span><br><span class="line">bind(5, &#123;sa_family=AF_INET6, sin6_port=htons(9090), inet_pton(AF_INET6, &quot;::&quot;, &amp;sin6_addr), sin6_flowinfo=htonl(0), sin6_scope_id=0&#125;, 28) = 0</span><br><span class="line">listen(5, 50)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> selector.select() 这里就是把想要监听的 fds 全传给内核，让内核进行遍历返回可用的 fd</span></span><br><span class="line">poll([&#123;fd=6, events=POLLIN&#125;, &#123;fd=5, events=POLLIN&#125;], 2, -1) = 1 ([&#123;fd=5, revents=POLLIN&#125;])</span><br><span class="line"><span class="meta">#</span><span class="bash"> SocketChannel socketChannel = serverSocketChannel.accept()</span></span><br><span class="line">accept(5, &#123;sa_family=AF_INET6, sin6_port=htons(35202), inet_pton(AF_INET6, &quot;::ffff:192.168.203.133&quot;, &amp;sin6_addr), sin6_flowinfo=htonl(0), sin6_scope_id=0&#125;, [28]) = 8</span><br><span class="line"><span class="meta">#</span><span class="bash"> socketChannel.configureBlocking(<span class="literal">false</span>)</span></span><br><span class="line">fcntl(8, F_SETFL, O_RDWR|O_NONBLOCK)    = 0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次进行 selector.select() 时也就会把 fd8 也放入参数当中监听是否有数据</span></span><br><span class="line">poll([&#123;fd=6, events=POLLIN&#125;, &#123;fd=5, events=POLLIN&#125;, &#123;fd=8, events=POLLIN&#125;], 3, -1) = 1 ([&#123;fd=8, revents=POLLIN&#125;])</span><br></pre></td></tr></table></figure>

<h3 id="epoll-8307-的内核方法调用"><a href="#epoll-8307-的内核方法调用" class="headerlink" title="epoll.8307 的内核方法调用"></a>epoll.8307 的内核方法调用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ServerSocketChannel.open()</span></span><br><span class="line">socket(AF_INET6, SOCK_STREAM, IPPROTO_IP) = 5</span><br><span class="line"><span class="meta">#</span><span class="bash"> server.configureBlocking(<span class="literal">false</span>)</span></span><br><span class="line">fcntl(5, F_SETFL, O_RDWR|O_NONBLOCK)    = 0</span><br><span class="line">bind(5, &#123;sa_family=AF_INET6, sin6_port=htons(9090), inet_pton(AF_INET6, &quot;::&quot;, &amp;sin6_addr), sin6_flowinfo=htonl(0), sin6_scope_id=0&#125;, 28) = 0</span><br><span class="line">listen(5, 50)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> selector = Selector.open();</span></span><br><span class="line">epoll_create(256)                       = 8</span><br><span class="line"><span class="meta">#</span><span class="bash"> server.register(selector, SelectionKey.OP_ACCEPT);</span></span><br><span class="line">epoll_ctl(8, EPOLL_CTL_ADD, 5, &#123;EPOLLIN, &#123;u32=5, u64=9512930623052840965&#125;&#125;) = 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> selector.select()</span></span><br><span class="line">epoll_wait(8, [&#123;EPOLLIN, &#123;u32=5, u64=9512930623052840965&#125;&#125;], 4096, -1) = 1</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>io</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop（一）：集群搭建</title>
    <url>/2022/05/08/Hadoop%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>本文为学习笔记，对应视频教程来自<a href="https://www.bilibili.com/video/BV1Qp4y1n7EN">尚硅谷大数据Hadoop 3.x</a></p>
<h3 id="模板虚拟机环境准备"><a href="#模板虚拟机环境准备" class="headerlink" title="模板虚拟机环境准备"></a>模板虚拟机环境准备</h3><h4 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h4><p>IP地址192.168.203.100、主机名称hadoop100、内存4G、硬盘50G</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 一、编辑静态 ip 地址</span></span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改</span></span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加</span></span><br><span class="line">IPADDR=&quot;192.168.203.100&quot;</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;</span><br><span class="line">GATEWAY=&quot;192.168.203.2&quot;</span><br><span class="line">DNS1=&quot;114.114.114.114&quot;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="安装必要软件"><a href="#安装必要软件" class="headerlink" title="安装必要软件"></a>安装必要软件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y epel-release net-tools vim</span><br></pre></td></tr></table></figure>
<p>注：Extra Packages for Enterprise Linux是为“红帽系”的操作系统提供额外的软件包，适用于RHEL、CentOS和Scientific Linux。相当于是一个软件仓库，大多数rpm包在官方 repository 中是找不到的）</p>
<h4 id="关闭防火墙-，关闭防火墙开机自启"><a href="#关闭防火墙-，关闭防火墙开机自启" class="headerlink" title="关闭防火墙 ，关闭防火墙开机自启"></a>关闭防火墙 ，关闭防火墙开机自启</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>

<h4 id="创建-eitan-用户"><a href="#创建-eitan-用户" class="headerlink" title="创建 eitan 用户"></a>创建 eitan 用户</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"># 添加 eitan 用户并设置密码</span><br><span class="line">useradd eitan</span><br><span class="line">passwd eitan</span><br><span class="line"></span><br><span class="line"># 为 eitan 用户添加权限</span><br><span class="line">vim /etc/sudoers</span><br><span class="line">## Allow root <span class="keyword">to</span> run <span class="keyword">any</span> commands anywhere</span><br><span class="line">root 	<span class="keyword">ALL</span>=(<span class="keyword">ALL</span>) 		<span class="keyword">ALL</span></span><br><span class="line">## Allows people <span class="keyword">in</span> <span class="keyword">group</span> wheel <span class="keyword">to</span> run <span class="keyword">all</span> commands</span><br><span class="line">%wheel	<span class="keyword">ALL</span>=(<span class="keyword">ALL</span>) 		<span class="keyword">ALL</span></span><br><span class="line">eitan   <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>)       NOPASSWD:<span class="keyword">ALL</span></span><br></pre></td></tr></table></figure>

<p>注意：atguigu 这一行不要直接放到 root 行下面，因为所有用户都属于 wheel 组，你先配置了 atguigu 具有免密功能，但是程序执行到%wheel 行时，该功能又被覆盖回需要密码。所以 atguigu 要放到%wheel 这行下面。</p>
<h4 id="在-opt-目录下创建文件夹"><a href="#在-opt-目录下创建文件夹" class="headerlink" title="在/opt 目录下创建文件夹"></a>在/opt 目录下创建文件夹</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /opt/module</span><br><span class="line">mkdir /opt/software</span><br><span class="line"></span><br><span class="line">chown eitan:eitan /opt/module</span><br><span class="line">chown eitan:eitan /opt/software</span><br></pre></td></tr></table></figure>

<h3 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h3><h4 id="利用模板机-hadoop100-，克隆三台虚拟机：hadoop102、hadoop103、hadoop104"><a href="#利用模板机-hadoop100-，克隆三台虚拟机：hadoop102、hadoop103、hadoop104" class="headerlink" title="利用模板机 hadoop100 ，克隆三台虚拟机：hadoop102、hadoop103、hadoop104"></a>利用模板机 hadoop100 ，克隆三台虚拟机：hadoop102、hadoop103、hadoop104</h4><h4 id="修改克隆机-IP，以-hadoop102-为例"><a href="#修改克隆机-IP，以-hadoop102-为例" class="headerlink" title="修改克隆机 IP，以 hadoop102 为例"></a>修改克隆机 IP，以 hadoop102 为例</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 一、编辑静态 ip 地址</span></span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改</span></span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加</span></span><br><span class="line">IPADDR=&quot;192.168.203.102&quot;</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;</span><br><span class="line">GATEWAY=&quot;192.168.203.2&quot;</span><br><span class="line">DNS1=&quot;114.114.114.114&quot;</span><br></pre></td></tr></table></figure>

<h4 id="修改克隆机主机名"><a href="#修改克隆机主机名" class="headerlink" title="修改克隆机主机名"></a>修改克隆机主机名</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改主机名称</span></span><br><span class="line">vim /etc/hostname</span><br><span class="line">hadoop102</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置 Linux 克隆机主机名称映射 hosts 文件，打开/etc/hosts</span></span><br><span class="line">vim /etc/hosts</span><br><span class="line">192.168.203.100 hadoop100</span><br><span class="line">192.168.203.101 hadoop101</span><br><span class="line">192.168.203.102 hadoop102</span><br><span class="line">192.168.203.103 hadoop103</span><br><span class="line">192.168.203.104 hadoop104</span><br><span class="line">192.168.203.105 hadoop105</span><br><span class="line">192.168.203.106 hadoop106</span><br><span class="line">192.168.203.107 hadoop107</span><br><span class="line">192.168.203.108 hadoop108</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改 windows 的主机映射文件 （hosts 文件）</span></span><br><span class="line">C:\Windows\System32\drivers\etc\hosts</span><br></pre></td></tr></table></figure>

<h3 id="安装-Hadoop"><a href="#安装-Hadoop" class="headerlink" title="安装 Hadoop"></a>安装 Hadoop</h3><h4 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h4><ol>
<li><p>卸载现有 JDK</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep -i java | xargs -n1 rpm -e --nodeps</span><br></pre></td></tr></table></figure>

<blockquote>
<p>rpm qa：查询所安装的所有rpm软件包</p>
<p>grep -i：忽略大小写</p>
<p>xargs -n1：表示每次只传递一个参数</p>
<p>rpm -e –nodeps：强制卸载软件</p>
</blockquote>
</li>
<li><p>用 XShell 传输 工具将 JDK 导入到 opt 目录下面的 software 文件夹下面</p>
</li>
<li><p>解压 JDK 到 /opt/module 目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt/software</span><br><span class="line">tar -zxvf jdk-8u212-linux-x64.tar.gz -C /opt/module/</span><br></pre></td></tr></table></figure></li>
<li><p>配置 JDK 环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 新建/etc/profile.d/my_env.sh文件</span></span><br><span class="line">sudo vim /etc/profile.d/my_env.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">JAVA_HOME</span></span><br><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_212</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">source</span>一下/etc/profile文件，让新的环境变量PATH生效</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li>
<li><p>测试 JDK 是否 安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="安装-Hadoop（以-hadoop102-为例）"><a href="#安装-Hadoop（以-hadoop102-为例）" class="headerlink" title="安装 Hadoop（以 hadoop102 为例）"></a>安装 Hadoop（以 hadoop102 为例）</h4><ol>
<li><p>用 XShell 文件传输工具将 hadoop-3.3.2.tar.gz 导入到opt目录下面的 software 文件夹下面</p>
</li>
<li><p>解压安装文件到/opt/module下面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt/software</span><br><span class="line">tar -zxvf hadoop-3.3.2.tar.gz -C /opt/module/</span><br></pre></td></tr></table></figure></li>
<li><p>将Hadoop添加到环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开/etc/profile.d/my_env.sh文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">HADOOP_HOME</span></span><br><span class="line">export HADOOP_HOME=/opt/module/hadoop-3.3.2</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">source</span>一下/etc/profile文件，让新的环境变量PATH生效</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li>
<li><p>测试是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop version</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Fully-Distributed-Mode"><a href="#Fully-Distributed-Mode" class="headerlink" title="Fully-Distributed Mode"></a>Fully-Distributed Mode</h3><h4 id="编写集群分发脚本xsync"><a href="#编写集群分发脚本xsync" class="headerlink" title="编写集群分发脚本xsync"></a>编写集群分发脚本xsync</h4><h5 id="scp-secure-copy-安全-拷贝"><a href="#scp-secure-copy-安全-拷贝" class="headerlink" title="scp (secure copy) 安全 拷贝"></a>scp (secure copy) 安全 拷贝</h5><ol>
<li><p>基本语法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r $pdir/$fname $user@$host:$pdir/$fname</span><br><span class="line">命令 递归 要拷贝的文件路径/名称 目的地用户@主机:目的地路径/名称</span><br></pre></td></tr></table></figure></li>
<li><p>案例实操</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在 hadoop103 上操作，将 hadoop102 中/opt/module 目录下所有目录拷贝到 hadoop104 上</span></span><br><span class="line">scp -r atguigu@hadoop102:/opt/module/* atguigu@hadoop104:/opt/module</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="rsync-远程-同步-工具"><a href="#rsync-远程-同步-工具" class="headerlink" title="rsync 远程 同步 工具"></a>rsync 远程 同步 工具</h5><p>rsync主要用于备份和镜像。具有速度快、避免复制相同内容和支持符号链接的优点。</p>
<p>rsync和scp区别：用rsync做文件的复制要比scp的速度快，rsync只对差异文件做更新。scp是把所有文件都复制过去。</p>
<ol>
<li><p>基本语法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync    -av       $pdir/$fname             $user@$host:$pdir/$fname</span><br><span class="line">命令   选项参数   要拷贝的文件路径/名称   目的地用户@主机:目的地路径/名称</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>归档拷贝</td>
</tr>
<tr>
<td>-v</td>
<td>显示复制过程</td>
</tr>
</tbody></table>
</li>
<li><p>案例实操</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除 hadoop103 中 /opt/module/hadoop-3.3.2/README.txt</span></span><br><span class="line">[eitan@hadoop103 hadoop-3.3.2]$ rm -rf README.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 同步 hadoop102 中的 /opt/module/hadoop-3.3.2 到 hadoop103</span></span><br><span class="line">[eitan@hadoop103 hadoop-3.3.2]$ rsync -av eitan@hadoop102:/opt/module/hadoop-3.3.2/ ../hadoop-3.3.2</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="xsync集群分发脚本"><a href="#xsync集群分发脚本" class="headerlink" title="xsync集群分发脚本"></a>xsync集群分发脚本</h5><ol>
<li><p>需求：循环复制文件到所有节点的相同目录下</p>
</li>
<li><p>需求分析：</p>
<ol>
<li>rsync 命令原始拷贝：rsync -av /opt/module atguigu@hadoop103:/opt/</li>
<li>期望脚本命令：xsync 要同步的文件名称</li>
<li>期望脚本在任何路径都能使用（脚本放在声明了全局环境变量的路径）</li>
</ol>
</li>
<li><p>脚本实现</p>
<ol>
<li><p>在 /home/atguigu/bin 目录下创建 xsync 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ mkdir bin</span><br><span class="line">[eitan@hadoop102 ~]$ vim bin/xsync</span><br></pre></td></tr></table></figure></li>
<li><p>在文件中编写如下代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1.判断参数个数</span></span><br><span class="line">if [ $# -lt 1 ]</span><br><span class="line">then</span><br><span class="line">    echo Not Enough Arguement!</span><br><span class="line">    exit;</span><br><span class="line">fi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.遍历集群所有机器</span></span><br><span class="line">for host in hadoop102 hadoop103 hadoop104</span><br><span class="line">do</span><br><span class="line">    echo ================ $host ================</span><br><span class="line">    # 3.遍历所有参数，依次同步</span><br><span class="line">    for file in $@</span><br><span class="line">    do</span><br><span class="line">        # 4.判断文件是否存在</span><br><span class="line">        if [ -e $file ]</span><br><span class="line">        then</span><br><span class="line">            # 5.获取父目录</span><br><span class="line">            pdir=$(cd -P $(dirname $file); pwd)</span><br><span class="line">            # 6.获取当前文件的名称</span><br><span class="line">            fname=$(basename $file)</span><br><span class="line">            ssh $host &quot;mkdir -p $pdir&quot;</span><br><span class="line">            rsync -av $pdir/$fname $host:$pdir</span><br><span class="line">        else</span><br><span class="line">            echo $file does not exists!</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li>
<li><p>修改脚本 xsync 具有执行权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ chmod +x bin/xsync</span><br></pre></td></tr></table></figure></li>
<li><p>测试脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ ./bin/xsync ./bin/xsync</span><br></pre></td></tr></table></figure></li>
<li><p>添加环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ sudo vim /etc/profile.d/my_env.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">xsync</span></span><br><span class="line">export XSYNC_HOME=/home/eitan</span><br><span class="line">export PATH=$PATH:$XSYNC_HOME/bin</span><br><span class="line"></span><br><span class="line">[eitan@hadoop102 ~]$ source /etc/profile</span><br></pre></td></tr></table></figure></li>
<li><p>同步环境变量配置（root所有者）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ sudo ./bin/xsync /etc/profile.d/my_env.sh </span><br></pre></td></tr></table></figure>

<p>注意：如果用了 sudo，那么 xsync 一定要给它的路径补全。</p>
</li>
</ol>
</li>
</ol>
<h4 id="SSH无密登录配置"><a href="#SSH无密登录配置" class="headerlink" title="SSH无密登录配置"></a>SSH无密登录配置</h4><ol>
<li><p>生成公钥和私钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></li>
<li><p>将公钥拷贝到要免密登录的目标机器上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ ssh-copy-id hadoop102</span><br><span class="line">[eitan@hadoop102 ~]$ ssh-copy-id hadoop103</span><br><span class="line">[eitan@hadoop102 ~]$ ssh-copy-id hadoop104</span><br></pre></td></tr></table></figure></li>
<li><p>~/.ssh 的文件功能解释</p>
<table>
<thead>
<tr>
<th>文件</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>known_hosts</td>
<td>记录ssh访问过计算机的公钥（public key）</td>
</tr>
<tr>
<td>id_rsa</td>
<td>生成的私钥</td>
</tr>
<tr>
<td>id_rsa.pub</td>
<td>生成的公钥</td>
</tr>
<tr>
<td>authorized_keys</td>
<td>存放授权过的无密登录服务器公钥</td>
</tr>
</tbody></table>
</li>
</ol>
<h4 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h4><h5 id="集群规划部署"><a href="#集群规划部署" class="headerlink" title="集群规划部署"></a>集群规划部署</h5><ol>
<li>NameNode 和 SecondaryNameNode 不要安装在同一台服务器</li>
<li>ResourceManager 也很消耗内存，不要和 NameNode、SecondaryNameNode 配置在同一台机器上</li>
</ol>
<table>
<thead>
<tr>
<th></th>
<th>hadoop102</th>
<th>hadoop103</th>
<th>hadoop104</th>
</tr>
</thead>
<tbody><tr>
<td>HDFS</td>
<td>NameNode<br />DataNode</td>
<td><br />DataNode</td>
<td>SecondaryNameNode<br />DataNode</td>
</tr>
<tr>
<td>YARN</td>
<td><br />NodeManager</td>
<td>ResourceManager<br />NodeManager</td>
<td><br />NodeManager</td>
</tr>
</tbody></table>
<h5 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h5><p>Hadoop 配置文件分两类：默认配置文件和自定义配置文件，只有用户想修改某一默认配置值时，才需要修改自定义配置文件，更改相应属性值。</p>
<ol>
<li><p>默认配置文件</p>
<table>
<thead>
<tr>
<th>要获取的默认文件</th>
<th>文件存放在 Hadoop 的 jar 包中的位置</th>
</tr>
</thead>
<tbody><tr>
<td>[core-default.xml]</td>
<td>hadoop-common-3.3.2.jar/core-default.xml</td>
</tr>
<tr>
<td>[hdfs-default.xml]</td>
<td>hadoop-hdfs-3.3.2.jar/hdfs-default.xml</td>
</tr>
<tr>
<td>[yarn-default.xml]</td>
<td>hadoop-yarn-common-3.3.2.jar/yarn-default.xml</td>
</tr>
<tr>
<td>[mapred-default.xml]</td>
<td>hadoop-mapreduce-client-core-3.3.2.jar/mapred-default.xml</td>
</tr>
</tbody></table>
</li>
<li><p>自定义配置文件</p>
<p>core-site.xml 、hdfs-site.xml 、yarn-site.xml 、mapred-site.xml 四个配置文件存放在 $HADOOP_HOME/etc/hadoop 这个路径上，用户可以根据项目需求重新进行修改配置。</p>
</li>
<li><p>配置集群</p>
<p>核心配置文件 core-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定NameNode的地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop102:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定hadoop数据的存储目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/module/hadoop-3.3.2/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置HDFS网页登录使用的静态用户为eitan --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.http.staticuser.user<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>eitan<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>HDFS配置文件 hdfs-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nn web端访问地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop102:9870<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 2nn web端访问地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop104:9868<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>YARN配置文件 yarn-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定MR走shuffle --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定ResourceManager的地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop103<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 环境变量的继承 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.env-whitelist<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>MapReduce配置文件 mapred-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定MapReduce程序运行在Yarn上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>分发到其他节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 hadoop]$ xsync ../hadoop</span><br><span class="line">================ hadoop102 ================</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 1,007 bytes  received 18 bytes  683.33 bytes/sec</span><br><span class="line">total size is 111,939  speedup is 109.21</span><br><span class="line">================ hadoop103 ================</span><br><span class="line">sending incremental file list</span><br><span class="line">hadoop/</span><br><span class="line">hadoop/core-site.xml</span><br><span class="line">hadoop/hdfs-site.xml</span><br><span class="line">hadoop/mapred-site.xml</span><br><span class="line">hadoop/yarn-site.xml</span><br><span class="line"></span><br><span class="line">sent 3,628 bytes  received 139 bytes  7,534.00 bytes/sec</span><br><span class="line">total size is 111,939  speedup is 29.72</span><br><span class="line">================ hadoop104 ================</span><br><span class="line">sending incremental file list</span><br><span class="line">hadoop/</span><br><span class="line">hadoop/core-site.xml</span><br><span class="line">hadoop/hdfs-site.xml</span><br><span class="line">hadoop/mapred-site.xml</span><br><span class="line">hadoop/yarn-site.xml</span><br><span class="line"></span><br><span class="line">sent 3,628 bytes  received 139 bytes  7,534.00 bytes/sec</span><br><span class="line">total size is 111,939  speedup is 29.72</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="群起集群"><a href="#群起集群" class="headerlink" title="群起集群"></a>群起集群</h4><h5 id="配置-workers"><a href="#配置-workers" class="headerlink" title="配置 workers"></a>配置 workers</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ vim /opt/module/hadoop-3.3.2/etc/hadoop/workers</span><br><span class="line">hadoop102</span><br><span class="line">hadoop103</span><br><span class="line">hadoop104</span><br><span class="line"><span class="meta">#</span><span class="bash"> 同步到其他节点</span></span><br><span class="line">[eitan@hadoop102 ~]$ xsync /opt/module/hadoop-3.3.2/etc/hadoop/workers</span><br></pre></td></tr></table></figure>

<h5 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h5><ol>
<li><p>如果集群是第一次启动，需要在hadoop102节点格式化NameNode（注意：格式化NameNode，会产生新的集群id，导致NameNode和DataNode的集群id不一致，集群找不到已往数据。如果集群在运行过程中报错，需要重新格式化NameNode的话，一定要先停止namenode和datanode进程，并且要删除所有机器的data和logs目录，然后再进行格式化。）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hdfs namenode -format</span><br></pre></td></tr></table></figure></li>
<li><p>启动HDFS</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 hadoop-3.3.2]$ ./sbin/start-dfs.sh</span><br></pre></td></tr></table></figure></li>
<li><p>在配置了ResourceManager的节点（hadoop103）启动YARN</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop103 hadoop-3.3.2]$ ./sbin/start-yarn.sh</span><br></pre></td></tr></table></figure></li>
<li><p>Web端查看HDFS的NameNode</p>
<ol>
<li>浏览器中输入：<a href="http://hadoop102:9870/">http://hadoop102:9870</a></li>
<li>查看HDFS上存储的数据信息</li>
</ol>
</li>
<li><p>Web端查看YARN的ResourceManager</p>
<ol>
<li>浏览器中输入：<a href="http://hadoop103:8088/">http://hadoop103:8088</a></li>
<li>查看YARN上运行的Job信息</li>
</ol>
</li>
</ol>
<h5 id="集群基本测试"><a href="#集群基本测试" class="headerlink" title="集群基本测试"></a>集群基本测试</h5><ol>
<li><p>上传文件到集群</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">[eitan@hadoop102 ~]$ hadoop fs -mkdir /wcinput</span><br><span class="line"><span class="comment"># 上传文件</span></span><br><span class="line">[eitan@hadoop102 ~]$ hadoop fs -put .<span class="regexp">/documents/</span>txt<span class="regexp">/helloword.txt /</span>wcinput</span><br><span class="line">[eitan@hadoop102 ~]$ hadoop fs -put <span class="regexp">/opt/</span>software<span class="regexp">/jdk-8u212-linux-x64.tar.gz /</span></span><br></pre></td></tr></table></figure></li>
<li><p>上传文件后查看文件存放位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 subdir0]$ pwd</span><br><span class="line">/opt/module/hadoop-3.3.2/data/dfs/data/current/BP-274625420-192.168.203.102-1652060367534/current/finalized/subdir0/subdir0</span><br></pre></td></tr></table></figure></li>
<li><p>拼接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 subdir0]$ ll</span><br><span class="line">总用量 193800</span><br><span class="line">-rw-rw-r--. 1 eitan eitan   1888910 5月   9 10:32 blk_1073741825</span><br><span class="line">-rw-rw-r--. 1 eitan eitan     14767 5月   9 10:32 blk_1073741825_1001.meta</span><br><span class="line">-rw-rw-r--. 1 eitan eitan 134217728 5月   9 10:35 blk_1073741826</span><br><span class="line">-rw-rw-r--. 1 eitan eitan   1048583 5月   9 10:35 blk_1073741826_1002.meta</span><br><span class="line">-rw-rw-r--. 1 eitan eitan  60795424 5月   9 10:35 blk_1073741827</span><br><span class="line">-rw-rw-r--. 1 eitan eitan    474975 5月   9 10:35 blk_1073741827_1003.meta</span><br><span class="line">[eitan@hadoop102 subdir0]$ cat blk_1073741826 &gt;&gt; temp.gz.tar</span><br><span class="line">[eitan@hadoop102 subdir0]$ cat blk_1073741827 &gt;&gt; temp.gz.tar</span><br><span class="line">[eitan@hadoop102 subdir0]$ tar -zxf temp.gz.tar </span><br><span class="line">[eitan@hadoop102 subdir0]$ ll</span><br><span class="line">总用量 384248</span><br><span class="line">-rw-rw-r--. 1 eitan eitan   1888910 5月   9 10:32 blk_1073741825</span><br><span class="line">-rw-rw-r--. 1 eitan eitan     14767 5月   9 10:32 blk_1073741825_1001.meta</span><br><span class="line">-rw-rw-r--. 1 eitan eitan 134217728 5月   9 10:35 blk_1073741826</span><br><span class="line">-rw-rw-r--. 1 eitan eitan   1048583 5月   9 10:35 blk_1073741826_1002.meta</span><br><span class="line">-rw-rw-r--. 1 eitan eitan  60795424 5月   9 10:35 blk_1073741827</span><br><span class="line">-rw-rw-r--. 1 eitan eitan    474975 5月   9 10:35 blk_1073741827_1003.meta</span><br><span class="line">drwxr-xr-x. 7 eitan eitan      4096 4月   2 2019 jdk1.8.0_212</span><br><span class="line">-rw-rw-r--. 1 eitan eitan 195013152 5月   9 10:42 temp.gz.tar</span><br></pre></td></tr></table></figure></li>
<li><p>下载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop104 ~]$ hadoop fs -get /jdk-8u212-linux-x64.tar.gz ./</span><br></pre></td></tr></table></figure></li>
<li><p>执行 wordcount 程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop jar /opt/module/hadoop-3.3.2/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.2.jar wordcount /wcinput /wcoutput</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="配置历史服务器"><a href="#配置历史服务器" class="headerlink" title="配置历史服务器"></a>配置历史服务器</h4><ol>
<li><p>配置mapred-site.xml</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 hadoop-3.3.2]$ vim ./etc/hadoop/mapred-site.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 历史服务器端地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop102:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">&lt;!-- 历史服务器web端地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop102:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>分发配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 hadoop-3.3.2]$ xsync ./etc/hadoop/mapred-site.xml</span><br></pre></td></tr></table></figure></li>
<li><p>启动历史服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在hadoop103 重启 yarn</span></span><br><span class="line">[eitan@hadoop103 hadoop-3.3.2]$ ./sbin/stop-yarn.sh </span><br><span class="line">[eitan@hadoop103 hadoop-3.3.2]$ ./sbin/start-yarn.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在 hadoop102 启动历史服务器</span></span><br><span class="line">[eitan@hadoop102 hadoop-3.3.2]$ mapred --daemon start historyserver</span><br></pre></td></tr></table></figure></li>
<li><p>查看JobHistory</p>
<p><a href="http://hadoop102:19888/jobhistory">http://hadoop102:19888/jobhistory</a></p>
</li>
</ol>
<h4 id="配置日志的聚集"><a href="#配置日志的聚集" class="headerlink" title="配置日志的聚集"></a>配置日志的聚集</h4><ol>
<li><p>配置 yarn-site.xml</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 hadoop-3.3.2]$ vim ./etc/hadoop/yarn-site.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启日志聚集功能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置日志聚集服务器地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://hadoop102:19888/jobhistory/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置日志保留时间为7天 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>分发配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 hadoop-3.3.2]$ xsync ./etc/hadoop/yarn-site.xml</span><br></pre></td></tr></table></figure></li>
<li><p>重启NodeManager 、ResourceManager和HistoryServer</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在 hadoop102 上重启 historyserver</span></span><br><span class="line">[eitan@hadoop102 hadoop-3.3.2]$ mapred --daemon stop historyserver</span><br><span class="line">[eitan@hadoop102 hadoop-3.3.2]$ mapred --daemon start historyserver</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在 hadoop103 上重启 yarn</span></span><br><span class="line">[eitan@hadoop103 hadoop-3.3.2]$ ./sbin/stop-yarn.sh </span><br><span class="line">[eitan@hadoop103 hadoop-3.3.2]$ ./sbin/start-yarn.sh </span><br></pre></td></tr></table></figure></li>
<li><p>删除HDFS上已经存在的输出文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -rm -r /wcoutput</span><br></pre></td></tr></table></figure></li>
<li><p>执行WordCount程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop jar /opt/module/hadoop-3.3.2/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.2.jar wordcount /wcinput /wcoutput</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="集群启动-停止方式总结"><a href="#集群启动-停止方式总结" class="headerlink" title="集群启动/停止方式总结"></a>集群启动/停止方式总结</h4><ol>
<li><p>各个模块分开启动/停止（配置ssh是前提）常用</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 整体启动/停止HDFS</span></span><br><span class="line"><span class="literal">start</span>-dfs.sh/<span class="literal">stop</span>-dfs.sh</span><br><span class="line"><span class="comment"># 整体启动/停止YARN</span></span><br><span class="line"><span class="literal">start</span>-yarn.sh/<span class="literal">stop</span>-yarn.sh</span><br></pre></td></tr></table></figure></li>
<li><p>各个服务组件逐一启动/停止</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分别启动/停止HDFS组件</span></span><br><span class="line">hdfs --daemon start<span class="regexp">/stop namenode/</span>datanode/secondarynamenode</span><br><span class="line"><span class="comment"># 分别启动/停止YARN</span></span><br><span class="line">yarn --daemon start<span class="regexp">/stop  resourcemanager/</span>nodemanager</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="编写Hadoop集群常用脚本"><a href="#编写Hadoop集群常用脚本" class="headerlink" title="编写Hadoop集群常用脚本"></a>编写Hadoop集群常用脚本</h4><ol>
<li><p>Hadoop集群启停脚本（包含HDFS，Yarn，Historyserver）：myhadoop.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ vim bin/myhadoop.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">if [ $# -lt 1 ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;No Args Input...&quot;</span><br><span class="line">    exit;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">    echo &quot;================ 启动 hadooop 集群 ================&quot;</span><br><span class="line">    echo &quot;---------------- 启动 hdfs ----------------&quot;</span><br><span class="line">    ssh hadoop102 &quot;/opt/module/hadoop-3.3.2/sbin/start-dfs.sh&quot;</span><br><span class="line">    echo &quot;---------------- 启动 yarn ----------------&quot;</span><br><span class="line">    ssh hadoop103 &quot;/opt/module/hadoop-3.3.2/sbin/start-yarn.sh&quot;</span><br><span class="line">    echo &quot;---------------- 启动 historyserver ----------------&quot;</span><br><span class="line">    ssh hadoop102 &quot;/opt/module/hadoop-3.3.2/bin/mapred --daemon start historyserver&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">    echo &quot;================ 关闭 hadooop 集群 ================&quot;</span><br><span class="line">    echo &quot;---------------- 关闭 historyserver ----------------&quot;</span><br><span class="line">    ssh hadoop102 &quot;/opt/module/hadoop-3.3.2/bin/mapred --daemon stop historyserver&quot;</span><br><span class="line">    echo &quot;---------------- 关闭 yarn ----------------&quot;</span><br><span class="line">    ssh hadoop103 &quot;/opt/module/hadoop-3.3.2/sbin/stop-yarn.sh&quot;</span><br><span class="line">    echo &quot;---------------- 关闭 hdfs ----------------&quot;</span><br><span class="line">    ssh hadoop102 &quot;/opt/module/hadoop-3.3.2/sbin/stop-dfs.sh&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">    echo &quot;Input Args Errot...&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">[eitan@hadoop102 ~]$ chmod +x bin/myhadoop.sh</span><br></pre></td></tr></table></figure></li>
<li><p>查看三台服务器Java进程脚本：jpsall</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ vim bin/jpsall.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for host in hadoop102 hadoop103 hadoop104</span><br><span class="line">do</span><br><span class="line">    echo &quot;================ $host ================&quot;</span><br><span class="line">    ssh $host jps</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">[eitan@hadoop102 ~]$ chmod +x bin/jpsall.sh </span><br></pre></td></tr></table></figure></li>
<li><p>分发/home/atguigu/bin目录，保证自定义脚本在三台机器上都可以使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ xsync ./bin/</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="时间服务器配置（必须root用户）"><a href="#时间服务器配置（必须root用户）" class="headerlink" title="时间服务器配置（必须root用户）"></a>时间服务器配置（必须root用户）</h4><ol>
<li><p>查看所有节点ntpd服务状态和开机自启动状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ sudo systemctl status ntpd</span><br><span class="line">[eitan@hadoop102 ~]$ sudo systemctl start ntpd</span><br><span class="line">[eitan@hadoop102 ~]$ sudo systemctl is-enabled ntpd</span><br></pre></td></tr></table></figure></li>
<li><p>修改hadoop102的ntp.conf配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ sudo vim /etc/ntp.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改1（授权192.168.203.0-192.168.203.255网段上的所有机器可以从这台机器上查询和同步时间）</span></span><br><span class="line">restrict 192.168.203.0 mask 255.255.255.0 nomodify notrap</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改2（集群在局域网中，不使用其他互联网上的时间）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta">#</span><span class="bash">server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta">#</span><span class="bash">server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta">#</span><span class="bash">server 3.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加3（当该节点丢失网络连接，依然可以采用本地时间作为时间服务器为集群中的其他节点提供时间同步）</span></span><br><span class="line">server 127.127.1.0</span><br><span class="line">fudge 127.127.1.0 stratum 10</span><br></pre></td></tr></table></figure></li>
<li><p>修改hadoop102的/etc/sysconfig/ntpd 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ sudo vim /etc/sysconfig/ntpd</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加内容如下（让硬件时间与系统时间一起同步）</span></span><br><span class="line">SYNC_HWCLOCK=yes</span><br></pre></td></tr></table></figure></li>
<li><p>重新启动ntpd服务并设置开机启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ sudo systemctl start ntpd</span><br><span class="line">[eitan@hadoop102 ~]$ sudo systemctl enable ntpd</span><br></pre></td></tr></table></figure></li>
<li><p>其他机器配置（必须root用户）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭所有节点上ntp服务和自启动</span></span><br><span class="line">[eitan@hadoop103 ~]$ sudo systemctl stop ntpd</span><br><span class="line">[eitan@hadoop103 ~]$ sudo systemctl disable ntpd</span><br><span class="line">[eitan@hadoop104 ~]$ sudo systemctl stop ntpd</span><br><span class="line">[eitan@hadoop104 ~]$ sudo systemctl disable ntpd</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在其他机器配置1分钟与时间服务器同步一次</span></span><br><span class="line">[eitan@hadoop103 ~]$ sudo crontab -e</span><br><span class="line">*/1 * * * * /usr/sbin/ntpdate hadoop102</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改任意机器时间</span></span><br><span class="line">[eitan@hadoop103 ~]$ sudo date -s &quot;2021-9-11 11:11:11&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1分钟后查看机器是否与时间服务器同步</span></span><br><span class="line">[eitan@hadoop103 ~]$ sudo date</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Big Data</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>从源码认识FactoryBean</title>
    <url>/2021/08/12/%E4%BB%8E%E6%BA%90%E7%A0%81%E8%AE%A4%E8%AF%86FactoryBean/</url>
    <content><![CDATA[<p>本文学习自<a href="https://ke.qq.com/course/package/20773">马士兵MAC课程-源码五班</a></p>
<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>通过 Debug 探究以下问题：</p>
<ol>
<li>在 <em>AbstractApplicationContext</em> 的 <em>refresh()</em> 中，完成对 bean 的实例化方法 <em>finishBeanFactoryInitialization(beanFactory)</em> 是否会实例化 UserFactoryBean 和 User 的对象</li>
<li><em>context.getBean(“&amp;userFactoryBean”)</em> 和 <em>context.getBean(“userFactoryBean”)</em> 会返回不同对象的逻辑是什么?</li>
</ol>
<span id="more"></span>

<h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.factorybean.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String password;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.factorybean.factorybean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eitan.factorybean.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		User user = <span class="keyword">new</span> User();</span><br><span class="line">		user.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">		user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> user;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">		<span class="keyword">return</span> User.class;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="factorybean-xml"><a href="#factorybean-xml" class="headerlink" title="factorybean.xml"></a>factorybean.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.eitan.factorybean.factorybean.UserFactoryBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.factorybean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eitan.factorybean.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.eitan.factorybean.factorybean.UserFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationContext</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;factorybean.xml&quot;</span>);</span><br><span class="line">		UserFactoryBean userFactoryBean = (UserFactoryBean) context.getBean(<span class="string">&quot;&amp;userFactoryBean&quot;</span>);</span><br><span class="line">		System.out.println(userFactoryBean);</span><br><span class="line">		User user = (User) context.getBean(<span class="string">&quot;userFactoryBean&quot;</span>);</span><br><span class="line">		System.out.println(user);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里我们手动获取了 UserFactoryBean 和 User，通过 Debug 跟踪其获取的具体步骤</p>
</blockquote>
<h2 id="首先关注-finishBeanFactoryInitialization-beanFactory-方法"><a href="#首先关注-finishBeanFactoryInitialization-beanFactory-方法" class="headerlink" title="首先关注 finishBeanFactoryInitialization(beanFactory) 方法"></a>首先关注 <em>finishBeanFactoryInitialization(beanFactory)</em> 方法</h2><h3 id="finishBeanFactoryInitialization-beanFactory"><a href="#finishBeanFactoryInitialization-beanFactory" class="headerlink" title="finishBeanFactoryInitialization(beanFactory)"></a><em>finishBeanFactoryInitialization(beanFactory)</em></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishBeanFactoryInitialization</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// Initialize conversion service for this context.</span></span><br><span class="line">	<span class="comment">// 为上下文初始化类型转换器</span></span><br><span class="line">	<span class="keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class="line">			beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</span><br><span class="line">		beanFactory.setConversionService(</span><br><span class="line">				beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Register a default embedded value resolver if no BeanFactoryPostProcessor</span></span><br><span class="line">	<span class="comment">// (such as a PropertySourcesPlaceholderConfigurer bean) registered any before:</span></span><br><span class="line">	<span class="comment">// at this point, primarily for resolution in annotation attribute values.</span></span><br><span class="line">	<span class="comment">// 如果beanFactory之前没有注册前入值解析器，则注册默认的嵌入值解析器，主要用于注解属性值的解析</span></span><br><span class="line">	<span class="keyword">if</span> (!beanFactory.hasEmbeddedValueResolver()) &#123;</span><br><span class="line">		beanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span></span><br><span class="line">	<span class="comment">// 尽早初始化loadTimeWeaverAware，以便尽早注册它们的转换器</span></span><br><span class="line">	String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">	<span class="keyword">for</span> (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class="line">		getBean(weaverAwareName);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Stop using the temporary ClassLoader for type matching.</span></span><br><span class="line">	<span class="comment">// 禁止使用临时类加载器进行类型匹配</span></span><br><span class="line">	beanFactory.setTempClassLoader(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Allow for caching all bean definition metadata, not expecting further changes.</span></span><br><span class="line">	<span class="comment">// 冻结所有的bean定义，说明注册的bean定义将不被修改或任何进一步处理</span></span><br><span class="line">	beanFactory.freezeConfiguration();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">	<span class="comment">// 初始化剩下的单例对象</span></span><br><span class="line">	beanFactory.preInstantiateSingletons();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个方法主要还是做了一些初始化前的准备操作，具体初始化发生在 <em>beanFactory.preInstantiateSingletons()</em> 中</p>
</blockquote>
<h3 id="preInstantiateSingletons"><a href="#preInstantiateSingletons" class="headerlink" title="preInstantiateSingletons()"></a>preInstantiateSingletons()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preInstantiateSingletons</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">		logger.trace(<span class="string">&quot;Pre-instantiating singletons in &quot;</span> + <span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span></span><br><span class="line">	<span class="comment">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span></span><br><span class="line">	<span class="comment">// 将所有BeanDefinitionNames创建一个集合</span></span><br><span class="line">	List&lt;String&gt; beanNames = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.beanDefinitionNames);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Trigger initialization of all non-lazy singleton beans...</span></span><br><span class="line">	<span class="comment">// 触发所有非延迟加载的单例bean的初始化，遍历集合的对象</span></span><br><span class="line">	<span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">		<span class="comment">// 合并父类BeanDefinition</span></span><br><span class="line">		RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">		<span class="comment">// 条件判断，非抽象，单例，非懒加载</span></span><br><span class="line">		<span class="keyword">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;</span><br><span class="line">			<span class="comment">// 判断是否实现了FactoryBean接口</span></span><br><span class="line">			<span class="keyword">if</span> (isFactoryBean(beanName)) &#123;</span><br><span class="line">				<span class="comment">// 根据&amp;+beanName来获取具体对象</span></span><br><span class="line">				Object bean = getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class="line">				<span class="comment">// 进行类型转换</span></span><br><span class="line">				<span class="keyword">if</span> (bean <span class="keyword">instanceof</span> FactoryBean) &#123;</span><br><span class="line">					FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) bean;</span><br><span class="line">					<span class="comment">// 判断这个FactoryBean是否希望急切的初始化</span></span><br><span class="line">					<span class="keyword">boolean</span> isEagerInit;</span><br><span class="line">					<span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span> &amp;&amp; factory <span class="keyword">instanceof</span> SmartFactoryBean) &#123;</span><br><span class="line">						isEagerInit = AccessController.doPrivileged(</span><br><span class="line">								(PrivilegedAction&lt;Boolean&gt;) ((SmartFactoryBean&lt;?&gt;) factory)::isEagerInit,</span><br><span class="line">								getAccessControlContext());</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> &#123;</span><br><span class="line">						isEagerInit = (factory <span class="keyword">instanceof</span> SmartFactoryBean &amp;&amp;</span><br><span class="line">								((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="comment">// 如果希望急切的初始化，则通过beanName获取bean实例</span></span><br><span class="line">					<span class="keyword">if</span> (isEagerInit) &#123;</span><br><span class="line">						getBean(beanName);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// 如果beanName对应的bean不是FactoryBean，只是普通的bean，通过beanName获取bean实例</span></span><br><span class="line">				getBean(beanName);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Trigger post-initialization callback for all applicable beans...</span></span><br><span class="line">	<span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">		Object singletonInstance = getSingleton(beanName);</span><br><span class="line">		<span class="keyword">if</span> (singletonInstance <span class="keyword">instanceof</span> SmartInitializingSingleton) &#123;</span><br><span class="line">			StartupStep smartInitialize = <span class="keyword">this</span>.getApplicationStartup().start(<span class="string">&quot;spring.beans.smart-initialize&quot;</span>)</span><br><span class="line">					.tag(<span class="string">&quot;beanName&quot;</span>, beanName);</span><br><span class="line">			SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;</span><br><span class="line">			<span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">				AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">					smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">				&#125;, getAccessControlContext());</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">			&#125;</span><br><span class="line">			smartInitialize.end();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="beanDefinitionNames"><a href="#beanDefinitionNames" class="headerlink" title="beanDefinitionNames"></a>beanDefinitionNames</h4><p>这里的 <em>beanDefinitionNames</em> 是包括所有通过 xml 配置和注解扫描到（这个案例没有开启注解扫描）的 BeanDefinitionName，本案例只包含一个在 xml 中配置的 <em>userFactoryBean</em></p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210812235441.png" alt="image-20210812235437097"></p>
<h4 id="getMergedLocalBeanDefinition-beanName"><a href="#getMergedLocalBeanDefinition-beanName" class="headerlink" title="getMergedLocalBeanDefinition(beanName)"></a>getMergedLocalBeanDefinition(beanName)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> RootBeanDefinition <span class="title">getMergedLocalBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">	<span class="comment">// Quick check on the concurrent map first, with minimal locking.</span></span><br><span class="line">	<span class="comment">// 检查beanName对应的mergedBeanDefinitions是否存在于缓存中，此缓存是在beanFactoryPostProcessor中添加的</span></span><br><span class="line">	RootBeanDefinition mbd = <span class="keyword">this</span>.mergedBeanDefinitions.get(beanName);</span><br><span class="line">	<span class="keyword">if</span> (mbd != <span class="keyword">null</span> &amp;&amp; !mbd.stale) &#123;</span><br><span class="line">		<span class="comment">// 如果存在于缓存中则直接返回</span></span><br><span class="line">		<span class="keyword">return</span> mbd;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 如果不存在于缓存中，根据beanName和BeanDefinition，获取mergedBeanDefinitions</span></span><br><span class="line">	<span class="keyword">return</span> getMergedBeanDefinition(beanName, getBeanDefinition(beanName));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>getMergedLocalBeanDefinition(beanName) 的用途是根据 beanName 获取对应的 BeanDefinition，这里返回的是已经与 parentBeanDefinition 合并后的 BeanDefinition</p>
<ol>
<li>通过 Debug 得知，此时是直接从缓存 mergedBeanDefinitions 中获取到 BeanDefinition 直接放回，那么它是合适首次进行合并操作并加入缓存的呢？是在调用 BeanFactoryPostProcessor 时 <em>beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false)</em> 方法中首次进行 merge 操作的。</li>
<li>该方法返回的 BeanDefinition 为 RootBeanDefinition。Spring 通过 xml 配置的 BeanDefinition 为 GenericBeanDefinition，而通过注解扫描 doScan() 找到的为 ScannedGenericBeanDefinition，通过该方法会将其同一转成 RootBeanDefinition</li>
<li>合并父类BeanDefinition的逻辑为：<ol>
<li>先判断该BeanDefinition有无父类，如果没有则直接转化为 RootBeanDefinition 返回</li>
<li>如果有父类，则递归调用 getMergedBeanDefinition(String name) 方法得到父类的 BeanDefinition，并将父类合并子类，最终返回合并后的 BeanDefinition</li>
</ol>
</li>
</ol>
</blockquote>
<h3 id="isFactoryBean-beanName"><a href="#isFactoryBean-beanName" class="headerlink" title="isFactoryBean(beanName)"></a>isFactoryBean(beanName)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFactoryBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException </span>&#123;</span><br><span class="line">	<span class="comment">// 拿到真正的beanName</span></span><br><span class="line">	String beanName = transformedBeanName(name);</span><br><span class="line">	<span class="comment">// 尝试从缓存中获取bean实例对象</span></span><br><span class="line">	Object beanInstance = getSingleton(beanName, <span class="keyword">false</span>);</span><br><span class="line">	<span class="keyword">if</span> (beanInstance != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="comment">// 如果beanInstance存在，则直接判断类型是否为FactoryBean</span></span><br><span class="line">		<span class="keyword">return</span> (beanInstance <span class="keyword">instanceof</span> FactoryBean);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// No singleton instance found -&gt; check bean definition.</span></span><br><span class="line">	<span class="comment">// 如果缓存中不存在此 beanName &amp;&amp; 父beanFactory是ConfigurableBeanFactory，则调用父BeanFactory判断是否为FactoryBean</span></span><br><span class="line">	<span class="keyword">if</span> (!containsBeanDefinition(beanName) &amp;&amp; getParentBeanFactory() <span class="keyword">instanceof</span> ConfigurableBeanFactory) &#123;</span><br><span class="line">		<span class="comment">// No bean definition found in this factory -&gt; delegate to parent.</span></span><br><span class="line">		<span class="keyword">return</span> ((ConfigurableBeanFactory) getParentBeanFactory()).isFactoryBean(name);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 通过MergedBeanDefinition来检查beanName对应的bean是否为FactoryBean</span></span><br><span class="line">	<span class="keyword">return</span> isFactoryBean(beanName, getMergedLocalBeanDefinition(beanName));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isFactoryBean</span><span class="params">(String beanName, RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 获取RootBeanDefinition的isFactoryBean属性</span></span><br><span class="line">	Boolean result = mbd.isFactoryBean;</span><br><span class="line">	<span class="comment">// 如果结果为空</span></span><br><span class="line">	<span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="comment">// 拿到beanName对应的bean实例的类型</span></span><br><span class="line">		Class&lt;?&gt; beanType = predictBeanType(beanName, mbd, FactoryBean.class);</span><br><span class="line">		<span class="comment">// 返回beanType是否为factoryBean本身、子类或子接口</span></span><br><span class="line">		result = (beanType != <span class="keyword">null</span> &amp;&amp; FactoryBean.class.isAssignableFrom(beanType));</span><br><span class="line">		mbd.isFactoryBean = result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以看到该方法一开始就使用 <em>String beanName = transformedBeanName(name)</em> 去除 <em>&amp;</em> 符号，因此不管入参是否带 &amp; 都是判断同一个 beanName 是否为工厂类</p>
</blockquote>
<p>之后的操作就是 getBean、doGetBean、createBean 和 doCreateBean，这不在我们此次探究范围之内暂且跳过，只要明白在 <em>refresh</em> 方法执行后：</p>
<ol>
<li>在 <em>BeanFactory</em> 的 <em>beanDefinitionMap</em> 中只有一对键值对，<em>key = userFactoryBean，value 为 UserFactoryBean 对应的 BeanDefinition</em></li>
</ol>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210813002904.png" alt="image-20210813002902145"></p>
<ol start="2">
<li>在 BeanFactory 的 singletonObjects 中，存在一个键值对，<em>key = userFactoryBean</em>，value 为类型 是 UserFactoeyBean 的对象</li>
</ol>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210813003705.png" alt="image-20210813003703270"></p>
<h2 id="getBean-String-name"><a href="#getBean-String-name" class="headerlink" title="getBean(String name)"></a>getBean(String name)</h2><p>在完成了 ApplicationContext 的创建之后，当我们手动调用 <em>context.getBean(“&amp;userFactoryBean”)</em> 和 *context.getBean(“userFactoryBean”)*，Spring 内部是如何处理的呢？</p>
<h3 id="doGetBean-…"><a href="#doGetBean-…" class="headerlink" title="doGetBean(…)"></a>doGetBean(…)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">doGetBean</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">		String name, <span class="meta">@Nullable</span> Class&lt;T&gt; requiredType, <span class="meta">@Nullable</span> Object[] args, <span class="keyword">boolean</span> typeCheckOnly)</span></span></span><br><span class="line"><span class="function">		<span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 提取对应的beanName，当bean对象实现FactoryBean接口之后就会变成&amp;beanName</span></span><br><span class="line">	<span class="comment">// 这一步的操作是去除&amp;符号</span></span><br><span class="line">	String beanName = transformedBeanName(name);</span><br><span class="line">	Object beanInstance;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Eagerly check singleton cache for manually registered singletons.</span></span><br><span class="line">	<span class="comment">// 提前检查单例缓存中是否有手动注册的单例对象，跟循环依赖有关联</span></span><br><span class="line">	Object sharedInstance = getSingleton(beanName);</span><br><span class="line">	<span class="keyword">if</span> (sharedInstance != <span class="keyword">null</span> &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">			<span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">				logger.trace(<span class="string">&quot;Returning eagerly cached instance of singleton bean &#x27;&quot;</span> + beanName +</span><br><span class="line">						<span class="string">&quot;&#x27; that is not fully initialized yet - a consequence of a circular reference&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				logger.trace(<span class="string">&quot;Returning cached instance of singleton bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 返回对象的实例，当你实现Factory接口，需要获取具体的对象就需要此方法进行获取</span></span><br><span class="line">		beanInstance = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 当从 singletonObjects 缓存中获取不到时，走的是 createBean 创建流程</span></span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		...</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> adaptBeanInstance(name, beanInstance, requiredType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li><em>String beanName = transformedBeanName(name)</em> 的作用是会将 &amp; 符号去除，因此无论入参 name 为 <em>&amp;userFactoryBean</em> 还是 <em>userFactoryBean</em>，得到的beanName 均为 <em>userFactoryBean</em></li>
<li>由上文可知，此时在 singletonObjects 中是存在了 <em>“userFactoryBean” -&gt; UserFactoryBean 的对象</em> 的缓存，因此这里的 <em>Object sharedInstance = getSingleton(beanName)</em> 返回的就是一个 UserFactoryBean 的对象</li>
<li>最终返回的对象是由 <em>beanInstance = getObjectForBeanInstance(sharedInstance, name, beanName, null)</em> 方法得到的，这里会把 <em>name</em> 和 <em>beanName</em> 都当作参数传入</li>
</ol>
</blockquote>
<h3 id="getObjectForBeanInstance-…"><a href="#getObjectForBeanInstance-…" class="headerlink" title="getObjectForBeanInstance(…)"></a>getObjectForBeanInstance(…)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getObjectForBeanInstance</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">		Object beanInstance, String name, String beanName, <span class="meta">@Nullable</span> RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Don&#x27;t let calling code try to dereference the factory if the bean isn&#x27;t a factory.</span></span><br><span class="line">	<span class="keyword">if</span> (BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class="line">		<span class="keyword">if</span> (beanInstance <span class="keyword">instanceof</span> NullBean) &#123;</span><br><span class="line">			<span class="keyword">return</span> beanInstance;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!(beanInstance <span class="keyword">instanceof</span> FactoryBean)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanIsNotAFactoryException(beanName, beanInstance.getClass());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (mbd != <span class="keyword">null</span>) &#123;</span><br><span class="line">			mbd.isFactoryBean = <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> beanInstance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Now we have the bean instance, which may be a normal bean or a FactoryBean.</span></span><br><span class="line">	<span class="comment">// If it&#x27;s a FactoryBean, we use it to create a bean instance, unless the</span></span><br><span class="line">	<span class="comment">// caller actually wants a reference to the factory.</span></span><br><span class="line">	<span class="keyword">if</span> (!(beanInstance <span class="keyword">instanceof</span> FactoryBean)) &#123;</span><br><span class="line">		<span class="keyword">return</span> beanInstance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Object object = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">if</span> (mbd != <span class="keyword">null</span>) &#123;</span><br><span class="line">		mbd.isFactoryBean = <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		object = getCachedObjectForFactoryBean(beanName);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="comment">// Return bean instance from factory.</span></span><br><span class="line">		FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) beanInstance;</span><br><span class="line">		<span class="comment">// Caches object obtained from FactoryBean if it is a singleton.</span></span><br><span class="line">		<span class="keyword">if</span> (mbd == <span class="keyword">null</span> &amp;&amp; containsBeanDefinition(beanName)) &#123;</span><br><span class="line">			mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">boolean</span> synthetic = (mbd != <span class="keyword">null</span> &amp;&amp; mbd.isSynthetic());</span><br><span class="line">		object = getObjectFromFactoryBean(factory, beanName, !synthetic);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>BeanFactoryUtils.isFactoryDereference(name) 方法，通过是否是 &amp; 开头来判断返回结果是工厂还是工厂创建的实体类</li>
<li>如果 name 是 &amp; 开头，代表需要返回的就是工厂本身，则直接把入参的 <em>beanInstance</em> 返回即可</li>
<li>如果是返回工厂创建的实体类：<ol>
<li>先从缓存 factoryBeanObjectCache 中去寻找，如果缓存中有则直接返回</li>
<li>缓存中没有则通过 <em>getObjectFromFactoryBean(factory, beanName, !synthetic)</em> 创建</li>
</ol>
</li>
</ol>
</blockquote>
<h3 id="getObjectFromFactoryBean-factory-beanName-synthetic"><a href="#getObjectFromFactoryBean-factory-beanName-synthetic" class="headerlink" title="getObjectFromFactoryBean(factory, beanName, !synthetic)"></a>getObjectFromFactoryBean(factory, beanName, !synthetic)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getObjectFromFactoryBean</span><span class="params">(FactoryBean&lt;?&gt; factory, String beanName, <span class="keyword">boolean</span> shouldPostProcess)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 如果工厂创建的类是单例的，并且一级缓存中已经存在这个工厂，则先尝试从缓存中获取</span></span><br><span class="line">       <span class="comment">// 否则直接使用工厂创建一个新的bean并返回</span></span><br><span class="line">       <span class="keyword">if</span> (factory.isSingleton() &amp;&amp; containsSingleton(beanName)) &#123;</span><br><span class="line">		<span class="keyword">synchronized</span> (getSingletonMutex()) &#123;</span><br><span class="line">			Object object = <span class="keyword">this</span>.factoryBeanObjectCache.get(beanName);</span><br><span class="line">			<span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">				object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">				<span class="comment">// Only post-process and store if not put there already during getObject() call above</span></span><br><span class="line">				<span class="comment">// (e.g. because of circular reference processing triggered by custom getBean calls)</span></span><br><span class="line">				Object alreadyThere = <span class="keyword">this</span>.factoryBeanObjectCache.get(beanName);</span><br><span class="line">				<span class="keyword">if</span> (alreadyThere != <span class="keyword">null</span>) &#123;</span><br><span class="line">					object = alreadyThere;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">if</span> (shouldPostProcess) &#123;</span><br><span class="line">						<span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">							<span class="comment">// Temporarily return non-post-processed object, not storing it yet..</span></span><br><span class="line">							<span class="keyword">return</span> object;</span><br><span class="line">						&#125;</span><br><span class="line">						beforeSingletonCreation(beanName);</span><br><span class="line">						<span class="keyword">try</span> &#123;</span><br><span class="line">							object = postProcessObjectFromFactoryBean(object, beanName);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">							<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName,</span><br><span class="line">									<span class="string">&quot;Post-processing of FactoryBean&#x27;s singleton object failed&quot;</span>, ex);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">finally</span> &#123;</span><br><span class="line">							afterSingletonCreation(beanName);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (containsSingleton(beanName)) &#123;</span><br><span class="line">						<span class="keyword">this</span>.factoryBeanObjectCache.put(beanName, object);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> object;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		Object object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">		<span class="keyword">if</span> (shouldPostProcess) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				object = postProcessObjectFromFactoryBean(object, beanName);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName, <span class="string">&quot;Post-processing of FactoryBean&#x27;s object failed&quot;</span>, ex);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> object;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里我们可以看到 FactoryBean 的 <em>isSingleton()</em> 方法是如何生效的</p>
<ol>
<li>在方法最开始时就会调用  <em>isSingleton()</em> 进行判断，如果是单例的会先从缓存 factoryBeanObjectCache 中获取，获取不到再进行创建</li>
<li>如果不是 singleton，则直接调用 <em>doGetObjectFromFactoryBean(factory, beanName)</em></li>
<li>获取到对象之后，调用 <em>this.factoryBeanObjectCache.put(beanName, object)</em> 将其放入缓存</li>
</ol>
</blockquote>
<h3 id="doGetObjectFromFactoryBean-factory-beanName"><a href="#doGetObjectFromFactoryBean-factory-beanName" class="headerlink" title="doGetObjectFromFactoryBean(factory, beanName)"></a>doGetObjectFromFactoryBean(factory, beanName)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">doGetObjectFromFactoryBean</span><span class="params">(FactoryBean&lt;?&gt; factory, String beanName)</span> <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line">	Object object;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">			AccessControlContext acc = getAccessControlContext();</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				object = AccessController.doPrivileged((PrivilegedExceptionAction&lt;Object&gt;) factory::getObject, acc);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class="line">				<span class="keyword">throw</span> pae.getException();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">// 调用 FactoryBean 的 getObject() 方法</span></span><br><span class="line">			object = factory.getObject();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (FactoryBeanNotInitializedException ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName, ex.toString());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName, <span class="string">&quot;FactoryBean threw exception on object creation&quot;</span>, ex);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Do not accept a null value for a FactoryBean that&#x27;s not fully</span></span><br><span class="line">	<span class="comment">// initialized yet: Many FactoryBeans just return null then.</span></span><br><span class="line">	<span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(</span><br><span class="line">					beanName, <span class="string">&quot;FactoryBean which is currently in creation returned null from getObject&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		object = <span class="keyword">new</span> NullBean();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以发现，最终是通过调用 FactoryBean 的 getObject() 方法来获取对应对象</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210813100559.png" alt="image-20210813100555949"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义动态代理与JDK动态代理</title>
    <url>/2021/05/13/%E5%B0%8F%E7%AA%A5JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="什么是动态代理"><a href="#什么是动态代理" class="headerlink" title="什么是动态代理"></a>什么是动态代理</h2><p>动态代理是在运行期利用 <em>JVM</em> 的反射机制生成代理类，可以在不需要知道具体被代理类的情况下编写代理规则，能避免因大量使用静态代理造成的类的急剧膨胀。</p>
<span id="more"></span>

<h2 id="自定义动态代理"><a href="#自定义动态代理" class="headerlink" title="自定义动态代理"></a>自定义动态代理</h2><h3 id="MyProxy"><a href="#MyProxy" class="headerlink" title="MyProxy"></a>MyProxy</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.custom.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.tools.JavaCompiler;</span><br><span class="line"><span class="keyword">import</span> javax.tools.StandardJavaFileManager;</span><br><span class="line"><span class="keyword">import</span> javax.tools.ToolProvider;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String Ln = <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String Tab = <span class="string">&quot;\t&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(MyClassLoader loader,</span></span></span><br><span class="line"><span class="params"><span class="function">                                          Class&lt;?&gt;[] interfaceName,</span></span></span><br><span class="line"><span class="params"><span class="function">                                          MyInvocationHandler h)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、动态生成一个.java的源文件</span></span><br><span class="line">        String proxy = generateCode(interfaceName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、把生成的这个.java源文件保存在磁盘上</span></span><br><span class="line">        String filePath = MyProxy.class.getResource(<span class="string">&quot;&quot;</span>).getPath();</span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath + <span class="string">&quot;$Proxy0.java&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists())&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                file.createNewFile();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        FileWriter fileWriter = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileWriter = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">            fileWriter.write(proxy);</span><br><span class="line">            fileWriter.flush();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3、把这个.java源文件编译成.class文件</span></span><br><span class="line">            <span class="comment">// 创建一个java文件编译器对象</span></span><br><span class="line">            JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();</span><br><span class="line">            <span class="comment">// java源代码文件管理器</span></span><br><span class="line">            StandardJavaFileManager fileManager = compiler.getStandardFileManager(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// java源文件的一个迭代器对象</span></span><br><span class="line">            Iterable iterable = fileManager.getJavaFileObjects(file);</span><br><span class="line">            <span class="comment">// 获取一个编译的任务</span></span><br><span class="line">            JavaCompiler.CompilationTask task = compiler.getTask(<span class="keyword">null</span>, fileManager, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, iterable);</span><br><span class="line">            <span class="comment">// 执行编译</span></span><br><span class="line">            task.call();</span><br><span class="line">            <span class="comment">// 关闭文件管理器</span></span><br><span class="line">            fileManager.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4、把编译后的.class文件加载到jvm内存中</span></span><br><span class="line">            Class clazz = loader.findClass(<span class="string">&quot;$Proxy0&quot;</span>);</span><br><span class="line">            </span><br><span class="line"><span class="comment">//			  不采用自定义ClassLoader的方式加载</span></span><br><span class="line"><span class="comment">//            URLClassLoader urlClassLoader = new URLClassLoader(new URL[]&#123;new URL(&quot;file:D:\\ideawork\\MySpring\\SpringDemo\\proxyCustom\\target\\classes&quot;)&#125;);</span></span><br><span class="line"><span class="comment">//            Class clazz = urlClassLoader.loadClass(&quot;com.custom.proxy.$Proxy0&quot;);</span></span><br><span class="line">            <span class="comment">//5、根据加载到jvm中的.class字节码文件生成Class类，然后创建Class类的对象</span></span><br><span class="line">            Constructor constructor = clazz.getConstructor(MyInvocationHandler.class);</span><br><span class="line">            <span class="keyword">return</span> constructor.newInstance(h);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileWriter.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateCode</span><span class="params">(Class&lt;?&gt;[] interfances)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        sb.append(<span class="string">&quot;package com.custom.proxy;&quot;</span> + Ln);</span><br><span class="line">        sb.append(<span class="string">&quot;import java.lang.reflect.Method;&quot;</span> + Ln);</span><br><span class="line">        sb.append(<span class="string">&quot;import com.custom.proxy.MyInvocationHandler;&quot;</span> + Ln);</span><br><span class="line">        sb.append(<span class="string">&quot;public class $Proxy0 implements &quot;</span> + interfances[<span class="number">0</span>].getName() + <span class="string">&quot;&#123;&quot;</span> + Ln);</span><br><span class="line">        sb.append(Tab + <span class="string">&quot;private MyInvocationHandler h;&quot;</span> + Ln);</span><br><span class="line">        sb.append(Tab + <span class="string">&quot;public $Proxy0(MyInvocationHandler h)&#123;&quot;</span> + Ln);</span><br><span class="line">        sb.append(Tab + Tab + <span class="string">&quot;this.h = h;&quot;</span> + Ln);</span><br><span class="line">        sb.append(Tab + <span class="string">&quot;&#125;&quot;</span> + Ln);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Method m : interfances[<span class="number">0</span>].getMethods()) &#123;</span><br><span class="line">            sb.append(Tab + <span class="string">&quot;public &quot;</span> + m.getReturnType().getName() + <span class="string">&quot; &quot;</span> + m.getName() + <span class="string">&quot;() &#123;&quot;</span> + Ln);</span><br><span class="line">            sb.append(Tab + Tab + <span class="string">&quot;try &#123;&quot;</span> + Ln);</span><br><span class="line">            sb.append(Tab + Tab + Tab + <span class="string">&quot;Method m = &quot;</span> + interfances[<span class="number">0</span>].getName() + <span class="string">&quot;.class.getMethod(\&quot;&quot;</span> + m.getName() + <span class="string">&quot;\&quot;);&quot;</span> + Ln);</span><br><span class="line">            sb.append(Tab + Tab + Tab + <span class="string">&quot;h.invoke(this, m, null);&quot;</span> + Ln);</span><br><span class="line"><span class="comment">//            sb.append(Tab + Tab + Tab + &quot;return (&quot; + m.getReturnType().getName() + &quot;)h.invoke(this, m, null);&quot; + Ln);</span></span><br><span class="line">            sb.append(Tab + Tab + <span class="string">&quot;&#125; catch (Throwable e) &#123;&quot;</span> + Ln);</span><br><span class="line">            sb.append(Tab + Tab + Tab + <span class="string">&quot;e.printStackTrace();&quot;</span> + Ln);</span><br><span class="line">            sb.append(Tab + Tab + <span class="string">&quot;&#125;&quot;</span> + Ln);</span><br><span class="line">            sb.append(Tab + <span class="string">&quot;&#125;&quot;</span> + Ln);</span><br><span class="line">            sb.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="MyClassLoader"><a href="#MyClassLoader" class="headerlink" title="MyClassLoader"></a>MyClassLoader</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.custom.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义一个类加载器</span></span><br><span class="line"><span class="comment"> * bootstrap ClassLoader  --jdk/jre/目录下的jar包加载</span></span><br><span class="line"><span class="comment"> * ext ClassLoader  --jdk/ext/目录下的jar包加载</span></span><br><span class="line"><span class="comment"> * App ClassLoader  --我们应用的ClassLoader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> File classPathFile;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String classPath = MyClassLoader.class.getResource(<span class="string">&quot;&quot;</span>).getPath();</span><br><span class="line">        <span class="keyword">this</span>.classPathFile = <span class="keyword">new</span> File(classPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (classPathFile != <span class="keyword">null</span>) &#123;</span><br><span class="line">            File classFile = <span class="keyword">new</span> File(classPathFile + <span class="string">&quot;\\&quot;</span> + name.replace(<span class="string">&quot;\\.&quot;</span>, <span class="string">&quot;/&quot;</span>) + <span class="string">&quot;.class&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (classFile.exists()) &#123;</span><br><span class="line">                FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">                ByteArrayOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis = <span class="keyword">new</span> FileInputStream(classFile);</span><br><span class="line">                    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</span><br><span class="line">                    bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                    <span class="keyword">int</span> len;</span><br><span class="line">                    <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        bos.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> defineClass(<span class="keyword">null</span>, bos.toByteArray(), <span class="number">0</span>, bos.size());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        fis.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bos.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="MyInvocationHandler"><a href="#MyInvocationHandler" class="headerlink" title="MyInvocationHandler"></a>MyInvocationHandler</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.custom.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="JDK动态代理源码分析"><a href="#JDK动态代理源码分析" class="headerlink" title="JDK动态代理源码分析"></a>JDK动态代理源码分析</h2><h3 id="Object-proxy-Proxy-newProxyInstance"><a href="#Object-proxy-Proxy-newProxyInstance" class="headerlink" title="Object proxy = Proxy.newProxyInstance(..);"></a>Object proxy = Proxy.newProxyInstance(..);</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span></span><br><span class="line"><span class="params"><span class="function">                                         Class&lt;?&gt;[] interfaces,</span></span></span><br><span class="line"><span class="params"><span class="function">                                         InvocationHandler h)</span></span></span><br><span class="line"><span class="function">       <span class="keyword">throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       Objects.requireNonNull(h);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class="line">       <span class="keyword">final</span> SecurityManager sm = System.getSecurityManager();</span><br><span class="line">       <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">           checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 查找或生成指定的代理类</span></span><br><span class="line"><span class="comment">        * Look up or generate the designated proxy class.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 使用指定的调用处理程序调用其构造函数</span></span><br><span class="line"><span class="comment">        * Invoke its constructor with the designated invocation handler.</span></span><br><span class="line"><span class="comment">        * 解释：将使用者写的InvacationHandler h 作为构造函数的参数传给代理对象</span></span><br><span class="line"><span class="comment">        * 		代理对象调用h.invoke()方法实现对target的代理和方法的增强</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">//检查创建代理类所需的权限</span></span><br><span class="line">               checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class="line">           <span class="keyword">final</span> InvocationHandler ih = h;</span><br><span class="line">           <span class="keyword">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class="line">               AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                   <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                       cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> cons.newInstance(<span class="keyword">new</span> Object[]&#123;h&#125;);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IllegalAccessException|InstantiationException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">           Throwable t = e.getCause();</span><br><span class="line">           <span class="keyword">if</span> (t <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">               <span class="keyword">throw</span> (RuntimeException) t;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(t.toString(), t);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Class-lt-gt-cl-getProxyClass0-loader-intfs"><a href="#Class-lt-gt-cl-getProxyClass0-loader-intfs" class="headerlink" title="Class&lt;?&gt; cl = getProxyClass0(loader, intfs);"></a>Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成代理类。在调用之前必须调用checkProxyAccess方法来执行权限检查</span></span><br><span class="line"><span class="comment">    * Generate a proxy class.  Must call the checkProxyAccess method</span></span><br><span class="line"><span class="comment">    * to perform permission checks before calling this.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; getProxyClass0(ClassLoader loader,</span><br><span class="line">                                          Class&lt;?&gt;... interfaces) &#123;</span><br><span class="line">       <span class="keyword">if</span> (interfaces.length &gt; <span class="number">65535</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;interface limit exceeded&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// If the proxy class defined by the given loader implementing</span></span><br><span class="line">       <span class="comment">// the given interfaces exists, this will simply return the cached copy;</span></span><br><span class="line">       <span class="comment">// otherwise, it will create the proxy class via the ProxyClassFactory</span></span><br><span class="line">       <span class="comment">// 简单所就是有缓存读缓存，没缓存就生成</span></span><br><span class="line">       <span class="keyword">return</span> proxyClassCache.get(loader, interfaces);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="proxyClassCache-get-loader-interfaces"><a href="#proxyClassCache-get-loader-interfaces" class="headerlink" title="proxyClassCache.get(loader, interfaces);"></a>proxyClassCache.get(loader, interfaces);</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Look-up the value through the cache. This always evaluates the</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> subKeyFactory&#125; function and optionally evaluates</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> valueFactory&#125; function if there is no entry in the cache for given</span></span><br><span class="line"><span class="comment">    * pair of (key, subKey) or the entry has already been cleared.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> key       possibly null key</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> parameter parameter used together with key to create sub-key and</span></span><br><span class="line"><span class="comment">    *                  value (should not be null)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the cached value (never null)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> parameter&#125; passed in or</span></span><br><span class="line"><span class="comment">    *                              &#123;<span class="doctag">@code</span> sub-key&#125; calculated by</span></span><br><span class="line"><span class="comment">    *                              &#123;<span class="doctag">@code</span> subKeyFactory&#125; or &#123;<span class="doctag">@code</span> value&#125;</span></span><br><span class="line"><span class="comment">    *                              calculated by &#123;<span class="doctag">@code</span> valueFactory&#125; is null.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key, P parameter)</span> </span>&#123;</span><br><span class="line">       Objects.requireNonNull(parameter);</span><br><span class="line"></span><br><span class="line">       expungeStaleEntries();</span><br><span class="line"></span><br><span class="line">       Object cacheKey = CacheKey.valueOf(key, refQueue);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// lazily install the 2nd level valuesMap for the particular cacheKey</span></span><br><span class="line">       ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; valuesMap = map.get(cacheKey);</span><br><span class="line">       <span class="keyword">if</span> (valuesMap == <span class="keyword">null</span>) &#123;</span><br><span class="line">           ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; oldValuesMap</span><br><span class="line">               = map.putIfAbsent(cacheKey,</span><br><span class="line">                                 valuesMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;());</span><br><span class="line">           <span class="keyword">if</span> (oldValuesMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">               valuesMap = oldValuesMap;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// create subKey and retrieve the possible Supplier&lt;V&gt; stored by that</span></span><br><span class="line">       <span class="comment">// subKey from valuesMap</span></span><br><span class="line">       Object subKey = Objects.requireNonNull(subKeyFactory.apply(key, parameter));</span><br><span class="line">       Supplier&lt;V&gt; supplier = valuesMap.get(subKey);</span><br><span class="line">       Factory factory = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (supplier != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">// supplier might be a Factory or a CacheValue&lt;V&gt; instance</span></span><br><span class="line">               <span class="comment">// 这一步为获得代理对象的Class</span></span><br><span class="line">               V value = supplier.get();</span><br><span class="line">               <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">return</span> value;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// else no supplier in cache</span></span><br><span class="line">           <span class="comment">// or a supplier that returned null (could be a cleared CacheValue</span></span><br><span class="line">           <span class="comment">// or a Factory that wasn&#x27;t successful in installing the CacheValue)</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">// lazily construct a Factory</span></span><br><span class="line">           <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">               factory = <span class="keyword">new</span> Factory(key, parameter, subKey, valuesMap);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (supplier == <span class="keyword">null</span>) &#123;</span><br><span class="line">               supplier = valuesMap.putIfAbsent(subKey, factory);</span><br><span class="line">               <span class="keyword">if</span> (supplier == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="comment">// successfully installed Factory</span></span><br><span class="line">                   supplier = factory;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// else retry with winning supplier</span></span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (valuesMap.replace(subKey, supplier, factory)) &#123;</span><br><span class="line">                   <span class="comment">// successfully replaced</span></span><br><span class="line">                   <span class="comment">// cleared CacheEntry / unsuccessful Factory</span></span><br><span class="line">                   <span class="comment">// with our Factory</span></span><br><span class="line">                   supplier = factory;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="comment">// retry with current supplier</span></span><br><span class="line">                   supplier = valuesMap.get(subKey);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="V-value-supplier-get"><a href="#V-value-supplier-get" class="headerlink" title="V value = supplier.get();"></a>V value = supplier.get();</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//WeakCache的内部类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> <span class="keyword">implements</span> <span class="title">Supplier</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">final</span> K key;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">final</span> P parameter;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">final</span> Object subKey;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; valuesMap;</span><br><span class="line"></span><br><span class="line">       Factory(K key, P parameter, Object subKey,</span><br><span class="line">               ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; valuesMap) &#123;</span><br><span class="line">           <span class="keyword">this</span>.key = key;</span><br><span class="line">           <span class="keyword">this</span>.parameter = parameter;</span><br><span class="line">           <span class="keyword">this</span>.subKey = subKey;</span><br><span class="line">           <span class="keyword">this</span>.valuesMap = valuesMap;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="comment">// serialize access</span></span><br><span class="line">           <span class="comment">// re-check</span></span><br><span class="line">           Supplier&lt;V&gt; supplier = valuesMap.get(subKey);</span><br><span class="line">           <span class="keyword">if</span> (supplier != <span class="keyword">this</span>) &#123;</span><br><span class="line">               <span class="comment">// something changed while we were waiting:</span></span><br><span class="line">               <span class="comment">// might be that we were replaced by a CacheValue</span></span><br><span class="line">               <span class="comment">// or were removed because of failure -&gt;</span></span><br><span class="line">               <span class="comment">// return null to signal WeakCache.get() to retry</span></span><br><span class="line">               <span class="comment">// the loop</span></span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// else still us (supplier == this)</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">// create new value</span></span><br><span class="line">           V value = <span class="keyword">null</span>;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">//Objects.requireNonNull()只是判断是否非空</span></span><br><span class="line">               <span class="comment">//valueFactory.apply(key, parameter)中key为类加载器，parameter为接口的类对象</span></span><br><span class="line">               value = Objects.requireNonNull(valueFactory.apply(key, parameter));</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123; <span class="comment">// remove us on failure</span></span><br><span class="line">                   valuesMap.remove(subKey, <span class="keyword">this</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// the only path to reach here is with non-null value</span></span><br><span class="line">           <span class="keyword">assert</span> value != <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// wrap value with CacheValue (WeakReference)</span></span><br><span class="line">           CacheValue&lt;V&gt; cacheValue = <span class="keyword">new</span> CacheValue&lt;&gt;(value);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// put into reverseMap</span></span><br><span class="line">           reverseMap.put(cacheValue, Boolean.TRUE);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// try replacing us with CacheValue (this should always succeed)</span></span><br><span class="line">           <span class="keyword">if</span> (!valuesMap.replace(subKey, <span class="keyword">this</span>, cacheValue)) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">&quot;Should not reach here&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// successfully replaced us with new CacheValue -&gt; return the value</span></span><br><span class="line">           <span class="comment">// wrapped by it</span></span><br><span class="line">           <span class="keyword">return</span> value;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * A factory function that generates, defines and returns the proxy class given</span></span><br><span class="line"><span class="comment">    * the ClassLoader and array of interfaces.</span></span><br><span class="line"><span class="comment">    * 指定类加载器和接口生成代理类.class的工厂</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyClassFactory</span></span></span><br><span class="line"><span class="class">       <span class="keyword">implements</span> <span class="title">BiFunction</span>&lt;<span class="title">ClassLoader</span>, <span class="title">Class</span>&lt;?&gt;[], <span class="title">Class</span>&lt;?&gt;&gt;</span></span><br><span class="line"><span class="class">   </span>&#123;</span><br><span class="line">       <span class="comment">// prefix for all proxy class names</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String proxyClassNamePrefix = <span class="string">&quot;$Proxy&quot;</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// next number to use for generation of unique proxy class names</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicLong nextUniqueNumber = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> Class&lt;?&gt; apply(ClassLoader loader, Class&lt;?&gt;[] interfaces) &#123;</span><br><span class="line"></span><br><span class="line">           Map&lt;Class&lt;?&gt;, Boolean&gt; interfaceSet = <span class="keyword">new</span> IdentityHashMap&lt;&gt;(interfaces.length);</span><br><span class="line">           <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Verify that the class loader resolves the name of this</span></span><br><span class="line"><span class="comment">                * interface to the same Class object.</span></span><br><span class="line"><span class="comment">                * 验证类加载器是否解析此接口名到同一个类对象</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               Class&lt;?&gt; interfaceClass = <span class="keyword">null</span>;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   interfaceClass = Class.forName(intf.getName(), <span class="keyword">false</span>, loader);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (interfaceClass != intf) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                       intf + <span class="string">&quot; is not visible from class loader&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Verify that the Class object actually represents an</span></span><br><span class="line"><span class="comment">                * interface.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="keyword">if</span> (!interfaceClass.isInterface()) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                       interfaceClass.getName() + <span class="string">&quot; is not an interface&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Verify that this interface is not a duplicate.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="keyword">if</span> (interfaceSet.put(interfaceClass, Boolean.TRUE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                       <span class="string">&quot;repeated interface: &quot;</span> + interfaceClass.getName());</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           String proxyPkg = <span class="keyword">null</span>;     <span class="comment">// package to define proxy class in</span></span><br><span class="line">           <span class="keyword">int</span> accessFlags = Modifier.PUBLIC | Modifier.FINAL;</span><br><span class="line"></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Record the package of a non-public proxy interface so that the</span></span><br><span class="line"><span class="comment">            * proxy class will be defined in the same package.  Verify that</span></span><br><span class="line"><span class="comment">            * all non-public proxy interfaces are in the same package.</span></span><br><span class="line"><span class="comment">            * 记录非公共代理接口所在的包，以便将代理类定义在同一包中</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">               <span class="keyword">int</span> flags = intf.getModifiers();</span><br><span class="line">               <span class="keyword">if</span> (!Modifier.isPublic(flags)) &#123;</span><br><span class="line">                   accessFlags = Modifier.FINAL;</span><br><span class="line">                   String name = intf.getName();</span><br><span class="line">                   <span class="keyword">int</span> n = name.lastIndexOf(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">                   String pkg = ((n == -<span class="number">1</span>) ? <span class="string">&quot;&quot;</span> : name.substring(<span class="number">0</span>, n + <span class="number">1</span>));</span><br><span class="line">                   <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                       proxyPkg = pkg;</span><br><span class="line">                   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pkg.equals(proxyPkg)) &#123;</span><br><span class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                           <span class="string">&quot;non-public interfaces from different packages&quot;</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">// if no non-public proxy interfaces, use com.sun.proxy package</span></span><br><span class="line">               proxyPkg = ReflectUtil.PROXY_PACKAGE + <span class="string">&quot;.&quot;</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Choose a name for the proxy class to generate.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="keyword">long</span> num = nextUniqueNumber.getAndIncrement();</span><br><span class="line">           String proxyName = proxyPkg + proxyClassNamePrefix + num;</span><br><span class="line"></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Generate the specified proxy class.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="comment">//动态生成class的byte数组，通过字符串拼接jvm指令</span></span><br><span class="line">           <span class="keyword">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(</span><br><span class="line">               proxyName, interfaces, accessFlags);</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">//将生成的byte数组加载进jvm，此方法为native方法，由C编写</span></span><br><span class="line">               <span class="keyword">return</span> defineClass0(loader, proxyName,</span><br><span class="line">                                   proxyClassFile, <span class="number">0</span>, proxyClassFile.length);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (ClassFormatError e) &#123;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * A ClassFormatError here means that (barring bugs in the</span></span><br><span class="line"><span class="comment">                * proxy class generation code) there was some other</span></span><br><span class="line"><span class="comment">                * invalid aspect of the arguments supplied to the proxy</span></span><br><span class="line"><span class="comment">                * class creation (such as virtual machine limitations</span></span><br><span class="line"><span class="comment">                * exceeded).</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e.toString());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li><p>自定义动态代理：</p>
<p>​    动态拼接字符串生成代理对象的.java文件 -&gt; 将.java文件编译成.class文件 -&gt; 通过类加载器加载.class文件进jvm -&gt; 反射生成代理对象</p>
</li>
<li><p>jdk动态代理：</p>
<p>​    生成.clsss文件的byte[]数组，直接将数组加载进jvm -&gt; 反射生成代理对象</p>
</li>
<li><p>jdk动态代理无需涉及io流，所以比自定义动态代理高效。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title>网络IO-IO模型的演变</title>
    <url>/2021/05/26/%E7%BD%91%E7%BB%9CIO-IO%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%BC%94%E5%8F%98/</url>
    <content><![CDATA[<p>代码、资料来自于马士兵MAC课程。</p>
<p>本文主要讲解了IO模型，由 <em>BIO</em> 到 <em>NIO</em>，再演变到多路复用 <em>select/poll</em> 和 <em>epoll</em> 的过程。</p>
<p>从本文中你可以了解到不同模型是如何解决之前模型所产生的问题，并且会带来什么样的新问题。</p>
<span id="more"></span>

<h2 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h2><h3 id="BIO-服务器端代码"><a href="#BIO-服务器端代码" class="headerlink" title="BIO 服务器端代码"></a>BIO 服务器端代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">9090</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;step1: new ServerSocket(9090) &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">//阻塞</span></span><br><span class="line">        Socket client = server.accept();  </span><br><span class="line">        System.out.println(<span class="string">&quot;step2:client\t&quot;</span> + client.getPort());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                InputStream in = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in = client.getInputStream();</span><br><span class="line">                    BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        <span class="comment">//阻塞</span></span><br><span class="line">                        String dataline = reader.readLine(); </span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">null</span> != dataline) &#123;</span><br><span class="line">                            System.out.println(dataline);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            client.close();</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;客户端断开&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="如何查看java所在位置"><a href="#如何查看java所在位置" class="headerlink" title="如何查看java所在位置"></a>如何查看java所在位置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whereis java</span><br><span class="line">java: /usr/bin/java /usr/lib/java /etc/java /usr/share/java /usr/share/man/man1/java.1.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -l 查看详细 -r 倒叙排序 -t 按时间排序</span></span><br><span class="line">ls -lrt /usr/bin/java</span><br><span class="line">lrwxrwxrwx. 1 root root 22 5月  25 11:11 /usr/bin/java -&gt; /etc/alternatives/java</span><br><span class="line"></span><br><span class="line">/etc/alternatives/java</span><br><span class="line">lrwxrwxrwx. 1 root root 73 5月  25 11:11 /etc/alternatives/java -&gt; /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.292.b10-1.el7_9.x86_64/jre/bin/java</span><br></pre></td></tr></table></figure>

<h3 id="使用strace追踪程序"><a href="#使用strace追踪程序" class="headerlink" title="使用strace追踪程序"></a>使用strace追踪程序</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -ff 监听所有请求，使用 1.4 以前版本才能看到最早 BIO 的系统调用函数</span></span><br><span class="line">strace -ff -o out /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.292.b10-1.el7_9.x86_64/jre/bin/java SocketBIO</span><br></pre></td></tr></table></figure>

<p>这时当前目录下就会生成对应文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ll</span><br><span class="line">总用量 832</span><br><span class="line">-rw-r--r--. 1 root root  13685 5月  26 12:40 out.8696</span><br><span class="line">-rw-r--r--. 1 root root 195208 5月  26 12:40 out.8697</span><br><span class="line">-rw-r--r--. 1 root root  33347 5月  26 12:43 out.8698</span><br><span class="line">-rw-r--r--. 1 root root    975 5月  26 12:40 out.8699</span><br><span class="line">-rw-r--r--. 1 root root   1098 5月  26 12:40 out.8700</span><br><span class="line">-rw-r--r--. 1 root root   1019 5月  26 12:40 out.8701</span><br><span class="line">-rw-r--r--. 1 root root  12260 5月  26 12:43 out.8702</span><br><span class="line">-rw-r--r--. 1 root root   9956 5月  26 12:43 out.8703</span><br><span class="line">-rw-r--r--. 1 root root    974 5月  26 12:40 out.8704</span><br><span class="line">-rw-r--r--. 1 root root 545800 5月  26 12:43 out.8705</span><br><span class="line">-rw-r--r--. 1 root root   1175 5月  26 11:47 SocketBIO$1.class</span><br><span class="line">-rw-r--r--. 1 root root   1104 5月  26 11:47 SocketBIO.class</span><br><span class="line">-rw-r--r--. 1 root root   1505 5月  26 11:47 SocketBIO.java</span><br></pre></td></tr></table></figure>

<p>之后便可以观察具体发生了哪些系统调用</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>系统调用socket(…)=3</li>
<li>系统调用bind(3, …8090…)绑定端口号</li>
<li>系统调用listen(3,…)来监听此端口，此时 netstat -napt 才会显示对应的socket在监听8090端口</li>
<li>主线程阻塞在系统调用accept(3,  处</li>
<li>调用 nc 命令去连接，则主线程通过系统调用clone(…)抛出一个线程去接收信息，此时主线程再次循环阻塞在accept(3,  处，而子线程阻塞在 recv(fd, 处</li>
</ol>
<h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><h3 id="NIO-服务器端代码"><a href="#NIO-服务器端代码" class="headerlink" title="NIO 服务器端代码"></a>NIO 服务器端代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    LinkedList&lt;SocketChannel&gt; clients = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务端开启监听：接受客户端</span></span><br><span class="line">    ServerSocketChannel ss = ServerSocketChannel.open();</span><br><span class="line">    ss.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9090</span>));</span><br><span class="line">    <span class="comment">// 重点  OS  NONBLOCKING!!!  只让接受客户端时不阻塞</span></span><br><span class="line">    ss.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 接受客户端的连接</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// 不会阻塞？  -1 NULL</span></span><br><span class="line">        SocketChannel client = ss.accept(); </span><br><span class="line">        <span class="comment">// accept  调用内核了：1，没有客户端连接进来，返回值？在BIO 的时候一直卡着，但是在NIO ，不卡着，返回-1，NULL</span></span><br><span class="line">        <span class="comment">// 如果来客户端的连接，accept 返回的是这个客户端的fd  5，client  object</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (client == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;null.....&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//重点  socket（服务端的listen socket&lt;连接请求三次握手后，往我这里扔，我去通过accept得到连接的socket&gt;，连接socket&lt;连接后的数据读写使用的&gt; ）</span></span><br><span class="line">            client.configureBlocking(<span class="keyword">false</span>); </span><br><span class="line">            <span class="keyword">int</span> port = client.socket().getPort();</span><br><span class="line">            System.out.println(<span class="string">&quot;client..port: &quot;</span> + port);</span><br><span class="line">            clients.add(client);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//可以在堆里   堆外</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocateDirect(<span class="number">4096</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历已经链接进来的客户端能不能读写数据</span></span><br><span class="line">        <span class="keyword">for</span> (SocketChannel c : clients) &#123;</span><br><span class="line">            <span class="comment">// 不会阻塞，num 的返回值有 &gt;0  -1  0</span></span><br><span class="line">            <span class="keyword">int</span> num = c.read(buffer);  </span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                buffer.flip();</span><br><span class="line">                <span class="keyword">byte</span>[] aaa = <span class="keyword">new</span> <span class="keyword">byte</span>[buffer.limit()];</span><br><span class="line">                buffer.get(aaa);</span><br><span class="line"></span><br><span class="line">                String b = <span class="keyword">new</span> String(aaa);</span><br><span class="line">                System.out.println(c.socket().getPort() + <span class="string">&quot; : &quot;</span> + b);</span><br><span class="line">                buffer.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用strace追踪程序-1"><a href="#使用strace追踪程序-1" class="headerlink" title="使用strace追踪程序"></a>使用strace追踪程序</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -ff 监听所有请求，使用 1.4 以前版本才能看到最早 BIO 的系统调用函数</span></span><br><span class="line">strace -ff -o out java SocketNIO</span><br></pre></td></tr></table></figure>

<h4 id="观察-out-文件，可以发现系统调用-accept-5-0x7f970c13bc70-28-1-EAGAIN-资源暂时不可用-并未发生阻塞，当无服务端连接时直接返回-1"><a href="#观察-out-文件，可以发现系统调用-accept-5-0x7f970c13bc70-28-1-EAGAIN-资源暂时不可用-并未发生阻塞，当无服务端连接时直接返回-1" class="headerlink" title="观察 out 文件，可以发现系统调用 accept(5, 0x7f970c13bc70, [28])         = -1 EAGAIN (资源暂时不可用) 并未发生阻塞，当无服务端连接时直接返回 -1"></a>观察 out 文件，可以发现系统调用 <em>accept(5, 0x7f970c13bc70, [28])         = -1 EAGAIN (资源暂时不可用)</em> 并未发生阻塞，当无服务端连接时直接返回 -1</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail out.9301</span><br><span class="line">mprotect(0x7f970c22d000, 4096, PROT_READ|PROT_WRITE) = 0</span><br><span class="line">futex(0x7f970c04c354, FUTEX_WAIT_BITSET_PRIVATE, 1, &#123;tv_sec=19890, tv_nsec=261222528&#125;, 0xffffffff) = -1 ETIMEDOUT (连接超时)</span><br><span class="line">futex(0x7f970c04c328, FUTEX_WAKE_PRIVATE, 1) = 0</span><br><span class="line">accept(5, 0x7f970c13bc70, [28])         = -1 EAGAIN (资源暂时不可用)</span><br><span class="line">write(1, &quot;null.....&quot;, 9)                = 9</span><br><span class="line">write(1, &quot;\n&quot;, 1)                       = 1</span><br><span class="line">futex(0x7f970c115954, FUTEX_WAKE_OP_PRIVATE, 1, 1, 0x7f970c115950, FUTEX_OP_SET&lt;&lt;28|0&lt;&lt;12|FUTEX_OP_CMP_GT&lt;&lt;24|0x1) = 1</span><br><span class="line">futex(0x7f970c115928, FUTEX_WAKE_PRIVATE, 1) = 0</span><br><span class="line">mprotect(0x7f970c22e000, 4096, PROT_READ|PROT_WRITE) = 0</span><br><span class="line">futex(0x7f970c04c354, FUTEX_WAIT_BITSET_PRIVATE, 1, &#123;tv_sec=19891, tv_nsec=272261757&#125;, 0xffffffff</span><br></pre></td></tr></table></figure>

<h4 id="通过命令-nc-localhost-9090-进行连接，再次观察-out-文件"><a href="#通过命令-nc-localhost-9090-进行连接，再次观察-out-文件" class="headerlink" title="通过命令 nc localhost 9090 进行连接，再次观察 out 文件"></a>通过命令 <em>nc localhost 9090</em> 进行连接，再次观察 out 文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail out.9301</span><br><span class="line">write(1, &quot;null.....&quot;, 9)                = 9</span><br><span class="line">write(1, &quot;\n&quot;, 1)                       = 1</span><br><span class="line">read(6, 0x7f970c2c7a90, 4096)           = -1 EAGAIN (资源暂时不可用)</span><br><span class="line">futex(0x7f970c04c354, FUTEX_WAIT_BITSET_PRIVATE, 1, &#123;tv_sec=20045, tv_nsec=470392585&#125;, 0xffffffff) = -1 ETIMEDOUT (连接超时)</span><br><span class="line">futex(0x7f970c04c328, FUTEX_WAKE_PRIVATE, 1) = 0</span><br><span class="line">accept(5, 0x7f970c13e760, [28])         = -1 EAGAIN (资源暂时不可用)</span><br><span class="line">write(1, &quot;null.....&quot;, 9)                = 9</span><br><span class="line">write(1, &quot;\n&quot;, 1)                       = 1</span><br><span class="line">read(6, 0x7f970c2c8aa0, 4096)           = -1 EAGAIN (资源暂时不可用)</span><br><span class="line">futex(0x7f970c04c354, FUTEX_WAIT_BITSET_PRIVATE, 1, &#123;tv_sec=20046, tv_nsec=479021706&#125;, 0xffffffff</span><br></pre></td></tr></table></figure>

<p>可以发现会调用 <em>read(6, 0x7f970c2c8aa0, 4096)           = -1 EAGAIN (资源暂时不可用)</em> 尝试获取客户端数据，当前没数据时不阻塞直接返回 -1</p>
<h4 id="当客户端输入数据12345时，观察-out-文件"><a href="#当客户端输入数据12345时，观察-out-文件" class="headerlink" title="当客户端输入数据12345时，观察 out 文件"></a>当客户端输入数据<em>12345</em>时，观察 out 文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail out.9301</span><br><span class="line">read(6, 0x7f970c3f7de0, 4096)           = -1 EAGAIN (资源暂时不可用)</span><br><span class="line">futex(0x7f970c04c354, FUTEX_WAIT_BITSET_PRIVATE, 1, &#123;tv_sec=20350, tv_nsec=802512162&#125;, 0xffffffff) = -1 ETIMEDOUT (连接超时)</span><br><span class="line">futex(0x7f970c04c328, FUTEX_WAKE_PRIVATE, 1) = 0</span><br><span class="line">accept(5, 0x7f970c13bc70, [28])         = -1 EAGAIN (资源暂时不可用)</span><br><span class="line">write(1, &quot;null.....&quot;, 9)                = 9</span><br><span class="line">write(1, &quot;\n&quot;, 1)                       = 1</span><br><span class="line">read(6, &quot;12345\n&quot;, 4096)                = 6</span><br><span class="line">write(1, &quot;34706 : 12345\n&quot;, 14)         = 14</span><br><span class="line">write(1, &quot;\n&quot;, 1)                       = 1</span><br><span class="line">futex(0x7f970c04c354, FUTEX_WAIT_BITSET_PRIVATE, 1, &#123;tv_sec=20351, tv_nsec=812756397&#125;, 0xffffffff</span><br></pre></td></tr></table></figure>

<p>可以发现 <em>read(6, “12345\n”, 4096)                = 6</em> 成功接收数据</p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul>
<li>对 <em>ServerSocketChannel</em> 设置 <em>configureBlocking</em> 为 false 时，系统调用 <em>accept(5, 0x7f970c13e760, [28])         = -1 EAGAIN (资源暂时不可用)</em> 将不会被阻塞，当前没有客户端连接时会直接返回 -1</li>
<li>对 <em>SocketChannel</em> 设置 <em>configureBlocking</em> 为 false 时，系统调用  <em>read(6, 0x7f970c2c8aa0, 4096)           = -1 EAGAIN (资源暂时不可用)</em> 尝试获取客户端数据，当前没数据时不阻塞直接返回 -1</li>
<li>NIO 在一个线程内，循环遍历询问是否有新的客户端连接，若有连接将其放进集合 clients 中，再遍历 client 查询这些客户端连接是否有传入数据，如果有则获取到对应数据，没有则返回 -1</li>
<li>NIO 的优势：能够解决 BIO 多次创建线程造成的系统调用频繁的问题</li>
<li>NIO 的问题：在循环 clients 集合是，多次进行 read 系统调用导致内核态用户态频繁切换</li>
</ul>
<h2 id="多路复用-POLL-SELECT"><a href="#多路复用-POLL-SELECT" class="headerlink" title="多路复用 POLL/SELECT"></a>多路复用 POLL/SELECT</h2><h3 id="计算机组成原理之系统来消息了"><a href="#计算机组成原理之系统来消息了" class="headerlink" title="计算机组成原理之系统来消息了"></a>计算机组成原理之系统来消息了</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210601154548.png" alt="image-20210601154546121"></p>
<ol>
<li>当系统接受到消息了，会产生 IO 中断</li>
<li>中断会导致调用 callback，将网卡中发来的数据走网络协议栈最终关联到 FD 的 buffer</li>
<li>所以在某一时间，如果从 app 询问内核某一个或者某些 FD 是否有可 R/W，会有状态返回</li>
</ol>
<h3 id="poll-select-原理"><a href="#poll-select-原理" class="headerlink" title="poll/select 原理"></a>poll/select 原理</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210601155532.png" alt="image-20210601155531168"></p>
<ol>
<li>app 发起软中断，调用内核 select/poll 方法</li>
<li>内核通过 select/poll 方法，轮询 app 传入的参数 fds，会返回可用的 fds</li>
<li>app 获取可用的 fds，再调用内核 read 方法获取数据</li>
</ol>
<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ol>
<li>select/poll 解决了 NIO 对暂无数据的 fd 调用内核 read 方法导致用户态内核态切换频繁的问题</li>
<li>select/poll 在内核层面筛选有数据的 fd 的时间复杂度为 O(n)，且每次调用 select 方法会将所有需要监听的 fd 传给内核</li>
</ol>
<h2 id="EPOLL"><a href="#EPOLL" class="headerlink" title="EPOLL"></a>EPOLL</h2><h3 id="epoll-create、epoll-ctl-和-epoll-wait"><a href="#epoll-create、epoll-ctl-和-epoll-wait" class="headerlink" title="epoll_create、epoll_ctl 和 epoll_wait"></a>epoll_create、epoll_ctl 和 epoll_wait</h3><ul>
<li><p>epoll_create - open an epoll file descriptor</p>
<blockquote>
<p>epoll_create() 返回一个引用新 epoll 实例的文件描述符。该文件描述符用于对epoll接口的所有后续调用。其本质是在内核中开辟一块内存空间，并返回描述该内存空间的 fd。</p>
</blockquote>
</li>
<li><p>epoll_ctl - control interface for an epoll descriptor</p>
<blockquote>
<p>int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);</p>
<p>epfd：即为 epoll_create 返回的 fd</p>
<p>op：表示要进行什么操作，例如 EPOLL_CTL_ADD、EPOLL_CTL_ADD、EPOLL_CTL_DEL</p>
<p>fd：表示这些操作是对这个 fd 进行的</p>
<p>*event：表示这个 fd 可用于什么操作，如 </p>
<p>​                EPOLLIN - The associated file is available for read(2) operations.</p>
<p>​                EPOLLOUT - The associated file is available for write(2) operations.</p>
</blockquote>
</li>
<li><p>epoll_wait - wait for an I/O event on an epoll file descriptor</p>
<blockquote>
<p>epoll_wait 表示等待返回一个可操作的 fd 链表</p>
</blockquote>
</li>
</ul>
<h3 id="epoll-原理"><a href="#epoll-原理" class="headerlink" title="epoll 原理"></a>epoll 原理</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210601174206.png" alt="image-20210601174205090"></p>
<ol>
<li>系统调用 <em>epoll_create</em> 在内核中开辟一块内存，并将 FD6 指向该空间</li>
<li>在客户端和服务器端三次握手结束后，并将该 socket 分配给 app 后，app 的线程会产生一个 FD5，并调用 <em>epoll_ctl(fd6,ADD,fd5…</em> 把 fd5 放入 fd6 指向的内核空间中</li>
<li>当系统接受到 IO 中断后，不仅将数据从网卡的 buffer 复制到 fd 的 buffer 中，还会将该 fd 复制到 fd 的链表里</li>
<li>当调用 <em>epoll_wait</em> 方法后，会将 fd 的链表返回。链表里的 fd 都是有数据的</li>
</ol>
<blockquote>
<p>fd4 表示处于 listen 时的 socket，也是会进入红黑树中的</p>
</blockquote>
<h2 id="java-代码实现多路复用"><a href="#java-代码实现多路复用" class="headerlink" title="java 代码实现多路复用"></a>java 代码实现多路复用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketMultiplexingSingleThreadv1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServerSocketChannel server = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// linux 多路复用器（select poll    epoll kqueue） nginx  event&#123;&#125;</span></span><br><span class="line">    <span class="keyword">private</span> Selector selector = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> port = <span class="number">9090</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server = ServerSocketChannel.open();</span><br><span class="line">            server.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            server.bind(<span class="keyword">new</span> InetSocketAddress(port));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果在epoll模型下，open--》  epoll_create -&gt; fd3</span></span><br><span class="line">            <span class="comment">// select  poll  *epoll  优先选择：epoll  但是可以 -D修正</span></span><br><span class="line">            selector = Selector.open();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// server 约等于 listen状态的 fd4</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            register</span></span><br><span class="line"><span class="comment">            如果：</span></span><br><span class="line"><span class="comment">            select，poll：jvm里开辟一个数组 fd4 放进去</span></span><br><span class="line"><span class="comment">            epoll：  epoll_ctl(fd3,ADD,fd4,EPOLLIN</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            server.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        initServer();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器启动了。。。。。&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                Set&lt;SelectionKey&gt; keys = selector.keys();</span><br><span class="line">                System.out.println(keys.size() + <span class="string">&quot;   size&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 1.调用多路复用器(select,poll  or  epoll  (epoll_wait))</span></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                select()是啥意思：</span></span><br><span class="line"><span class="comment">                1.select，poll  其实  内核的select（fd4）  poll(fd4)</span></span><br><span class="line"><span class="comment">                2.epoll：  其实 内核的 epoll_wait()</span></span><br><span class="line"><span class="comment">                参数可以带时间：没有时间，0  ：  阻塞，有时间设置一个超时</span></span><br><span class="line"><span class="comment">                selector.wakeup()  结果返回0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                懒加载：</span></span><br><span class="line"><span class="comment">                其实再触碰到selector.select()调用的时候触发了epoll_ctl的调用</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">while</span> (selector.select() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 返回的有状态的fd集合</span></span><br><span class="line">                    Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();  </span><br><span class="line">                    Iterator&lt;SelectionKey&gt; iter = selectionKeys.iterator();</span><br><span class="line">                    <span class="comment">// so，管你啥多路复用器，你呀只能给我状态，我还得一个一个的去处理他们的R/W。同步好辛苦！！！！！！！！</span></span><br><span class="line">                    <span class="comment">// NIO  自己对着每一个fd调用系统调用，浪费资源，那么你看，这里是不是调用了一次select方法，知道具体的那些可以R/W了？</span></span><br><span class="line">                    <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">                        SelectionKey key = iter.next();</span><br><span class="line">                        <span class="comment">//set  不移除会重复循环处理</span></span><br><span class="line">                        iter.remove(); </span><br><span class="line">                        <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                            <span class="comment">// 看代码的时候，这里是重点，如果要去接受一个新的连接</span></span><br><span class="line">                            <span class="comment">// 语义上，accept接受连接且返回新连接的FD对吧？</span></span><br><span class="line">                            <span class="comment">// 那新的FD怎么办？</span></span><br><span class="line">                            <span class="comment">// select，poll，因为他们内核没有空间，那么在jvm中保存和前边的fd4那个listen的一起</span></span><br><span class="line">                            <span class="comment">// epoll： 我们希望通过epoll_ctl把新的客户端fd注册到内核空间</span></span><br><span class="line">                            acceptHandler(key);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                            readHandler(key);  </span><br><span class="line">                            <span class="comment">//在当前线程，这个方法可能会阻塞  ，如果阻塞了十年，其他的IO早就没电了。。。</span></span><br><span class="line">                            <span class="comment">//所以，为什么提出了 IO THREADS</span></span><br><span class="line">                            <span class="comment">//redis  是不是用了epoll，redis是不是有个io threads的概念 ，redis是不是单线程的</span></span><br><span class="line">                            <span class="comment">//tomcat 8,9  异步的处理方式  IO  和   处理上  解耦</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acceptHandler</span><span class="params">(SelectionKey key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerSocketChannel ssc = (ServerSocketChannel) key.channel();</span><br><span class="line">            <span class="comment">//来啦，目的是调用accept接受客户端  fd7</span></span><br><span class="line">            SocketChannel client = ssc.accept(); </span><br><span class="line">            client.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">8192</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//你看，调用了register</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            select，poll：jvm里开辟一个数组 fd7 放进去</span></span><br><span class="line"><span class="comment">            epoll：  epoll_ctl(fd3,ADD,fd7,EPOLLIN</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            client.register(selector, SelectionKey.OP_READ, buffer);</span><br><span class="line">            System.out.println(<span class="string">&quot;-------------------------------------------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;新客户端：&quot;</span> + client.getRemoteAddress());</span><br><span class="line">            System.out.println(<span class="string">&quot;-------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readHandler</span><span class="params">(SelectionKey key)</span> </span>&#123;</span><br><span class="line">        SocketChannel client = (SocketChannel) key.channel();</span><br><span class="line">        ByteBuffer buffer = (ByteBuffer) key.attachment();</span><br><span class="line">        buffer.clear();</span><br><span class="line">        <span class="keyword">int</span> read = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                read = client.read(buffer);</span><br><span class="line">                <span class="keyword">if</span> (read &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    buffer.flip();</span><br><span class="line">                    <span class="keyword">while</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">                        client.write(buffer);</span><br><span class="line">                    &#125;</span><br><span class="line">                    buffer.clear();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (read == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    client.close();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SocketMultiplexingSingleThreadv1 service = <span class="keyword">new</span> SocketMultiplexingSingleThreadv1();</span><br><span class="line">        service.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><em>Selector selector = Selector.open();</em> 获取多路复用器模型，可以是 epoll、poll、select</li>
<li><em>server.register(selector, SelectionKey.OP_ACCEPT);</em> 如果是 select/poll 模型：jvm里开辟一个数组 fd4 放进去；如果是 epoll 模型：epoll_ctl(fd3,ADD,fd4,EPOLLIN</li>
<li><em>client.register(selector, SelectionKey.OP_READ, buffer);</em> 如果是 select/poll 模型：fd7 放进 jvm 里的一个数组；如果是 epoll 模型：epoll_ctl(fd3,ADD,fd7,EPOLLIN</li>
<li><em>selector.select()</em>  如果是 select，poll 模型其实是调用内核的 *select(fd4)/poll(fd4)*，如果是 epoll 模型则是调用 <em>epoll_wait()</em></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>io</tag>
      </tags>
  </entry>
  <entry>
    <title>CGLIB 动态代理原理</title>
    <url>/2022/03/29/CGLIB%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><h3 id="被代理类Calculator"><a href="#被代理类Calculator" class="headerlink" title="被代理类Calculator"></a>被代理类Calculator</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i + j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i - j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i * j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i / j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="MethodInterceptor"><a href="#MethodInterceptor" class="headerlink" title="MethodInterceptor"></a>MethodInterceptor</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCglib</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用cglib动态代理&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> methodProxy.invokeSuper(o, objects);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="程序入口"><a href="#程序入口" class="headerlink" title="程序入口"></a>程序入口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置cglib生成的class文件保存路径</span></span><br><span class="line">        System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, <span class="string">&quot;E:\\mashibing\\spring&quot;</span>);</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(Calculator.class);</span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> MyCglib());</span><br><span class="line">        Calculator myCalculator = (Calculator) enhancer.create();</span><br><span class="line">        myCalculator.add(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(myCalculator.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="从add-1-1-开始说起"><a href="#从add-1-1-开始说起" class="headerlink" title="从add(1, 1)开始说起"></a>从add(1, 1)开始说起</h2><h3 id="代理对象的class文件"><a href="#代理对象的class文件" class="headerlink" title="代理对象的class文件"></a>代理对象的class文件</h3><p>当程序运行完成之后，会在指定位置生成代理对象的class文件。为了后续讲解，这里先将生成的class文件展示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.proxy.cglib;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.core.ReflectUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.core.Signature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Callback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Factory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span>$$<span class="title">EnhancerByCGLIB</span>$$345<span class="title">a285a</span> <span class="keyword">extends</span> <span class="title">Calculator</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> CGLIB$BOUND;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object CGLIB$FACTORY_DATA;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal CGLIB$THREAD_CALLBACKS;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Callback[] CGLIB$STATIC_CALLBACKS;</span><br><span class="line">    <span class="keyword">private</span> MethodInterceptor CGLIB$CALLBACK_0;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object CGLIB$CALLBACK_FILTER;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$add$<span class="number">0</span>$Method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$add$<span class="number">0</span>$Proxy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] CGLIB$emptyArgs;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$sub$<span class="number">1</span>$Method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$sub$<span class="number">1</span>$Proxy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$mult$<span class="number">2</span>$Method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$mult$<span class="number">2</span>$Proxy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$div$<span class="number">3</span>$Method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$div$<span class="number">3</span>$Proxy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$equals$<span class="number">4</span>$Method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$equals$<span class="number">4</span>$Proxy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$toString$<span class="number">5</span>$Method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$toString$<span class="number">5</span>$Proxy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$hashCode$<span class="number">6</span>$Method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$hashCode$<span class="number">6</span>$Proxy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$clone$<span class="number">7</span>$Method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$clone$<span class="number">7</span>$Proxy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> CGLIB$STATICHOOK1() &#123;</span><br><span class="line">        CGLIB$THREAD_CALLBACKS = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line">        CGLIB$emptyArgs = <span class="keyword">new</span> Object[<span class="number">0</span>];</span><br><span class="line">        Class var0 = Class.forName(<span class="string">&quot;com.eitan.proxy.cglib.Calculator$$EnhancerByCGLIB$$345a285a&quot;</span>);</span><br><span class="line">        Class var1;</span><br><span class="line">        Method[] var10000 = ReflectUtils.findMethods(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;add&quot;</span>, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;sub&quot;</span>, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;mult&quot;</span>, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;div&quot;</span>, <span class="string">&quot;(II)I&quot;</span>&#125;, (var1 = Class.forName(<span class="string">&quot;com.eitan.proxy.cglib.Calculator&quot;</span>)).getDeclaredMethods());</span><br><span class="line">        CGLIB$add$<span class="number">0</span>$Method = var10000[<span class="number">0</span>];</span><br><span class="line">        CGLIB$add$<span class="number">0</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;add&quot;</span>, <span class="string">&quot;CGLIB$add$0&quot;</span>);</span><br><span class="line">        CGLIB$sub$<span class="number">1</span>$Method = var10000[<span class="number">1</span>];</span><br><span class="line">        CGLIB$sub$<span class="number">1</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;sub&quot;</span>, <span class="string">&quot;CGLIB$sub$1&quot;</span>);</span><br><span class="line">        CGLIB$mult$<span class="number">2</span>$Method = var10000[<span class="number">2</span>];</span><br><span class="line">        CGLIB$mult$<span class="number">2</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;mult&quot;</span>, <span class="string">&quot;CGLIB$mult$2&quot;</span>);</span><br><span class="line">        CGLIB$div$<span class="number">3</span>$Method = var10000[<span class="number">3</span>];</span><br><span class="line">        CGLIB$div$<span class="number">3</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;div&quot;</span>, <span class="string">&quot;CGLIB$div$3&quot;</span>);</span><br><span class="line">        var10000 = ReflectUtils.findMethods(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;equals&quot;</span>, <span class="string">&quot;(Ljava/lang/Object;)Z&quot;</span>, <span class="string">&quot;toString&quot;</span>, <span class="string">&quot;()Ljava/lang/String;&quot;</span>, <span class="string">&quot;hashCode&quot;</span>, <span class="string">&quot;()I&quot;</span>, <span class="string">&quot;clone&quot;</span>, <span class="string">&quot;()Ljava/lang/Object;&quot;</span>&#125;, (var1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>)).getDeclaredMethods());</span><br><span class="line">        CGLIB$equals$<span class="number">4</span>$Method = var10000[<span class="number">0</span>];</span><br><span class="line">        CGLIB$equals$<span class="number">4</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;(Ljava/lang/Object;)Z&quot;</span>, <span class="string">&quot;equals&quot;</span>, <span class="string">&quot;CGLIB$equals$4&quot;</span>);</span><br><span class="line">        CGLIB$toString$<span class="number">5</span>$Method = var10000[<span class="number">1</span>];</span><br><span class="line">        CGLIB$toString$<span class="number">5</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;()Ljava/lang/String;&quot;</span>, <span class="string">&quot;toString&quot;</span>, <span class="string">&quot;CGLIB$toString$5&quot;</span>);</span><br><span class="line">        CGLIB$hashCode$<span class="number">6</span>$Method = var10000[<span class="number">2</span>];</span><br><span class="line">        CGLIB$hashCode$<span class="number">6</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;()I&quot;</span>, <span class="string">&quot;hashCode&quot;</span>, <span class="string">&quot;CGLIB$hashCode$6&quot;</span>);</span><br><span class="line">        CGLIB$clone$<span class="number">7</span>$Method = var10000[<span class="number">3</span>];</span><br><span class="line">        CGLIB$clone$<span class="number">7</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;()Ljava/lang/Object;&quot;</span>, <span class="string">&quot;clone&quot;</span>, <span class="string">&quot;CGLIB$clone$7&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> CGLIB$add$<span class="number">0</span>(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.add(var1, var2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2)</span> </span>&#123;</span><br><span class="line">        MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">            var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var10000 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object var3 = var10000.intercept(<span class="keyword">this</span>, CGLIB$add$<span class="number">0</span>$Method, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> Integer(var1), <span class="keyword">new</span> Integer(var2)&#125;, CGLIB$add$<span class="number">0</span>$Proxy);</span><br><span class="line">            <span class="keyword">return</span> var3 == <span class="keyword">null</span> ? <span class="number">0</span> : ((Number)var3).intValue();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.add(var1, var2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> CGLIB$sub$<span class="number">1</span>(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.sub(var1, var2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2)</span> </span>&#123;</span><br><span class="line">        MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">            var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var10000 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object var3 = var10000.intercept(<span class="keyword">this</span>, CGLIB$sub$<span class="number">1</span>$Method, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> Integer(var1), <span class="keyword">new</span> Integer(var2)&#125;, CGLIB$sub$<span class="number">1</span>$Proxy);</span><br><span class="line">            <span class="keyword">return</span> var3 == <span class="keyword">null</span> ? <span class="number">0</span> : ((Number)var3).intValue();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.sub(var1, var2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> CGLIB$mult$<span class="number">2</span>(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.mult(var1, var2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2)</span> </span>&#123;</span><br><span class="line">        MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">            var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var10000 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object var3 = var10000.intercept(<span class="keyword">this</span>, CGLIB$mult$<span class="number">2</span>$Method, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> Integer(var1), <span class="keyword">new</span> Integer(var2)&#125;, CGLIB$mult$<span class="number">2</span>$Proxy);</span><br><span class="line">            <span class="keyword">return</span> var3 == <span class="keyword">null</span> ? <span class="number">0</span> : ((Number)var3).intValue();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.mult(var1, var2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> CGLIB$div$<span class="number">3</span>(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.div(var1, var2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2)</span> </span>&#123;</span><br><span class="line">        MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">            var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var10000 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object var3 = var10000.intercept(<span class="keyword">this</span>, CGLIB$div$<span class="number">3</span>$Method, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> Integer(var1), <span class="keyword">new</span> Integer(var2)&#125;, CGLIB$div$<span class="number">3</span>$Proxy);</span><br><span class="line">            <span class="keyword">return</span> var3 == <span class="keyword">null</span> ? <span class="number">0</span> : ((Number)var3).intValue();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.div(var1, var2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> CGLIB$equals$<span class="number">4</span>(Object var1) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.equals(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object var1)</span> </span>&#123;</span><br><span class="line">        MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">            var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var10000 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object var2 = var10000.intercept(<span class="keyword">this</span>, CGLIB$equals$<span class="number">4</span>$Method, <span class="keyword">new</span> Object[]&#123;var1&#125;, CGLIB$equals$<span class="number">4</span>$Proxy);</span><br><span class="line">            <span class="keyword">return</span> var2 == <span class="keyword">null</span> ? <span class="keyword">false</span> : (Boolean)var2;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.equals(var1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String CGLIB$toString$<span class="number">5</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">            var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var10000 != <span class="keyword">null</span> ? (String)var10000.intercept(<span class="keyword">this</span>, CGLIB$toString$<span class="number">5</span>$Method, CGLIB$emptyArgs, CGLIB$toString$<span class="number">5</span>$Proxy) : <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> CGLIB$hashCode$<span class="number">6</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">            var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var10000 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object var1 = var10000.intercept(<span class="keyword">this</span>, CGLIB$hashCode$<span class="number">6</span>$Method, CGLIB$emptyArgs, CGLIB$hashCode$<span class="number">6</span>$Proxy);</span><br><span class="line">            <span class="keyword">return</span> var1 == <span class="keyword">null</span> ? <span class="number">0</span> : ((Number)var1).intValue();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.hashCode();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Object CGLIB$clone$<span class="number">7</span>() <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">            var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var10000 != <span class="keyword">null</span> ? var10000.intercept(<span class="keyword">this</span>, CGLIB$clone$<span class="number">7</span>$Method, CGLIB$emptyArgs, CGLIB$clone$<span class="number">7</span>$Proxy) : <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MethodProxy CGLIB$findMethodProxy(Signature var0) &#123;</span><br><span class="line">        String var10000 = var0.toString();</span><br><span class="line">        <span class="keyword">switch</span>(var10000.hashCode()) &#123;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">2131682232</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;sub(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> CGLIB$sub$<span class="number">1</span>$Proxy;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1287932281</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;add(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> CGLIB$add$<span class="number">0</span>$Proxy;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1267343528</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;mult(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> CGLIB$mult$<span class="number">2</span>$Proxy;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">508378822</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;clone()Ljava/lang/Object;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> CGLIB$clone$<span class="number">7</span>$Proxy;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">303407255</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;div(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> CGLIB$div$<span class="number">3</span>$Proxy;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1826985398</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;equals(Ljava/lang/Object;)Z&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> CGLIB$equals$<span class="number">4</span>$Proxy;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1913648695</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;toString()Ljava/lang/String;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> CGLIB$toString$<span class="number">5</span>$Proxy;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1984935277</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;hashCode()I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> CGLIB$hashCode$<span class="number">6</span>$Proxy;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Calculator$$EnhancerByCGLIB$$345a285a() &#123;</span><br><span class="line">        CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> CGLIB$SET_THREAD_CALLBACKS(Callback[] var0) &#123;</span><br><span class="line">        CGLIB$THREAD_CALLBACKS.set(var0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> CGLIB$SET_STATIC_CALLBACKS(Callback[] var0) &#123;</span><br><span class="line">        CGLIB$STATIC_CALLBACKS = var0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> CGLIB$BIND_CALLBACKS(Object var0) &#123;</span><br><span class="line">        Calculator$$EnhancerByCGLIB$$345a285a var1 = (Calculator$$EnhancerByCGLIB$$345a285a)var0;</span><br><span class="line">        <span class="keyword">if</span> (!var1.CGLIB$BOUND) &#123;</span><br><span class="line">            var1.CGLIB$BOUND = <span class="keyword">true</span>;</span><br><span class="line">            Object var10000 = CGLIB$THREAD_CALLBACKS.get();</span><br><span class="line">            <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                var10000 = CGLIB$STATIC_CALLBACKS;</span><br><span class="line">                <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var1.CGLIB$CALLBACK_0 = (MethodInterceptor)((Callback[])var10000)[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">newInstance</span><span class="params">(Callback[] var1)</span> </span>&#123;</span><br><span class="line">        CGLIB$SET_THREAD_CALLBACKS(var1);</span><br><span class="line">        Calculator$$EnhancerByCGLIB$$345a285a var10000 = <span class="keyword">new</span> Calculator$$EnhancerByCGLIB$$345a285a();</span><br><span class="line">        CGLIB$SET_THREAD_CALLBACKS((Callback[])<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> var10000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">newInstance</span><span class="params">(Callback var1)</span> </span>&#123;</span><br><span class="line">        CGLIB$SET_THREAD_CALLBACKS(<span class="keyword">new</span> Callback[]&#123;var1&#125;);</span><br><span class="line">        Calculator$$EnhancerByCGLIB$$345a285a var10000 = <span class="keyword">new</span> Calculator$$EnhancerByCGLIB$$345a285a();</span><br><span class="line">        CGLIB$SET_THREAD_CALLBACKS((Callback[])<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> var10000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">newInstance</span><span class="params">(Class[] var1, Object[] var2, Callback[] var3)</span> </span>&#123;</span><br><span class="line">        CGLIB$SET_THREAD_CALLBACKS(var3);</span><br><span class="line">        Calculator$$EnhancerByCGLIB$$345a285a var10000 = <span class="keyword">new</span> Calculator$$EnhancerByCGLIB$$345a285a;</span><br><span class="line">        <span class="keyword">switch</span>(var1.length) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            var10000.&lt;init&gt;();</span><br><span class="line">            CGLIB$SET_THREAD_CALLBACKS((Callback[])<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> var10000;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Constructor not found&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Callback <span class="title">getCallback</span><span class="params">(<span class="keyword">int</span> var1)</span> </span>&#123;</span><br><span class="line">        CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">        MethodInterceptor var10000;</span><br><span class="line">        <span class="keyword">switch</span>(var1) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            var10000 = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var10000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallback</span><span class="params">(<span class="keyword">int</span> var1, Callback var2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(var1) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">this</span>.CGLIB$CALLBACK_0 = (MethodInterceptor)var2;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Callback[] getCallbacks() &#123;</span><br><span class="line">        CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Callback[]&#123;<span class="keyword">this</span>.CGLIB$CALLBACK_0&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallbacks</span><span class="params">(Callback[] var1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.CGLIB$CALLBACK_0 = (MethodInterceptor)var1[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        CGLIB$STATICHOOK1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="add-int-var1-int-var2"><a href="#add-int-var1-int-var2" class="headerlink" title="add(int var1, int var2)"></a>add(int var1, int var2)</h3><p>当主程序调用 add 方法后，实际调用的是被代理对象的 add 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2)</span> </span>&#123;</span><br><span class="line">    MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">    <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">        var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (var10000 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Object var3 = var10000.intercept(<span class="keyword">this</span>, CGLIB$add$<span class="number">0</span>$Method, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> Integer(var1), <span class="keyword">new</span> Integer(var2)&#125;, CGLIB$add$<span class="number">0</span>$Proxy);</span><br><span class="line">        <span class="keyword">return</span> var3 == <span class="keyword">null</span> ? <span class="number">0</span> : ((Number)var3).intValue();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.add(var1, var2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当首次进入时 <em><strong>this.CGLIB$CALLBACK_0</strong></em> 并未赋值，因此 <em><strong>var1000</strong></em> 为 <em><strong>null</strong></em>，将会执行 <em><strong>CGLIB$BIND_CALLBACKS(this)</strong></em> 。</p>
<h3 id="CGLIB-BIND-CALLBACKS-Object-var0"><a href="#CGLIB-BIND-CALLBACKS-Object-var0" class="headerlink" title="CGLIB$BIND_CALLBACKS(Object var0)"></a>CGLIB$BIND_CALLBACKS(Object var0)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> CGLIB$BIND_CALLBACKS(Object var0) &#123;</span><br><span class="line">    Calculator$$EnhancerByCGLIB$$345a285a var1 = (Calculator$$EnhancerByCGLIB$$345a285a)var0;</span><br><span class="line">    <span class="keyword">if</span> (!var1.CGLIB$BOUND) &#123;</span><br><span class="line">        var1.CGLIB$BOUND = <span class="keyword">true</span>;</span><br><span class="line">        Object var10000 = CGLIB$THREAD_CALLBACKS.get();</span><br><span class="line">        <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            var10000 = CGLIB$STATIC_CALLBACKS;</span><br><span class="line">            <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var1.CGLIB$CALLBACK_0 = (MethodInterceptor)((Callback[])var10000)[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>CGLIB$CALLBACK_0</strong></em> 为 <em><strong>CGLIB$THREAD_CALLBACKS</strong></em> 调用 <em><strong>get()</strong></em> 方法后返回的 <em><strong>Callback[]</strong></em> 数组的第0个元素，而 <em><strong>CGLIB$THREAD_CALLBACKS</strong></em> 为一个静态的 <em><strong>ThreadLocal</strong></em> 对象且通过一个静态方法进行赋值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> CGLIB$SET_THREAD_CALLBACKS(Callback[] var0) &#123;</span><br><span class="line">    CGLIB$THREAD_CALLBACKS.set(var0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此，我们只需要明白 <em><strong>CGLIB$SET_THREAD_CALLBACKS(Callback[] var0)</strong></em> 是何时被调用的，且传入的参数 <em><strong>Callback[] var0</strong></em> 为何值就能清楚代理对象在调用被代理方法的具体流程，而这个静态方法被调用的时机在  <em><strong>Calculator myCalculator = (Calculator) enhancer.create()</strong></em> 方法中。</p>
<h2 id="浅析代理对象的创建方法-enhancer-create"><a href="#浅析代理对象的创建方法-enhancer-create" class="headerlink" title="浅析代理对象的创建方法 enhancer.create()"></a>浅析代理对象的创建方法 enhancer.create()</h2><p>我们跳过各种对数据的包装和缓存的代码，可以看到真正对代理对象的创建代码在 <em><strong>Enhancer</strong></em> 的父类 <em><strong>AbstractClassGenerator</strong></em> 的 <em><strong>create(Object key)</strong></em> 方法中。</p>
<h3 id="create"><a href="#create" class="headerlink" title="create()"></a>create()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	classOnly = <span class="keyword">false</span>;</span><br><span class="line">	argumentTypes = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">return</span> createHelper();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="createHelper"><a href="#createHelper" class="headerlink" title="createHelper()"></a>createHelper()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">createHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	preValidate();</span><br><span class="line">	Object key = KEY_FACTORY.newInstance((superclass != <span class="keyword">null</span>) ? superclass.getName() : <span class="keyword">null</span>,</span><br><span class="line">			ReflectUtils.getNames(interfaces),</span><br><span class="line">			filter == ALL_ZERO ? <span class="keyword">null</span> : <span class="keyword">new</span> WeakCacheKey&lt;CallbackFilter&gt;(filter),</span><br><span class="line">			callbackTypes,</span><br><span class="line">			useFactory,</span><br><span class="line">			interceptDuringConstruction,</span><br><span class="line">			serialVersionUID);</span><br><span class="line">	<span class="keyword">this</span>.currentKey = key;</span><br><span class="line">	Object result = <span class="keyword">super</span>.create(key);</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="super-create-key"><a href="#super-create-key" class="headerlink" title="super.create(key)"></a>super.create(key)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">create</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		ClassLoader loader = getClassLoader();</span><br><span class="line">		Map&lt;ClassLoader, ClassLoaderData&gt; cache = CACHE;</span><br><span class="line">		ClassLoaderData data = cache.get(loader);</span><br><span class="line">		<span class="keyword">if</span> (data == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">synchronized</span> (AbstractClassGenerator.class) &#123;</span><br><span class="line">				cache = CACHE;</span><br><span class="line">				data = cache.get(loader);</span><br><span class="line">				<span class="keyword">if</span> (data == <span class="keyword">null</span>) &#123;</span><br><span class="line">					Map&lt;ClassLoader, ClassLoaderData&gt; newCache = <span class="keyword">new</span> WeakHashMap&lt;ClassLoader, ClassLoaderData&gt;(cache);</span><br><span class="line">					data = <span class="keyword">new</span> ClassLoaderData(loader);</span><br><span class="line">					newCache.put(loader, data);</span><br><span class="line">					CACHE = newCache;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>.key = key;</span><br><span class="line">           <span class="comment">// 这一步是生成代理对象的class文件的包装对象EnhancerFactoryData</span></span><br><span class="line">		Object obj = data.get(<span class="keyword">this</span>, getUseCache());</span><br><span class="line">		<span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">			<span class="keyword">return</span> firstInstance((Class) obj);</span><br><span class="line">		&#125;</span><br><span class="line">           <span class="comment">// 这一步通过代理对象的class文件将代理对象创建出来</span></span><br><span class="line">		<span class="keyword">return</span> nextInstance(obj);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (RuntimeException | Error ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> ex;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> CodeGenerationException(ex);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 <em><strong>Object obj = data.get(this, getUseCache())</strong></em> 是生成代理对象的class文件的方法，而 <em><strong>nextInstance(obj)</strong></em> 方法则是通过代理对象的class文件将代理对象创建出来。代理对象的静态方法 <em><strong>CGLIB$SET_THREAD_CALLBACKS(Callback[] var0)</strong></em>  肯定是在其class文件生成之后被调用的，因此我们继续跟踪 <em><strong>nextInstance(obj)</strong></em> 方法。</p>
<h3 id="Enhancer的nextInstance-Object-instance"><a href="#Enhancer的nextInstance-Object-instance" class="headerlink" title="Enhancer的nextInstance(Object instance)"></a>Enhancer的nextInstance(Object instance)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">nextInstance</span><span class="params">(Object instance)</span> </span>&#123;</span><br><span class="line">	EnhancerFactoryData data = (EnhancerFactoryData) instance;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (classOnly) &#123;</span><br><span class="line">		<span class="keyword">return</span> data.generatedClass;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Class[] argumentTypes = <span class="keyword">this</span>.argumentTypes;</span><br><span class="line">	Object[] arguments = <span class="keyword">this</span>.arguments;</span><br><span class="line">	<span class="keyword">if</span> (argumentTypes == <span class="keyword">null</span>) &#123;</span><br><span class="line">		argumentTypes = Constants.EMPTY_CLASS_ARRAY;</span><br><span class="line">		arguments = <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> data.newInstance(argumentTypes, arguments, callbacks);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="EnhancerFactoryData的newInstance-Class-argumentTypes-Object-arguments-Callback-callbacks"><a href="#EnhancerFactoryData的newInstance-Class-argumentTypes-Object-arguments-Callback-callbacks" class="headerlink" title="EnhancerFactoryData的newInstance(Class[] argumentTypes, Object[] arguments, Callback[] callbacks)"></a>EnhancerFactoryData的newInstance(Class[] argumentTypes, Object[] arguments, Callback[] callbacks)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">newInstance</span><span class="params">(Class[] argumentTypes, Object[] arguments, Callback[] callbacks)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用代理的对象静态方法 CGLIB$SET_THREAD_CALLBACKS(Callback[] var0)</span></span><br><span class="line">    setThreadCallbacks(callbacks);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Explicit reference equality is added here just in case Arrays.equals does not have one</span></span><br><span class="line">        <span class="keyword">if</span> (primaryConstructorArgTypes == argumentTypes ||</span><br><span class="line">            Arrays.equals(primaryConstructorArgTypes, argumentTypes)) &#123;</span><br><span class="line">            <span class="comment">// If we have relevant Constructor instance at hand, just call it</span></span><br><span class="line">            <span class="comment">// This skips &quot;get constructors&quot; machinery</span></span><br><span class="line">            <span class="keyword">return</span> ReflectUtils.newInstance(primaryConstructor, arguments);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Take a slow path if observing unexpected argument types</span></span><br><span class="line">        <span class="keyword">return</span> ReflectUtils.newInstance(generatedClass, argumentTypes, arguments);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// clear thread callbacks to allow them to be gc&#x27;d</span></span><br><span class="line">        setThreadCallbacks(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>EnhancerFactoryData</strong></em> 是 <em><strong>Enhancer</strong></em> 的内部类，而这里的 <em><strong>setThreadCallbacks(callbacks)</strong></em> 的入参 <em><strong>callbacks</strong></em> 往上追溯来自于 <em><strong>Enhancer</strong></em> 类的属性<em><strong>private Callback[] callbacks</strong></em>，那这个属性是何时赋值的呢？将目光移向我们写道程序入口，我们将自定义的 <em><strong>MethodInterceptor</strong></em> 对象 <em><strong>MyCglib</strong></em> 创建并赋值给了 <em><strong>Enhancer</strong></em> 的对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置cglib生成的class文件保存路径</span></span><br><span class="line">        System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, <span class="string">&quot;E:\\mashibing\\spring&quot;</span>);</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(Calculator.class);</span><br><span class="line">        <span class="comment">// 对Enhancer类的callbacks属性赋值</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> MyCglib());</span><br><span class="line">        Calculator myCalculator = (Calculator) enhancer.create();</span><br><span class="line">        myCalculator.add(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(myCalculator.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="setThreadCallbacks-Callback-callbacks"><a href="#setThreadCallbacks-Callback-callbacks" class="headerlink" title="setThreadCallbacks(Callback[] callbacks)"></a>setThreadCallbacks(Callback[] callbacks)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setThreadCallbacks</span><span class="params">(Callback[] callbacks)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        setThreadCallbacks.invoke(generatedClass, (Object) callbacks);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CodeGenerationException(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CodeGenerationException(e.getTargetException());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>setThreadCallbacks</strong></em>  是代理类静态方法  <em><strong>CGLIB$SET_THREAD_CALLBACKS(Callback[] var0)</strong></em> 的 <em><strong>Method</strong></em> 对象，<em><strong>generatedClass</strong></em> 为代理对象的 <em><strong>class</strong></em> 对象。这两个对象都是 <em><strong>EnhancerFactoryData</strong></em> 的内部属性字段，是通过  <em><strong>EnhancerFactoryData</strong></em> 的构造方法赋值的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EnhancerFactoryData</span><span class="params">(Class generatedClass, Class[] primaryConstructorArgTypes, <span class="keyword">boolean</span> classOnly)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 代理对象的class对象</span></span><br><span class="line">    <span class="keyword">this</span>.generatedClass = generatedClass;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 通过class对象和方法名获取Method对象</span></span><br><span class="line">        setThreadCallbacks = getCallbacksSetter(generatedClass, SET_THREAD_CALLBACKS_NAME);</span><br><span class="line">        <span class="keyword">if</span> (classOnly) &#123;</span><br><span class="line">            <span class="keyword">this</span>.primaryConstructorArgTypes = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.primaryConstructor = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.primaryConstructorArgTypes = primaryConstructorArgTypes;</span><br><span class="line">            <span class="keyword">this</span>.primaryConstructor = ReflectUtils.getConstructor(generatedClass, primaryConstructorArgTypes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CodeGenerationException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MethodInterceptor的intercept方法是怎么实现代理的"><a href="#MethodInterceptor的intercept方法是怎么实现代理的" class="headerlink" title="MethodInterceptor的intercept方法是怎么实现代理的"></a>MethodInterceptor的intercept方法是怎么实现代理的</h2><p>通过以上讲解，我们得知代理对象 <em><strong>Calculator myCalculator = (Calculator) enhancer.create()</strong></em> 调用 <em><strong>myCalculator.add(1, 1)</strong></em>  方法，实际上会去调用我们在 <em><strong>Enhancer</strong></em> 对象中设置的回调对象 <em><strong>enhancer.setCallback(new MyCglib())</strong></em> 的 <em><strong>intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy)</strong></em> 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2)</span> </span>&#123;</span><br><span class="line">    MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">    <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">        var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (var10000 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Object var3 = var10000.intercept(<span class="keyword">this</span>, CGLIB$add$<span class="number">0</span>$Method, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> Integer(var1), <span class="keyword">new</span> Integer(var2)&#125;, CGLIB$add$<span class="number">0</span>$Proxy);</span><br><span class="line">        <span class="keyword">return</span> var3 == <span class="keyword">null</span> ? <span class="number">0</span> : ((Number)var3).intValue();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.add(var1, var2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们先关注两个对象 <em><strong>CGLIB$add$0$Method</strong></em> 和 <em><strong>CGLIB$add$0$Proxy</strong></em>，这两个变量的赋值都在静态方法 <em><strong>CGLIB$STATICHOOK1()</strong></em> 中，这个方法在静态代码块中被调用，也就是说当代理类的class文件被加载到内存中时便已经执行了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span>$$<span class="title">EnhancerByCGLIB</span>$$345<span class="title">a285a</span> <span class="keyword">extends</span> <span class="title">Calculator</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;    </span><br><span class="line">	...</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        CGLIB$STATICHOOK1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CGLIB-add-0-Method"><a href="#CGLIB-add-0-Method" class="headerlink" title="CGLIB$add$0$Method"></a>CGLIB$add$0$Method</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> CGLIB$STATICHOOK1() &#123;</span><br><span class="line">    CGLIB$THREAD_CALLBACKS = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line">    CGLIB$emptyArgs = <span class="keyword">new</span> Object[<span class="number">0</span>];</span><br><span class="line">    Class var0 = Class.forName(<span class="string">&quot;com.eitan.proxy.cglib.Calculator$$EnhancerByCGLIB$$345a285a&quot;</span>);</span><br><span class="line">    Class var1;</span><br><span class="line">    Method[] var10000 = ReflectUtils.findMethods(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;add&quot;</span>, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;sub&quot;</span>, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;mult&quot;</span>, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;div&quot;</span>, <span class="string">&quot;(II)I&quot;</span>&#125;, (var1 = Class.forName(<span class="string">&quot;com.eitan.proxy.cglib.Calculator&quot;</span>)).getDeclaredMethods());</span><br><span class="line">    CGLIB$add$<span class="number">0</span>$Method = var10000[<span class="number">0</span>];</span><br><span class="line">    CGLIB$add$<span class="number">0</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;add&quot;</span>, <span class="string">&quot;CGLIB$add$0&quot;</span>);</span><br><span class="line">    CGLIB$sub$<span class="number">1</span>$Method = var10000[<span class="number">1</span>];</span><br><span class="line">    CGLIB$sub$<span class="number">1</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;sub&quot;</span>, <span class="string">&quot;CGLIB$sub$1&quot;</span>);</span><br><span class="line">    CGLIB$mult$<span class="number">2</span>$Method = var10000[<span class="number">2</span>];</span><br><span class="line">    CGLIB$mult$<span class="number">2</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;mult&quot;</span>, <span class="string">&quot;CGLIB$mult$2&quot;</span>);</span><br><span class="line">    CGLIB$div$<span class="number">3</span>$Method = var10000[<span class="number">3</span>];</span><br><span class="line">    CGLIB$div$<span class="number">3</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;div&quot;</span>, <span class="string">&quot;CGLIB$div$3&quot;</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出，该成员变量是通过 <em><strong>var1 = Class.forName(“com.eitan.proxy.cglib.Calculator”)).getDeclaredMethods()</strong></em> 拿到被代理类的所有 Method 方法对象，然后按顺序依次赋值 <em><strong>CGLIB$add$0$Method = var10000[0]</strong></em> ，因此变量 <em><strong>CGLIB$add$0$Method</strong></em> 就代表被代理对象的 add方法的 Method 对象。</p>
<h3 id="CGLIB-add-0-Proxy"><a href="#CGLIB-add-0-Proxy" class="headerlink" title="CGLIB$add$0$Proxy"></a>CGLIB$add$0$Proxy</h3><p>这是 <em><strong>CGLIB</strong></em> 框架里的 <em><strong>MethodProxy</strong></em> 类的对象，通过 <em><strong>MethodProxy.create(var1, var0, “(II)I”, “add”, “CGLIB$add$0”)</strong></em> 方法构建。其中 <em><strong>var1</strong></em> 为被代理对象的class对象 <em><strong>var1 = Class.forName(“com.eitan.proxy.cglib.Calculator”)<em><strong>，</strong></em>var0</strong></em> 为代理对象的class对象 <em><strong>Class var0 = Class.forName(“com.eitan.proxy.cglib.Calculator$$EnhancerByCGLIB$$345a285a”)</strong></em> 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MethodProxy <span class="title">create</span><span class="params">(Class c1, Class c2, String desc, String name1, String name2)</span> </span>&#123;</span><br><span class="line">	MethodProxy proxy = <span class="keyword">new</span> MethodProxy();</span><br><span class="line">       <span class="comment">// name1 = &quot;add&quot;</span></span><br><span class="line">	proxy.sig1 = <span class="keyword">new</span> Signature(name1, desc);</span><br><span class="line">       <span class="comment">// name2 = &quot;CGLIB$add$0&quot;</span></span><br><span class="line">	proxy.sig2 = <span class="keyword">new</span> Signature(name2, desc);</span><br><span class="line">	proxy.createInfo = <span class="keyword">new</span> CreateInfo(c1, c2);</span><br><span class="line">	<span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 <em><strong>name1 = “add”<em><strong>，</strong></em>name2 = “CGLIB$add$0”</strong></em> 是两个方法名：</p>
<ul>
<li>add 方法：代理对象对原方法的增强，在其中调用了 MethodInterceptor 的 intercept 方法</li>
<li>CGLIB$add$0：直接调用父类的 add 方法，也就是直接调用被代理对象的 add 方法</li>
</ul>
<h3 id="methodProxy-invokeSuper-o-objects"><a href="#methodProxy-invokeSuper-o-objects" class="headerlink" title="methodProxy.invokeSuper(o, objects)"></a>methodProxy.invokeSuper(o, objects)</h3><p>当我们知道了 <em><strong>MethodInterceptor</strong></em> 的 <em><strong>intercept</strong></em> 方法的入参代表何值之后，我们将注意力放在自定义的 <em><strong>MethodInceptor</strong></em> 子类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCglib</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用cglib动态代理&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> methodProxy.invokeSuper(o, objects);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当代理对象执行 <em><strong>add(1, 1)</strong></em> 方法时，最终将调用该对象的 <em><strong>intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy)</strong></em> 方法。从代理对象的class文件可以分析出这个方法的各个入参的实际含义：</p>
<ul>
<li>Object o：代理对象</li>
<li>Method method：被代理类所执行方法的Method对象</li>
<li>Object[] objects：所执行方法的入参</li>
<li>MethodProxy methodProxy：cglib包下的类，包含了代理类和被代理类的class对象以及两个方法名 add 和 CGLIB$add$0</li>
</ul>
<h3 id="为什么methodProxy-invokeSuper-o-objects-方法会调用被代理对象的方法呢？"><a href="#为什么methodProxy-invokeSuper-o-objects-方法会调用被代理对象的方法呢？" class="headerlink" title="为什么methodProxy.invokeSuper(o, objects)方法会调用被代理对象的方法呢？"></a>为什么methodProxy.invokeSuper(o, objects)方法会调用被代理对象的方法呢？</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invokeSuper</span><span class="params">(Object obj, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		init();</span><br><span class="line">		FastClassInfo fci = fastClassInfo;</span><br><span class="line">		<span class="keyword">return</span> fci.f2.invoke(fci.i2, obj, args);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">		<span class="keyword">throw</span> e.getTargetException();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="init"><a href="#init" class="headerlink" title="init()"></a>init()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Using a volatile invariant allows us to initialize the FastClass and</span></span><br><span class="line"><span class="comment">	 * method index pairs atomically.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * Double-checked locking is safe with volatile in Java 5.  Before 1.5 this</span></span><br><span class="line"><span class="comment">	 * code could allow fastClassInfo to be instantiated more than once, which</span></span><br><span class="line"><span class="comment">	 * appears to be benign.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (fastClassInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">synchronized</span> (initLock) &#123;</span><br><span class="line">			<span class="keyword">if</span> (fastClassInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">				CreateInfo ci = createInfo;</span><br><span class="line"></span><br><span class="line">				FastClassInfo fci = <span class="keyword">new</span> FastClassInfo();</span><br><span class="line">                   <span class="comment">// 生成被代理类的 FastClass 对象</span></span><br><span class="line">				fci.f1 = helper(ci, ci.c1);</span><br><span class="line">                   <span class="comment">// 生成代理类的 FastClass 对象</span></span><br><span class="line">				fci.f2 = helper(ci, ci.c2);</span><br><span class="line">                   <span class="comment">// 即调用被代理类的 FastClass 对象找出 sig1 包含的方法名 add 的下标</span></span><br><span class="line">				fci.i1 = fci.f1.getIndex(sig1);</span><br><span class="line">                   <span class="comment">// 即调用代理类的 FastClass 对象找出 sig2 包含的方法名 CGLIB$add$0 的下标</span></span><br><span class="line">				fci.i2 = fci.f2.getIndex(sig2);</span><br><span class="line">				fastClassInfo = fci;</span><br><span class="line">				createInfo = <span class="keyword">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="fci-f2-invoke-fci-i2-obj-args"><a href="#fci-f2-invoke-fci-i2-obj-args" class="headerlink" title="fci.f2.invoke(fci.i2, obj, args);"></a>fci.f2.invoke(fci.i2, obj, args);</h4><p>调用代理类的 FastClass 对象的 <em><strong>invoke(fci.i2, obj, args)</strong></em> 方法，其中：</p>
<ul>
<li>fci.i2：调用代理类的 FastClass 对象的 fci.f2.getIndex(sig2) 找出的索引</li>
<li>obj：methodProxy.invokeSuper(o, objects) 传入的对象 o，这里也就是代理对象</li>
<li>args：要调用的方法参数</li>
</ul>
<h4 id="Calculator-EnhancerByCGLIB-345a285a-FastClassByCGLIB-cfb242b8d代理对象的FastClass"><a href="#Calculator-EnhancerByCGLIB-345a285a-FastClassByCGLIB-cfb242b8d代理对象的FastClass" class="headerlink" title="Calculator$$EnhancerByCGLIB$$345a285a$$FastClassByCGLIB$$cfb242b8d代理对象的FastClass"></a>Calculator$$EnhancerByCGLIB$$345a285a$$FastClassByCGLIB$$cfb242b8d代理对象的FastClass</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span>$$<span class="title">EnhancerByCGLIB</span>$$345<span class="title">a285a</span>$$<span class="title">FastClassByCGLIB</span>$$<span class="title">cfb242b8</span> <span class="keyword">extends</span> <span class="title">FastClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Calculator$$EnhancerByCGLIB$$345a285a$$FastClassByCGLIB$$cfb242b8(Class var1) &#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(Signature var1)</span> </span>&#123;</span><br><span class="line">        String var10000 = var1.toString();</span><br><span class="line">        <span class="keyword">switch</span>(var10000.hashCode()) &#123;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">2131682232</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;sub(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1870561232</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$findMethodProxy(Lorg/springframework/cglib/core/Signature;)Lorg/springframework/cglib/proxy/MethodProxy;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">17</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1860420502</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$clone$7()Ljava/lang/Object;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">22</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1745842178</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;setCallbacks([Lorg/springframework/cglib/proxy/Callback;)V&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1641413109</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;newInstance([Lorg/springframework/cglib/proxy/Callback;)Ljava/lang/Object;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1457535688</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$STATICHOOK1()V&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">25</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1411753352</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$hashCode$6()I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1287932281</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;add(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1267343528</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;mult(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">15</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1034266769</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$SET_STATIC_CALLBACKS([Lorg/springframework/cglib/proxy/Callback;)V&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">14</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1025895669</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$SET_THREAD_CALLBACKS([Lorg/springframework/cglib/proxy/Callback;)V&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">13</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">988317324</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;newInstance([Ljava/lang/Class;[Ljava/lang/Object;[Lorg/springframework/cglib/proxy/Callback;)Ljava/lang/Object;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">984241474</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$add$0(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">26</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">974181657</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$mult$2(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">23</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">629417301</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$div$3(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">24</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">508378822</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;clone()Ljava/lang/Object;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">50496290</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$sub$1(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">21</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">303407255</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;div(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">16</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">593200387</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$equals$4(Ljava/lang/Object;)Z&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">18</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">610042816</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;newInstance(Lorg/springframework/cglib/proxy/Callback;)Ljava/lang/Object;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1132856532</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;getCallbacks()[Lorg/springframework/cglib/proxy/Callback;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">12</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1246779367</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;setCallback(ILorg/springframework/cglib/proxy/Callback;)V&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">9</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1364367423</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;getCallback(I)Lorg/springframework/cglib/proxy/Callback;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1826985398</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;equals(Ljava/lang/Object;)Z&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1913648695</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;toString()Ljava/lang/String;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1940521675</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$toString$5()Ljava/lang/String;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">19</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1984935277</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;hashCode()I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(String var1, Class[] var2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(var1.hashCode()) &#123;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1776922004</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;toString&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1295482945</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;equals&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;java.lang.Object&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1053468136</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;getCallbacks&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">12</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">124978606</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$equals$4&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;java.lang.Object&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">18</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">60403779</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$SET_STATIC_CALLBACKS&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;[Lorg.springframework.cglib.proxy.Callback;&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">14</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">29025552</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$hashCode$6&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">96417</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;add&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">99473</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;div&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">16</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">114240</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;sub&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3363120</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;mult&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">15</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">85179481</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$SET_THREAD_CALLBACKS&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;[Lorg.springframework.cglib.proxy.Callback;&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">13</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">94756189</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;clone&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">147696667</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;hashCode&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">161998109</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$STATICHOOK1&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">25</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">357484609</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$mult$2&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">23</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">495524492</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;setCallbacks&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;[Lorg.springframework.cglib.proxy.Callback;&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1108311562</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$add$0&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">26</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1111248381</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$div$3&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">24</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1125439466</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$sub$1&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">21</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1154623345</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$findMethodProxy&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;org.springframework.cglib.core.Signature&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">17</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1543336192</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$toString$5&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">19</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1811874389</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;newInstance&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    String var10001 = var2[<span class="number">0</span>].getName();</span><br><span class="line">                    <span class="keyword">switch</span>(var10001.hashCode()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> -<span class="number">1997738671</span>:</span><br><span class="line">                        <span class="keyword">if</span> (var10001.equals(<span class="string">&quot;[Lorg.springframework.cglib.proxy.Callback;&quot;</span>)) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1364160985</span>:</span><br><span class="line">                        <span class="keyword">if</span> (var10001.equals(<span class="string">&quot;org.springframework.cglib.proxy.Callback&quot;</span>)) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;[Ljava.lang.Class;&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;[Ljava.lang.Object;&quot;</span>) &amp;&amp; var2[<span class="number">2</span>].getName().equals(<span class="string">&quot;[Lorg.springframework.cglib.proxy.Callback;&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1817099975</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;setCallback&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;org.springframework.cglib.proxy.Callback&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">9</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1905679803</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;getCallback&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1951977613</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$clone$7&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">22</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(Class[] var1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(var1.length) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(<span class="keyword">int</span> var1, Object var2, Object[] var3)</span> <span class="keyword">throws</span> InvocationTargetException </span>&#123;</span><br><span class="line">        345a285a var10000 = (345a285a)var2;</span><br><span class="line">        <span class="keyword">int</span> var10001 = var1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span>(var10001) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.add(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Boolean(var10000.equals(var3[<span class="number">0</span>]));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> var10000.toString();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.hashCode());</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">return</span> var10000.clone();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">return</span> var10000.newInstance((Callback[])var3[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="keyword">return</span> var10000.newInstance((Class[])var3[<span class="number">0</span>], (Object[])var3[<span class="number">1</span>], (Callback[])var3[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="keyword">return</span> var10000.newInstance((Callback)var3[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.sub(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                var10000.setCallback(((Number)var3[<span class="number">0</span>]).intValue(), (Callback)var3[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                var10000.setCallbacks((Callback[])var3[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                <span class="keyword">return</span> var10000.getCallback(((Number)var3[<span class="number">0</span>]).intValue());</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                <span class="keyword">return</span> var10000.getCallbacks();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">                345a285a.CGLIB$SET_THREAD_CALLBACKS((Callback[])var3[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">                345a285a.CGLIB$SET_STATIC_CALLBACKS((Callback[])var3[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.mult(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.div(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">                <span class="keyword">return</span> 345a285a.CGLIB$findMethodProxy((Signature)var3[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">18</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Boolean(var10000.CGLIB$equals$<span class="number">4</span>(var3[<span class="number">0</span>]));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">19</span>:</span><br><span class="line">                <span class="keyword">return</span> var10000.CGLIB$toString$<span class="number">5</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.CGLIB$hashCode$<span class="number">6</span>());</span><br><span class="line">            <span class="keyword">case</span> <span class="number">21</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.CGLIB$sub$<span class="number">1</span>(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">22</span>:</span><br><span class="line">                <span class="keyword">return</span> var10000.CGLIB$clone$<span class="number">7</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">23</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.CGLIB$mult$<span class="number">2</span>(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">24</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.CGLIB$div$<span class="number">3</span>(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">25</span>:</span><br><span class="line">                345a285a.CGLIB$STATICHOOK1();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">26</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.CGLIB$add$<span class="number">0</span>(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvocationTargetException(var4);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot find matching method/constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">newInstance</span><span class="params">(<span class="keyword">int</span> var1, Object[] var2)</span> <span class="keyword">throws</span> InvocationTargetException </span>&#123;</span><br><span class="line">        345a285a var10000 = <span class="keyword">new</span> 345a285a;</span><br><span class="line">        345a285a var10001 = var10000;</span><br><span class="line">        <span class="keyword">int</span> var10002 = var1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span>(var10002) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                var10001.&lt;init&gt;();</span><br><span class="line">                <span class="keyword">return</span> var10000;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvocationTargetException(var3);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot find matching method/constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">26</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Calculator-FastClassByCGLIB-9bbbb4ed被代理对象的FastClass"><a href="#Calculator-FastClassByCGLIB-9bbbb4ed被代理对象的FastClass" class="headerlink" title="Calculator$$FastClassByCGLIB$$9bbbb4ed被代理对象的FastClass"></a>Calculator$$FastClassByCGLIB$$9bbbb4ed被代理对象的FastClass</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span>$$<span class="title">FastClassByCGLIB</span>$$9<span class="title">bbbb4ed</span> <span class="keyword">extends</span> <span class="title">FastClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Calculator$$FastClassByCGLIB$$9bbbb4ed(Class var1) &#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(Signature var1)</span> </span>&#123;</span><br><span class="line">        String var10000 = var1.toString();</span><br><span class="line">        <span class="keyword">switch</span>(var10000.hashCode()) &#123;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">2131682232</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;sub(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1287932281</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;add(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1267343528</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;mult(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">303407255</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;div(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1826985398</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;equals(Ljava/lang/Object;)Z&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1913648695</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;toString()Ljava/lang/String;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1984935277</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;hashCode()I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(String var1, Class[] var2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(var1.hashCode()) &#123;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1776922004</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;toString&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1295482945</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;equals&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;java.lang.Object&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">96417</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;add&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">99473</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;div&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">114240</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;sub&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3363120</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;mult&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">147696667</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;hashCode&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(Class[] var1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(var1.length) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(<span class="keyword">int</span> var1, Object var2, Object[] var3)</span> <span class="keyword">throws</span> InvocationTargetException </span>&#123;</span><br><span class="line">        Calculator var10000 = (Calculator)var2;</span><br><span class="line">        <span class="keyword">int</span> var10001 = var1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span>(var10001) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.add(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.sub(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.mult(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.div(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Boolean(var10000.equals(var3[<span class="number">0</span>]));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">return</span> var10000.toString();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.hashCode());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvocationTargetException(var4);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot find matching method/constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">newInstance</span><span class="params">(<span class="keyword">int</span> var1, Object[] var2)</span> <span class="keyword">throws</span> InvocationTargetException </span>&#123;</span><br><span class="line">        Calculator var10000 = <span class="keyword">new</span> Calculator;</span><br><span class="line">        Calculator var10001 = var10000;</span><br><span class="line">        <span class="keyword">int</span> var10002 = var1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span>(var10002) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                var10001.&lt;init&gt;();</span><br><span class="line">                <span class="keyword">return</span> var10000;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvocationTargetException(var3);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot find matching method/constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以，<em><strong>fci.f2.invoke(fci.i2, obj, args)</strong></em> 实际上会通过方法的索引 <em><strong>fci.i2</strong></em> 找出对应相应执行的方法，再通过传入的对象直接调用该方法达成目的。总结一句，FastClass 类将目标类的所有方法建立索引，且通过方法名可以找出对应下标，在代码里直接对传入对象进行方法调用，避免了使用反射造成的性能消耗。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>cglib</tag>
      </tags>
  </entry>
</search>
