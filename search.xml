<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Elasticsearch 集群环境搭建</title>
    <url>/2021/10/12/Elasticsearch%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ol>
<li>本次打算使用虚拟机来搭建 Elasticsearch 集群，所以需要准备一台刚安装完成的虚拟机</li>
<li>如果虚拟机不会安装的小伙伴可以参考 <a href="https://www.bilibili.com/video/BV1Sv411r7vd?spm_id_from=333.999.0.0">2021韩顺平 一周学会Linux</a> 的前10节</li>
<li>下载软件可能需要科学上网，如有需要请参考 <a href="https://github.com/bannedbook/fanqiang">github-科学上网</a></li>
<li>网络拓扑图、配置文件，来自于<a href="https://ke.qq.com/course/3615877#term_id=104092654">Elastic认证特训班-吴磊老师</a></li>
</ol>
<span id="more"></span>

<h2 id="安装-Elasticsearch"><a href="#安装-Elasticsearch" class="headerlink" title="安装 Elasticsearch"></a>安装 Elasticsearch</h2><h3 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h3><ol>
<li>从刚安装完成的虚拟机中克隆一份</li>
</ol>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20211012225319.png" alt="image-20211012225314421"></p>
<ol start="2">
<li>选择克隆类型为创建完整克隆</li>
</ol>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20211012225629.png" alt="image-20211012225627802"></p>
<h3 id="安装-ifconfig-和-wget-命令"><a href="#安装-ifconfig-和-wget-命令" class="headerlink" title="安装 ifconfig 和 wget 命令"></a>安装 ifconfig 和 wget 命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install net-tools.x86_64</span><br><span class="line">yum install wget</span><br></pre></td></tr></table></figure>

<h3 id="设置桥接模式并设置静态-IP-Address"><a href="#设置桥接模式并设置静态-IP-Address" class="headerlink" title="设置桥接模式并设置静态 IP Address"></a>设置桥接模式并设置静态 IP Address</h3><ol>
<li><p>设置桥接模式</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20211013223953.png" alt="image-20211013223948681"></p>
</li>
<li><p>设置静态 IP Address，</p>
<ol>
<li>虚拟机的 子网掩码、网关、DNS 必须与主机相同</li>
<li>修改虚拟机 IP Address</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20211013224757.png" alt="image-20211013224755301"></p>
</li>
</ol>
<h3 id="安装-java-运行环境"><a href="#安装-java-运行环境" class="headerlink" title="安装 java 运行环境"></a>安装 java 运行环境</h3><ol>
<li>通过 <a href="https://www.elastic.co/cn/support/matrix#matrix_jvm">官网</a> 可以查询不同版本的 ES 所捆绑的 JDK 版本，7.13 和 7.15 版本都支持 OpenJDK 1.8 和 OpenJDK 11</li>
<li>我下载了 11 版本</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum search jdk</span><br><span class="line">yum install java-11-openjdk.x86_64</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>注意 <em>java-11-openjdk.x86_64</em> 代表的是 JRE（运行时环境），而 <em>java-11-openjdk-devel.x86_64</em> 代表的是 JDK（开发环境）</li>
<li>因为无需调试 java 程序，我只下载了 JRE</li>
<li>输入 <code>java -version</code> 判断是否安装成功</li>
</ol>
<h3 id="安装-Elasticsearch-1"><a href="#安装-Elasticsearch-1" class="headerlink" title="安装 Elasticsearch"></a>安装 Elasticsearch</h3><ol>
<li><p>参考官方文档 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.15/index.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.15/index.html</a></p>
</li>
<li><p>由于 Elasticsearch 不能用 root 用户启动，因此创建一个用户用于启动程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd -m -G wheel eitan  <span class="comment">#wheel附加组可sudo进行提权 -m同时创建用户家目录</span></span><br></pre></td></tr></table></figure></li>
<li><p>下载压缩包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.15.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>

<p>如果想下载 7.13 版本直接将命令中的 <code>elasticsearch-7.15.0-linux-x86_64.tar.gz</code> 改为 <code>elasticsearch-7.13.0-linux-x86_64.tar.gz</code></p>
</li>
<li><p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf elasticsearch-7.15.0-linux-x86_64.tar.gz </span><br></pre></td></tr></table></figure></li>
<li><p>修改 elasticsearch.yml</p>
</li>
<li><p>使程序通过 <em>Bootstrap Checks</em></p>
<ol>
<li><p>在 <em>/etc/sysctl.conf</em> 文件末尾添加一行 <em>vm.max_map_count=262144</em></p>
</li>
<li><p>在 <em>/etc/security/limits.conf</em> 文件末尾添加</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line">用户名 hard nofile <span class="number">65536</span></span><br><span class="line">用户名 <span class="keyword">soft</span> nofile <span class="number">65536</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>检测是否安装成功</p>
<ol>
<li><p>停用防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停用防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment"># 禁止开启自启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure></li>
<li><p>访问 ip:port，成功启动会出现一下 JSON</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;node-1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cluster_name&quot;</span>: <span class="string">&quot;dsl-cluster&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cluster_uuid&quot;</span>: <span class="string">&quot;61AMVhXhQS2FXjr_L0N4oA&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;number&quot;</span>: <span class="string">&quot;7.13.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_flavor&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_type&quot;</span>: <span class="string">&quot;tar&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_hash&quot;</span>: <span class="string">&quot;5ca8591c6fcdb1260ce95b08a8e023559635c6f3&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_date&quot;</span>: <span class="string">&quot;2021-05-19T22:22:26.081971330Z&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_snapshot&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;lucene_version&quot;</span>: <span class="string">&quot;8.8.2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;minimum_wire_compatibility_version&quot;</span>: <span class="string">&quot;6.8.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;minimum_index_compatibility_version&quot;</span>: <span class="string">&quot;6.0.0-beta1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;tagline&quot;</span>: <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<ol start="8">
<li><p>常见错误</p>
<ol>
<li><p>引导检查报错：文件描述符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/security/limits.conf</span><br><span class="line"><span class="comment"># 添加以下内容</span></span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line">* soft nproc 32000</span><br><span class="line">* hard nproc 32000</span><br><span class="line">* hard memlock unlimited</span><br><span class="line">* soft memlock unlimited</span><br><span class="line"></span><br><span class="line">vim /etc/systemd/system.conf ，分别修改以下内容。</span><br><span class="line">DefaultLimitNOFILE=65536</span><br><span class="line">DefaultLimitNPROC=32000</span><br><span class="line">DefaultLimitMEMLOCK=infinity</span><br><span class="line"></span><br><span class="line"><span class="built_in">ulimit</span> -n 65535(需使用root账号)</span><br></pre></td></tr></table></figure></li>
<li><p>引导检查报错：虚拟内存不足</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br><span class="line">vm.max_map_count=262144</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>位置：<code>vi elasticsearch-7.13.0/config/elasticsearch.yml</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cluster.name: cfg-cluster01</span><br><span class="line">node.roles: [ data, master, remote_cluster_client, ingest, data_warm ]</span><br><span class="line">node.name: node-1</span><br><span class="line">network.host: 192.168.0.181</span><br><span class="line">http.port: 9200</span><br><span class="line">discovery.seed_hosts: [<span class="string">&quot;192.168.0.181&quot;</span>, <span class="string">&quot;192.168.0.182&quot;</span>]</span><br><span class="line">cluster.initial_master_nodes: [<span class="string">&quot;node-1&quot;</span>]</span><br><span class="line">node.attr.rack_id: rack1</span><br><span class="line">node.attr.hot_warm_cold: hot</span><br></pre></td></tr></table></figure>

<h2 id="安装-Kibana"><a href="#安装-Kibana" class="headerlink" title="安装 Kibana"></a>安装 Kibana</h2><h3 id="官网下载并解压"><a href="#官网下载并解压" class="headerlink" title="官网下载并解压"></a>官网下载并解压</h3><h3 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h3>]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop（二）：HDFS</title>
    <url>/2022/05/09/Hadoop%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AHDFS/</url>
    <content><![CDATA[<p>本文为学习笔记，对应视频教程来自<a href="https://www.bilibili.com/video/BV1Qp4y1n7EN">尚硅谷大数据Hadoop 3.x</a></p>
<h3 id="HDFS概述"><a href="#HDFS概述" class="headerlink" title="HDFS概述"></a>HDFS概述</h3><h4 id="HDFS产出背景及定义"><a href="#HDFS产出背景及定义" class="headerlink" title="HDFS产出背景及定义"></a>HDFS产出背景及定义</h4><h4 id="HDFS优缺点"><a href="#HDFS优缺点" class="headerlink" title="HDFS优缺点"></a>HDFS优缺点</h4><h4 id="HDFS组成架构"><a href="#HDFS组成架构" class="headerlink" title="HDFS组成架构"></a>HDFS组成架构</h4><h4 id="HDFS文件块大小（面试重点）"><a href="#HDFS文件块大小（面试重点）" class="headerlink" title="HDFS文件块大小（面试重点）"></a>HDFS文件块大小（面试重点）</h4><span id="more"></span>

<h3 id="HDFS的Shell操作"><a href="#HDFS的Shell操作" class="headerlink" title="HDFS的Shell操作"></a>HDFS的Shell操作</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs</span><br><span class="line">Usage: hadoop fs [generic options]</span><br><span class="line">	[-appendToFile &lt;localsrc&gt; ... &lt;dst&gt;]</span><br><span class="line">	[-cat [-ignoreCrc] &lt;src&gt; ...]</span><br><span class="line">	[-checksum [-v] &lt;src&gt; ...]</span><br><span class="line">	[-chgrp [-R] GROUP PATH...]</span><br><span class="line">	[-chmod [-R] &lt;MODE[,MODE]... | OCTALMODE&gt; PATH...]</span><br><span class="line">	[-chown [-R] [OWNER][:[GROUP]] PATH...]</span><br><span class="line">	[-concat &lt;target path&gt; &lt;src path&gt; &lt;src path&gt; ...]</span><br><span class="line">	[-copyFromLocal [-f] [-p] [-l] [-d] [-t &lt;thread count&gt;] [-q &lt;thread pool queue size&gt;] &lt;localsrc&gt; ... &lt;dst&gt;]</span><br><span class="line">	[-copyToLocal [-f] [-p] [-crc] [-ignoreCrc] [-t &lt;thread count&gt;] [-q &lt;thread pool queue size&gt;] &lt;src&gt; ... &lt;localdst&gt;]</span><br><span class="line">	[-count [-q] [-h] [-v] [-t [&lt;storage type&gt;]] [-u] [-x] [-e] [-s] &lt;path&gt; ...]</span><br><span class="line">	[-cp [-f] [-p | -p[topax]] [-d] [-t &lt;thread count&gt;] [-q &lt;thread pool queue size&gt;] &lt;src&gt; ... &lt;dst&gt;]</span><br><span class="line">	[-createSnapshot &lt;snapshotDir&gt; [&lt;snapshotName&gt;]]</span><br><span class="line">	[-deleteSnapshot &lt;snapshotDir&gt; &lt;snapshotName&gt;]</span><br><span class="line">	[-df [-h] [&lt;path&gt; ...]]</span><br><span class="line">	[-du [-s] [-h] [-v] [-x] &lt;path&gt; ...]</span><br><span class="line">	[-expunge [-immediate] [-fs &lt;path&gt;]]</span><br><span class="line">	[-find &lt;path&gt; ... &lt;expression&gt; ...]</span><br><span class="line">	[-get [-f] [-p] [-crc] [-ignoreCrc] [-t &lt;thread count&gt;] [-q &lt;thread pool queue size&gt;] &lt;src&gt; ... &lt;localdst&gt;]</span><br><span class="line">	[-getfacl [-R] &lt;path&gt;]</span><br><span class="line">	[-getfattr [-R] &#123;-n name | -d&#125; [-e en] &lt;path&gt;]</span><br><span class="line">	[-getmerge [-nl] [-skip-empty-file] &lt;src&gt; &lt;localdst&gt;]</span><br><span class="line">	[-head &lt;file&gt;]</span><br><span class="line">	[-help [cmd ...]]</span><br><span class="line">	[-ls [-C] [-d] [-h] [-q] [-R] [-t] [-S] [-r] [-u] [-e] [&lt;path&gt; ...]]</span><br><span class="line">	[-mkdir [-p] &lt;path&gt; ...]</span><br><span class="line">	[-moveFromLocal [-f] [-p] [-l] [-d] &lt;localsrc&gt; ... &lt;dst&gt;]</span><br><span class="line">	[-moveToLocal &lt;src&gt; &lt;localdst&gt;]</span><br><span class="line">	[-mv &lt;src&gt; ... &lt;dst&gt;]</span><br><span class="line">	[-put [-f] [-p] [-l] [-d] [-t &lt;thread count&gt;] [-q &lt;thread pool queue size&gt;] &lt;localsrc&gt; ... &lt;dst&gt;]</span><br><span class="line">	[-renameSnapshot &lt;snapshotDir&gt; &lt;oldName&gt; &lt;newName&gt;]</span><br><span class="line">	[-rm [-f] [-r|-R] [-skipTrash] [-safely] &lt;src&gt; ...]</span><br><span class="line">	[-rmdir [--ignore-fail-on-non-empty] &lt;dir&gt; ...]</span><br><span class="line">	[-setfacl [-R] [&#123;-b|-k&#125; &#123;-m|-x &lt;acl_spec&gt;&#125; &lt;path&gt;]|[--set &lt;acl_spec&gt; &lt;path&gt;]]</span><br><span class="line">	[-setfattr &#123;-n name [-v value] | -x name&#125; &lt;path&gt;]</span><br><span class="line">	[-setrep [-R] [-w] &lt;rep&gt; &lt;path&gt; ...]</span><br><span class="line">	[-stat [format] &lt;path&gt; ...]</span><br><span class="line">	[-tail [-f] [-s &lt;sleep interval&gt;] &lt;file&gt;]</span><br><span class="line">	[-test -[defswrz] &lt;path&gt;]</span><br><span class="line">	[-text [-ignoreCrc] &lt;src&gt; ...]</span><br><span class="line">	[-touch [-a] [-m] [-t TIMESTAMP (yyyyMMdd:HHmmss) ] [-c] &lt;path&gt; ...]</span><br><span class="line">	[-touchz &lt;path&gt; ...]</span><br><span class="line">	[-truncate [-w] &lt;length&gt; &lt;path&gt; ...]</span><br><span class="line">	[-usage [cmd ...]]</span><br><span class="line"></span><br><span class="line">Generic options supported are:</span><br><span class="line">-conf &lt;configuration file&gt;        specify an application configuration file</span><br><span class="line">-D &lt;property=value&gt;               define a value for a given property</span><br><span class="line">-fs &lt;file:///|hdfs://namenode:port&gt; specify default filesystem URL to use, overrides &#x27;fs.defaultFS&#x27; property from configurations.</span><br><span class="line">-jt &lt;local|resourcemanager:port&gt;  specify a ResourceManager</span><br><span class="line">-files &lt;file1,...&gt;                specify a comma-separated list of files to be copied to the map reduce cluster</span><br><span class="line">-libjars &lt;jar1,...&gt;               specify a comma-separated list of jar files to be included in the classpath</span><br><span class="line">-archives &lt;archive1,...&gt;          specify a comma-separated list of archives to be unarchived on the compute machines</span><br><span class="line"></span><br><span class="line">The general command line syntax is:</span><br><span class="line">command [genericOptions] [commandOptions]</span><br></pre></td></tr></table></figure>

<h4 id="常用命令实操"><a href="#常用命令实操" class="headerlink" title="常用命令实操"></a>常用命令实操</h4><h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><ol>
<li><p>启动 Hadoop 集群</p>
</li>
<li><p>-help：输出这个命令参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -help rm</span><br><span class="line">-rm [-f] [-r|-R] [-skipTrash] [-safely] &lt;src&gt; ... :</span><br><span class="line">  Delete all files that match the specified file pattern. Equivalent to the Unix</span><br><span class="line">  command &quot;rm &lt;src&gt;&quot;</span><br><span class="line">                                                                                 </span><br><span class="line">  -f          If the file does not exist, do not display a diagnostic message or </span><br><span class="line">              modify the exit status to reflect an error.                        </span><br><span class="line">  -[rR]       Recursively deletes directories.                                   </span><br><span class="line">  -skipTrash  option bypasses trash, if enabled, and immediately deletes &lt;src&gt;.  </span><br><span class="line">  -safely     option requires safety confirmation, if enabled, requires          </span><br><span class="line">              confirmation before deleting large directory with more than        </span><br><span class="line">              &lt;hadoop.shell.delete.limit.num.files&gt; files. Delay is expected when</span><br><span class="line">              walking over large directory recursively to count the number of    </span><br><span class="line">              files to be deleted before the confirmation. </span><br></pre></td></tr></table></figure></li>
<li><p>创建/sanguo文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -mkdir /sanguo</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h5><ol>
<li><p>-moveFromLocal：从本地剪切粘贴到HDFS</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ echo shuguo &gt;&gt; shuguo.txt</span><br><span class="line"></span><br><span class="line">[eitan@hadoop102 ~]$ hadoop fs -moveFromLocal shuguo.txt /sanguo</span><br></pre></td></tr></table></figure></li>
<li><p>-copyFromLocal：从本地文件系统中拷贝文件到HDFS路径去</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ echo weiguo &gt;&gt; .<span class="regexp">/documents/</span>txt/weiguo.txt</span><br><span class="line"></span><br><span class="line">[eitan@hadoop102 ~]$ hadoop fs -copyFromLocal .<span class="regexp">/documents/</span>txt<span class="regexp">/weiguo.txt /</span>sanguo</span><br></pre></td></tr></table></figure></li>
<li><p>-put：等同于copyFromLocal，生产环境更习惯用put</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ echo wuguo &gt;&gt; ./documents/txt/wuguo.txt</span><br><span class="line"></span><br><span class="line">[eitan@hadoop102 ~]$ hadoop fs -put ./documents/txt/wuguo.txt /sanguo</span><br></pre></td></tr></table></figure></li>
<li><p>-appendToFile：追加一个文件到已经存在的文件末尾</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -appendToFile ./documents/txt/liubei.txt /sanguo/shuguo.txt</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><ol>
<li><p>-copyToLocal/-get：从HDFS拷贝到本地，生产环境更习惯用get</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -copyToLocal/-get /sanguo/shuguo.txt ./documents/txt/</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="HDFS直接操作"><a href="#HDFS直接操作" class="headerlink" title="HDFS直接操作"></a>HDFS直接操作</h5><ol>
<li><p>-ls: 显示目录信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -ls /sanguo</span><br><span class="line">Found 3 items</span><br><span class="line">-rw-r--r--   3 eitan supergroup         14 2022-05-09 19:42 /sanguo/shuguo.txt</span><br><span class="line">-rw-r--r--   3 eitan supergroup          7 2022-05-09 19:35 /sanguo/weiguo.txt</span><br><span class="line">-rw-r--r--   3 eitan supergroup          6 2022-05-09 19:37 /sanguo/wuguo.txt</span><br></pre></td></tr></table></figure></li>
<li><p>-cat：显示文件内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -cat /sanguo/shuguo.txt</span><br><span class="line">shuguo</span><br><span class="line">liubei</span><br></pre></td></tr></table></figure></li>
<li><p>-chgrp、-chmod、-chown：Linux文件系统中的用法一样，修改文件所属权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -chmod 666 /sanguo/shuguo.txt</span><br><span class="line">[eitan@hadoop102 ~]$ hadoop fs -chown eitan:eitan /sanguo/shuguo.txt</span><br></pre></td></tr></table></figure></li>
<li><p>-mkdir：创建路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -mkdir /jinguo</span><br></pre></td></tr></table></figure></li>
<li><p>-cp：从HDFS的一个路径拷贝到HDFS的另一个路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -cp /sanguo/shuguo.txt /jinguo</span><br></pre></td></tr></table></figure></li>
<li><p>-mv：在HDFS目录中移动文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -mv /sanguo/wuguo.txt /jinguo</span><br><span class="line">[eitan@hadoop102 ~]$ hadoop fs -mv /sanguo/weiguo.txt /jinguo</span><br></pre></td></tr></table></figure></li>
<li><p>-tail：显示一个文件的末尾1kb的数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -tail /jinguo/shuguo.txt</span><br><span class="line">shuguo</span><br><span class="line">liubei</span><br></pre></td></tr></table></figure></li>
<li><p>-rm：删除文件或文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -rm /sanguo/shuguo.txt</span><br><span class="line">Deleted /sanguo/shuguo.txt</span><br></pre></td></tr></table></figure></li>
<li><p>-rm -r：递归删除目录及目录里面内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -rm -r /sanguo</span><br></pre></td></tr></table></figure></li>
<li><p>-du统计文件夹的大小信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -du /jinguo</span><br><span class="line">14  42  /jinguo/shuguo.txt</span><br><span class="line">7   21  /jinguo/weiguo.txt</span><br><span class="line">6   18  /jinguo/wuguo.txt</span><br><span class="line"></span><br><span class="line">[eitan@hadoop102 ~]$ hadoop fs -du -s /jinguo</span><br><span class="line">27  179  /jinguo</span><br></pre></td></tr></table></figure></li>
<li><p>-setrep：设置HDFS中文件的副本数量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -setrep 10 /jinguo/shuguo.txt</span><br><span class="line">Replication 10 set: /jinguo/shuguo.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里设置的副本数只是记录在NameNode的元数据中，是否真的会有这么多副本，还得看DataNode的数量。因为目前只有3台设备，最多也就3个副本，只有节点数的增加到10台时，副本数才能达到10。</p>
</blockquote>
</li>
</ol>
<h4 id="HDFS的客户端API"><a href="#HDFS的客户端API" class="headerlink" title="HDFS的客户端API"></a>HDFS的客户端API</h4><h5 id="客户端环境准备"><a href="#客户端环境准备" class="headerlink" title="客户端环境准备"></a>客户端环境准备</h5><h5 id="HDFS的API案例实操"><a href="#HDFS的API案例实操" class="headerlink" title="HDFS的API案例实操"></a>HDFS的API案例实操</h5>]]></content>
      <categories>
        <category>Big Data</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap 源码阅读</title>
    <url>/2022/04/30/HashMap%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<h3 id="HashMap-的静态变量"><a href="#HashMap-的静态变量" class="headerlink" title="HashMap 的静态变量"></a>HashMap 的静态变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">362498820763181265L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment">     * 默认初始容量 - 必须是2的幂次方</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The maximum capacity, used if a higher value is implicitly specified</span></span><br><span class="line"><span class="comment">     * by either of the constructors with arguments.</span></span><br><span class="line"><span class="comment">     * MUST be a power of two &lt;= 1&lt;&lt;30.</span></span><br><span class="line"><span class="comment">     * 最大容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The load factor used when none specified in constructor.</span></span><br><span class="line"><span class="comment">     * 默认负载因子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bin count threshold for using a tree rather than list for a</span></span><br><span class="line"><span class="comment">     * bin.  Bins are converted to trees when adding an element to a</span></span><br><span class="line"><span class="comment">     * bin with at least this many nodes. The value must be greater</span></span><br><span class="line"><span class="comment">     * than 2 and should be at least 8 to mesh with assumptions in</span></span><br><span class="line"><span class="comment">     * tree removal about conversion back to plain bins upon</span></span><br><span class="line"><span class="comment">     * shrinkage.</span></span><br><span class="line"><span class="comment">     * 树化的阈值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bin count threshold for untreeifying a (split) bin during a</span></span><br><span class="line"><span class="comment">     * resize operation. Should be less than TREEIFY_THRESHOLD, and at</span></span><br><span class="line"><span class="comment">     * most 6 to mesh with shrinkage detection under removal.</span></span><br><span class="line"><span class="comment">     * 取消树化的阈值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The smallest table capacity for which bins may be treeified.</span></span><br><span class="line"><span class="comment">     * (Otherwise the table is resized if too many nodes in a bin.)</span></span><br><span class="line"><span class="comment">     * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts</span></span><br><span class="line"><span class="comment">     * between resizing and treeification thresholds.</span></span><br><span class="line"><span class="comment">     * 进行树化时表的最小容量，否则将进行resized来减少链表长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="MashMap-的成员变量"><a href="#MashMap-的成员变量" class="headerlink" title="MashMap 的成员变量"></a>MashMap 的成员变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The table, initialized on first use, and resized as</span></span><br><span class="line"><span class="comment"> * necessary. When allocated, length is always a power of two.</span></span><br><span class="line"><span class="comment"> * (We also tolerate length zero in some operations to allow</span></span><br><span class="line"><span class="comment"> * bootstrapping mechanics that are currently not needed.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Holds cached entrySet(). Note that AbstractMap fields are used</span></span><br><span class="line"><span class="comment"> * for keySet() and values().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The number of key-value mappings contained in this map.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The number of times this HashMap has been structurally modified</span></span><br><span class="line"><span class="comment"> * Structural modifications are those that change the number of mappings in</span></span><br><span class="line"><span class="comment"> * the HashMap or otherwise modify its internal structure (e.g.,</span></span><br><span class="line"><span class="comment"> * rehash).  This field is used to make iterators on Collection-views of</span></span><br><span class="line"><span class="comment"> * the HashMap fail-fast.  (See ConcurrentModificationException).</span></span><br><span class="line"><span class="comment"> * HashMap的结构被修改次数，被使用于迭代器的快速失败上</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The next size value at which to resize (capacity * load factor).</span></span><br><span class="line"><span class="comment"> * 下一次扩容的阈值 = 当前容量 * 负载因子</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// (The javadoc description is true upon serialization.</span></span><br><span class="line"><span class="comment">// Additionally, if the table array has not been allocated, this</span></span><br><span class="line"><span class="comment">// field holds the initial array capacity, or zero signifying</span></span><br><span class="line"><span class="comment">// DEFAULT_INITIAL_CAPACITY.)</span></span><br><span class="line"><span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The load factor for the hash table.</span></span><br><span class="line"><span class="comment"> * 负载因子</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br></pre></td></tr></table></figure>

<h3 id="HashMap-的构造方法"><a href="#HashMap-的构造方法" class="headerlink" title="HashMap 的构造方法"></a>HashMap 的构造方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="comment">// 设置初始容量</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    <span class="comment">// 设置负载因子</span></span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="comment">// 计算下次扩容的阈值</span></span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="tableSizeFor-int-cap"><a href="#tableSizeFor-int-cap" class="headerlink" title="tableSizeFor(int cap)"></a>tableSizeFor(int cap)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取了比cap大的最小2次幂数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// numberOfLeadingZeros(int i): 返回最高位前0的个数</span></span><br><span class="line">       <span class="keyword">int</span> n = -<span class="number">1</span> &gt;&gt;&gt; Integer.numberOfLeadingZeros(cap - <span class="number">1</span>);</span><br><span class="line">       <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="HashMap-的常用方法"><a href="#HashMap-的常用方法" class="headerlink" title="HashMap 的常用方法"></a>HashMap 的常用方法</h3><h4 id="get-Object-key"><a href="#get-Object-key" class="headerlink" title="get(Object key)"></a>get(Object key)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="hash-Object-key"><a href="#hash-Object-key" class="headerlink" title="hash(Object key)"></a>hash(Object key)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 计算key.hashCode()并与其高位进行异或运算提高散列</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> h;</span><br><span class="line">       <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h5 id="getNode-int-hash-Object-key"><a href="#getNode-int-hash-Object-key" class="headerlink" title="getNode(int hash, Object key)"></a>getNode(int hash, Object key)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="comment">// tab[(n - 1) &amp; hash]: 计算该key在Node数组的下标</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 比较两个对象是否相等：hash相等&amp;&amp;且(==内存地址相等||或者equals值相等)</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="comment">// 如果第一个节点不是则判断该节点是否为TreeNode，不是则依次遍历进行比对</span></span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="put-K-key-V-value"><a href="#put-K-key-V-value" class="headerlink" title="put(K key, V value)"></a>put(K key, V value)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don&#x27;t change existing value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="params"><span class="function">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// n代表Node数组的大小即当前Map的容量</span></span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// 如果table为空则利用resize()进行初始化</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// 若key所对应Node数组位置为空，就创建一个Node放入对应位置</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 还是先比较头节点</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">// 如果头节点是树节点则调用树的put方法</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 循环遍历Node链表</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">// 如果找不到相等的Key，则新建一个Node放入链表末尾</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 当链表长度&gt;=树化阈值时尝试将Node链表树化</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 找到了对应Key所在的Node</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// e != null 说明找到了Key对应的Node，只需修改value即可</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="comment">// onlyIfAbsent如果为true，则不能改变已经存在的值</span></span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 如果放入的Node数量大于了扩容阈值则进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">after<span class="constructor">NodeAccess(<span class="params">e</span>)</span> 和 after<span class="constructor">NodeInsertion(<span class="params">evict</span>)</span> 为模板方法，在HashMap中无实现</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="resize"><a href="#resize" class="headerlink" title="resize()"></a>resize()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    <span class="comment">// 计算新容量newCap和新扩容阈值newThr</span></span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="comment">// 具体扩容步骤</span></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="comment">// 如果当前Node无下一位置，则直接将其放入新的Node[]</span></span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="comment">// 如果是树节点</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="comment">// 将原先链表根据 ((e.hash &amp; oldCap) == 0 拆成两个</span></span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 将这两个链表放入新Node数组对应的位置</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap（一）</title>
    <url>/2021/05/13/HashMap%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>基于 <em>jkd1.8</em> 源码认识 HashMap。包含以下内容：</p>
<ol>
<li>扰动函数</li>
<li>初始化容量</li>
<li>负载因子</li>
</ol>
<span id="more"></span>

<h2 id="扰动函数"><a href="#扰动函数" class="headerlink" title="扰动函数"></a>扰动函数</h2><p>在 HashMap 存放元素时候有这样一段代码来处理哈希值，用于优化散列效果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-运算符"><a href="#1-运算符" class="headerlink" title="1.运算符"></a>1.运算符</h3><ul>
<li>&gt;&gt;&gt;：无符号右移。无论是正数还是负数，高位通通补0；</li>
<li>^：异或运算符。相同为 0，不同为 1；</li>
<li>&amp;：与运算符。同为 1 时才为 1，否则为 0。</li>
</ul>
<h3 id="2-元素在数组中的位置"><a href="#2-元素在数组中的位置" class="headerlink" title="2.元素在数组中的位置"></a>2.元素在数组中的位置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 找到元素在数组中的位置，n为数组长度。</span></span><br><span class="line">i = (n - <span class="number">1</span>) &amp; hash</span><br></pre></td></tr></table></figure>

<h3 id="3-为什么-HashMap-数组的长度-n-要是2的整数幂"><a href="#3-为什么-HashMap-数组的长度-n-要是2的整数幂" class="headerlink" title="3.为什么 HashMap 数组的长度 n 要是2的整数幂"></a>3.为什么 HashMap 数组的长度 n 要是2的整数幂</h3><p>为使 hash 值散列分布在数组的下标当中。</p>
<p>假设我们有一个长度为16的数组，则他的下标范围为 0~15。而任何一个2的整数幂，减1得到的二进制位全部是1。让 hash 值与其就行与运算，结果将保留 hash 值小于数组下标范围的低位。当 hash 足够散列时，得到的结果必为在数组下标内散列的值。</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">    <span class="number">00100100</span> <span class="number">10100101</span> <span class="number">11000100</span> <span class="number">00100101</span>    // Hash值</span><br><span class="line">&amp;   <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001111</span>    // <span class="number">16</span> - <span class="number">1</span> = <span class="number">15</span></span><br><span class="line">----------------------------------</span><br><span class="line">    <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000101</span>    // 高位全部归零，只保留末四位。</span><br></pre></td></tr></table></figure>

<h3 id="4-扰动函数里为何无符号右移16位"><a href="#4-扰动函数里为何无符号右移16位" class="headerlink" title="4.扰动函数里为何无符号右移16位"></a>4.扰动函数里为何无符号右移16位</h3><p>为使 hash 值的高位也能影响到该元素在数组中的位置，提高散列性。</p>
<p>因为获取元素在数组中的位置时取的是 hash 值在数组下标范围内的低位，则将Hash值的高16位右移并与原Hash值取异或运算（^），混合高16位和低16位的值，会得到一个更加散列的低16位的Hash值。</p>
<h2 id="初始化容量"><a href="#初始化容量" class="headerlink" title="初始化容量"></a>初始化容量</h2><p>在 HashMap 的初始化中，有这样一段方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>其中 <em>threshold</em> 的取值为比 <em>initialCapacity</em> 大的最小2的整数幂：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="负载因子"><a href="#负载因子" class="headerlink" title="负载因子"></a>负载因子</h2><p>负载因子决定了数据量达到多少了以后，hashmap 会进行扩容，默认值为 0.75。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK 分析工具学习（未完成）</title>
    <url>/2021/09/29/JDK%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="常用分析工具"><a href="#常用分析工具" class="headerlink" title="常用分析工具"></a>常用分析工具</h2><table>
<thead>
<tr>
<th>工具名称</th>
<th>作用描述</th>
</tr>
</thead>
<tbody><tr>
<td>jps.exe</td>
<td>JVM 进程状态工具（JVM Process Status Tool），用于显示目标系统上 JVM 的 Java 进程信息</td>
</tr>
<tr>
<td>jstat.exe</td>
<td>JVM 统计检测工具（JVM Statistics Monitorng Tool），主要用于检测并显示 JVM 的性能统计信息</td>
</tr>
<tr>
<td>jinfo.exe</td>
<td>Java 配置信息工具（Java Configuration Information），用于打印指定 Java 进程、核心文件或者远程调试服务器的配置信息</td>
</tr>
<tr>
<td>jhat.exe</td>
<td>Java 堆分析工具（Java Heap Analysis Tool），用于分析 Java 堆内存中的对象信息</td>
</tr>
<tr>
<td>jmap.exe</td>
<td>Java 内存映射工具（Java Memory Map），主要用于打印指定 Java 进程、核心文件或者远程调试服务器的共享对象内存映射或堆内存细节</td>
</tr>
<tr>
<td>jstack.exe</td>
<td>Java 堆栈跟踪工具，主要用于打印指定 Java 进程，核心文件或者远程调试服务器的 Java 线程的堆栈跟踪信息</td>
</tr>
<tr>
<td>jmc.exe</td>
<td>Java 任务控制工具（Java Mission Control），主要用于 JVM 的生产时间监测、分析、诊断</td>
</tr>
<tr>
<td>jvisualvm.exe</td>
<td>JVM 监测、故障排除、分析工具，主要以图形化界面的方式提供运行与指定虚拟机的 Java 应用程序的详细信息</td>
</tr>
<tr>
<td>jconsole.exe</td>
<td>图形化用户界面的监测工具，主要用于监测并显示运行与 Java 平台的应用程序的性能和资源占用等信息</td>
</tr>
</tbody></table>
<span id="more"></span>

<h2 id="jps-jps-options-hostid"><a href="#jps-jps-options-hostid" class="headerlink" title="jps : jps [ options ] [ hostid ]"></a>jps : jps [ options ] [ hostid ]</h2><h3 id="options"><a href="#options" class="headerlink" title="options"></a>options</h3><ul>
<li>-q :  只显示 pid，不显示 class 名称，jar 文件名和传递给 main 方法的参数</li>
<li>-m : 输出传递给main方法的参数</li>
<li>-l : 输出应用程序 main class 的完整 package 名或者应用程序的 jar 文件完整路径名</li>
<li>-v : 显示传入给 JVM 的参数</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM 发生 GC 导致线程卡死问题</title>
    <url>/2021/09/20/JVM%E5%8F%91%E7%94%9FGC%E5%AF%BC%E8%87%B4%E7%BA%BF%E7%A8%8B%E5%8D%A1%E6%AD%BB%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>案例出自 <a href="https://ke.qq.com/webcourse/3583073/103725980#taid=11648638505102433&vid=3701925920872990005">马士兵MAC课程</a></p>
<h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OSRDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> counter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main start&quot;</span>);</span><br><span class="line">        startBusinessThread();</span><br><span class="line">        startProblemThread();</span><br><span class="line">        <span class="comment">// 等待线程启动执行</span></span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        <span class="comment">// 执行GC</span></span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(<span class="string">&quot;main end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startProblemThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Problem start&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100000</span>; j++) &#123;</span><br><span class="line">                    counter += i % <span class="number">33</span>;</span><br><span class="line">                    counter += i % <span class="number">333</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startBusinessThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; start&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;执行业务一&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;thread-01&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="案例现象"><a href="#案例现象" class="headerlink" title="案例现象"></a>案例现象</h2><ol>
<li>主线程创建两个线程，其中一个线程执行业务逻辑，每秒进行一次打印；另一个线程执行循环运算</li>
<li>启动线程后，JVM 进行 GC 垃圾回收，此时可以发现业务线程和主线程均被阻塞</li>
</ol>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210920161354.png" alt="image-20210920161351031"></p>
<h2 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h2><ol>
<li>JVM 进行 GC 时，线程需要中断，因此所有线程都需要‘跑’到线程安全点(save point)后，再停顿下来。</li>
<li>在 JDK1.8 及之前版本，C2 编辑器认为 int 的循环为有限循环，因此 startProblemThread() 创建的线程将不会进入线程安全点</li>
<li>主线程和业务线程则进入线程安全点阻塞等待，而 startProblemThread() 创建的线程并不会发生中断，导致 GC 没法完成</li>
<li>因此主线程和业务线程一直阻塞</li>
</ol>
<h2 id="解决措施"><a href="#解决措施" class="headerlink" title="解决措施"></a>解决措施</h2><h3 id="将-JDK-版本换成-11"><a href="#将-JDK-版本换成-11" class="headerlink" title="将 JDK 版本换成 11"></a>将 JDK 版本换成 11</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210920163642.png" alt="image-20210920163640802"></p>
<p>重新运行后发现不会阻塞</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210920163734.png" alt="image-20210920163732266"></p>
<h3 id="将-int-循环改为-long-值循环"><a href="#将-int-循环改为-long-值循环" class="headerlink" title="将 int 循环改为 long 值循环"></a>将 int 循环改为 long 值循环</h3><p>因为 long 值循环意味着这是一个较大的循环，JVM 会进行线程安全点的检查</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210920163956.png" alt="image-20210920163954285"></p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210920163922.png" alt="image-20210920163920287"></p>
<h3 id="在循环中加入方法调用"><a href="#在循环中加入方法调用" class="headerlink" title="在循环中加入方法调用"></a>在循环中加入方法调用</h3><p>线程安全点的检查发生在方法调用前</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210920164651.png" alt="image-20210920164649165"></p>
<p>注意：如果调用的方法是空方法或者简单循环，则编译器会将其优化，不会继续线程安全点的检测，因此还是会阻塞</p>
<h3 id="用-volatile-修饰-counter"><a href="#用-volatile-修饰-counter" class="headerlink" title="用 volatile 修饰 counter"></a>用 volatile 修饰 counter</h3><p>volatile 修饰的代码不会进行优化</p>
<h3 id="添加-JVM-参数-XX-UseOnStackReplacement"><a href="#添加-JVM-参数-XX-UseOnStackReplacement" class="headerlink" title="添加 JVM 参数 -XX:-UseOnStackReplacement"></a>添加 JVM 参数 -XX:-UseOnStackReplacement</h3><p>关闭 OnStackReplacement 优化</p>
<h3 id="添加-JVM-参数-XX-TieredStopAtLevel-3"><a href="#添加-JVM-参数-XX-TieredStopAtLevel-3" class="headerlink" title="添加 JVM 参数 -XX:TieredStopAtLevel=3"></a>添加 JVM 参数 -XX:TieredStopAtLevel=3</h3><p>不使用 C2 编译器的优化</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL调优（一）未完成</title>
    <url>/2021/05/14/MySQL%E8%B0%83%E4%BC%98%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Server-处理-Client-的请求过程"><a href="#Server-处理-Client-的请求过程" class="headerlink" title="Server 处理 Client 的请求过程"></a>Server 处理 Client 的请求过程</h2><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210514091718.png" alt="image-20210514091715754"></p>
<span id="more"></span>

<h2 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h2><h3 id="SHOW-PROFILE-分析SQL执行耗时"><a href="#SHOW-PROFILE-分析SQL执行耗时" class="headerlink" title="SHOW PROFILE 分析SQL执行耗时"></a>SHOW PROFILE 分析SQL执行耗时</h3><ol>
<li><p>开启分析</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> profiling<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>运行查询语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> category;</span><br></pre></td></tr></table></figure></li>
<li><p>查看查询语句耗时</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> profiles;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+------------------------+</span></span><br><span class="line"><span class="operator">|</span> Query_ID <span class="operator">|</span> Duration   <span class="operator">|</span> Query                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+------------------------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span> <span class="number">0.00019575</span> <span class="operator">|</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span> <span class="number">0.00018800</span> <span class="operator">|</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> category <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+------------------------+</span></span><br></pre></td></tr></table></figure></li>
<li><p>查询单个语句的详细信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> profile <span class="keyword">for</span> query <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> Status               <span class="operator">|</span> Duration <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> starting             <span class="operator">|</span> <span class="number">0.000052</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> checking permissions <span class="operator">|</span> <span class="number">0.000005</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Opening tables       <span class="operator">|</span> <span class="number">0.000014</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> init                 <span class="operator">|</span> <span class="number">0.000014</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">System</span> lock          <span class="operator">|</span> <span class="number">0.000006</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> optimizing           <span class="operator">|</span> <span class="number">0.000003</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> statistics           <span class="operator">|</span> <span class="number">0.000008</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> preparing            <span class="operator">|</span> <span class="number">0.000006</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> executing            <span class="operator">|</span> <span class="number">0.000002</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Sending data         <span class="operator">|</span> <span class="number">0.000034</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">end</span>                  <span class="operator">|</span> <span class="number">0.000003</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> query <span class="keyword">end</span>            <span class="operator">|</span> <span class="number">0.000004</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> closing tables       <span class="operator">|</span> <span class="number">0.000006</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> freeing items        <span class="operator">|</span> <span class="number">0.000031</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cleaning up          <span class="operator">|</span> <span class="number">0.000008</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+----------+</span></span><br></pre></td></tr></table></figure></li>
<li><p>查看sql相关的所有分析【主要看i/o与cpu】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> profile <span class="keyword">all</span> <span class="keyword">for</span> query <span class="number">1</span> \G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: starting</span><br><span class="line">           Duration: <span class="number">0.000052</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="keyword">NULL</span></span><br><span class="line">        Source_file: <span class="keyword">NULL</span></span><br><span class="line">        Source_line: <span class="keyword">NULL</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">2.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: checking permissions</span><br><span class="line">           Duration: <span class="number">0.000005</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_parse.cc</span><br><span class="line">        Source_line: <span class="number">5266</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">3.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: Opening tables</span><br><span class="line">           Duration: <span class="number">0.000014</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_base.cc</span><br><span class="line">        Source_line: <span class="number">5018</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">4.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: init</span><br><span class="line">           Duration: <span class="number">0.000014</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_select.cc</span><br><span class="line">        Source_line: <span class="number">1050</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">5.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: <span class="keyword">System</span> lock</span><br><span class="line">           Duration: <span class="number">0.000006</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: lock.cc</span><br><span class="line">        Source_line: <span class="number">304</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">6.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: optimizing</span><br><span class="line">           Duration: <span class="number">0.000003</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_optimizer.cc</span><br><span class="line">        Source_line: <span class="number">138</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">7.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: statistics</span><br><span class="line">           Duration: <span class="number">0.000008</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_optimizer.cc</span><br><span class="line">        Source_line: <span class="number">362</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">8.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: preparing</span><br><span class="line">           Duration: <span class="number">0.000006</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_optimizer.cc</span><br><span class="line">        Source_line: <span class="number">485</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">9.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: executing</span><br><span class="line">           Duration: <span class="number">0.000002</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_executor.cc</span><br><span class="line">        Source_line: <span class="number">110</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">10.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: Sending data</span><br><span class="line">           Duration: <span class="number">0.000034</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_executor.cc</span><br><span class="line">        Source_line: <span class="number">190</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">11.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: <span class="keyword">end</span></span><br><span class="line">           Duration: <span class="number">0.000003</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_select.cc</span><br><span class="line">        Source_line: <span class="number">1105</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">12.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: query <span class="keyword">end</span></span><br><span class="line">           Duration: <span class="number">0.000004</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_parse.cc</span><br><span class="line">        Source_line: <span class="number">4965</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">13.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: closing tables</span><br><span class="line">           Duration: <span class="number">0.000006</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_parse.cc</span><br><span class="line">        Source_line: <span class="number">5013</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">14.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: freeing items</span><br><span class="line">           Duration: <span class="number">0.000031</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_parse.cc</span><br><span class="line">        Source_line: <span class="number">6404</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">15.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: cleaning up</span><br><span class="line">           Duration: <span class="number">0.000008</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_parse.cc</span><br><span class="line">        Source_line: <span class="number">1772</span></span><br></pre></td></tr></table></figure></li>
<li><p>关闭分析</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> profiling<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="MySQL-Performance-Schema"><a href="#MySQL-Performance-Schema" class="headerlink" title="MySQL Performance Schema"></a>MySQL Performance Schema</h3><p>详细可以查看<a href="https://dev.mysql.com/doc/refman/8.0/en/performance-schema.html">官方文档</a></p>
<h3 id="查看线程连接个数-SHOW-PROCESSLIST"><a href="#查看线程连接个数-SHOW-PROCESSLIST" class="headerlink" title="查看线程连接个数 SHOW PROCESSLIST"></a>查看线程连接个数 SHOW PROCESSLIST</h3><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">+----+------+-----------------+----------+---------+------+-------+------------------+</span><br><span class="line">|<span class="string"> Id </span>|<span class="string"> User </span>|<span class="string"> Host            </span>|<span class="string"> db       </span>|<span class="string"> Command </span>|<span class="string"> Time </span>|<span class="string"> State </span>|<span class="string"> Info             </span>|</span><br><span class="line">+----+------+-----------------+----------+---------+------+-------+------------------+</span><br><span class="line">|<span class="string"> 45 </span>|<span class="string"> root </span>|<span class="string"> localhost:11156 </span>|<span class="string"> bugstack </span>|<span class="string"> Sleep   </span>|<span class="string">  210 </span>|<span class="string">       </span>|<span class="string"> NULL             </span>|</span><br><span class="line">|<span class="string"> 46 </span>|<span class="string"> root </span>|<span class="string"> localhost:13537 </span>|<span class="string"> NULL     </span>|<span class="string"> Query   </span>|<span class="string">    0 </span>|<span class="string"> init  </span>|<span class="string"> show processlist </span>|</span><br><span class="line">+----+------+-----------------+----------+---------+------+-------+------------------+</span><br></pre></td></tr></table></figure>

<ul>
<li>id：表示session id</li>
<li>user：表示操作的用户</li>
<li>host：表示操作的主机</li>
<li>db：表示操作的数据库</li>
<li>command：表示命令类型</li>
<li>info：表示详细的sql语句</li>
<li>time：表示相应命令执行时间</li>
<li>state：表示命令执行状态</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ（一）</title>
    <url>/2021/05/17/RocketMQ%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul>
<li>编译安装</li>
<li>HelloWorld</li>
</ul>
<h3 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h3><p><a href="http://rocketmq.apache.org/">http://rocketmq.apache.org/</a></p>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><p><a href="https://github.com/apache/rocketmq">https://github.com/apache/rocketmq</a></p>
<span id="more"></span>



<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="在-Linux-上安装-JDK"><a href="#在-Linux-上安装-JDK" class="headerlink" title="在 Linux 上安装 JDK"></a>在 Linux 上安装 JDK</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum search jdk</span><br><span class="line"></span><br><span class="line">yum install java-1.8.0-openjdk.x86_64</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 找到安装位置</span></span><br><span class="line">java -verbose</span><br><span class="line"></span><br><span class="line">[Loaded java.lang.Shutdown from /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.292.b10-1.el7_9.x86_64/jre/lib/rt.jar]</span><br><span class="line">[Loaded java.lang.Shutdown$Lock from /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.292.b10-1.el7_9.x86_64/jre/lib/rt.jar]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置 JAVA_HOME</span></span><br><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="在-Linux-上安装-Maven"><a href="#在-Linux-上安装-Maven" class="headerlink" title="在 Linux 上安装 Maven"></a>在 Linux 上安装 Maven</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载压缩包</span></span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -zxvf apache-maven-3.6.3-bin.tar.gz</span><br><span class="line"></span><br><span class="line">mv apache-maven-3.6.3 /usr/local/</span><br><span class="line"></span><br><span class="line">vim /usr/local/apache-maven-3.6.3/conf/settings.xml</span><br><span class="line">   &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;aliyun-maven&lt;/id&gt;</span><br><span class="line">      &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">      &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">    </span><br><span class="line">vim /etc/profile</span><br><span class="line">export MAVEN_HOME=/usr/local/apache-maven-3.6.3</span><br><span class="line">export PATH=$PATH:$MAVEN_HAOM/bin</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="安装-RocketMQ"><a href="#安装-RocketMQ" class="headerlink" title="安装 RocketMQ"></a>安装 RocketMQ</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.8.0/rocketmq-all-4.8.0-source-release.zip</span><br><span class="line"></span><br><span class="line">unzip rocketmq-all-4.8.0-source-release.zip</span><br><span class="line"></span><br><span class="line">mvn -Prelease-all -DskipTests clean install -U</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">./mqnamesrv</span><br><span class="line">./mqbroker</span><br><span class="line"></span><br><span class="line"># 测试</span><br><span class="line">./tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br></pre></td></tr></table></figure>

<p>若遇到错误：linux No compiler is provided in this environment. Perhaps you are running on a JRE rather than a JDK，则执行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install java-devel</span><br></pre></td></tr></table></figure>

<p>启动报错：Native memory allocation (mmap) failed to map 2147483648 bytes for committing reserved memory</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/local/rocketmq-4.8.0/bin/runserver.sh</span><br><span class="line">vim /usr/local/rocketmq-4.8.0/bin/runbroker.sh</span><br><span class="line"></span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改为</span></span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span><br></pre></td></tr></table></figure>

<p>测试报错：connect to null failed</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim tools.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 放在 JVM Configuration 之前</span></span><br><span class="line">export NAMESRV_ADDR=localhost:9876</span><br></pre></td></tr></table></figure>

<p>测试报错：org.apache.rocketmq.client.exception.MQClientException: No route info of this topic: TopicTest</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动broker指定连接的ip：port</span></span><br><span class="line">./mqbroker -n localhost:9876</span><br></pre></td></tr></table></figure>

<h3 id="控制台rocketmq-console编译安装"><a href="#控制台rocketmq-console编译安装" class="headerlink" title="控制台rocketmq-console编译安装"></a>控制台rocketmq-console编译安装</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><a href="https://github.com/apache/rocketmq-externals">github仓库</a></p>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>

<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar rocketmq-console-ng-2.0.0.jar --rocketmq.config.namesrvAddr=172.17.0.2:9876</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中SPI的使用</title>
    <url>/2021/06/25/Spring%E4%B8%ADSPI%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="什么是SPI"><a href="#什么是SPI" class="headerlink" title="什么是SPI"></a>什么是SPI</h3><p>SPI 全程叫 <strong>Service Provider Interface</strong> 服务提供接口，它可以通过一个指定的接口 / 抽象类，寻找到预先配置好的实现类（并创建实现类对象）。</p>
<p>Spring 通过 <em>SpringFactoriesLoader</em> 读取放在 <em>META-INF</em> 目录下名为 <em>spring.factories</em> 的文件，获取文件中的权限定类名转化为实体对象。</p>
<span id="more"></span>

<h3 id="spring-factories"><a href="#spring-factories" class="headerlink" title="spring.factories"></a>spring.factories</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">com.eitan.spring.spi.dao.DemoDao</span>=<span class="string">\</span></span><br><span class="line"><span class="string">  com.eitan.spring.spi.daoImpl.MysqlDemoDao,\</span></span><br><span class="line"><span class="string">  com.eitan.spring.spi.daoImpl.OracleDemoDao</span></span><br></pre></td></tr></table></figure>



<h3 id="接口和实现类"><a href="#接口和实现类" class="headerlink" title="接口和实现类"></a>接口和实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoDao</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlDemoDao</span> <span class="keyword">implements</span> <span class="title">DemoDao</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OracleDemoDao</span> <span class="keyword">implements</span> <span class="title">DemoDao</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="SpringApplication"><a href="#SpringApplication" class="headerlink" title="SpringApplication"></a>SpringApplication</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;DemoDao&gt; demoDaoList = SpringFactoriesLoader.loadFactories(DemoDao.class, SpringApplication.class.getClassLoader());</span><br><span class="line">        demoDaoList.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; factoryNames = SpringFactoriesLoader.loadFactoryNames(DemoDao.class, SpringApplication.class.getClassLoader());</span><br><span class="line">        factoryNames.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">com<span class="selector-class">.eitan</span><span class="selector-class">.spring</span><span class="selector-class">.spi</span><span class="selector-class">.daoImpl</span>.MysqlDemoDao@f2a0b8e</span><br><span class="line">com<span class="selector-class">.eitan</span><span class="selector-class">.spring</span><span class="selector-class">.spi</span><span class="selector-class">.daoImpl</span>.OracleDemoDao@<span class="number">593634</span>ad</span><br><span class="line">com<span class="selector-class">.eitan</span><span class="selector-class">.spring</span><span class="selector-class">.spi</span><span class="selector-class">.daoImpl</span><span class="selector-class">.MysqlDemoDao</span></span><br><span class="line">com<span class="selector-class">.eitan</span><span class="selector-class">.spring</span><span class="selector-class">.spi</span><span class="selector-class">.daoImpl</span>.OracleDemoDao</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中@Conditional是如何生效的</title>
    <url>/2021/08/07/Spring%E4%B8%AD@Conditional%E6%98%AF%E5%A6%82%E4%BD%95%E7%94%9F%E6%95%88%E7%9A%84/</url>
    <content><![CDATA[<p>本文灵感源自<a href="https://ke.qq.com/course/package/20773">马士兵MAC课程-源码五班</a></p>
<h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><h3 id="实体类-Boss-和-Bar"><a href="#实体类-Boss-和-Bar" class="headerlink" title="实体类 Boss 和 Bar"></a>实体类 Boss 和 Bar</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.condition.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.condition.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以看到，Boss 上是添加了 @Component 注解的，Spring 通过包扫描可以将其添加进容器</p>
</blockquote>
<span id="more"></span>

<h3 id="BarConfiguration"><a href="#BarConfiguration" class="headerlink" title="BarConfiguration"></a>BarConfiguration</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.condition.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eitan.condition.condition.ExistBossCondition;</span><br><span class="line"><span class="keyword">import</span> com.eitan.condition.entity.Bar;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Conditional;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BarConfiguration</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@Conditional(ExistBossCondition.class)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Bar <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Bar();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Bar 通过配置类将其注入进容器，@Conditional 注解表示必须满足 ExistBossCondition.class 是匹配才会将其注入进容器</p>
</blockquote>
<h3 id="ExistBossCondition"><a href="#ExistBossCondition" class="headerlink" title="ExistBossCondition"></a>ExistBossCondition</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.condition.condition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eitan.condition.entity.Boss;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Condition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExistBossCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> context.getBeanFactory().containsBeanDefinition(Boss.class.getSimpleName().toLowerCase());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里的匹配规则是，如果容器中已经存在了 boss 的定义信息，才会将其所影响的类加载进容器</p>
</blockquote>
<h3 id="MyApplicationContext"><a href="#MyApplicationContext" class="headerlink" title="MyApplicationContext"></a>MyApplicationContext</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.condition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationContext</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(<span class="string">&quot;com.eitan.condition&quot;</span>);</span><br><span class="line">		Arrays.stream(context.getBeanDefinitionNames()).forEach(System.out::println);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>允许代码后，可以发现打印出了 bar 和 boss</li>
<li>当除去 Boss.class 上的 @Component 之后，bar 和 boss 都不会被打印</li>
</ul>
</blockquote>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="Boss-和-BarConfiguration-是怎么加载进容器的"><a href="#Boss-和-BarConfiguration-是怎么加载进容器的" class="headerlink" title="Boss 和 BarConfiguration 是怎么加载进容器的"></a>Boss 和 BarConfiguration 是怎么加载进容器的</h3><h4 id="AnnotationConfigApplicationContext的构造方法"><a href="#AnnotationConfigApplicationContext的构造方法" class="headerlink" title="AnnotationConfigApplicationContext的构造方法"></a>AnnotationConfigApplicationContext的构造方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AnnotationConfigApplicationContext</span><span class="params">(String... basePackages)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>();</span><br><span class="line">	scan(basePackages);</span><br><span class="line">	refresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>发生在 scan(basePackages) 方法中，最终调用的是 <strong>ClassPathBeanDefinitionScanner</strong> 的 <strong>doSacn</strong> 方法</p>
</blockquote>
<h4 id="doScan"><a href="#doScan" class="headerlink" title="doScan"></a>doScan</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Set&lt;BeanDefinitionHolder&gt; <span class="title">doScan</span><span class="params">(String... basePackages)</span> </span>&#123;</span><br><span class="line">	Assert.notEmpty(basePackages, <span class="string">&quot;At least one base package must be specified&quot;</span>);</span><br><span class="line">	Set&lt;BeanDefinitionHolder&gt; beanDefinitions = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">	<span class="comment">// 遍历 basePackages</span></span><br><span class="line">	<span class="keyword">for</span> (String basePackage : basePackages) &#123;</span><br><span class="line">		<span class="comment">// 扫描 basePackage 找出符合要求的beanDefinition</span></span><br><span class="line">		Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</span><br><span class="line">		<span class="comment">// 遍历</span></span><br><span class="line">		<span class="keyword">for</span> (BeanDefinition candidate : candidates) &#123;</span><br><span class="line">			<span class="comment">// 解析@Scope注解，包括scopeName和proxyMode</span></span><br><span class="line">			ScopeMetadata scopeMetadata = <span class="keyword">this</span>.scopeMetadataResolver.resolveScopeMetadata(candidate);</span><br><span class="line">			candidate.setScope(scopeMetadata.getScopeName());</span><br><span class="line">			<span class="comment">// 使用beanName生成器生成beanName</span></span><br><span class="line">			String beanName = <span class="keyword">this</span>.beanNameGenerator.generateBeanName(candidate, <span class="keyword">this</span>.registry);</span><br><span class="line">			<span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line">				<span class="comment">// 处理beanDefinition对象，例如，此bean是否可以自动装配到其它bean中</span></span><br><span class="line">				postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">				<span class="comment">// 处理定义在目标类上的通用注解，包括@Lazy、@Primary、@DependsOn、@Role、@Description</span></span><br><span class="line">				AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 检查beanName是否已经被注册过</span></span><br><span class="line">			<span class="keyword">if</span> (checkCandidate(beanName, candidate)) &#123;</span><br><span class="line">				<span class="comment">// 将当前遍历的bean的bean定义和beanName封装为Holder</span></span><br><span class="line">				BeanDefinitionHolder definitionHolder = <span class="keyword">new</span> BeanDefinitionHolder(candidate, beanName);</span><br><span class="line">				<span class="comment">// 根据proxyMode的值，选择是否创建作用域代理</span></span><br><span class="line">				definitionHolder =</span><br><span class="line">						AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">				beanDefinitions.add(definitionHolder);</span><br><span class="line">				<span class="comment">// 注册 beanDefinition</span></span><br><span class="line">				registerBeanDefinition(definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> beanDefinitions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>继续跟踪 <em>findCandidateComponents(basePackage);</em> 方法，通过 <em>doScan</em> 方法扫描到的 BeanDefinition 都是 <em>ScannedGenericBeanDefinition</em></p>
</blockquote>
<h4 id="查看扫描到的类"><a href="#查看扫描到的类" class="headerlink" title="查看扫描到的类"></a>查看扫描到的类</h4><p>可以看到，Boss 和 BarConfiguration 已经被扫描到了，但是 Bar 没有被扫描到</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210807150310.png" alt="image-20210807150305597"></p>
<h3 id="Bar-的加载时机"><a href="#Bar-的加载时机" class="headerlink" title="Bar 的加载时机"></a>Bar 的加载时机</h3><h4 id="发生在-ConfigurationClassPostProcessor-的-postProcessBeanDefinitionRegistry"><a href="#发生在-ConfigurationClassPostProcessor-的-postProcessBeanDefinitionRegistry" class="headerlink" title="发生在 ConfigurationClassPostProcessor 的 postProcessBeanDefinitionRegistry"></a>发生在 ConfigurationClassPostProcessor 的 postProcessBeanDefinitionRegistry</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> registryId = System.identityHashCode(registry);</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.registriesPostProcessed.contains(registryId)) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">				<span class="string">&quot;postProcessBeanDefinitionRegistry already called on this post-processor against &quot;</span> + registry);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.factoriesPostProcessed.contains(registryId)) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">				<span class="string">&quot;postProcessBeanFactory already called on this post-processor against &quot;</span> + registry);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">this</span>.registriesPostProcessed.add(registryId);</span><br><span class="line"></span><br><span class="line">	processConfigBeanDefinitions(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ConfigurationClassPostProcessor 永远是最先被调用的 PostProcessor，其作用是用来处理容器中的配置类</p>
</blockquote>
<h4 id="processConfigBeanDefinitions"><a href="#processConfigBeanDefinitions" class="headerlink" title="processConfigBeanDefinitions"></a>processConfigBeanDefinitions</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processConfigBeanDefinitions</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 存放BeanDefinitionHolder对象的集合</span></span><br><span class="line">		List&lt;BeanDefinitionHolder&gt; configCandidates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		<span class="comment">// 当前registry就是DefaultListableBeanFactory，获取所有已经注册的BeanDefinition的beanName</span></span><br><span class="line">		String[] candidateNames = registry.getBeanDefinitionNames();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 遍历所有要处理的beanDefinition的名称</span></span><br><span class="line">		<span class="keyword">for</span> (String beanName : candidateNames) &#123;</span><br><span class="line">			<span class="comment">// 获取指定名称的BeanDefinition对象</span></span><br><span class="line">			BeanDefinition beanDef = registry.getBeanDefinition(beanName);</span><br><span class="line">			<span class="comment">// 如果beanDef中的configurationClass属性不等于空，那么意味着已经处理过了</span></span><br><span class="line">			<span class="keyword">if</span> (beanDef.getAttribute(ConfigurationClassUtils.CONFIGURATION_CLASS_ATTRIBUTE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">					logger.debug(<span class="string">&quot;Bean definition has already been processed as a configuration class: &quot;</span> + beanDef);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 判断当前beanDef是否是一个配置类，并为BeanDefinition设置属性为lite或者full，此处设置属性值是为了进行后续调用</span></span><br><span class="line">			<span class="comment">// 如果Configuration配置了proxyBeanMethods代理为true则为full</span></span><br><span class="line">			<span class="comment">// 如果加了@Bean、@Component、@ComponentScan、@Import、@ImportSource注解则为lite</span></span><br><span class="line">			<span class="comment">// 判断当前beanDef是否加了@Configuration注解或者是@Bean,@Component,@ComponentScan,@Import,@ImportSource注解</span></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, <span class="keyword">this</span>.metadataReaderFactory)) &#123;</span><br><span class="line">				<span class="comment">// 添加到对应的集合中</span></span><br><span class="line">				configCandidates.add(<span class="keyword">new</span> BeanDefinitionHolder(beanDef, beanName));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		......</span><br><span class="line">            </span><br><span class="line">		<span class="comment">// 配置类的解析类 ConfigurationClassParse</span></span><br><span class="line">		ConfigurationClassParser parser = <span class="keyword">new</span> ConfigurationClassParser(</span><br><span class="line">				<span class="keyword">this</span>.metadataReaderFactory, <span class="keyword">this</span>.problemReporter, <span class="keyword">this</span>.environment,</span><br><span class="line">				<span class="keyword">this</span>.resourceLoader, <span class="keyword">this</span>.componentScanBeanNameGenerator, registry);</span><br><span class="line">		<span class="comment">// 存放 BeanDefinitionHolder 对象</span></span><br><span class="line">		Set&lt;BeanDefinitionHolder&gt; candidates = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(configCandidates);</span><br><span class="line">		<span class="comment">// 存放扫描包下的所有 bean</span></span><br><span class="line">		Set&lt;ConfigurationClass&gt; alreadyParsed = <span class="keyword">new</span> HashSet&lt;&gt;(configCandidates.size());</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			StartupStep processConfig = <span class="keyword">this</span>.applicationStartup.start(<span class="string">&quot;spring.context.config-classes.parse&quot;</span>);</span><br><span class="line">			<span class="comment">// 解析 @Controller、@Import、@ImportSource、@ComponentScan、@ComponentScans、@Bean的BeanDefinition</span></span><br><span class="line">			parser.parse(candidates);</span><br><span class="line">			parser.validate();</span><br><span class="line"></span><br><span class="line">			Set&lt;ConfigurationClass&gt; configClasses = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(parser.getConfigurationClasses());</span><br><span class="line">			configClasses.removeAll(alreadyParsed);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Read the model and create bean definitions based on its content</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.reader == <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">this</span>.reader = <span class="keyword">new</span> ConfigurationClassBeanDefinitionReader(</span><br><span class="line">						registry, <span class="keyword">this</span>.sourceExtractor, <span class="keyword">this</span>.resourceLoader, <span class="keyword">this</span>.environment,</span><br><span class="line">						<span class="keyword">this</span>.importBeanNameGenerator, parser.getImportRegistry());</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>.reader.loadBeanDefinitions(configClasses);</span><br><span class="line">            </span><br><span class="line">			......</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="loadBeanDefinitionsForConfigurationClass"><a href="#loadBeanDefinitionsForConfigurationClass" class="headerlink" title="loadBeanDefinitionsForConfigurationClass"></a>loadBeanDefinitionsForConfigurationClass</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitionsForConfigurationClass</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">		ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (trackedConditionEvaluator.shouldSkip(configClass)) &#123;</span><br><span class="line">		String beanName = configClass.getBeanName();</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasLength(beanName) &amp;&amp; <span class="keyword">this</span>.registry.containsBeanDefinition(beanName)) &#123;</span><br><span class="line">			<span class="keyword">this</span>.registry.removeBeanDefinition(beanName);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>.importRegistry.removeImportingClass(configClass.getMetadata().getClassName());</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (configClass.isImported()) &#123;</span><br><span class="line">		registerBeanDefinitionForImportedConfigurationClass(configClass);</span><br><span class="line">	&#125;</span><br><span class="line">       <span class="comment">// 从@Bean修饰的方法中加载BeanDefinition</span></span><br><span class="line">	<span class="keyword">for</span> (BeanMethod beanMethod : configClass.getBeanMethods()) &#123;</span><br><span class="line">		loadBeanDefinitionsForBeanMethod(beanMethod);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	loadBeanDefinitionsFromImportedResources(configClass.getImportedResources());</span><br><span class="line">	loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="loadBeanDefinitionsForBeanMethod"><a href="#loadBeanDefinitionsForBeanMethod" class="headerlink" title="loadBeanDefinitionsForBeanMethod"></a>loadBeanDefinitionsForBeanMethod</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitionsForBeanMethod</span><span class="params">(BeanMethod beanMethod)</span> </span>&#123;</span><br><span class="line">	ConfigurationClass configClass = beanMethod.getConfigurationClass();</span><br><span class="line">	MethodMetadata metadata = beanMethod.getMetadata();</span><br><span class="line">	String methodName = metadata.getMethodName();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Do we need to mark the bean as skipped by its condition?</span></span><br><span class="line">      	<span class="comment">// 这里就是 @Conditional 生效的地方</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) &#123;</span><br><span class="line">		configClass.skippedBeanMethods.add(methodName);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (configClass.skippedBeanMethods.contains(methodName)) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">   ....</span><br></pre></td></tr></table></figure>

<h4 id="shouldSkip"><a href="#shouldSkip" class="headerlink" title="shouldSkip"></a>shouldSkip</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldSkip</span><span class="params">(<span class="meta">@Nullable</span> AnnotatedTypeMetadata metadata, <span class="meta">@Nullable</span> ConfigurationPhase phase)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// metadata为空或者配置类中不存在@Conditional标签</span></span><br><span class="line">	<span class="keyword">if</span> (metadata == <span class="keyword">null</span> || !metadata.isAnnotated(Conditional.class.getName())) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 采用递归的方式判断，第一次执行是phase必为空</span></span><br><span class="line">	<span class="keyword">if</span> (phase == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="comment">// 下面的逻辑判断中，需要进入ConfigurationClassUtils.isConfigurationCandidate方法，主要逻辑如下</span></span><br><span class="line">		<span class="comment">// 1.metadata是AnnotationMetadata类的一个实例</span></span><br><span class="line">		<span class="comment">// 2.检测bean中是否使用@Configuration注解</span></span><br><span class="line">		<span class="comment">// 3.检测bean不是另一个接口</span></span><br><span class="line">		<span class="comment">// 4.检查bean中是否包含@Component、@ComponentScan、@Import、@ImportResource中任意一个</span></span><br><span class="line">		<span class="comment">// 5.检查bean中是否有@Bean注解</span></span><br><span class="line">		<span class="keyword">if</span> (metadata <span class="keyword">instanceof</span> AnnotationMetadata &amp;&amp;</span><br><span class="line">				ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) &#123;</span><br><span class="line">			<span class="keyword">return</span> shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	List&lt;Condition&gt; conditions = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	<span class="keyword">for</span> (String[] conditionClasses : getConditionClasses(metadata)) &#123;</span><br><span class="line">		<span class="keyword">for</span> (String conditionClass : conditionClasses) &#123;</span><br><span class="line">			Condition condition = getCondition(conditionClass, <span class="keyword">this</span>.context.getClassLoader());</span><br><span class="line">			conditions.add(condition);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 对相关的条件进行排序操作</span></span><br><span class="line">	AnnotationAwareOrderComparator.sort(conditions);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (Condition condition : conditions) &#123;</span><br><span class="line">		ConfigurationPhase requiredPhase = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (condition <span class="keyword">instanceof</span> ConfigurationCondition) &#123;</span><br><span class="line">			requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// requiredPhase只可能是空或者是ConfigurationCondition的一个实例对象</span></span><br><span class="line">		<span class="keyword">if</span> ((requiredPhase == <span class="keyword">null</span> || requiredPhase == phase) &amp;&amp; !condition.matches(<span class="keyword">this</span>.context, metadata)) &#123;</span><br><span class="line">			<span class="comment">// 此逻辑为：1.requiredPhase不是ConfigurationCondition的实例</span></span><br><span class="line">			<span class="comment">// 2.phase==requiredPhase，从上述的递归可知，phase可为ConfigurationPhase.PARSE_CONFIGURATION或者metadata, ConfigurationPhase.REGISTER_BEAN</span></span><br><span class="line">			<span class="comment">// 3.condition.matches(this.context,metadata)返回false</span></span><br><span class="line">			<span class="comment">// 如果条件成立，则在此函数上层将阻断bean注入Spring容器</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里获取了该方法上的 conditionClasses，然后调用了这些 conditionClasses 的 matches 方法，只要有一个 matches 返回 false，则这个方法就返回 true，上层方法就会跳过这个类的加载</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><em>doScan</em> 方法会扫描加载 basePackages 下所有注释了 @Component 的类</li>
<li>@Configuration 包含了 @Component</li>
<li>在调用 BeanDefinitionRegistryPostProcessor 和 BeanFactoryPostProcessor 时最先调用的就是 ConfigurationClassPostProcessor，该类中解析了对配置类的解析。</li>
<li>该类处理了 @Component、@ComponentScan、@Import、@ImportSource、@Bean 注解</li>
<li>在解析配置类或者方法时，会先调用 shouldSkip 方法，该方法中会获取方法或类上修饰的 @Conditional 注解的 conditionClasses</li>
<li>遍历调用这些 conditionClasses 实现了 Condition 接口的 matches 方法，当有一个返回 false 这跳过解析</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中bean的几种注入方式</title>
    <url>/2021/06/30/Spring%E4%B8%ADbean%E7%9A%84%E5%87%A0%E7%A7%8D%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="声明式注入"><a href="#声明式注入" class="headerlink" title="声明式注入"></a>声明式注入</h3><h4 id="Configuration-Bean"><a href="#Configuration-Bean" class="headerlink" title="@Configuration + @Bean"></a>@Configuration + @Bean</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickstartConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Component-ComponentScan"><a href="#Component-ComponentScan" class="headerlink" title="@Component + @ComponentScan"></a>@Component + @ComponentScan</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.linkedbear.spring.annotation.c_scan&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComponentScanConfiguration</span></span></span><br></pre></td></tr></table></figure>

<h4 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Boss.class, BartenderConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableTavern</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="配置式注入"><a href="#配置式注入" class="headerlink" title="配置式注入"></a>配置式注入</h3><h4 id="lt-bean-gt-标签声明"><a href="#lt-bean-gt-标签声明" class="headerlink" title="&lt;bean&gt;标签声明"></a>&lt;bean&gt;标签声明</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.linkedbear.spring.basic_dl.a_quickstart_byname.bean.Person&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编程式注入-BeanDefinition"><a href="#编程式注入-BeanDefinition" class="headerlink" title="编程式注入 BeanDefinition"></a>编程式注入 <em>BeanDefinition</em></h3><h4 id="ImportBeanDefinitionRegistrar"><a href="#ImportBeanDefinitionRegistrar" class="headerlink" title="ImportBeanDefinitionRegistrar"></a>ImportBeanDefinitionRegistrar</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaiterRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.registerBeanDefinition(<span class="string">&quot;waiter&quot;</span>, <span class="keyword">new</span> RootBeanDefinition(Waiter.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="手动构造-BeanDefinition-注入"><a href="#手动构造-BeanDefinition-注入" class="headerlink" title="手动构造 BeanDefinition 注入"></a>手动构造 <em>BeanDefinition</em> 注入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationConfigApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line"></span><br><span class="line">BeanDefinition personDefinition = BeanDefinitionBuilder.rootBeanDefinition(Person.class)</span><br><span class="line">        .addPropertyValue(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>).getBeanDefinition();</span><br><span class="line">ctx.registerBeanDefinition(<span class="string">&quot;person&quot;</span>, personDefinition);</span><br><span class="line"></span><br><span class="line">ctx.refresh();</span><br></pre></td></tr></table></figure>

<h4 id="借助-BeanDefinitionRegistryPostProcessor-注入"><a href="#借助-BeanDefinitionRegistryPostProcessor-注入" class="headerlink" title="借助 BeanDefinitionRegistryPostProcessor 注入"></a>借助 BeanDefinitionRegistryPostProcessor 注入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    registry.registerBeanDefinition(<span class="string">&quot;animalNameSetterPostProcessor&quot;</span>, </span><br><span class="line">            <span class="keyword">new</span> RootBeanDefinition(AnimalNameSetterPostProcessor.class));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中三种后置处理器对比</title>
    <url>/2021/06/24/Spring%E4%B8%AD%E4%B8%89%E7%A7%8D%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th></th>
<th>BeanPostProcessor</th>
<th>BeanFactoryPostProcessor</th>
<th>BeanDefinitionRegistryPostProcessor</th>
</tr>
</thead>
<tbody><tr>
<td>处理目标</td>
<td>bean 实例</td>
<td>BeanDefinition</td>
<td>BeanDefinition、.class 文件等</td>
</tr>
<tr>
<td>执行时机</td>
<td>bena 的初始化阶段前后（已创建出 bean 对象）</td>
<td>BeanDefinition解析完毕并注册进 BeanFactory 之后（此时 bean 未实例化）</td>
<td>配置文件、配置类已解析完毕并注册进 BeanFactory，但还未被 BeanFactoryPostProcessor 处理</td>
</tr>
<tr>
<td>可操作空间</td>
<td>对 bean 的属性赋值、创建代理对象等</td>
<td>给 BeanDefinition 中增删属性，移除 BeanDefinition 等</td>
<td>向 BeanFactory 中注册新的 BeanDefinition 和 BeanFactoryPostProcessor</td>
</tr>
</tbody></table>
<span id="more"></span>

<h3 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="function"><span class="keyword">default</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="function"><span class="keyword">default</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>入参中的 <em>bean</em> 为根据 <em>BeanDefinition</em> 生成的 bean</p>
<p>出参中的 <em>bean</em>，如果不为 null 则会替换掉 BeanFactory 中传入的 <em>bean</em></p>
<p>如果该 bean，是通过 <em>factoryBean</em> 生成的，则不会执行 <em>postProcesserBeforeInitialization</em> 方法</p>
</blockquote>
<h3 id="BeanFactoryPostProcessor"><a href="#BeanFactoryPostProcessor" class="headerlink" title="BeanFactoryPostProcessor"></a>BeanFactoryPostProcessor</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Modify the application context&#x27;s internal bean factory after its standard</span></span><br><span class="line"><span class="comment">	 * initialization. All bean definitions will have been loaded, but no beans</span></span><br><span class="line"><span class="comment">	 * will have been instantiated yet. This allows for overriding or adding</span></span><br><span class="line"><span class="comment">	 * properties even to eager-initializing beans.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> beanFactory the bean factory used by the application context</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过入参 <em>beanfactory</em> 就可以获取到对应的 <em>beanDefinition</em></p>
</blockquote>
<h3 id="BeanDefinitionRegistryPostProcessor"><a href="#BeanDefinitionRegistryPostProcessor" class="headerlink" title="BeanDefinitionRegistryPostProcessor"></a>BeanDefinitionRegistryPostProcessor</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinitionRegistryPostProcessor</span> <span class="keyword">extends</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Modify the application context&#x27;s internal bean definition registry after its</span></span><br><span class="line"><span class="comment">	 * standard initialization. All regular bean definitions will have been loaded,</span></span><br><span class="line"><span class="comment">	 * but no beans will have been instantiated yet. This allows for adding further</span></span><br><span class="line"><span class="comment">	 * bean definitions before the next post-processing phase kicks in.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> registry the bean definition registry used by the application context</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过 <em>BeanDefinitionRegistry</em> 的 <em>registerBeanDefinition</em> 方法就可以向容器中注入 <em>beanDefinition</em></p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中事件广播原理</title>
    <url>/2021/06/25/Spring%E4%B8%AD%E4%BA%8B%E4%BB%B6%E5%B9%BF%E6%92%AD%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="SpringFramework-的事件模型"><a href="#SpringFramework-的事件模型" class="headerlink" title="SpringFramework 的事件模型"></a>SpringFramework 的事件模型</h2><ul>
<li>ApplicationEventPublisher：事件发布器，是用来接受事件，并交给事件广播器处理</li>
<li>ApplicationEventMulticaster：事件广播器，拿到事件发布器的事件，并广播给监听器</li>
</ul>
<blockquote>
<p><em>ApplicationContext</em> 接口继承了 <em>ApplicationEventPublisher</em> ，拥有事件发布的功能；<em>ApplicationContext</em> 的第一个抽象实现类 <em>AbstractApplicationContext</em> 组合了一个 <em>ApplicationEventMulticaster</em> ，拥有事件广播的能力。综合来看，<em>ApplicationContext</em> 的落地实现就已经能够完成事件驱动模型中的 “观察者” 身份了</p>
</blockquote>
<span id="more"></span>



<h2 id="publishEvent"><a href="#publishEvent" class="headerlink" title="publishEvent()"></a>publishEvent()</h2><p>该方法的实现在 <em>AbstractApplicationContext</em> 中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">publishEvent</span><span class="params">(Object event, <span class="meta">@Nullable</span> ResolvableType eventType)</span> </span>&#123;</span><br><span class="line">    Assert.notNull(event, <span class="string">&quot;Event must not be null&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decorate event as an ApplicationEvent if necessary</span></span><br><span class="line">    <span class="comment">// 这里要给普通的对象封装为PayloadApplicationEvent</span></span><br><span class="line">    ApplicationEvent applicationEvent;</span><br><span class="line">    <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationEvent) &#123;</span><br><span class="line">        applicationEvent = (ApplicationEvent) event;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        applicationEvent = <span class="keyword">new</span> PayloadApplicationEvent&lt;&gt;(<span class="keyword">this</span>, event);</span><br><span class="line">        <span class="keyword">if</span> (eventType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            eventType = ((PayloadApplicationEvent&lt;?&gt;) applicationEvent).getResolvableType();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Multicast right now if possible - or lazily once the multicaster is initialized</span></span><br><span class="line">    <span class="comment">// 添加事件广播（earlyApplicationEvents太过于复杂，会考虑后续加餐内容解释）</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.earlyApplicationEvents != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.earlyApplicationEvents.add(applicationEvent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        getApplicationEventMulticaster().multicastEvent(applicationEvent, eventType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Publish event via parent context as well...</span></span><br><span class="line">    <span class="comment">// 通知父容器发布事件</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.parent <span class="keyword">instanceof</span> AbstractApplicationContext) &#123;</span><br><span class="line">            ((AbstractApplicationContext) <span class="keyword">this</span>.parent).publishEvent(event, eventType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.parent.publishEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>广播事件的行为可以分为三部分：</p>
<ol>
<li>适配 payload 类型的 <em>ApplicationEvent</em>，即如果入参不是 <em>Event</em> 的子类则包装成 <em>PayloadApplicationEvent</em></li>
<li>在本容器中广播事件</li>
<li>通知父容器发布事件（正好知道了为什么子容器的事件会广播到父容器）</li>
</ol>
</blockquote>
<h2 id="multicastEvent"><a href="#multicastEvent" class="headerlink" title="multicastEvent()"></a>multicastEvent()</h2><p>该方法位于 <em>ApplicationEventMulticaster</em> 的唯一落地实现类 <em>SimpleApplicationEventMulticaster</em> 中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multicastEvent</span><span class="params">(<span class="keyword">final</span> ApplicationEvent event, <span class="meta">@Nullable</span> ResolvableType eventType)</span> </span>&#123;</span><br><span class="line">    ResolvableType type = (eventType != <span class="keyword">null</span> ? eventType : resolveDefaultEventType(event));</span><br><span class="line">    Executor executor = getTaskExecutor();</span><br><span class="line">    <span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : getApplicationListeners(event, type)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (executor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            executor.execute(() -&gt; invokeListener(listener, event));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            invokeListener(listener, event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ResolvableType type = (eventType != null ? eventType : resolveDefaultEventType(event))：包装 <em>ApplicationEvent</em> 的具体类型，目的是可以更方便的获取对象和类的一些信息（父类、接口、泛型等）</li>
<li>getApplicationListeners(event, type)：获取该事件对应的 <em>Listeners</em></li>
<li>invokeListener(listener, event)：调用 <em>doInvokeListener(listener, event)</em> 方法，最终调用 <em>Listener</em> 的 <em>onApplicationEvent(E event)</em> 方法实现监听器方法的调用</li>
</ul>
<h2 id="getApplicationListeners-event-type"><a href="#getApplicationListeners-event-type" class="headerlink" title="getApplicationListeners(event, type)"></a>getApplicationListeners(event, type)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Collection&lt;ApplicationListener&lt;?&gt;&gt; getApplicationListeners(</span><br><span class="line">			ApplicationEvent event, ResolvableType eventType) &#123;</span><br><span class="line"></span><br><span class="line">		Object source = event.getSource();</span><br><span class="line">		Class&lt;?&gt; sourceType = (source != <span class="keyword">null</span> ? source.getClass() : <span class="keyword">null</span>);</span><br><span class="line">		ListenerCacheKey cacheKey = <span class="keyword">new</span> ListenerCacheKey(eventType, sourceType);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Potential new retriever to populate</span></span><br><span class="line">		CachedListenerRetriever newRetriever = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Quick check for existing entry on ConcurrentHashMap</span></span><br><span class="line">		CachedListenerRetriever existingRetriever = <span class="keyword">this</span>.retrieverCache.get(cacheKey);</span><br><span class="line">		<span class="keyword">if</span> (existingRetriever == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">// Caching a new ListenerRetriever if possible</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.beanClassLoader == <span class="keyword">null</span> ||</span><br><span class="line">					(ClassUtils.isCacheSafe(event.getClass(), <span class="keyword">this</span>.beanClassLoader) &amp;&amp;</span><br><span class="line">							(sourceType == <span class="keyword">null</span> || ClassUtils.isCacheSafe(sourceType, <span class="keyword">this</span>.beanClassLoader)))) &#123;</span><br><span class="line">				newRetriever = <span class="keyword">new</span> CachedListenerRetriever();</span><br><span class="line">				existingRetriever = <span class="keyword">this</span>.retrieverCache.putIfAbsent(cacheKey, newRetriever);</span><br><span class="line">				<span class="keyword">if</span> (existingRetriever != <span class="keyword">null</span>) &#123;</span><br><span class="line">					newRetriever = <span class="keyword">null</span>;  <span class="comment">// no need to populate it in retrieveApplicationListeners</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (existingRetriever != <span class="keyword">null</span>) &#123;</span><br><span class="line">			Collection&lt;ApplicationListener&lt;?&gt;&gt; result = existingRetriever.getApplicationListeners();</span><br><span class="line">			<span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> result;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// If result is null, the existing retriever is not fully populated yet by another thread.</span></span><br><span class="line">			<span class="comment">// Proceed like caching wasn&#x27;t possible for this current local attempt.</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> retrieveApplicationListeners(eventType, sourceType, newRetriever);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>先从 <em>retrieverCache</em> 中获取，如果能获取到则直接返回</li>
<li>获取不到则调用 <em>retrieveApplicationListeners(eventType, sourceType, newRetriever)</em> ，并将结果放入 <em>retrieverCache</em> 中</li>
</ul>
</blockquote>
<h2 id="retrieveApplicationListeners-eventType-sourceType-newRetriever"><a href="#retrieveApplicationListeners-eventType-sourceType-newRetriever" class="headerlink" title="retrieveApplicationListeners(eventType, sourceType, newRetriever)"></a>retrieveApplicationListeners(eventType, sourceType, newRetriever)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Collection&lt;ApplicationListener&lt;?&gt;&gt; retrieveApplicationListeners(</span><br><span class="line">		ResolvableType eventType, <span class="meta">@Nullable</span> Class&lt;?&gt; sourceType, <span class="meta">@Nullable</span> CachedListenerRetriever retriever) &#123;</span><br><span class="line"></span><br><span class="line">	List&lt;ApplicationListener&lt;?&gt;&gt; allListeners = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	Set&lt;ApplicationListener&lt;?&gt;&gt; filteredListeners = (retriever != <span class="keyword">null</span> ? <span class="keyword">new</span> LinkedHashSet&lt;&gt;() : <span class="keyword">null</span>);</span><br><span class="line">	Set&lt;String&gt; filteredListenerBeans = (retriever != <span class="keyword">null</span> ? <span class="keyword">new</span> LinkedHashSet&lt;&gt;() : <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">	Set&lt;ApplicationListener&lt;?&gt;&gt; listeners;</span><br><span class="line">	Set&lt;String&gt; listenerBeans;</span><br><span class="line">	<span class="keyword">synchronized</span> (<span class="keyword">this</span>.defaultRetriever) &#123;</span><br><span class="line">		listeners = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="keyword">this</span>.defaultRetriever.applicationListeners);</span><br><span class="line">		listenerBeans = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="keyword">this</span>.defaultRetriever.applicationListenerBeans);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Add programmatically registered listeners, including ones coming</span></span><br><span class="line">	<span class="comment">// from ApplicationListenerDetector (singleton beans and inner beans).</span></span><br><span class="line">	<span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : listeners) &#123;</span><br><span class="line">		<span class="keyword">if</span> (supportsEvent(listener, eventType, sourceType)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (retriever != <span class="keyword">null</span>) &#123;</span><br><span class="line">				filteredListeners.add(listener);</span><br><span class="line">			&#125;</span><br><span class="line">			allListeners.add(listener);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Add listeners by bean name, potentially overlapping with programmatically</span></span><br><span class="line">	<span class="comment">// registered listeners above - but here potentially with additional metadata.</span></span><br><span class="line">	<span class="keyword">if</span> (!listenerBeans.isEmpty()) &#123;</span><br><span class="line">		ConfigurableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">		<span class="keyword">for</span> (String listenerBeanName : listenerBeans) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> (supportsEvent(beanFactory, listenerBeanName, eventType)) &#123;</span><br><span class="line">					ApplicationListener&lt;?&gt; listener =</span><br><span class="line">							beanFactory.getBean(listenerBeanName, ApplicationListener.class);</span><br><span class="line">					<span class="keyword">if</span> (!allListeners.contains(listener) &amp;&amp; supportsEvent(listener, eventType, sourceType)) &#123;</span><br><span class="line">						<span class="keyword">if</span> (retriever != <span class="keyword">null</span>) &#123;</span><br><span class="line">							<span class="keyword">if</span> (beanFactory.isSingleton(listenerBeanName)) &#123;</span><br><span class="line">								filteredListeners.add(listener);</span><br><span class="line">							&#125;</span><br><span class="line">							<span class="keyword">else</span> &#123;</span><br><span class="line">								filteredListenerBeans.add(listenerBeanName);</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">						allListeners.add(listener);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">// Remove non-matching listeners that originally came from</span></span><br><span class="line">					<span class="comment">// ApplicationListenerDetector, possibly ruled out by additional</span></span><br><span class="line">					<span class="comment">// BeanDefinition metadata (e.g. factory method generics) above.</span></span><br><span class="line">					Object listener = beanFactory.getSingleton(listenerBeanName);</span><br><span class="line">					<span class="keyword">if</span> (retriever != <span class="keyword">null</span>) &#123;</span><br><span class="line">						filteredListeners.remove(listener);</span><br><span class="line">					&#125;</span><br><span class="line">					allListeners.remove(listener);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">				<span class="comment">// Singleton listener instance (without backing bean definition) disappeared -</span></span><br><span class="line">				<span class="comment">// probably in the middle of the destruction phase</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	AnnotationAwareOrderComparator.sort(allListeners);</span><br><span class="line">	<span class="keyword">if</span> (retriever != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (filteredListenerBeans.isEmpty()) &#123;</span><br><span class="line">			retriever.applicationListeners = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(allListeners);</span><br><span class="line">			retriever.applicationListenerBeans = filteredListenerBeans;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			retriever.applicationListeners = filteredListeners;</span><br><span class="line">			retriever.applicationListenerBeans = filteredListenerBeans;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> allListeners;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>筛选出由<strong>编程式</strong>注入到 IOC 容器的，监听当前发布事件的监听器</li>
<li>筛选出由<strong>声明式 / 配置式</strong>注入到 IOC 容器的，监听当前发布事件的监听器</li>
<li>监听器排序</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中控制Bean生命周期的三种方式</title>
    <url>/2021/06/22/Spring%E4%B8%AD%E6%8E%A7%E5%88%B6Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th></th>
<th>@PostConstruct &amp; @PreDestroy</th>
<th>InitializingBean &amp; DisposableBean</th>
<th>init-method &amp; destory-method</th>
</tr>
</thead>
<tbody><tr>
<td>执行顺序</td>
<td>最先</td>
<td>中间</td>
<td>最后</td>
</tr>
<tr>
<td>组件耦合度</td>
<td>与 JSR 规范耦合</td>
<td>与 SpringFramework 耦合</td>
<td>无侵入（只有 <code>&lt;bean&gt;</code> 和 <code>@Bean</code> 中使用）</td>
</tr>
<tr>
<td>容器支持</td>
<td>注解原生支持，xml需开启注解驱动</td>
<td>xml 、注解原生支持</td>
<td>xml 、注解原生支持</td>
</tr>
<tr>
<td>单实例Bean</td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td>原型Bean</td>
<td>✔</td>
<td>✔</td>
<td>只支持 init-method</td>
</tr>
</tbody></table>
<span id="more"></span>

<h3 id="Pen"><a href="#Pen" class="headerlink" title="Pen"></a>Pen</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pen</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;initMethod...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destoryMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destoryMethod...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postConstruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postConstruct...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preDestroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;disposableBean&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;initializingBean&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="LifecycleConfiguration"><a href="#LifecycleConfiguration" class="headerlink" title="LifecycleConfiguration"></a>LifecycleConfiguration</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(initMethod = &quot;initMethod&quot;,destroyMethod = &quot;destoryMethod&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pen <span class="title">pen</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="LifecycleApplication"><a href="#LifecycleApplication" class="headerlink" title="LifecycleApplication"></a>LifecycleApplication</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(LifecycleConfiguration.class);</span><br><span class="line">        applicationContext.getBean(Pen.class);</span><br><span class="line">        applicationContext.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">postConstruct</span></span>...</span><br><span class="line">initializingBean</span><br><span class="line"><span class="function"><span class="title">initMethod</span></span>...</span><br><span class="line"><span class="function"><span class="title">preDestroy</span></span>...</span><br><span class="line">disposableBean</span><br><span class="line"><span class="function"><span class="title">destoryMethod</span></span>...</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中模块装配的三种方式</title>
    <url>/2021/06/25/Spring%E4%B8%AD%E6%A8%A1%E5%9D%97%E8%A3%85%E9%85%8D%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h3><p>可直接导入普通类、配置类、ImportSeletor 的实现类和 ImportBeanDefinitionRegistrar 的实现类，通常情况下是写在自定义注解上</p>
<h3 id="编写-ImportSeletor-的实现类"><a href="#编写-ImportSeletor-的实现类" class="headerlink" title="编写 ImportSeletor 的实现类"></a>编写 ImportSeletor 的实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Select and return the names of which class(es) should be imported based on</span></span><br><span class="line"><span class="comment">	 * the &#123;<span class="doctag">@link</span> AnnotationMetadata&#125; of the importing @&#123;<span class="doctag">@link</span> Configuration&#125; class.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the class names, or an empty array if none</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	String[] selectImports(AnnotationMetadata importingClassMetadata);</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> Predicate&lt;String&gt; <span class="title">getExclusionFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过 selectImports 方法导入对象，返回的是一组需要导入的类的全限定类名</p>
</blockquote>
<span id="more"></span>

<h3 id="编写-ImportBeanDefinitionRegistrar-的实现类"><a href="#编写-ImportBeanDefinitionRegistrar-的实现类" class="headerlink" title="编写 ImportBeanDefinitionRegistrar 的实现类"></a>编写 ImportBeanDefinitionRegistrar 的实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry,</span></span></span><br><span class="line"><span class="params"><span class="function">			BeanNameGenerator importBeanNameGenerator)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		registerBeanDefinitions(importingClassMetadata, registry);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>直接通过 BeanDefinitionRegistry 的 registerBeanDefinition 方法注册 BeanDefinition 到容器中</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring扩展自定义属性编辑器</title>
    <url>/2021/07/15/Spring%E6%89%A9%E5%B1%95%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    <content><![CDATA[<p>本文学习自<a href="https://ke.qq.com/course/package/20773">马士兵MAC课程-源码五班</a></p>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>自定义一个 <em>Address</em> 类，包含三个字段 <em>province、city、town</em>，给 <em>Address</em> 用字符串进行赋值，字符串用下划线分割 <em>province、city、town</em>，最终能使 <em>BeanFactory</em> 成功解析。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.eitan.editor.entity.Customer&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;福建省_福州市_闽侯县&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>    

<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> address;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.address = address;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Customer&#123;&quot;</span> +</span><br><span class="line">				<span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, address=&quot;</span> + address +</span><br><span class="line">				<span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String province;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String town;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getProvince</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> province;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProvince</span><span class="params">(String province)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.province = province;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> city;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.city = city;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> town;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTown</span><span class="params">(String town)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.town = town;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +</span><br><span class="line">				<span class="string">&quot;province=&#x27;&quot;</span> + province + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, city=&#x27;&quot;</span> + city + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, town=&#x27;&quot;</span> + town + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义一个继承-PropertyEditorSupport-的子类"><a href="#自定义一个继承-PropertyEditorSupport-的子类" class="headerlink" title="自定义一个继承 PropertyEditorSupport 的子类"></a>自定义一个继承 <em>PropertyEditorSupport</em> 的子类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressPropertyEditor</span> <span class="keyword">extends</span> <span class="title">PropertyEditorSupport</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAsText</span><span class="params">(String text)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">		String[] s = text.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">		Address address = <span class="keyword">new</span> Address();</span><br><span class="line">		address.setProvince(s[<span class="number">0</span>]);</span><br><span class="line">		address.setCity(s[<span class="number">1</span>]);</span><br><span class="line">		address.setTown(s[<span class="number">2</span>]);</span><br><span class="line">		<span class="keyword">this</span>.setValue(address);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该方法用于编写处理属性的具体逻辑</p>
</blockquote>
<h3 id="自定义一个实现-PropertyEditorRegistrar-接口的子类"><a href="#自定义一个实现-PropertyEditorRegistrar-接口的子类" class="headerlink" title="自定义一个实现 PropertyEditorRegistrar 接口的子类"></a>自定义一个实现 <em>PropertyEditorRegistrar</em> 接口的子类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressPropertyEditorRegistrar</span> <span class="keyword">implements</span> <span class="title">PropertyEditorRegistrar</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerCustomEditors</span><span class="params">(PropertyEditorRegistry registry)</span> </span>&#123;</span><br><span class="line">		registry.registerCustomEditor(Address.class,<span class="keyword">new</span> AddressPropertyEditor());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对-Spring-中注册一个-CustomEditorConfigurer"><a href="#对-Spring-中注册一个-CustomEditorConfigurer" class="headerlink" title="对 Spring 中注册一个 CustomEditorConfigurer"></a>对 <em>Spring</em> 中注册一个 <em>CustomEditorConfigurer</em></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.eitan.editor.entity.Customer&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;福建省_福州市_闽侯县&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 方式一 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.beans.factory.config.CustomEditorConfigurer&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;propertyEditorRegistrars&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.eitan.editor.registrar.AddressPropertyEditorRegistrar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 方式二 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.beans.factory.config.CustomEditorConfigurer&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;customEditors&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;com.eitan.editor.entity.Address&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">value</span>&gt;</span>com.eitan.editor.editor.AddressPropertyEditor<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注册 <em>CustomEditorConfigurer</em> 主要是为了将 <em>PropertyEditor</em> 注册进 <em>BeanFactory</em></p>
<p>注：<em>PropertyEditor</em> 的实现类是 <em>PropertyEditorSupport</em> </p>
</blockquote>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="CustomEditorConfigurer-是怎么将-PropertyEditorRegistrar-注册进-BeanFactory"><a href="#CustomEditorConfigurer-是怎么将-PropertyEditorRegistrar-注册进-BeanFactory" class="headerlink" title="CustomEditorConfigurer 是怎么将 PropertyEditorRegistrar 注册进 BeanFactory"></a><em>CustomEditorConfigurer</em> 是怎么将 <em>PropertyEditorRegistrar</em> 注册进 <em>BeanFactory</em></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ublic <span class="class"><span class="keyword">class</span> <span class="title">CustomEditorConfigurer</span> <span class="keyword">implements</span> <span class="title">BeanFactoryPostProcessor</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(getClass());</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> order = Ordered.LOWEST_PRECEDENCE;  <span class="comment">// default: same as non-Ordered</span></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">private</span> PropertyEditorRegistrar[] propertyEditorRegistrars;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">private</span> Map&lt;Class&lt;?&gt;, Class&lt;? extends PropertyEditor&gt;&gt; customEditors;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrder</span><span class="params">(<span class="keyword">int</span> order)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.order = order;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.order;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Specify the &#123;<span class="doctag">@link</span> PropertyEditorRegistrar PropertyEditorRegistrars&#125;</span></span><br><span class="line"><span class="comment">	 * to apply to beans defined within the current application context.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;This allows for sharing &#123;<span class="doctag">@code</span> PropertyEditorRegistrars&#125; with</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> org.springframework.validation.DataBinder DataBinders&#125;, etc.</span></span><br><span class="line"><span class="comment">	 * Furthermore, it avoids the need for synchronization on custom editors:</span></span><br><span class="line"><span class="comment">	 * A &#123;<span class="doctag">@code</span> PropertyEditorRegistrar&#125; will always create fresh editor</span></span><br><span class="line"><span class="comment">	 * instances for each bean creation attempt.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> ConfigurableListableBeanFactory#addPropertyEditorRegistrar</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPropertyEditorRegistrars</span><span class="params">(PropertyEditorRegistrar[] propertyEditorRegistrars)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.propertyEditorRegistrars = propertyEditorRegistrars;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Specify the custom editors to register via a &#123;<span class="doctag">@link</span> Map&#125;, using the</span></span><br><span class="line"><span class="comment">	 * class name of the required type as the key and the class name of the</span></span><br><span class="line"><span class="comment">	 * associated &#123;<span class="doctag">@link</span> PropertyEditor&#125; as value.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> ConfigurableListableBeanFactory#registerCustomEditor</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomEditors</span><span class="params">(Map&lt;Class&lt;?&gt;, Class&lt;? extends PropertyEditor&gt;&gt; customEditors)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.customEditors = customEditors;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.propertyEditorRegistrars != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (PropertyEditorRegistrar propertyEditorRegistrar : <span class="keyword">this</span>.propertyEditorRegistrars) &#123;</span><br><span class="line">				beanFactory.addPropertyEditorRegistrar(propertyEditorRegistrar);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.customEditors != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>.customEditors.forEach(beanFactory::registerCustomEditor);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>从源码可知：<em>CustomEditorConfigurer</em> 实现了 <em>BeanFactoryPostProcessor</em>，因此在 <em>BeanFactory</em> 加载完 <em>BeanDefinition</em> 后会调用 <em>postProcessBeanFactory</em> 方法</li>
<li>在 <em>postProcessBeanFactory</em> 中会将 <em>propertyEditorRegistrar</em> 放入 <em>BeanFactory</em> 的 <em>propertyEditorRegistrars</em> 集合(Set)中，将 customEditors 放入 <em>BeanFactory</em> 的 <em>customEditors</em> 集合(Map)中</li>
<li><em>customEditors</em> 的数据类型为： Map&lt;Class&lt;?&gt;, Class&lt;? extends PropertyEditor&gt;&gt;，其中 <em>key</em> 为要处理的类，而 <em>value</em> 的是对应的处理逻辑类</li>
</ol>
</blockquote>
<h3 id="BeanFactory-是怎么讲-PropertyEditor-放入-BeanWrapper-中"><a href="#BeanFactory-是怎么讲-PropertyEditor-放入-BeanWrapper-中" class="headerlink" title="BeanFactory 是怎么讲 PropertyEditor 放入 BeanWrapper 中"></a>BeanFactory 是怎么讲 <em>PropertyEditor</em> 放入 <em>BeanWrapper</em> 中</h3><p>代码在 <em>doCreateBean</em> 中的 <em>createBeanInstance(beanName, mbd, args)</em> 里，该方法最终掉了一个 <em>instantiateBean(beanName, mbd)</em> 返回一个 <em>BeanWrapper</em>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> BeanWrapper <span class="title">instantiateBean</span><span class="params">(String beanName, RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		Object beanInstance;</span><br><span class="line">		<span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">			beanInstance = AccessController.doPrivileged(</span><br><span class="line">					(PrivilegedAction&lt;Object&gt;) () -&gt; getInstantiationStrategy().instantiate(mbd, beanName, <span class="keyword">this</span>),</span><br><span class="line">					getAccessControlContext());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			beanInstance = getInstantiationStrategy().instantiate(mbd, beanName, <span class="keyword">this</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		BeanWrapper bw = <span class="keyword">new</span> BeanWrapperImpl(beanInstance);</span><br><span class="line">		initBeanWrapper(bw);</span><br><span class="line">		<span class="keyword">return</span> bw;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">				mbd.getResourceDescription(), beanName, <span class="string">&quot;Instantiation of bean failed&quot;</span>, ex);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <em>initBeanWrapper(bw)</em> 中，会将 <em>BeanFactory</em> 的 <em>propertyEditorRegistrars</em> 调用 <em>registerCustomEditors</em>，并把 <em>BeanFactory</em> 的 customEditors 放入 <em>BeanWrapper</em> 中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initBeanWrapper</span><span class="params">(BeanWrapper bw)</span> </span>&#123;</span><br><span class="line">	bw.setConversionService(getConversionService());</span><br><span class="line">	registerCustomEditors(bw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerCustomEditors</span><span class="params">(PropertyEditorRegistry registry)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (registry <span class="keyword">instanceof</span> PropertyEditorRegistrySupport) &#123;</span><br><span class="line">		((PropertyEditorRegistrySupport) registry).useConfigValueEditors();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">this</span>.propertyEditorRegistrars.isEmpty()) &#123;</span><br><span class="line">		<span class="keyword">for</span> (PropertyEditorRegistrar registrar : <span class="keyword">this</span>.propertyEditorRegistrars) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="comment">// 调用 PropertyEditorRegistrar 的 registerCustomEditors 方法</span></span><br><span class="line">				registrar.registerCustomEditors(registry);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (BeanCreationException ex) &#123;</span><br><span class="line">				Throwable rootCause = ex.getMostSpecificCause();</span><br><span class="line">				<span class="keyword">if</span> (rootCause <span class="keyword">instanceof</span> BeanCurrentlyInCreationException) &#123;</span><br><span class="line">					BeanCreationException bce = (BeanCreationException) rootCause;</span><br><span class="line">					String bceBeanName = bce.getBeanName();</span><br><span class="line">					<span class="keyword">if</span> (bceBeanName != <span class="keyword">null</span> &amp;&amp; isCurrentlyInCreation(bceBeanName)) &#123;</span><br><span class="line">						<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">							logger.debug(<span class="string">&quot;PropertyEditorRegistrar [&quot;</span> + registrar.getClass().getName() +</span><br><span class="line">									<span class="string">&quot;] failed because it tried to obtain currently created bean &#x27;&quot;</span> +</span><br><span class="line">									ex.getBeanName() + <span class="string">&quot;&#x27;: &quot;</span> + ex.getMessage());</span><br><span class="line">						&#125;</span><br><span class="line">						onSuppressedException(ex);</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">throw</span> ex;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">this</span>.customEditors.isEmpty()) &#123;</span><br><span class="line">           <span class="comment">// 直接将 customEditors 注册到 BeanWrapper 中</span></span><br><span class="line">		<span class="keyword">this</span>.customEditors.forEach((requiredType, editorClass) -&gt;</span><br><span class="line">				registry.registerCustomEditor(requiredType, BeanUtils.instantiateClass(editorClass)));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="BeanWrapper-是怎么编辑属性的"><a href="#BeanWrapper-是怎么编辑属性的" class="headerlink" title="BeanWrapper 是怎么编辑属性的"></a>BeanWrapper 是怎么编辑属性的</h3><p>即如何把 <em>福建省_福州市_闽侯县</em> 转化为对象 <em>Address</em></p>
<p>该过程发生在 <em>doCreateBean</em> 的 <em>populateBean(beanName, mbd, instanceWrapper)</em> 方法中，该方法是对对bean的属性进行填充，将各个属性值注入</p>
<p>继续 <em>DeBug</em> 源码，找到 <em>applyPropertyValues</em> 方法里的 *valueResolver.resolveValueIfNecessary(pv, originalValue)*，最终找到 <em>typeConverter.convertIfNecessary(valueObject, resolvedTargetType)</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">convertIfNecessary</span><span class="params">(<span class="meta">@Nullable</span> String propertyName, <span class="meta">@Nullable</span> Object oldValue, <span class="meta">@Nullable</span> Object newValue,</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="meta">@Nullable</span> Class&lt;T&gt; requiredType, <span class="meta">@Nullable</span> TypeDescriptor typeDescriptor)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Custom editor for this type?</span></span><br><span class="line">       <span class="comment">// 找到对应的 PropertyEditor</span></span><br><span class="line">	PropertyEditor editor = <span class="keyword">this</span>.propertyEditorRegistry.findCustomEditor(requiredType, propertyName);</span><br><span class="line"></span><br><span class="line">	ConversionFailedException conversionAttemptEx = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// No custom editor but custom ConversionService specified?</span></span><br><span class="line">	ConversionService conversionService = <span class="keyword">this</span>.propertyEditorRegistry.getConversionService();</span><br><span class="line">	<span class="keyword">if</span> (editor == <span class="keyword">null</span> &amp;&amp; conversionService != <span class="keyword">null</span> &amp;&amp; newValue != <span class="keyword">null</span> &amp;&amp; typeDescriptor != <span class="keyword">null</span>) &#123;</span><br><span class="line">		TypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(newValue);</span><br><span class="line">		<span class="keyword">if</span> (conversionService.canConvert(sourceTypeDesc, typeDescriptor)) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> (T) conversionService.convert(newValue, sourceTypeDesc, typeDescriptor);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (ConversionFailedException ex) &#123;</span><br><span class="line">				<span class="comment">// fallback to default conversion logic below</span></span><br><span class="line">				conversionAttemptEx = ex;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Object convertedValue = newValue;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Value not of required type?</span></span><br><span class="line">	<span class="keyword">if</span> (editor != <span class="keyword">null</span> || (requiredType != <span class="keyword">null</span> &amp;&amp; !ClassUtils.isAssignableValue(requiredType, convertedValue))) &#123;</span><br><span class="line">		<span class="keyword">if</span> (typeDescriptor != <span class="keyword">null</span> &amp;&amp; requiredType != <span class="keyword">null</span> &amp;&amp; Collection.class.isAssignableFrom(requiredType) &amp;&amp;</span><br><span class="line">				convertedValue <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">			TypeDescriptor elementTypeDesc = typeDescriptor.getElementTypeDescriptor();</span><br><span class="line">			<span class="keyword">if</span> (elementTypeDesc != <span class="keyword">null</span>) &#123;</span><br><span class="line">				Class&lt;?&gt; elementType = elementTypeDesc.getType();</span><br><span class="line">				<span class="keyword">if</span> (Class.class == elementType || Enum.class.isAssignableFrom(elementType)) &#123;</span><br><span class="line">					convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (editor == <span class="keyword">null</span>) &#123;</span><br><span class="line">			editor = findDefaultEditor(requiredType);</span><br><span class="line">		&#125;</span><br><span class="line">           <span class="comment">// 在此进行转化</span></span><br><span class="line">		convertedValue = doConvertValue(oldValue, convertedValue, requiredType, editor);</span><br><span class="line">	&#125;</span><br><span class="line">       </span><br><span class="line">	......</span><br><span class="line">           </span><br><span class="line">	<span class="keyword">return</span> (T) convertedValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入 <em>doConvertValue</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">doConvertValue</span><span class="params">(<span class="meta">@Nullable</span> Object oldValue, <span class="meta">@Nullable</span> Object newValue,</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="meta">@Nullable</span> Class&lt;?&gt; requiredType, <span class="meta">@Nullable</span> PropertyEditor editor)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Object convertedValue = newValue;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (editor != <span class="keyword">null</span> &amp;&amp; !(convertedValue <span class="keyword">instanceof</span> String)) &#123;</span><br><span class="line">		<span class="comment">// Not a String -&gt; use PropertyEditor&#x27;s setValue.</span></span><br><span class="line">		<span class="comment">// With standard PropertyEditors, this will return the very same object;</span></span><br><span class="line">		<span class="comment">// we just want to allow special PropertyEditors to override setValue</span></span><br><span class="line">		<span class="comment">// for type conversion from non-String values to the required type.</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			editor.setValue(convertedValue);</span><br><span class="line">			Object newConvertedValue = editor.getValue();</span><br><span class="line">			<span class="keyword">if</span> (newConvertedValue != convertedValue) &#123;</span><br><span class="line">				convertedValue = newConvertedValue;</span><br><span class="line">				<span class="comment">// Reset PropertyEditor: It already did a proper conversion.</span></span><br><span class="line">				<span class="comment">// Don&#x27;t use it again for a setAsText call.</span></span><br><span class="line">				editor = <span class="keyword">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">				logger.debug(<span class="string">&quot;PropertyEditor [&quot;</span> + editor.getClass().getName() + <span class="string">&quot;] does not support setValue call&quot;</span>, ex);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// Swallow and proceed.</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Object returnValue = convertedValue;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (requiredType != <span class="keyword">null</span> &amp;&amp; !requiredType.isArray() &amp;&amp; convertedValue <span class="keyword">instanceof</span> String[]) &#123;</span><br><span class="line">		<span class="comment">// Convert String array to a comma-separated String.</span></span><br><span class="line">		<span class="comment">// Only applies if no PropertyEditor converted the String array before.</span></span><br><span class="line">		<span class="comment">// The CSV String will be passed into a PropertyEditor&#x27;s setAsText method, if any.</span></span><br><span class="line">		<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">			logger.trace(<span class="string">&quot;Converting String array to comma-delimited String [&quot;</span> + convertedValue + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		convertedValue = StringUtils.arrayToCommaDelimitedString((String[]) convertedValue);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (convertedValue <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">		<span class="keyword">if</span> (editor != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">// Use PropertyEditor&#x27;s setAsText in case of a String value.</span></span><br><span class="line">			<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">				logger.trace(<span class="string">&quot;Converting String to [&quot;</span> + requiredType + <span class="string">&quot;] using property editor [&quot;</span> + editor + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			String newTextValue = (String) convertedValue;</span><br><span class="line">               <span class="comment">// 最终做事的方法</span></span><br><span class="line">			<span class="keyword">return</span> doConvertTextValue(oldValue, newTextValue, editor);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (String.class == requiredType) &#123;</span><br><span class="line">			returnValue = convertedValue;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> returnValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>追踪 <em>doConvertTextValue</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">doConvertTextValue</span><span class="params">(<span class="meta">@Nullable</span> Object oldValue, String newTextValue, PropertyEditor editor)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		editor.setValue(oldValue);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">		<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">			logger.debug(<span class="string">&quot;PropertyEditor [&quot;</span> + editor.getClass().getName() + <span class="string">&quot;] does not support setValue call&quot;</span>, ex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// Swallow and proceed.</span></span><br><span class="line">	&#125;</span><br><span class="line">	editor.setAsText(newTextValue);</span><br><span class="line">	<span class="keyword">return</span> editor.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，最终将调用我们自定义继承 <em>PropertyEditorSupport</em> 的子类的 <em>setAstext()</em> 方法，并且通过 <em>editor.getValue()</em> 获取处理后的值</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><em>CustomEditorConfigurer</em> 会在 <em>BeanFactoryPostProcessor</em> 调用 <em>postProcessBeanFactory</em> 时将 <em>PropertyEditor</em> 和 <em>PropertyEditorRegistrar</em> 注册进 <em>BeanFactory</em></li>
<li>在 <em>doCreateBean</em> 时，BeanFactory 会在初始化 <em>BeanWrapper</em> 时将 <em>PropertyEditor</em> 和 <em>PropertyEditorRegistrar</em> 放入 <em>BeanWrapper</em></li>
<li>最终在调用 <em>populateBean</em> 是会遍历各个属性，找到其类对应的 <em>PropertyEditor</em></li>
<li>再通过调用 <em>PropertyEditor</em> 的 setAsText(newTextValue) 方法实现自定义处理属性，通过 <em>editor.getValue()</em> 获取处理后的值</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring是怎么实现@Bean注解的</title>
    <url>/2022/03/30/Spring%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0@Bean%E6%B3%A8%E8%A7%A3%E7%9A%84/</url>
    <content><![CDATA[<h2 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h2><p>在 Spring 中，我们通过在配置类中使用 @Bean 注解是能成功将其标注的方法返回的 Bean 对象注入到 Spring 容器中。但是如果我们通过容器获取到配置类的对象，在调用配置类对象被 @Bean 修饰的方法是否会重新生成对象呢?代码如下：</p>
<h3 id="MyApplicationContext"><a href="#MyApplicationContext" class="headerlink" title="MyApplicationContext"></a>MyApplicationContext</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationContext</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MyConfiguration.class);</span><br><span class="line">        MyConfiguration myConfiguration = context.getBean(MyConfiguration.class);</span><br><span class="line">        Cat cat1 = myConfiguration.getCat();</span><br><span class="line">        Cat cat2 = myConfiguration.getCat();</span><br><span class="line">        System.out.println(cat1 == cat2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="MyConfiguration"><a href="#MyConfiguration" class="headerlink" title="MyConfiguration"></a>MyConfiguration</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">		cat.setName(<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> cat;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Cat"><a href="#Cat" class="headerlink" title="Cat"></a>Cat</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实验结果为 true，表明调用代理对象 <em><strong>myConfiguration.getCat()</strong></em> 并不会重新生成新的对象，这显然与我们的认知截然不同。而这一次我们将探究 Spring 是如何实现这一功能的。</p>
<span id="more"></span>

<h2 id="Cat-的-BeanDefinition-进入-BeanFactory-的时机"><a href="#Cat-的-BeanDefinition-进入-BeanFactory-的时机" class="headerlink" title="Cat 的 BeanDefinition 进入 BeanFactory 的时机"></a>Cat 的 BeanDefinition 进入 BeanFactory 的时机</h2><p>这个过程发生在类名为 <em><strong>AbstractApplicationContext</strong></em> 的核心代码 <em><strong>refresh()</strong></em> 的 <em><strong>invokeBeanFactoryPostProcessors(beanFactory)</strong></em> 方法中。该方法会遍历 <em><strong>BeanFactory</strong></em> 中所有实现了 <em><strong>BeanDefinitionRegistryPostProcessor</strong></em> 接口的对象，调用该对象实现了接口的方法 ***postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry)***，而 <em><strong>ConfigurationClassPostProcessor</strong></em> 便实现了这个接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigurationClassPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanDefinitionRegistryPostProcessor</span>,</span></span><br><span class="line"><span class="class">		<span class="title">PriorityOrdered</span>, <span class="title">ResourceLoaderAware</span>, <span class="title">ApplicationStartupAware</span>, <span class="title">BeanClassLoaderAware</span>, <span class="title">EnvironmentAware</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> registryId = System.identityHashCode(registry);</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.registriesPostProcessed.contains(registryId)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">					<span class="string">&quot;postProcessBeanDefinitionRegistry already called on this post-processor against &quot;</span> + registry);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.factoriesPostProcessed.contains(registryId)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">					<span class="string">&quot;postProcessBeanFactory already called on this post-processor against &quot;</span> + registry);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>.registriesPostProcessed.add(registryId);</span><br><span class="line"></span><br><span class="line">		processConfigBeanDefinitions(registry);</span><br><span class="line">	&#125;</span><br><span class="line">      </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processConfigBeanDefinitions</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">		List&lt;BeanDefinitionHolder&gt; configCandidates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		String[] candidateNames = registry.getBeanDefinitionNames();</span><br><span class="line">		<span class="comment">// 获取配置类</span></span><br><span class="line">		<span class="keyword">for</span> (String beanName : candidateNames) &#123;</span><br><span class="line">			BeanDefinition beanDef = registry.getBeanDefinition(beanName);</span><br><span class="line">			<span class="keyword">if</span> (beanDef.getAttribute(ConfigurationClassUtils.CONFIGURATION_CLASS_ATTRIBUTE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">					logger.debug(<span class="string">&quot;Bean definition has already been processed as a configuration class: &quot;</span> + beanDef);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, <span class="keyword">this</span>.metadataReaderFactory)) &#123;</span><br><span class="line">				configCandidates.add(<span class="keyword">new</span> BeanDefinitionHolder(beanDef, beanName));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Parse each @Configuration class</span></span><br><span class="line">		ConfigurationClassParser parser = <span class="keyword">new</span> ConfigurationClassParser(</span><br><span class="line">				<span class="keyword">this</span>.metadataReaderFactory, <span class="keyword">this</span>.problemReporter, <span class="keyword">this</span>.environment,</span><br><span class="line">				<span class="keyword">this</span>.resourceLoader, <span class="keyword">this</span>.componentScanBeanNameGenerator, registry);</span><br><span class="line"></span><br><span class="line">		Set&lt;BeanDefinitionHolder&gt; candidates = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(configCandidates);</span><br><span class="line">		Set&lt;ConfigurationClass&gt; alreadyParsed = <span class="keyword">new</span> HashSet&lt;&gt;(configCandidates.size());</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			StartupStep processConfig = <span class="keyword">this</span>.applicationStartup.start(<span class="string">&quot;spring.context.config-classes.parse&quot;</span>);</span><br><span class="line">            <span class="comment">// 解析配置类</span></span><br><span class="line">			parser.parse(candidates);</span><br><span class="line">            parser.validate();</span><br><span class="line">			<span class="comment">// 通过解析器获取以及解析过的配置类的信息 configClasses</span></span><br><span class="line">			Set&lt;ConfigurationClass&gt; configClasses = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(parser.getConfigurationClasses());</span><br><span class="line">			...</span><br><span class="line">            <span class="comment">// 这一步才是将解析到被@Bean修饰的方法创建成BeanDefinition并添加进BeanFactory</span></span><br><span class="line">            <span class="keyword">this</span>.reader.loadBeanDefinitions(configClasses);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里会创建一个配置文件的解析器 <em><strong>ConfigurationClassParser</strong></em>，通过该解析器的 <em><strong>parser.parse(candidates)</strong></em> 进行解析。该方法经过一系列调用，最终真正干活的是 ***doProcessConfigurationClass(configClass, sourceClass, filter)***，它会解析标注在配置类上 @PropertySource、@ComponentScan、 @Import、@ImportResource 和 @Bean 的标签。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> SourceClass <span class="title">doProcessConfigurationClass</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">		ConfigurationClass configClass, SourceClass sourceClass, Predicate&lt;String&gt; filter)</span></span></span><br><span class="line"><span class="function">		<span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   	...</span><br><span class="line">       <span class="comment">// Process any @PropertySource annotations</span></span><br><span class="line">       ...</span><br><span class="line">       <span class="comment">// Process any @ComponentScan annotations</span></span><br><span class="line">       ...</span><br><span class="line">       <span class="comment">// Process any @Import annotations</span></span><br><span class="line">       ...</span><br><span class="line">       <span class="comment">// Process any @ImportResource annotations</span></span><br><span class="line">       ...</span><br><span class="line">       <span class="comment">// Process individual @Bean methods</span></span><br><span class="line">	Set&lt;MethodMetadata&gt; beanMethods = retrieveBeanMethodMetadata(sourceClass);</span><br><span class="line">	<span class="keyword">for</span> (MethodMetadata methodMetadata : beanMethods) &#123;</span><br><span class="line">		configClass.addBeanMethod(<span class="keyword">new</span> BeanMethod(methodMetadata, configClass));</span><br><span class="line">	&#125;</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>这里做的工作只是将配置类上标注了 @Bean 的方法包装成 MethodMetadata 并添加进配置类的包装对象 configClass 中。当解析器 <em><strong>ConfigurationClassParser</strong></em> 解析完成之后，<em><strong>ConfigurationClassPostProcessor</strong></em> 的 <em><strong>ConfigurationClassPostProcessor(…)</strong></em> 方法会从解析器中拿到解析过的配置文件的包装对象 configClass，将对应的方法分装为 <em><strong>ConfigurationClassBeanDefinition</strong></em> 并注册进 BeanFactory。</p>
<h2 id="Car-对象的生成时机"><a href="#Car-对象的生成时机" class="headerlink" title="Car 对象的生成时机"></a>Car 对象的生成时机</h2><p>同样发送在 <em><strong>refresh()</strong></em> 方法中，在其 <em><strong>finishBeanFactoryInitialization(beanFactory)</strong></em> 方法里会遍历容器中所有的注册了的BeanDefinitionNames，并使用 <em><strong>getBean(beanName)</strong></em> 创建实例。</p>
<p>在经过 <em><strong>getBean</strong></em> -&gt; <em><strong>doGetBean</strong></em> -&gt; <em><strong>createBean</strong></em> -&gt; <em><strong>doCreateBean</strong></em> 的一系列方法调用后，会进入 <em><strong>createBeanInstance</strong></em> 方法，在该方法中，会判断出传入的 BeanDefinition 包含一个工厂方法，则会使用工厂方法的方式创建对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> BeanWrapper <span class="title">createBeanInstance</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// Make sure bean class is actually resolved at this point.</span></span><br><span class="line">	Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (beanClass != <span class="keyword">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">				<span class="string">&quot;Bean class isn&#x27;t public, and non-public access not allowed: &quot;</span> + beanClass.getName());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 使用Supplier的方式创建对象</span></span><br><span class="line">	Supplier&lt;?&gt; instanceSupplier = mbd.getInstanceSupplier();</span><br><span class="line">	<span class="keyword">if</span> (instanceSupplier != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> obtainFromSupplier(instanceSupplier, beanName);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 使用工厂方法FactoryMethod的方式创建对象</span></span><br><span class="line">	<span class="keyword">if</span> (mbd.getFactoryMethodName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class="line">	&#125;</span><br><span class="line">       <span class="comment">// 使用构成方法创建对象</span></span><br><span class="line">       ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后在经过一系列的方法调用，最终会获取到 <em><strong>getCar()</strong></em> 的 Method 对象和 <em><strong>MyConfiguration</strong></em> 类的实例，通过反射的方式创建 <em><strong>Object result = factoryMethod.invoke(factoryBean, args)</strong></em> 。</p>
<h2 id="为何多次调用-myConfiguration-getCat-方法会返回同一对象"><a href="#为何多次调用-myConfiguration-getCat-方法会返回同一对象" class="headerlink" title="为何多次调用 myConfiguration.getCat() 方法会返回同一对象"></a>为何多次调用 myConfiguration.getCat() 方法会返回同一对象</h2><p>Spring 通过动态代理的方式对配置类 <em><strong>MyConfiguration</strong></em> 进行了增强。当调用 <em><strong>getCar()</strong></em> 方法后会进入 <em><strong>ConfigurationClassEnhancer</strong></em> 的内部子类 <em><strong>BeanMethodInterceptor</strong></em> 的 <em><strong>intercept</strong></em> 方法中，该方法最终通过获取到 BeanFactory 并调用 <em><strong>getBean(beanName)</strong></em> 的方法获取对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object enhancedConfigInstance, Method beanMethod, Object[] beanMethodArgs,</span></span></span><br><span class="line"><span class="params"><span class="function">			MethodProxy cglibMethodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">	ConfigurableBeanFactory beanFactory = getBeanFactory(enhancedConfigInstance);</span><br><span class="line">	String beanName = BeanAnnotationHelper.determineBeanNameFor(beanMethod);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Determine whether this bean is a scoped-proxy</span></span><br><span class="line">	<span class="keyword">if</span> (BeanAnnotationHelper.isScopedProxy(beanMethod)) &#123;</span><br><span class="line">		String scopedBeanName = ScopedProxyCreator.getTargetBeanName(beanName);</span><br><span class="line">		<span class="keyword">if</span> (beanFactory.isCurrentlyInCreation(scopedBeanName)) &#123;</span><br><span class="line">			beanName = scopedBeanName;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// To handle the case of an inter-bean method reference, we must explicitly check the</span></span><br><span class="line">	<span class="comment">// container for already cached instances.</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// First, check to see if the requested bean is a FactoryBean. If so, create a subclass</span></span><br><span class="line">	<span class="comment">// proxy that intercepts calls to getObject() and returns any cached bean instance.</span></span><br><span class="line">	<span class="comment">// This ensures that the semantics of calling a FactoryBean from within @Bean methods</span></span><br><span class="line">	<span class="comment">// is the same as that of referring to a FactoryBean within XML. See SPR-6602.</span></span><br><span class="line">          <span class="comment">// 如果要生成对象的类是 FactoryBean时，走以下逻辑</span></span><br><span class="line">	<span class="keyword">if</span> (factoryContainsBean(beanFactory, BeanFactory.FACTORY_BEAN_PREFIX + beanName) &amp;&amp;</span><br><span class="line">			factoryContainsBean(beanFactory, beanName)) &#123;</span><br><span class="line">		Object factoryBean = beanFactory.getBean(BeanFactory.FACTORY_BEAN_PREFIX + beanName);</span><br><span class="line">		<span class="keyword">if</span> (factoryBean <span class="keyword">instanceof</span> ScopedProxyFactoryBean) &#123;</span><br><span class="line">			<span class="comment">// Scoped proxy factory beans are a special case and should not be further proxied</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// It is a candidate FactoryBean - go ahead with enhancement</span></span><br><span class="line">			<span class="keyword">return</span> enhanceFactoryBean(factoryBean, beanMethod.getReturnType(), beanFactory, beanName);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 如果该对象正在创建，则调用被代理对象的方法创建实例</span></span><br><span class="line">	<span class="keyword">if</span> (isCurrentlyInvokedFactoryMethod(beanMethod)) &#123;</span><br><span class="line">		<span class="comment">// The factory is calling the bean method in order to instantiate and register the bean</span></span><br><span class="line">		<span class="comment">// (i.e. via a getBean() call) -&gt; invoke the super implementation of the method to actually</span></span><br><span class="line">		<span class="comment">// create the bean instance.</span></span><br><span class="line">		<span class="keyword">if</span> (logger.isInfoEnabled() &amp;&amp;</span><br><span class="line">				BeanFactoryPostProcessor.class.isAssignableFrom(beanMethod.getReturnType())) &#123;</span><br><span class="line">			logger.info(String.format(<span class="string">&quot;@Bean method %s.%s is non-static and returns an object &quot;</span> +</span><br><span class="line">							<span class="string">&quot;assignable to Spring&#x27;s BeanFactoryPostProcessor interface. This will &quot;</span> +</span><br><span class="line">							<span class="string">&quot;result in a failure to process annotations such as @Autowired, &quot;</span> +</span><br><span class="line">							<span class="string">&quot;@Resource and @PostConstruct within the method&#x27;s declaring &quot;</span> +</span><br><span class="line">							<span class="string">&quot;@Configuration class. Add the &#x27;static&#x27; modifier to this method to avoid &quot;</span> +</span><br><span class="line">							<span class="string">&quot;these container lifecycle issues; see @Bean javadoc for complete details.&quot;</span>,</span><br><span class="line">					beanMethod.getDeclaringClass().getSimpleName(), beanMethod.getName()));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cglibMethodProxy.invokeSuper(enhancedConfigInstance, beanMethodArgs);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 这方法最终还是调用 beanFactory.getBean(beanName)</span></span><br><span class="line">	<span class="keyword">return</span> resolveBeanReference(beanMethod, beanMethodArgs, beanFactory, beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MyConfiguration类增强的时机"><a href="#MyConfiguration类增强的时机" class="headerlink" title="MyConfiguration类增强的时机"></a>MyConfiguration类增强的时机</h2><p>发送在 <em><strong>refresh()</strong></em> 的 <em><strong>invokeBeanFactoryPostProcessors(beanFactory)</strong></em> 方法中，该方法会遍历实现了 <em><strong>BeanFactoryPostProcessor</strong></em> 的子类并调用其 <em><strong>postProcessBeanFactory</strong></em> 方法。而 <em><strong>ConfigurationClassPostProcessor</strong></em> 便实现了这个方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> factoryId = System.identityHashCode(beanFactory);</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.factoriesPostProcessed.contains(factoryId)) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">				<span class="string">&quot;postProcessBeanFactory already called on this post-processor against &quot;</span> + beanFactory);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">this</span>.factoriesPostProcessed.add(factoryId);</span><br><span class="line">       <span class="comment">// 如果进入该判断，表明 BDRPP 的回调方法没用被调用，则先调用该方法解析配置类，也就是解析 @Bean、@ComponentScan、@Import等注解</span></span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">this</span>.registriesPostProcessed.contains(factoryId)) &#123;</span><br><span class="line">		<span class="comment">// BeanDefinitionRegistryPostProcessor hook apparently not supported...</span></span><br><span class="line">		<span class="comment">// Simply call processConfigurationClasses lazily at this point then.</span></span><br><span class="line">		processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 这一步便是增强配置类的方法</span></span><br><span class="line">	enhanceConfigurationClasses(beanFactory);</span><br><span class="line">	beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ImportAwareBeanPostProcessor(beanFactory));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续 Debug 代码，最终发现他会调用 <em><strong>ConfigurationClassEnhancer</strong></em> 类中的 <em><strong>newEnhancer</strong></em> 方法完成代理类的增强。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Enhancer <span class="title">newEnhancer</span><span class="params">(Class&lt;?&gt; configSuperClass, <span class="meta">@Nullable</span> ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">	Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">	enhancer.setSuperclass(configSuperClass);</span><br><span class="line">	enhancer.setInterfaces(<span class="keyword">new</span> Class&lt;?&gt;[] &#123;EnhancedConfiguration.class&#125;);</span><br><span class="line">	enhancer.setUseFactory(<span class="keyword">false</span>);</span><br><span class="line">	enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);</span><br><span class="line">	enhancer.setStrategy(<span class="keyword">new</span> BeanFactoryAwareGeneratorStrategy(classLoader));</span><br><span class="line">	enhancer.setCallbackFilter(CALLBACK_FILTER);</span><br><span class="line">	enhancer.setCallbackTypes(CALLBACK_FILTER.getCallbackTypes());</span><br><span class="line">	<span class="keyword">return</span> enhancer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring源码阅读环境下使用AOP导致代码启动失败问题解决办法</title>
    <url>/2021/08/26/Spring%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8AOP%E5%AF%BC%E8%87%B4%E4%BB%A3%E7%A0%81%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li>在下载Spring源码并正常编译之后，编写与IOC相关代码能够正常运行</li>
<li>但是在进行AOP代理后，程序不能正常启动 <em>java.lang.NoClassDefFoundError: org/aspectj/lang/JoinPoint</em></li>
</ol>
<span id="more"></span>

<h2 id="解决措施"><a href="#解决措施" class="headerlink" title="解决措施"></a>解决措施</h2><ol>
<li><p>百度输入报错信息，发现缺少jar包 <em>aspectjweaver</em></p>
</li>
<li><p>打开 <a href="https://mvnrepository.com/">mvnrepository</a>，搜索找到相应jar包的依赖</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210826103243.png" alt="image-20210826103238882"></p>
</li>
<li><p>复杂后添加到 <em>build.gradle</em> 中，并刷新</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210826103601.png" alt="image-20210826103559148"></p>
</li>
<li><p>重新运行成功</p>
</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring源码阅读环境搭建</title>
    <url>/2021/07/06/Spring%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="安装-Gradle"><a href="#安装-Gradle" class="headerlink" title="安装 Gradle"></a>安装 Gradle</h2><h3 id="下载压缩包"><a href="#下载压缩包" class="headerlink" title="下载压缩包"></a>下载压缩包</h3><p><a href="https://services.gradle.org/distributions/">下载链接</a>，选择 <em>gradle-6.5.1-all .zip</em></p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210706125653.png" alt="image-20210706125648901"></p>
<p>并在 <strong>Path</strong> 中添加 <em>%GRADLE_HOME%\bin</em></p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210706125852.png" alt="image-20210706125850699"></p>
<span id="more"></span>

<h3 id="验证是否生效"><a href="#验证是否生效" class="headerlink" title="验证是否生效"></a>验证是否生效</h3><p><em>Win</em> + <em>R</em> 打开 <em>cmd</em>，输入 <em>gradle -v</em> 验证是否安装成功</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210706130129.png" alt="image-20210706130127447"></p>
<h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><p>将<a href="https://github.com/eitan-blog/spring-framework">官方仓库</a>的代码<strong>fork</strong>到自己的仓库</p>
<h3 id="拉取代码到本地"><a href="#拉取代码到本地" class="headerlink" title="拉取代码到本地"></a>拉取代码到本地</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/eitan-blog/spring-framework.git</span><br></pre></td></tr></table></figure>



<h2 id="开始构建"><a href="#开始构建" class="headerlink" title="开始构建"></a>开始构建</h2><h3 id="为源码安装对应版本的-Gradle"><a href="#为源码安装对应版本的-Gradle" class="headerlink" title="为源码安装对应版本的 Gradle"></a>为源码安装对应版本的 Gradle</h3><p>运行源码根目录下的 <em>gradlew.bat</em> 文件</p>
<h3 id="使用-IDEA-打开源码，设置-Gradle-本地仓库"><a href="#使用-IDEA-打开源码，设置-Gradle-本地仓库" class="headerlink" title="使用 IDEA 打开源码，设置 Gradle 本地仓库"></a>使用 IDEA 打开源码，设置 Gradle 本地仓库</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210706141630.png" alt="image-20210706141627600"></p>
<h3 id="修改-build-gradle-文件"><a href="#修改-build-gradle-文件" class="headerlink" title="修改 build.gradle 文件"></a>修改 build.gradle 文件</h3><ol>
<li><p>在头部添加</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">buildscript</span> &#123;</span><br><span class="line">    <span class="section">repositories</span> &#123;</span><br><span class="line">		<span class="section">maven</span> &#123; <span class="attribute">url</span> <span class="string">&quot;https://repo.spring.io/plugins-release&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>添加镜像</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210706142921.png" alt="image-20210706142917838"></p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="class">repositories </span>&#123;</span><br><span class="line">    <span class="comment">// 新增两个阿里云镜像</span></span><br><span class="line">    <span class="class">maven </span>&#123; url <span class="string">&quot;https://maven.aliyun.com/nexus/content/groups/public&quot;</span> &#125;</span><br><span class="line">    <span class="class">maven </span>&#123; url <span class="string">&quot;https://maven.aliyun.com/nexus/content/repositories/jcenter&quot;</span> &#125;</span><br><span class="line">    <span class="comment">// 新增spring插件库</span></span><br><span class="line">    <span class="class">maven </span>&#123; url <span class="string">&quot;https://repo.spring.io/plugins-release&quot;</span> &#125;</span><br><span class="line">    mavenCentral()</span><br><span class="line">    <span class="class">maven </span>&#123; url <span class="string">&quot;https://repo.spring.io/libs-spring-framework-build&quot;</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>点击 <em>Reload Gradle Project</em> 按钮，将自动下载相关依赖进行项目构建。若是出现失败，有可能是网络不好，多尝试几次或者翻墙后再次尝试</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210706154348.png" alt="image-20210706154344453"></p>
<h3 id="验证是否构建成功"><a href="#验证是否构建成功" class="headerlink" title="验证是否构建成功"></a>验证是否构建成功</h3><ol>
<li>打开 <em>ApplicationContext</em></li>
<li>按住 <em>Ctrl + Alt + u</em>，若能显示相关依赖说明构建成功</li>
</ol>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h3 id="首先编译-spring-oxm"><a href="#首先编译-spring-oxm" class="headerlink" title="首先编译 spring-oxm"></a>首先编译 spring-oxm</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210706160227.png" alt="image-20210706160216070"></p>
<h3 id="其次编译-spring-core"><a href="#其次编译-spring-core" class="headerlink" title="其次编译 spring-core"></a>其次编译 spring-core</h3><p>同样是点击 <em>compileTestJava</em></p>
<h3 id="编译整个项目"><a href="#编译整个项目" class="headerlink" title="编译整个项目"></a>编译整个项目</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210706161013.png" alt="image-20210706161001977"></p>
<p>自此，spring 源码阅读环境搭建完成。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring自定义标签</title>
    <url>/2021/07/08/Spring%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210708133248.png" alt="image-20210708133243955"></p>
<p>本文学习自<a href="https://ke.qq.com/course/package/20773">马士兵MAC课程-源码五班</a></p>
<span id="more"></span>

<h2 id="添加自定义标签步骤"><a href="#添加自定义标签步骤" class="headerlink" title="添加自定义标签步骤"></a>添加自定义标签步骤</h2><h3 id="添加-xsd-XML-Schema-Definition-文件"><a href="#添加-xsd-XML-Schema-Definition-文件" class="headerlink" title="添加 xsd(XML Schema Definition) 文件"></a>添加 xsd(XML Schema Definition) 文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:schema</span> <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">targetNamespace</span>=<span class="string">&quot;http://eitan-blog.github.io/schema/eitan&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">elementFormDefault</span>=<span class="string">&quot;qualified&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">attributeFormDefault</span>=<span class="string">&quot;unqualified&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:string&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:string&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:string&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:string&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>xmlns:xsd=”<a href="http://www.w3.org/2001/XMLSchema&quot;%EF%BC%9A%E8%A1%A8%E7%A4%BA%E8%AF%A5%E5%BC%95%E7%94%A8%E8%AF%A5%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%9A%84%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83">http://www.w3.org/2001/XMLSchema&quot;：表示该引用该命名空间的编写规范</a></li>
<li>targetNamespace=”<a href="http://eitan-blog.github.io/schema/eitan&quot;%EF%BC%9A%E8%A1%A8%E7%A4%BA%E5%BD%93%E5%89%8D%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%9A%84%E5%9C%B0%E5%9D%80">http://eitan-blog.github.io/schema/eitan&quot;：表示当前命名空间的地址</a></li>
<li>elementFormDefault=”qualified” attributeFormDefault=”unqualified”：表示使用该命名空间的规范时，元素必须使用前缀短名，而属性可以不用，如 **&lt;eitan:user id=”user1” userName=”eitan” email=”<a href="mailto:&#101;&#x69;&#x74;&#97;&#110;&#x5f;&#98;&#108;&#x6f;&#x67;&#64;&#49;&#54;&#51;&#46;&#99;&#111;&#x6d;">&#101;&#x69;&#x74;&#97;&#110;&#x5f;&#98;&#108;&#x6f;&#x67;&#64;&#49;&#54;&#51;&#46;&#99;&#111;&#x6d;</a>“ password=”123456”&gt;&lt;/eitan:user&gt;<em><em>中 <em>eitan</em> 就是前缀短名，</em>user* 是元素，*userName</em> 是属性</li>
</ol>
</blockquote>
<h3 id="添加-spring-handlers"><a href="#添加-spring-handlers" class="headerlink" title="添加 spring.handlers"></a>添加 spring.handlers</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">http\://eitan-blog.github.io/schema/eitan</span>=<span class="string">com.eitan.tag.handler.UserNamespaceHandler</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>http://eitan-blog.github.io/schema/eitan：表示你的命名空间</li>
<li>com.eitan.tag.handler.UserNamespaceHandler：表示你对该命名空间的处理器的全限定类名</li>
</ol>
</blockquote>
<h3 id="添加-Spring-shemas"><a href="#添加-Spring-shemas" class="headerlink" title="添加 Spring.shemas"></a>添加 Spring.shemas</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">http\://eitan-blog.github.io/schema/eitan/user.xsd</span>=<span class="string">com.eitan.tag/user.xsd</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>编写命名空间映射关系，目的是为了在 xml 中找到映射对于的 xsd 文件</p>
</blockquote>
<h3 id="编写-UserNamespaceHandler"><a href="#编写-UserNamespaceHandler" class="headerlink" title="编写 UserNamespaceHandler"></a>编写 UserNamespaceHandler</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		registerBeanDefinitionParser(<span class="string">&quot;user&quot;</span>, <span class="keyword">new</span> UserBeanDefinitionPaser());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该类主要是用于初始化 <em>xml</em> 每一个元素对应的解析类 </p>
</blockquote>
<h3 id="编写-UserBeanDefinitionPaser"><a href="#编写-UserBeanDefinitionPaser" class="headerlink" title="编写 UserBeanDefinitionPaser"></a>编写 UserBeanDefinitionPaser</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBeanDefinitionPaser</span> <span class="keyword">extends</span> <span class="title">AbstractSingleBeanDefinitionParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回属性值所对应的对象</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> Class&lt;?&gt; getBeanClass(Element element) &#123;</span><br><span class="line">		<span class="keyword">return</span> User.class;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doParse</span><span class="params">(Element element, BeanDefinitionBuilder builder)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 获取标签对应的属性值</span></span><br><span class="line">		String userName = element.getAttribute(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">		String email = element.getAttribute(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">		String password = element.getAttribute(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasText(userName)) &#123;</span><br><span class="line">			builder.addPropertyValue(<span class="string">&quot;userName&quot;</span>, userName);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasText(email)) &#123;</span><br><span class="line">			builder.addPropertyValue(<span class="string">&quot;email&quot;</span>, email);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasText(password)) &#123;</span><br><span class="line">			builder.addPropertyValue(<span class="string">&quot;password&quot;</span>, password);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:eitan</span>=<span class="string">&quot;http://eitan-blog.github.io/schema/eitan&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">							http://eitan-blog.github.io/schema/eitan  http://eitan-blog.github.io/schema/eitan/user.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">							http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">eitan:user</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">userName</span>=<span class="string">&quot;eitan&quot;</span> <span class="attr">email</span>=<span class="string">&quot;eitan_blog@163.com&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">eitan:user</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:db.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.eitan.quickstart.entity.Person&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>在文件中引入自己的 xsd<ol>
<li>xmlns:eitan=”<a href="http://eitan-blog.github.io/schema/eitan&quot;">http://eitan-blog.github.io/schema/eitan&quot;</a></li>
<li> xsi:schemaLocation=<a href="http://eitan-blog.github.io/schema/eitan">http://eitan-blog.github.io/schema/eitan</a>  <a href="http://eitan-blog.github.io/schema/eitan/user.xsd">http://eitan-blog.github.io/schema/eitan/user.xsd</a></li>
</ol>
</li>
<li>在文件中使用自己的标签：*&lt;eitan:user id=”user1” userName=”eitan” email=”<a href="mailto:&#x65;&#105;&#x74;&#97;&#x6e;&#x5f;&#x62;&#x6c;&#x6f;&#103;&#64;&#49;&#x36;&#x33;&#x2e;&#x63;&#111;&#x6d;">&#x65;&#105;&#x74;&#97;&#x6e;&#x5f;&#x62;&#x6c;&#x6f;&#103;&#64;&#49;&#x36;&#x33;&#x2e;&#x63;&#111;&#x6d;</a>“ password=”123456”&gt;&lt;/eitan:user&gt;*</li>
</ol>
</blockquote>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationContext</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring-$&#123;username&#125;.xml&quot;</span>);</span><br><span class="line">		User user = ac.getBean(User.class);</span><br><span class="line">		System.out.println(user);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 <em>MyApplicationContext</em> 中获取并打印 <em>User.class</em>，可以发现写在 <em>xml</em> 中的属性成功注入进 <em>user</em> 中</p>
<p>Connected to the target VM, address: ‘127.0.0.1:12821’, transport: ‘socket’<br>User{userName=’eitan’, email=’eitan<a href="mailto:&#x5f;&#x62;&#x6c;&#x6f;&#x67;&#64;&#x31;&#54;&#51;&#x2e;&#x63;&#111;&#109;">&#x5f;&#x62;&#x6c;&#x6f;&#x67;&#64;&#x31;&#54;&#51;&#x2e;&#x63;&#111;&#109;</a>‘, password=’123456’}</p>
</blockquote>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><ol>
<li>该过程发生在 <em>AbstractApplicationContext</em> 的 <em>refresh()</em> 方法中</li>
<li>在 <em>refresh()</em> 的 <em>obtainFreshBeanFactory()</em> 的 <em>loadBeanDefinitions(beanFactory)</em> 重载方法里</li>
<li>在 <em>doLoadBeanDefinitions(inputSource, encodedResource.getResource())</em> 的 <em>registerBeanDefinitions(doc, resource)</em> 方法中，调用 <em>documentReader.registerBeanDefinitions(doc, createReaderContext(resource))</em> 方法完成对 <em>Document</em> 对象完成具体的解析过程</li>
<li>核心处理代码在 <em>doRegisterBeanDefinitions(doc.getDocumentElement())</em> 的 parseBeanDefinitions(root, this.delegate) 里</li>
</ol>
<h3 id="parseBeanDefinitions"><a href="#parseBeanDefinitions" class="headerlink" title="parseBeanDefinitions"></a>parseBeanDefinitions</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">		NodeList nl = root.getChildNodes();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">			Node node = nl.item(i);</span><br><span class="line">			<span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">				Element ele = (Element) node;</span><br><span class="line">				<span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">					<span class="comment">// 解析 import、alias、bean 标签</span></span><br><span class="line">					parseDefaultElement(ele, delegate);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					delegate.parseCustomElement(ele);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		delegate.parseCustomElement(root);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>这里是判断元素是默认命名空间的元素 <em>delegate.isDefaultNamespace(ele)</em></li>
<li>我们这里现在不是默认的命名空间，所以调用的是解析自定义元素的方法 <em>delegate.parseCustomElement(ele)</em></li>
</ol>
</blockquote>
<h3 id="parseCustomElement"><a href="#parseCustomElement" class="headerlink" title="parseCustomElement"></a>parseCustomElement</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parseCustomElement</span><span class="params">(Element ele, <span class="meta">@Nullable</span> BeanDefinition containingBd)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 获取对应的命名空间</span></span><br><span class="line">	String namespaceUri = getNamespaceURI(ele);</span><br><span class="line">	<span class="keyword">if</span> (namespaceUri == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 根据命名空间找到对应的NamespaceHandler</span></span><br><span class="line">	NamespaceHandler handler = <span class="keyword">this</span>.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);</span><br><span class="line">	<span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">		error(<span class="string">&quot;Unable to locate Spring NamespaceHandler for XML schema namespace [&quot;</span> + namespaceUri + <span class="string">&quot;]&quot;</span>, ele);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 调用自定义的NamespaceHandler进行解析</span></span><br><span class="line">	<span class="keyword">return</span> handler.parse(ele, <span class="keyword">new</span> ParserContext(<span class="keyword">this</span>.readerContext, <span class="keyword">this</span>, containingBd));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>我们先从上下文中获取对应的 <em>handler</em></li>
<li>再调用 <em>handler</em> 的 <em>parse(Element element, ParserContext parserContext)</em> 方法</li>
</ol>
</blockquote>
<h3 id="resolver-方法"><a href="#resolver-方法" class="headerlink" title="resolver 方法"></a>resolver 方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> NamespaceHandler <span class="title">resolve</span><span class="params">(String namespaceUri)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 获取所有已经配置好的handler映射</span></span><br><span class="line">	Map&lt;String, Object&gt; handlerMappings = getHandlerMappings();</span><br><span class="line">	<span class="comment">// 根据命名空间找到对应信息</span></span><br><span class="line">	Object handlerOrClassName = handlerMappings.get(namespaceUri);</span><br><span class="line">	<span class="keyword">if</span> (handlerOrClassName == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (handlerOrClassName <span class="keyword">instanceof</span> NamespaceHandler) &#123;</span><br><span class="line">		<span class="comment">// 如果已经做过解析，handlerMappings中存放的就是对应的处理器对象，直接返回</span></span><br><span class="line">		<span class="keyword">return</span> (NamespaceHandler) handlerOrClassName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// 如果没有做过解析，handlerMappings.get(namespaceUri)则返回的是类路径</span></span><br><span class="line">		String className = (String) handlerOrClassName;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 通过反射将类路径转化为类</span></span><br><span class="line">			Class&lt;?&gt; handlerClass = ClassUtils.forName(className, <span class="keyword">this</span>.classLoader);</span><br><span class="line">			<span class="keyword">if</span> (!NamespaceHandler.class.isAssignableFrom(handlerClass)) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> FatalBeanException(<span class="string">&quot;Class [&quot;</span> + className + <span class="string">&quot;] for namespace [&quot;</span> + namespaceUri +</span><br><span class="line">						<span class="string">&quot;] does not implement the [&quot;</span> + NamespaceHandler.class.getName() + <span class="string">&quot;] interface&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 实例化类</span></span><br><span class="line">			NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass);</span><br><span class="line">			<span class="comment">// 调用自定义namespaceHandler的初始化init()方法</span></span><br><span class="line">			namespaceHandler.init();</span><br><span class="line">			<span class="comment">// 将结果记录到缓存中</span></span><br><span class="line">			handlerMappings.put(namespaceUri, namespaceHandler);</span><br><span class="line">			<span class="keyword">return</span> namespaceHandler;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> FatalBeanException(<span class="string">&quot;Could not find NamespaceHandler class [&quot;</span> + className +</span><br><span class="line">					<span class="string">&quot;] for namespace [&quot;</span> + namespaceUri + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (LinkageError err) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> FatalBeanException(<span class="string">&quot;Unresolvable class definition for NamespaceHandler class [&quot;</span> +</span><br><span class="line">					className + <span class="string">&quot;] for namespace [&quot;</span> + namespaceUri + <span class="string">&quot;]&quot;</span>, err);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="映射关系是什么时候加载到程序中的"><a href="#映射关系是什么时候加载到程序中的" class="headerlink" title="映射关系是什么时候加载到程序中的"></a>映射关系是什么时候加载到程序中的</h3><h4 id="首先再创造上下文对象的时候会对路径赋值"><a href="#首先再创造上下文对象的时候会对路径赋值" class="headerlink" title="首先再创造上下文对象的时候会对路径赋值"></a>首先再创造上下文对象的时候会对路径赋值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">	BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();</span><br><span class="line">	<span class="keyword">int</span> countBefore = getRegistry().getBeanDefinitionCount();</span><br><span class="line">	<span class="comment">// 对Document对象完成具体的解析过程</span></span><br><span class="line">	documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class="line">	<span class="keyword">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> XmlReaderContext <span class="title">createReaderContext</span><span class="params">(Resource resource)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> XmlReaderContext(resource, <span class="keyword">this</span>.problemReporter, <span class="keyword">this</span>.eventListener,</span><br><span class="line">			<span class="keyword">this</span>.sourceExtractor, <span class="keyword">this</span>, getNamespaceHandlerResolver());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> NamespaceHandlerResolver <span class="title">getNamespaceHandlerResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.namespaceHandlerResolver == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">this</span>.namespaceHandlerResolver = createDefaultNamespaceHandlerResolver();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.namespaceHandlerResolver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> NamespaceHandlerResolver <span class="title">createDefaultNamespaceHandlerResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ClassLoader cl = (getResourceLoader() != <span class="keyword">null</span> ? getResourceLoader().getClassLoader() : getBeanClassLoader());</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> DefaultNamespaceHandlerResolver(cl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultNamespaceHandlerResolver</span><span class="params">(<span class="meta">@Nullable</span> ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>(classLoader, DEFAULT_HANDLER_MAPPINGS_LOCATION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_HANDLER_MAPPINGS_LOCATION = <span class="string">&quot;META-INF/spring.handlers&quot;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="在-resolve-方法时会调用-getHandlerMappings-获取对应的映射关系"><a href="#在-resolve-方法时会调用-getHandlerMappings-获取对应的映射关系" class="headerlink" title="在 resolve 方法时会调用 getHandlerMappings() 获取对应的映射关系"></a>在 resolve 方法时会调用 getHandlerMappings() 获取对应的映射关系</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">getHandlerMappings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Map&lt;String, Object&gt; handlerMappings = <span class="keyword">this</span>.handlerMappings;</span><br><span class="line">	<span class="keyword">if</span> (handlerMappings == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">			handlerMappings = <span class="keyword">this</span>.handlerMappings;</span><br><span class="line">			<span class="keyword">if</span> (handlerMappings == <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">					logger.trace(<span class="string">&quot;Loading NamespaceHandler mappings from [&quot;</span> + <span class="keyword">this</span>.handlerMappingsLocation + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					Properties mappings =</span><br><span class="line">							PropertiesLoaderUtils.loadAllProperties(<span class="keyword">this</span>.handlerMappingsLocation, <span class="keyword">this</span>.classLoader);</span><br><span class="line">					<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">						logger.trace(<span class="string">&quot;Loaded NamespaceHandler mappings: &quot;</span> + mappings);</span><br><span class="line">					&#125;</span><br><span class="line">					handlerMappings = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(mappings.size());</span><br><span class="line">					CollectionUtils.mergePropertiesIntoMap(mappings, handlerMappings);</span><br><span class="line">					<span class="keyword">this</span>.handlerMappings = handlerMappings;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">							<span class="string">&quot;Unable to load NamespaceHandler mappings from location [&quot;</span> + <span class="keyword">this</span>.handlerMappingsLocation + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> handlerMappings;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="趣事：在-Debug-中，代码没有调用-getHandlerMappings-方法，但是我们却能看到对应的映射关系"><a href="#趣事：在-Debug-中，代码没有调用-getHandlerMappings-方法，但是我们却能看到对应的映射关系" class="headerlink" title="趣事：在 Debug 中，代码没有调用 getHandlerMappings() 方法，但是我们却能看到对应的映射关系"></a>趣事：在 Debug 中，代码没有调用 getHandlerMappings() 方法，但是我们却能看到对应的映射关系</h4><p>原因是 <em>Debug</em> 过程中，IDEA 自动调用了 <em>toString()</em> 方法，而 <em>toString()</em> 方法中有 <em>getHandlerMappings()</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;NamespaceHandlerResolver using mappings &quot;</span> + getHandlerMappings();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="小问题-为什么-Spring-schemas-文件开头要大写"><a href="#小问题-为什么-Spring-schemas-文件开头要大写" class="headerlink" title="小问题-为什么 Spring.schemas 文件开头要大写"></a>小问题-为什么 <em>Spring.schemas</em> 文件开头要大写</h2><p>当该文件改成 <em>spring.schemas</em>时，<em>gradle</em> 会报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Cause: assert shortName != key</span><br><span class="line">       |         |  |</span><br><span class="line">       |         |  &#x27;http://eitan-blog.github.io/schema/eitan/user.xsd&#x27;</span><br><span class="line">       |         false</span><br><span class="line">       &#x27;http://eitan-blog.github.io/schema/eitan/user.xsd&#x27;</span><br></pre></td></tr></table></figure>

<p>原因是发生在 <em>gradle</em> 文件夹下面的 <em>docs.gradle</em> 的注释代码，注释掉后不管大小写都能正常运行。</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210713094818.png" alt="image-20210713094814309"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Tags Testing Article</title>
    <url>/2021/05/11/Tags-Testing-Article/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/xyq-material/blog/master/LeetCode/20210512131715.png" alt="逸"></p>
]]></content>
      <tags>
        <tag>Testing</tag>
        <tag>Another Tag</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/05/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>/2021/09/19/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="Leetcode-912-排序数组"><a href="#Leetcode-912-排序数组" class="headerlink" title="Leetcode-912.排序数组"></a><a href="https://leetcode-cn.com/problems/sort-an-array/">Leetcode-912.排序数组</a></h2><p>给你一个整数数组 nums，请你将该数组升序排列。</p>
<h3 id="递归版本"><a href="#递归版本" class="headerlink" title="递归版本"></a>递归版本</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sortArray(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums;</span><br><span class="line">        &#125;</span><br><span class="line">        process(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        process(nums, left, mid);</span><br><span class="line">        process(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">        merge(nums, left, right, mid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> mid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] help = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> leftPoint = left;</span><br><span class="line">        <span class="keyword">int</span> rightPoint = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (leftPoint &lt;= mid &amp;&amp; rightPoint &lt;= right) &#123;</span><br><span class="line">            help[i++] = nums[leftPoint] &lt; nums[rightPoint] ? nums[leftPoint++] : nums[rightPoint++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (leftPoint &lt;= mid) &#123;</span><br><span class="line">            help[i++] = nums[leftPoint++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (rightPoint &lt;= right)&#123;</span><br><span class="line">            help[i++] = nums[rightPoint++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; help.length; j++) &#123;</span><br><span class="line">            nums[left + j] = help[j]; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="非递归版本"><a href="#非递归版本" class="headerlink" title="非递归版本"></a>非递归版本</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210920094231.png" alt="image-20210920094229297"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sortArray(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> stepSize = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (nums.length &gt; stepSize) &#123;</span><br><span class="line">            process(nums, stepSize);</span><br><span class="line">            stepSize &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> stepSize)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; nums.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + stepSize - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (mid &gt;= nums.length -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> right = Math.min(mid + stepSize, nums.length - <span class="number">1</span>);</span><br><span class="line">            merge(nums, left, right, mid);</span><br><span class="line">            left += stepSize &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> mid)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span>[] help = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> leftPoint = left;</span><br><span class="line">            <span class="keyword">int</span> rightPoint = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (leftPoint &lt;= mid &amp;&amp; rightPoint &lt;= right) &#123;</span><br><span class="line">                help[i++] = nums[leftPoint] &lt; nums[rightPoint] ? nums[leftPoint++] : nums[rightPoint++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (leftPoint &lt;= mid) &#123;</span><br><span class="line">                help[i++] = nums[leftPoint++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (rightPoint &lt;= right) &#123;</span><br><span class="line">                help[i++] = nums[rightPoint++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; help.length; j++) &#123;</span><br><span class="line">                nums[left + j] = help[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>算法题-二维数组中的查找</title>
    <url>/2021/07/01/%E7%AE%97%E6%B3%95%E9%A2%98-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<p>示例:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">现有矩阵 matrix 如下：</span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">  [1,   4,  7, 11, 15]</span>,</span><br><span class="line"><span class="string">  [2,   5,  8, 12, 19]</span>,</span><br><span class="line"><span class="string">  [3,   6,  9, 16, 22]</span>,</span><br><span class="line"><span class="string">  [10, 13, 14, 17, 24]</span>,</span><br><span class="line"><span class="string">  [18, 21, 23, 26, 30]</span></span><br><span class="line">]</span><br><span class="line">给定 target = <span class="number">5</span>，返回 <span class="literal">true</span>。</span><br><span class="line">给定 target = <span class="number">20</span>，返回 <span class="literal">false</span>。</span><br><span class="line"></span><br><span class="line">限制：</span><br><span class="line"><span class="number">0</span> &lt;= n &lt;= <span class="number">1000</span></span><br><span class="line"><span class="number">0</span> &lt;= m &lt;= <span class="number">1000</span></span><br></pre></td></tr></table></figure>



<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof">https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<span id="more"></span>



<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li>由题可知：每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序</li>
<li>因此可以关注左上和右下两点，以左上顶点为例，若 <em>target</em> 小于 *matrix[i][j]*，则 <em>target</em> 所在区域必在其 <em>左侧（即 i–）</em>，若 <em>target</em> 大于 *matrix[i][j]*，则 <em>target</em> 所在区域必在其 <em>下方（即j++）</em>;</li>
<li>若 <em>索引越界</em> 则表示在 <em>matrix</em> 中找不到对应的 <em>target</em>，返回 <em>false</em></li>
</ol>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = matrix[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= matrix.length || j &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] &lt; target) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>对于从左到右递增且从上到下递增的二维数组的遍历可以考虑从左上或者右下开始</li>
</ul>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>算法题-实现LRU缓存机制</title>
    <url>/2021/05/26/%E7%AE%97%E6%B3%95%E9%A2%98-%E5%AE%9E%E7%8E%B0LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/lru-cache/">leetcode第146题</a></p>
<p>运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制 。<br>实现 LRUCache 类：</p>
<ul>
<li>LRUCache(int capacity) 以正整数作为容量 capacity 初始化 LRU 缓存</li>
<li>int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。</li>
<li>void put(int key, int value) 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">输入</span><br><span class="line">[<span class="string">&quot;LRUCache&quot;</span>, <span class="string">&quot;put&quot;</span>, <span class="string">&quot;put&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;put&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;put&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;get&quot;</span>]</span><br><span class="line">[[<span class="number">2</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">1</span>], [<span class="number">3</span>, <span class="number">3</span>], [<span class="number">2</span>], [<span class="number">4</span>, <span class="number">4</span>], [<span class="number">1</span>], [<span class="number">3</span>], [<span class="number">4</span>]]</span><br><span class="line">输出</span><br><span class="line">[<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">1</span>, <span class="literal">null</span>, <span class="number">-1</span>, <span class="literal">null</span>, <span class="number">-1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">LRUCache lRUCache = <span class="keyword">new</span> <span class="type">LRUCache</span>(<span class="number">2</span>);</span><br><span class="line">lRUCache.put(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">// 缓存是 &#123;1=1&#125;</span></span><br><span class="line">lRUCache.put(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">// 缓存是 &#123;1=1, 2=2&#125;</span></span><br><span class="line">lRUCache.<span class="keyword">get</span>(<span class="number">1</span>);    <span class="comment">// 返回 1</span></span><br><span class="line">lRUCache.put(<span class="number">3</span>, <span class="number">3</span>); <span class="comment">// 该操作会使得关键字 2 作废，缓存是 &#123;1=1, 3=3&#125;</span></span><br><span class="line">lRUCache.<span class="keyword">get</span>(<span class="number">2</span>);    <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">lRUCache.put(<span class="number">4</span>, <span class="number">4</span>); <span class="comment">// 该操作会使得关键字 1 作废，缓存是 &#123;4=4, 3=3&#125;</span></span><br><span class="line">lRUCache.<span class="keyword">get</span>(<span class="number">1</span>);    <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">lRUCache.<span class="keyword">get</span>(<span class="number">3</span>);    <span class="comment">// 返回 3</span></span><br><span class="line">lRUCache.<span class="keyword">get</span>(<span class="number">4</span>);    <span class="comment">// 返回 4</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>使用 map 来实现 get(int key) 方法的 O(1) 时间复杂度</li>
<li>使用一个链表来维护数据的使用时间</li>
<li>当调用 put(int key, int value) 方法时，先无脑往 map 里添加数据，再判断大小是否超过 capacity，超过了就删除链表中最后一个元素</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LRUNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> key;</span><br><span class="line">        <span class="keyword">int</span> value;</span><br><span class="line">        LRUNode prev;</span><br><span class="line">        LRUNode next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LRUNode</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LRUNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">int</span> currentSize = <span class="number">0</span>;</span><br><span class="line">    LRUNode start = <span class="keyword">new</span> LRUNode();</span><br><span class="line">    LRUNode end = <span class="keyword">new</span> LRUNode();</span><br><span class="line">    Map&lt;Integer, LRUNode&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;Integer, LRUNode&gt;(capacity);</span><br><span class="line">        start.next = end;</span><br><span class="line">        end.prev = start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        LRUNode node = map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        remove(node);</span><br><span class="line">        moveToHead(node);</span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        LRUNode node = map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            node = <span class="keyword">new</span> LRUNode(key, value);</span><br><span class="line">            moveToHead(node);</span><br><span class="line">            map.put(key, node);</span><br><span class="line">            currentSize++;</span><br><span class="line">            <span class="keyword">if</span> (currentSize &gt; capacity) &#123;</span><br><span class="line">                map.remove(end.prev.key);</span><br><span class="line">                remove(end.prev);</span><br><span class="line">                currentSize--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.value = value;</span><br><span class="line">            remove(node);</span><br><span class="line">            moveToHead(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveToHead</span><span class="params">(LRUNode node)</span> </span>&#123;</span><br><span class="line">        node.next = start.next;</span><br><span class="line">        node.prev = start;</span><br><span class="line">        start.next.prev = node;</span><br><span class="line">        start.next = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(LRUNode node)</span> </span>&#123;</span><br><span class="line">        node.prev.next = node.next;</span><br><span class="line">        node.next.prev = node.prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LRUCache lruCache = <span class="keyword">new</span> LRUCache(<span class="number">2</span>);</span><br><span class="line">        lruCache.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        lruCache.put(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(lruCache.get(<span class="number">1</span>));</span><br><span class="line">        lruCache.put(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>通过 LRU 如何实现一个 LFU？</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ul>
<li>使用一个 Map&lt;int, LFUNode&gt; 来保存元素</li>
<li>再使用一个 Map&lt;int, LRUNode&gt; 维护使用频率，其中 key 为使用频率，value 为一个维护使用时间的链表</li>
<li>在 LFUNode 中需要存储当前元素的使用频率，在调取 get(int key) 方法时，将其从原链表移除，更新该node的频率并将其添加至新频率所在的链表</li>
</ul>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>算法题-线段点最多覆盖</title>
    <url>/2021/05/19/%E7%AE%97%E6%B3%95%E9%A2%98-%E7%BA%BF%E6%AE%B5%E7%82%B9%E6%9C%80%E5%A4%9A%E8%A6%86%E7%9B%96/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ol>
<li>给定一个有序数组 arr ，代表坐落在 X 轴上的点</li>
<li>给定一个正数K，代表绳子的长度</li>
<li>返回绳子最多压中几个点，即使绳子边缘处被盖住了也算盖住</li>
</ol>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li>采用左右指针，指针为数组下标</li>
<li>右指针 - 左指针 = 当前覆盖点数</li>
<li>右指针指向的值 - 左指针指向的值代表坐落在 X 轴上的点的跨度，要小于对于绳子长度</li>
</ol>
<h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mySolution</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; arr.length) &#123;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; arr.length &amp;&amp; arr[right] - arr[left] &lt;= l) &#123;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        max = Math.max(max, right - left++);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>算法题-查询给定目录下的文件数量</title>
    <url>/2021/05/19/%E7%AE%97%E6%B3%95%E9%A2%98-%E6%9F%A5%E8%AF%A2%E7%BB%99%E5%AE%9A%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%E6%95%B0%E9%87%8F/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ol>
<li>给定一个文件目录的路径，写一个函数统计这个目录下的所有文件</li>
<li>隐藏文件也算，但是文件夹不算</li>
</ol>
<span id="more"></span>

<h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getFileNumber</span><span class="params">(String folderPath)</span> </span>&#123;</span><br><span class="line">    File root = <span class="keyword">new</span> File(folderPath);</span><br><span class="line">    <span class="keyword">if</span> (!root.isDirectory() &amp;&amp; !root.isFile()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root.isFile()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack&lt;File&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    stack.add(root);</span><br><span class="line">    <span class="keyword">int</span> files = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        File folder = stack.pop();</span><br><span class="line">        <span class="keyword">for</span> (File next : folder.listFiles()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (next.isFile()) &#123;</span><br><span class="line">                files++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (next.isDirectory()) &#123;</span><br><span class="line">                stack.push(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> files;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> mySolution(String path) &#123;</span><br><span class="line">    <span class="keyword">int</span> fileNumber = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(path);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">file</span>.exists()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">file</span>.isFile()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">file</span>.isDirectory()) &#123;</span><br><span class="line">        <span class="keyword">File</span>[] files = <span class="keyword">file</span>.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">File</span> f : files) &#123;</span><br><span class="line">            fileNumber = fileNumber + mySolution(f.getPath());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fileNumber;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>系统调用的大致过程</title>
    <url>/2021/05/13/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E5%A4%A7%E8%87%B4%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p>操作系统(operating system)内核中有一组实现系统功能的代码，系统调用就是对上述代码的调用。程序利用系统调用，向OS提出服务请求，由OS代为完成。</p>
<h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><p>中断是一种使CPU中止正在执行的程序而转去处理特殊事件的操作，这些引起中断的事件称为中断源，它们可能是来自外设的输入输出请求，也可能是计算机的一些异常事故或其它内部原因。</p>
<span id="more"></span>

<h2 id="系统调用过程"><a href="#系统调用过程" class="headerlink" title="系统调用过程"></a>系统调用过程</h2><ol>
<li>触发中断：硬件或软件发出中断请求（电信号），要求CPU暂停当前工作转手处理更重要的事情。</li>
<li>查询中断向量表：通过中断传来的参数 <em>int 0x80</em>，在 kernel 里的中断向量表中找到对应方法</li>
<li>切换用户态到内核态：保护现场，切换用户态到内核态</li>
<li>执行对应方法</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>system call</tag>
      </tags>
  </entry>
  <entry>
    <title>线程对象锁被暂用，导致线程无法正常结束问题</title>
    <url>/2021/09/21/%E7%BA%BF%E7%A8%8B%E5%AF%B9%E8%B1%A1%E9%94%81%E8%A2%AB%E6%9A%82%E7%94%A8%EF%BC%8C%E5%AF%BC%E8%87%B4%E7%BA%BF%E7%A8%8B%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E7%BB%93%E6%9D%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>案例出自 <a href="https://ke.qq.com/webcourse/3583073/103725980#taid=11648638505102433&vid=3701925920872990005">马士兵MAC课程</a></p>
<h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t1 start&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;t1 end&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;thread-0&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (t1) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;t2 start&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;t1 isAlive: &quot;</span> + t1.isAlive());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;thread-1&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="案例现象"><a href="#案例现象" class="headerlink" title="案例现象"></a>案例现象</h2><ol>
<li><p>在主线程中创建并启动两个线程，线程 t1 睡眠两秒后打印 “t1 end” 后结束，线程 t2 睡眠五秒后打印了 t1 线程的状态</p>
</li>
<li><p>正常来说，t1 线程睡眠两秒并打印 “t1 end” 后就结束了，因此线程 t2 在打印线程 t1 的存活状态应该为 false</p>
</li>
<li><p>然而实际结果为 true</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210921222459.png" alt="image-20210921222454716"></p>
</li>
</ol>
<h2 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h2><p>​    1. 线程 t1 在结束的时候需要获取自身对象这把锁，而这把锁被线程 t2 通过 synchronized 持有，因此没有结束</p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>在 synchronized 之前加上 *t1.join()*。</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210921223728.png" alt="image-20210921223726569"></p>
<p>此时 t1 结束时，t2 并为持有 t1 对象作为锁，可以正常结束，因此 t2 打印 t1 线程状态是否存活为 false。</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210921223908.png" alt="image-20210921223906639"></p>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>在 synchronized 之后加上 *t1.join()*。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t1 start&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;t1 end&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;thread-0&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (t1) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    t1.join();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;t2 start&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;t1 isAlive: &quot;</span> + t1.isAlive());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;thread-1&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210921224109.png" alt="image-20210921224107485"></p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ol>
<li>当代码运行到 <em>t1.join()</em> 时，t2 持有的 t1 线程的对象锁，并且等待 t1 线程执行完成才能继续往下执行</li>
<li>然而 t1 线程需要获取自身对象锁才能结束，只有当 t1 线程结束了 t2 线程才能继续往下执行释放 t1 线程的对象锁</li>
<li>这段代码为什么可以正常结束而不发生死锁问题呢？</li>
</ol>
<h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>这时我们去关注 <em>join()</em> 方法的源代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    join(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millis)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> base = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> now = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;timeout value is negative&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (millis == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            wait(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            <span class="keyword">long</span> delay = millis - now;</span><br><span class="line">            <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            wait(delay);</span><br><span class="line">            now = System.currentTimeMillis() - base;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们发现，<em>join()</em> 方法的实现最终是通过循环判断当前线程的活跃状态 *isAlive()*，并调用 <em>wait(0)</em> 方法。而 <em>wait(0)</em> 方法是 Object 的方法，他会让当前线程释放它所持有的锁。因此 t1 线程就可以获取其自身的对象锁成功结束。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>multithreading</tag>
      </tags>
  </entry>
  <entry>
    <title>网络IO-tcp是怎么建立通信的</title>
    <url>/2021/05/25/%E7%BD%91%E7%BB%9CIO-tcp%E6%98%AF%E6%80%8E%E4%B9%88%E5%BB%BA%E7%AB%8B%E9%80%9A%E4%BF%A1%E7%9A%84/</url>
    <content><![CDATA[<p>学习马士兵课程-内存与IO，通过 <em>netstat</em>、<em>lsof</em>、<em>tcpdump</em> 观察tcp连接时内核在每一步都就行了什么相应的操作。</p>
<p>本文资料来自于马士兵MAC课程-内存与IO。</p>
<p>通过 netstat、lsof、tcpdump 观察 tcp 连接时内核在每一步都就行了什么相应的操作。</p>
<p>阅读本文，你可以知道在编写 java 代码时的每一步对应内核会产生哪些操作，其探究范围在客户端、服务端代码启动到客户端、服务端建立连接。</p>
<span id="more"></span>

<h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 马士兵教育</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-05-17 05:34</span></span><br><span class="line"><span class="comment"> * BIO  多线程的方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketIOPropertites</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//server socket listen property:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RECEIVE_BUFFER = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SO_TIMEOUT = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> REUSE_ADDR = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BACK_LOG = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//client socket listen property on server endpoint:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> CLI_KEEPALIVE = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> CLI_OOB = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CLI_REC_BUF = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> CLI_REUSE_ADDR = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CLI_SEND_BUF = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> CLI_LINGER = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CLI_LINGER_N = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CLI_TIMEOUT = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> CLI_NO_DELAY = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    StandardSocketOptions.TCP_NODELAY</span></span><br><span class="line"><span class="comment">    StandardSocketOptions.SO_KEEPALIVE</span></span><br><span class="line"><span class="comment">    StandardSocketOptions.SO_LINGER</span></span><br><span class="line"><span class="comment">    StandardSocketOptions.SO_RCVBUF</span></span><br><span class="line"><span class="comment">    StandardSocketOptions.SO_SNDBUF</span></span><br><span class="line"><span class="comment">    StandardSocketOptions.SO_REUSEADDR</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ServerSocket server = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server = <span class="keyword">new</span> ServerSocket();</span><br><span class="line">            server.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9090</span>), BACK_LOG);</span><br><span class="line">            server.setReceiveBufferSize(RECEIVE_BUFFER);</span><br><span class="line">            server.setReuseAddress(REUSE_ADDR);</span><br><span class="line">            server.setSoTimeout(SO_TIMEOUT);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;server up use 9090!&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                System.in.read();  <span class="comment">//分水岭：</span></span><br><span class="line"></span><br><span class="line">                Socket client = server.accept();  <span class="comment">//阻塞的，没有 -1  一直卡着不动  accept(4,</span></span><br><span class="line">                System.out.println(<span class="string">&quot;client port: &quot;</span> + client.getPort());</span><br><span class="line"></span><br><span class="line">                client.setKeepAlive(CLI_KEEPALIVE);</span><br><span class="line">                client.setOOBInline(CLI_OOB);</span><br><span class="line">                client.setReceiveBufferSize(CLI_REC_BUF);</span><br><span class="line">                client.setReuseAddress(CLI_REUSE_ADDR);</span><br><span class="line">                client.setSendBufferSize(CLI_SEND_BUF);</span><br><span class="line">                client.setSoLinger(CLI_LINGER, CLI_LINGER_N);</span><br><span class="line">                client.setSoTimeout(CLI_TIMEOUT);</span><br><span class="line">                client.setTcpNoDelay(CLI_NO_DELAY);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//client.read   //阻塞   没有  -1 0</span></span><br><span class="line">                <span class="keyword">new</span> Thread(</span><br><span class="line">                        () -&gt; &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                InputStream in = client.getInputStream();</span><br><span class="line">                                BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">                                <span class="keyword">char</span>[] data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">                                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">int</span> num = reader.read(data);</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                        System.out.println(<span class="string">&quot;client read some data is :&quot;</span> + num + <span class="string">&quot; val :&quot;</span> + <span class="keyword">new</span> String(data, <span class="number">0</span>, num));</span><br><span class="line">                                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">                                        System.out.println(<span class="string">&quot;client readed nothing!&quot;</span>);</span><br><span class="line">                                        <span class="keyword">continue</span>;</span><br><span class="line">                                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                        System.out.println(<span class="string">&quot;client readed -1...&quot;</span>);</span><br><span class="line">                                        System.in.read();</span><br><span class="line">                                        client.close();</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                ).start();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                server.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 马士兵教育</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-05-17 16:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Socket client = <span class="keyword">new</span> Socket(<span class="string">&quot;192.168.150.11&quot;</span>,<span class="number">9090</span>);</span><br><span class="line"></span><br><span class="line">            client.setSendBufferSize(<span class="number">20</span>);</span><br><span class="line">            client.setTcpNoDelay(<span class="keyword">true</span>);</span><br><span class="line">            OutputStream out = client.getOutputStream();</span><br><span class="line"></span><br><span class="line">            InputStream in = System.in;</span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                String line = reader.readLine();</span><br><span class="line">                <span class="keyword">if</span>(line != <span class="keyword">null</span> )&#123;</span><br><span class="line">                    <span class="keyword">byte</span>[] bb = line.getBytes();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">byte</span> b : bb) &#123;</span><br><span class="line">                        out.write(b);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在服务器端启动但客户端未连接时"><a href="#在服务器端启动但客户端未连接时" class="headerlink" title="在服务器端启动但客户端未连接时"></a>在服务器端启动但客户端未连接时</h2><ul>
<li><p>启动服务器端代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javac SocketIOPropertites.java</span><br><span class="line">java SocketIOPropertites</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时客户端创建了 serverSocket 并绑定了端口9090，阻塞在 System.in.read() 处</p>
</blockquote>
</li>
<li><p>netstat</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-a 显示所有状态的socket  </span><br><span class="line">-n 不做名字解析，不加此参数，80端口会显示成http,127.0.0.1显示成localhost,uid为0显示成root等等    </span><br><span class="line">-e 显示更多信息如用户，inode</span><br><span class="line">-p 显示pid和程序名字</span><br><span class="line">-t 显示tcp链接</span><br><span class="line">-u 显示udp链接</span><br><span class="line">-x 显示unix套接字</span><br></pre></td></tr></table></figure>
<p>通过 netstat 可以看出系统中多了一行监听9090端口的tcp连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -natp</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      7631/sshd           </span><br><span class="line">tcp        0      0 192.168.203.133:22      192.168.203.1:3137      ESTABLISHED 7846/sshd: root@pts </span><br><span class="line">tcp        0      0 192.168.203.133:22      192.168.203.1:7070      ESTABLISHED 15711/sshd: root@pt </span><br><span class="line">tcp        0     36 192.168.203.133:22      192.168.203.1:6022      ESTABLISHED 7942/sshd: root@pts </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      7631/sshd           </span><br><span class="line">tcp6       0      0 :::9090                 :::*                    LISTEN      15853/java</span><br></pre></td></tr></table></figure></li>
<li><p>lsof</p>
<p>通过 lsof 观察到运行java代码的进程出现了一个文件描述符处于Listen状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsof -p 15853</span><br><span class="line">COMMAND   PID USER   FD   TYPE             DEVICE  SIZE/OFF   NODE NAME</span><br><span class="line">...</span><br><span class="line">java    15853 root    6u  IPv6              53184       0t0    TCP *:websm (LISTEN)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="客户端请求连接但服务器端未accept"><a href="#客户端请求连接但服务器端未accept" class="headerlink" title="客户端请求连接但服务器端未accept"></a>客户端请求连接但服务器端未accept</h2><ul>
<li><p>启动客户端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javac SocketClient.java</span><br><span class="line">java SocketClient</span><br></pre></td></tr></table></figure></li>
<li><p>解决异常<em>java.net.NoRouteToHostException: 没有到主机的路由</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure></li>
<li><p>tcpdump</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump -nn -i ens33 port 9090</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on ens33, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">15:00:49.829735 IP 192.168.203.132.37058 &gt; 192.168.203.133.9090: Flags [S], seq 493363808, win 29200, options [mss 1460,sackOK,TS val 14267030 ecr 0,nop,wscale 7], length 0</span><br><span class="line">15:00:49.829764 IP 192.168.203.133.9090 &gt; 192.168.203.132.37058: Flags [S.], seq 2693402151, ack 493363809, win 1152, options [mss 1460,sackOK,TS val 15102986 ecr 14267030,nop,wscale 0], length 0</span><br><span class="line">15:00:49.829979 IP 192.168.203.132.37058 &gt; 192.168.203.133.9090: Flags [.], ack 1, win 229, options [nop,nop,TS val 14267031 ecr 15102986], length 0</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以发现已经发生了三次握手</p>
</blockquote>
</li>
<li><p>netstat</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -natp</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      7631/sshd           </span><br><span class="line">tcp        0      0 192.168.203.133:22      192.168.203.1:3137      ESTABLISHED 7846/sshd: root@pts </span><br><span class="line">tcp        0      0 192.168.203.133:22      192.168.203.1:7070      ESTABLISHED 15711/sshd: root@pt </span><br><span class="line">tcp        0     36 192.168.203.133:22      192.168.203.1:6022      ESTABLISHED 7942/sshd: root@pts </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      7631/sshd           </span><br><span class="line">tcp6       1      0 :::9090                 :::*                    LISTEN      16423/java          </span><br><span class="line">tcp6       0      0 192.168.203.133:9090    192.168.203.132:37058   ESTABLISHED -                   </span><br></pre></td></tr></table></figure>

<blockquote>
<p>在内核层面已经建立起了socket连接，并且当客户端发出信息后，服务器端是已经被接受了，即使这个连接没有分配给任何一个进程</p>
</blockquote>
</li>
</ul>
<h2 id="当服务器端accept后"><a href="#当服务器端accept后" class="headerlink" title="当服务器端accept后"></a>当服务器端accept后</h2><ul>
<li><p>netstat</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -natp</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      7631/sshd           </span><br><span class="line">tcp        0      0 192.168.203.133:22      192.168.203.1:3137      ESTABLISHED 7846/sshd: root@pts </span><br><span class="line">tcp        0      0 192.168.203.133:22      192.168.203.1:7070      ESTABLISHED 15711/sshd: root@pt </span><br><span class="line">tcp        0     36 192.168.203.133:22      192.168.203.1:6022      ESTABLISHED 7942/sshd: root@pts </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      7631/sshd           </span><br><span class="line">tcp6       0      0 :::9090                 :::*                    LISTEN      16423/java          </span><br><span class="line">tcp6       0      0 192.168.203.133:9090    192.168.203.132:37058   ESTABLISHED 16423/java </span><br></pre></td></tr></table></figure>

<blockquote>
<p>该连接已经分配给了对应进程</p>
</blockquote>
</li>
<li><p>lsof</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsof -p 16423</span><br><span class="line">COMMAND   PID USER   FD   TYPE             DEVICE  SIZE/OFF   NODE NAME</span><br><span class="line">...</span><br><span class="line">java    16423 root    7u  IPv6              70977       0t0    TCP CentOS7.6:websm-&gt;192.168.203.132:37058 (ESTABLISHED)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以发现该进程已经被分配了文件描述符</p>
</blockquote>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>socket本质是一个四元组，通过 CIP_CPORT + SIP_SPORT 能确认唯一socket</li>
<li>new ServerSocket() 在内核层面的操作就是开启了一个监听 port 的 socket</li>
<li>当两台服务器之间建立连接时并未将此 socket 分配给进程，即进程并未分配对应的文件描述符 fd，但服务器之间已经可以就行信息传递</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>io</tag>
      </tags>
  </entry>
  <entry>
    <title>网络IO-探究poll和epoll在内核层面的不同</title>
    <url>/2021/06/03/%E7%BD%91%E7%BB%9CIO-%E6%8E%A2%E7%A9%B6poll%E5%92%8Cepoll%E5%9C%A8%E5%86%85%E6%A0%B8%E5%B1%82%E9%9D%A2%E7%9A%84%E4%B8%8D%E5%90%8C/</url>
    <content><![CDATA[<p>代码、资料来自于马士兵MAC课程。</p>
<p>本文通过 strace 命令来监控使用 poll 和 epoll 不同模型的同一代码在内核方法调用上的不同。</p>
<p>阅读本文，你将切实体会到 poll 和 epoll 的不同实现方式。对于两种模型的介绍推荐阅读：<a href="https://eitan-blog.github.io/2021/05/26/%E7%BD%91%E7%BB%9CIO-IO%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%BC%94%E5%8F%98/">网络IO-IO模型的演变</a>。</p>
<h2 id="前置：如何用同一段代码使用-poll-和-epoll-两种不同模型"><a href="#前置：如何用同一段代码使用-poll-和-epoll-两种不同模型" class="headerlink" title="前置：如何用同一段代码使用 poll 和 epoll 两种不同模型"></a>前置：如何用同一段代码使用 poll 和 epoll 两种不同模型</h2><p>代码 <em>Selector selector = Selector.open();</em> 在 poll 和 epoll 模型都支持的情况下优先选择 epoll。</p>
<p>可以通过 JVM 参数 <em>-Djava.nio.channels.spi.SelectorProvider=sun.nio.ch.PollSelectorProvider</em> 手动选择 poll 模型。</p>
<span id="more"></span>



<h2 id="代码-SocketMultiplexingSingleThread"><a href="#代码-SocketMultiplexingSingleThread" class="headerlink" title="代码 - SocketMultiplexingSingleThread"></a>代码 - SocketMultiplexingSingleThread</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketMultiplexingSingleThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServerSocketChannel server;</span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port = <span class="number">9090</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立监听，并注册进 selector</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server = ServerSocketChannel.open();</span><br><span class="line">            server.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            server.bind(<span class="keyword">new</span> InetSocketAddress(port));</span><br><span class="line"></span><br><span class="line">            selector = Selector.open();</span><br><span class="line">            server.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        initServer();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器初始化完成...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                Set&lt;SelectionKey&gt; keys = selector.keys();</span><br><span class="line">                System.out.println(keys.size() + <span class="string">&quot; size&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (selector.select() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">                    Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                        SelectionKey key = iterator.next();</span><br><span class="line">                        iterator.remove();</span><br><span class="line">                        <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                            acceptHandler(key);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                            readHandler(key);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、建立 socket</span></span><br><span class="line"><span class="comment">     * 2、将指向这个 socket 注册进 select</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">acceptHandler</span><span class="params">(SelectionKey key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel();</span><br><span class="line">            SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">            socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">8192</span>);</span><br><span class="line">            socketChannel.register(selector, SelectionKey.OP_READ, buffer);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;-------------------------------------------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;新客户端：&quot;</span> + socketChannel.getRemoteAddress());</span><br><span class="line">            System.out.println(<span class="string">&quot;-------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readHandler</span><span class="params">(SelectionKey key)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;read handler...&quot;</span>);</span><br><span class="line">        SocketChannel client = (SocketChannel) key.channel();</span><br><span class="line">        ByteBuffer buffer = (ByteBuffer) key.attachment();</span><br><span class="line">        buffer.clear();</span><br><span class="line">        <span class="keyword">int</span> read = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                read = client.read(buffer);</span><br><span class="line">                <span class="keyword">if</span> (read &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    buffer.flip();</span><br><span class="line">                    <span class="keyword">while</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">                        client.write(buffer);</span><br><span class="line">                    &#125;</span><br><span class="line">                    buffer.clear();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (read == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    client.close();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SocketMultiplexingSingleThread socketMultiplexingSingleThread = <span class="keyword">new</span> SocketMultiplexingSingleThread();</span><br><span class="line">        socketMultiplexingSingleThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="用-strace-追踪两种模型"><a href="#用-strace-追踪两种模型" class="headerlink" title="用 strace 追踪两种模型"></a>用 strace 追踪两种模型</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">strace -ff -o poll java -Djava.nio.channels.spi.SelectorProvider=sun.nio.ch.PollSelectorProvider SocketMultiplexingSingleThread</span><br><span class="line"></span><br><span class="line">strace -ff -o epoll java SocketMultiplexingSingleThread</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 nc 命令连接 java 代码并发送一条数据</span></span><br><span class="line">nc 192.168.203.133 9090</span><br></pre></td></tr></table></figure>

<p>这时在文件架下将会出现以下文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-rw-r--r--. 1 root root  13893 6月   3 13:27 epoll.8306</span><br><span class="line">-rw-r--r--. 1 root root 227300 6月   3 13:27 epoll.8307</span><br><span class="line">-rw-r--r--. 1 root root  18207 6月   3 13:27 epoll.8308</span><br><span class="line">-rw-r--r--. 1 root root   1005 6月   3 13:27 epoll.8309</span><br><span class="line">-rw-r--r--. 1 root root   1128 6月   3 13:27 epoll.8310</span><br><span class="line">-rw-r--r--. 1 root root   2166 6月   3 13:27 epoll.8311</span><br><span class="line">-rw-r--r--. 1 root root  11073 6月   3 13:27 epoll.8312</span><br><span class="line">-rw-r--r--. 1 root root   8025 6月   3 13:27 epoll.8313</span><br><span class="line">-rw-r--r--. 1 root root   1004 6月   3 13:27 epoll.8314</span><br><span class="line">-rw-r--r--. 1 root root 182136 6月   3 13:27 epoll.8315</span><br><span class="line">-rw-r--r--. 1 root root   1925 6月   3 13:27 epoll.8317</span><br><span class="line">-rw-r--r--. 1 root root  13932 6月   3 13:26 poll.8292</span><br><span class="line">-rw-r--r--. 1 root root 213812 6月   3 13:26 poll.8293</span><br><span class="line">-rw-r--r--. 1 root root  11598 6月   3 13:26 poll.8294</span><br><span class="line">-rw-r--r--. 1 root root   1005 6月   3 13:26 poll.8295</span><br><span class="line">-rw-r--r--. 1 root root   1128 6月   3 13:26 poll.8296</span><br><span class="line">-rw-r--r--. 1 root root   2166 6月   3 13:26 poll.8297</span><br><span class="line">-rw-r--r--. 1 root root   7734 6月   3 13:26 poll.8298</span><br><span class="line">-rw-r--r--. 1 root root   4650 6月   3 13:26 poll.8299</span><br><span class="line">-rw-r--r--. 1 root root   1004 6月   3 13:26 poll.8300</span><br><span class="line">-rw-r--r--. 1 root root  76215 6月   3 13:26 poll.8301</span><br><span class="line">-rw-r--r--. 1 root root   1925 6月   3 13:26 poll.8303</span><br><span class="line">-rw-r--r--. 1 root root   3574 6月   3 12:48 SocketMultiplexingSingleThread.class</span><br><span class="line">-rw-r--r--. 1 root root   3773 6月   3 11:43 SocketMultiplexingSingleThread.java</span><br></pre></td></tr></table></figure>

<p>我们观察 <em>poll.8293</em> 和 <em>epoll.8307</em> 这两个文件。</p>
<h3 id="poll-8293-的内核方法调用"><a href="#poll-8293-的内核方法调用" class="headerlink" title="poll.8293 的内核方法调用"></a>poll.8293 的内核方法调用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ServerSocketChannel.open()</span></span><br><span class="line">socket(AF_INET6, SOCK_STREAM, IPPROTO_IP) = 5</span><br><span class="line"><span class="meta">#</span><span class="bash"> server.configureBlocking(<span class="literal">false</span>)</span></span><br><span class="line">fcntl(5, F_SETFL, O_RDWR|O_NONBLOCK)    = 0</span><br><span class="line">bind(5, &#123;sa_family=AF_INET6, sin6_port=htons(9090), inet_pton(AF_INET6, &quot;::&quot;, &amp;sin6_addr), sin6_flowinfo=htonl(0), sin6_scope_id=0&#125;, 28) = 0</span><br><span class="line">listen(5, 50)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> selector.select() 这里就是把想要监听的 fds 全传给内核，让内核进行遍历返回可用的 fd</span></span><br><span class="line">poll([&#123;fd=6, events=POLLIN&#125;, &#123;fd=5, events=POLLIN&#125;], 2, -1) = 1 ([&#123;fd=5, revents=POLLIN&#125;])</span><br><span class="line"><span class="meta">#</span><span class="bash"> SocketChannel socketChannel = serverSocketChannel.accept()</span></span><br><span class="line">accept(5, &#123;sa_family=AF_INET6, sin6_port=htons(35202), inet_pton(AF_INET6, &quot;::ffff:192.168.203.133&quot;, &amp;sin6_addr), sin6_flowinfo=htonl(0), sin6_scope_id=0&#125;, [28]) = 8</span><br><span class="line"><span class="meta">#</span><span class="bash"> socketChannel.configureBlocking(<span class="literal">false</span>)</span></span><br><span class="line">fcntl(8, F_SETFL, O_RDWR|O_NONBLOCK)    = 0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次进行 selector.select() 时也就会把 fd8 也放入参数当中监听是否有数据</span></span><br><span class="line">poll([&#123;fd=6, events=POLLIN&#125;, &#123;fd=5, events=POLLIN&#125;, &#123;fd=8, events=POLLIN&#125;], 3, -1) = 1 ([&#123;fd=8, revents=POLLIN&#125;])</span><br></pre></td></tr></table></figure>

<h3 id="epoll-8307-的内核方法调用"><a href="#epoll-8307-的内核方法调用" class="headerlink" title="epoll.8307 的内核方法调用"></a>epoll.8307 的内核方法调用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ServerSocketChannel.open()</span></span><br><span class="line">socket(AF_INET6, SOCK_STREAM, IPPROTO_IP) = 5</span><br><span class="line"><span class="meta">#</span><span class="bash"> server.configureBlocking(<span class="literal">false</span>)</span></span><br><span class="line">fcntl(5, F_SETFL, O_RDWR|O_NONBLOCK)    = 0</span><br><span class="line">bind(5, &#123;sa_family=AF_INET6, sin6_port=htons(9090), inet_pton(AF_INET6, &quot;::&quot;, &amp;sin6_addr), sin6_flowinfo=htonl(0), sin6_scope_id=0&#125;, 28) = 0</span><br><span class="line">listen(5, 50)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> selector = Selector.open();</span></span><br><span class="line">epoll_create(256)                       = 8</span><br><span class="line"><span class="meta">#</span><span class="bash"> server.register(selector, SelectionKey.OP_ACCEPT);</span></span><br><span class="line">epoll_ctl(8, EPOLL_CTL_ADD, 5, &#123;EPOLLIN, &#123;u32=5, u64=9512930623052840965&#125;&#125;) = 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> selector.select()</span></span><br><span class="line">epoll_wait(8, [&#123;EPOLLIN, &#123;u32=5, u64=9512930623052840965&#125;&#125;], 4096, -1) = 1</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>io</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop（一）：集群搭建</title>
    <url>/2022/05/08/Hadoop%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>本文为学习笔记，对应视频教程来自<a href="https://www.bilibili.com/video/BV1Qp4y1n7EN">尚硅谷大数据Hadoop 3.x</a></p>
<h3 id="模板虚拟机环境准备"><a href="#模板虚拟机环境准备" class="headerlink" title="模板虚拟机环境准备"></a>模板虚拟机环境准备</h3><h4 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h4><p>IP地址192.168.203.100、主机名称hadoop100、内存4G、硬盘50G</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 一、编辑静态 ip 地址</span></span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改</span></span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加</span></span><br><span class="line">IPADDR=&quot;192.168.203.100&quot;</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;</span><br><span class="line">GATEWAY=&quot;192.168.203.2&quot;</span><br><span class="line">DNS1=&quot;114.114.114.114&quot;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="安装必要软件"><a href="#安装必要软件" class="headerlink" title="安装必要软件"></a>安装必要软件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y epel-release net-tools vim</span><br></pre></td></tr></table></figure>
<p>注：Extra Packages for Enterprise Linux是为“红帽系”的操作系统提供额外的软件包，适用于RHEL、CentOS和Scientific Linux。相当于是一个软件仓库，大多数rpm包在官方 repository 中是找不到的）</p>
<h4 id="关闭防火墙-，关闭防火墙开机自启"><a href="#关闭防火墙-，关闭防火墙开机自启" class="headerlink" title="关闭防火墙 ，关闭防火墙开机自启"></a>关闭防火墙 ，关闭防火墙开机自启</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>

<h4 id="创建-eitan-用户"><a href="#创建-eitan-用户" class="headerlink" title="创建 eitan 用户"></a>创建 eitan 用户</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"># 添加 eitan 用户并设置密码</span><br><span class="line">useradd eitan</span><br><span class="line">passwd eitan</span><br><span class="line"></span><br><span class="line"># 为 eitan 用户添加权限</span><br><span class="line">vim /etc/sudoers</span><br><span class="line">## Allow root <span class="keyword">to</span> run <span class="keyword">any</span> commands anywhere</span><br><span class="line">root 	<span class="keyword">ALL</span>=(<span class="keyword">ALL</span>) 		<span class="keyword">ALL</span></span><br><span class="line">## Allows people <span class="keyword">in</span> <span class="keyword">group</span> wheel <span class="keyword">to</span> run <span class="keyword">all</span> commands</span><br><span class="line">%wheel	<span class="keyword">ALL</span>=(<span class="keyword">ALL</span>) 		<span class="keyword">ALL</span></span><br><span class="line">eitan   <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>)       NOPASSWD:<span class="keyword">ALL</span></span><br></pre></td></tr></table></figure>

<p>注意：eitan 这一行不要直接放到 root 行下面，因为所有用户都属于 wheel 组，你先配置了 eitan 具有免密功能，但是程序执行到%wheel 行时，该功能又被覆盖回需要密码。所以 eitan 要放到%wheel 这行下面。</p>
<h4 id="在-opt-目录下创建文件夹"><a href="#在-opt-目录下创建文件夹" class="headerlink" title="在/opt 目录下创建文件夹"></a>在/opt 目录下创建文件夹</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /opt/module</span><br><span class="line">mkdir /opt/software</span><br><span class="line"></span><br><span class="line">chown eitan:eitan /opt/module</span><br><span class="line">chown eitan:eitan /opt/software</span><br></pre></td></tr></table></figure>

<h3 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h3><h4 id="利用模板机-hadoop100-，克隆三台虚拟机：hadoop102、hadoop103、hadoop104"><a href="#利用模板机-hadoop100-，克隆三台虚拟机：hadoop102、hadoop103、hadoop104" class="headerlink" title="利用模板机 hadoop100 ，克隆三台虚拟机：hadoop102、hadoop103、hadoop104"></a>利用模板机 hadoop100 ，克隆三台虚拟机：hadoop102、hadoop103、hadoop104</h4><h4 id="修改克隆机-IP，以-hadoop102-为例"><a href="#修改克隆机-IP，以-hadoop102-为例" class="headerlink" title="修改克隆机 IP，以 hadoop102 为例"></a>修改克隆机 IP，以 hadoop102 为例</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 一、编辑静态 ip 地址</span></span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改</span></span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加</span></span><br><span class="line">IPADDR=&quot;192.168.203.102&quot;</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;</span><br><span class="line">GATEWAY=&quot;192.168.203.2&quot;</span><br><span class="line">DNS1=&quot;114.114.114.114&quot;</span><br></pre></td></tr></table></figure>

<h4 id="修改克隆机主机名"><a href="#修改克隆机主机名" class="headerlink" title="修改克隆机主机名"></a>修改克隆机主机名</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改主机名称</span></span><br><span class="line">vim /etc/hostname</span><br><span class="line">hadoop102</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置 Linux 克隆机主机名称映射 hosts 文件，打开/etc/hosts</span></span><br><span class="line">vim /etc/hosts</span><br><span class="line">192.168.203.100 hadoop100</span><br><span class="line">192.168.203.101 hadoop101</span><br><span class="line">192.168.203.102 hadoop102</span><br><span class="line">192.168.203.103 hadoop103</span><br><span class="line">192.168.203.104 hadoop104</span><br><span class="line">192.168.203.105 hadoop105</span><br><span class="line">192.168.203.106 hadoop106</span><br><span class="line">192.168.203.107 hadoop107</span><br><span class="line">192.168.203.108 hadoop108</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改 windows 的主机映射文件 （hosts 文件）</span></span><br><span class="line">C:\Windows\System32\drivers\etc\hosts</span><br></pre></td></tr></table></figure>

<h3 id="安装-Hadoop"><a href="#安装-Hadoop" class="headerlink" title="安装 Hadoop"></a>安装 Hadoop</h3><h4 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h4><ol>
<li><p>卸载现有 JDK</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep -i java | xargs -n1 rpm -e --nodeps</span><br></pre></td></tr></table></figure>

<blockquote>
<p>rpm qa：查询所安装的所有rpm软件包</p>
<p>grep -i：忽略大小写</p>
<p>xargs -n1：表示每次只传递一个参数</p>
<p>rpm -e –nodeps：强制卸载软件</p>
</blockquote>
</li>
<li><p>用 XShell 传输 工具将 JDK 导入到 opt 目录下面的 software 文件夹下面</p>
</li>
<li><p>解压 JDK 到 /opt/module 目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt/software</span><br><span class="line">tar -zxvf jdk-8u212-linux-x64.tar.gz -C /opt/module/</span><br></pre></td></tr></table></figure></li>
<li><p>配置 JDK 环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 新建/etc/profile.d/my_env.sh文件</span></span><br><span class="line">sudo vim /etc/profile.d/my_env.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">JAVA_HOME</span></span><br><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_212</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">source</span>一下/etc/profile文件，让新的环境变量PATH生效</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li>
<li><p>测试 JDK 是否 安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="安装-Hadoop（以-hadoop102-为例）"><a href="#安装-Hadoop（以-hadoop102-为例）" class="headerlink" title="安装 Hadoop（以 hadoop102 为例）"></a>安装 Hadoop（以 hadoop102 为例）</h4><ol>
<li><p>用 XShell 文件传输工具将 hadoop-3.3.2.tar.gz 导入到opt目录下面的 software 文件夹下面</p>
</li>
<li><p>解压安装文件到/opt/module下面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt/software</span><br><span class="line">tar -zxvf hadoop-3.3.2.tar.gz -C /opt/module/</span><br></pre></td></tr></table></figure></li>
<li><p>将Hadoop添加到环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开/etc/profile.d/my_env.sh文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">HADOOP_HOME</span></span><br><span class="line">export HADOOP_HOME=/opt/module/hadoop-3.3.2</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">source</span>一下/etc/profile文件，让新的环境变量PATH生效</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li>
<li><p>测试是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop version</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Fully-Distributed-Mode"><a href="#Fully-Distributed-Mode" class="headerlink" title="Fully-Distributed Mode"></a>Fully-Distributed Mode</h3><h4 id="编写集群分发脚本xsync"><a href="#编写集群分发脚本xsync" class="headerlink" title="编写集群分发脚本xsync"></a>编写集群分发脚本xsync</h4><h5 id="scp-secure-copy-安全-拷贝"><a href="#scp-secure-copy-安全-拷贝" class="headerlink" title="scp (secure copy) 安全 拷贝"></a>scp (secure copy) 安全 拷贝</h5><ol>
<li><p>基本语法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r $pdir/$fname $user@$host:$pdir/$fname</span><br><span class="line">命令 递归 要拷贝的文件路径/名称 目的地用户@主机:目的地路径/名称</span><br></pre></td></tr></table></figure></li>
<li><p>案例实操</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在 hadoop103 上操作，将 hadoop102 中/opt/module 目录下所有目录拷贝到 hadoop104 上</span></span><br><span class="line">scp -r atguigu@hadoop102:/opt/module/* atguigu@hadoop104:/opt/module</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="rsync-远程-同步-工具"><a href="#rsync-远程-同步-工具" class="headerlink" title="rsync 远程 同步 工具"></a>rsync 远程 同步 工具</h5><p>rsync主要用于备份和镜像。具有速度快、避免复制相同内容和支持符号链接的优点。</p>
<p>rsync和scp区别：用rsync做文件的复制要比scp的速度快，rsync只对差异文件做更新。scp是把所有文件都复制过去。</p>
<ol>
<li><p>基本语法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync    -av       $pdir/$fname             $user@$host:$pdir/$fname</span><br><span class="line">命令   选项参数   要拷贝的文件路径/名称   目的地用户@主机:目的地路径/名称</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>归档拷贝</td>
</tr>
<tr>
<td>-v</td>
<td>显示复制过程</td>
</tr>
</tbody></table>
</li>
<li><p>案例实操</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除 hadoop103 中 /opt/module/hadoop-3.3.2/README.txt</span></span><br><span class="line">[eitan@hadoop103 hadoop-3.3.2]$ rm -rf README.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 同步 hadoop102 中的 /opt/module/hadoop-3.3.2 到 hadoop103</span></span><br><span class="line">[eitan@hadoop103 hadoop-3.3.2]$ rsync -av eitan@hadoop102:/opt/module/hadoop-3.3.2/ ../hadoop-3.3.2</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="xsync集群分发脚本"><a href="#xsync集群分发脚本" class="headerlink" title="xsync集群分发脚本"></a>xsync集群分发脚本</h5><ol>
<li><p>需求：循环复制文件到所有节点的相同目录下</p>
</li>
<li><p>需求分析：</p>
<ol>
<li>rsync 命令原始拷贝：rsync -av /opt/module atguigu@hadoop103:/opt/</li>
<li>期望脚本命令：xsync 要同步的文件名称</li>
<li>期望脚本在任何路径都能使用（脚本放在声明了全局环境变量的路径）</li>
</ol>
</li>
<li><p>脚本实现</p>
<ol>
<li><p>在 /home/eitan/bin 目录下创建 xsync 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ mkdir bin</span><br><span class="line">[eitan@hadoop102 ~]$ vim bin/xsync</span><br></pre></td></tr></table></figure></li>
<li><p>在文件中编写如下代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1.判断参数个数</span></span><br><span class="line">if [ $# -lt 1 ]</span><br><span class="line">then</span><br><span class="line">    echo Not Enough Arguement!</span><br><span class="line">    exit;</span><br><span class="line">fi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.遍历集群所有机器</span></span><br><span class="line">for host in hadoop102 hadoop103 hadoop104</span><br><span class="line">do</span><br><span class="line">    echo ================ $host ================</span><br><span class="line">    # 3.遍历所有参数，依次同步</span><br><span class="line">    for file in $@</span><br><span class="line">    do</span><br><span class="line">        # 4.判断文件是否存在</span><br><span class="line">        if [ -e $file ]</span><br><span class="line">        then</span><br><span class="line">            # 5.获取父目录</span><br><span class="line">            pdir=$(cd -P $(dirname $file); pwd)</span><br><span class="line">            # 6.获取当前文件的名称</span><br><span class="line">            fname=$(basename $file)</span><br><span class="line">            ssh $host &quot;mkdir -p $pdir&quot;</span><br><span class="line">            rsync -av $pdir/$fname $host:$pdir</span><br><span class="line">        else</span><br><span class="line">            echo $file does not exists!</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li>
<li><p>修改脚本 xsync 具有执行权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ chmod +x bin/xsync</span><br></pre></td></tr></table></figure></li>
<li><p>测试脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ ./bin/xsync ./bin/xsync</span><br></pre></td></tr></table></figure></li>
<li><p>添加环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ sudo vim /etc/profile.d/my_env.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">xsync</span></span><br><span class="line">export XSYNC_HOME=/home/eitan</span><br><span class="line">export PATH=$PATH:$XSYNC_HOME/bin</span><br><span class="line"></span><br><span class="line">[eitan@hadoop102 ~]$ source /etc/profile</span><br></pre></td></tr></table></figure></li>
<li><p>同步环境变量配置（root所有者）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ sudo ./bin/xsync /etc/profile.d/my_env.sh </span><br></pre></td></tr></table></figure>

<p>注意：如果用了 sudo，那么 xsync 一定要给它的路径补全。</p>
</li>
</ol>
</li>
</ol>
<h4 id="SSH无密登录配置"><a href="#SSH无密登录配置" class="headerlink" title="SSH无密登录配置"></a>SSH无密登录配置</h4><ol>
<li><p>生成公钥和私钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></li>
<li><p>将公钥拷贝到要免密登录的目标机器上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ ssh-copy-id hadoop102</span><br><span class="line">[eitan@hadoop102 ~]$ ssh-copy-id hadoop103</span><br><span class="line">[eitan@hadoop102 ~]$ ssh-copy-id hadoop104</span><br></pre></td></tr></table></figure></li>
<li><p>~/.ssh 的文件功能解释</p>
<table>
<thead>
<tr>
<th>文件</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>known_hosts</td>
<td>记录ssh访问过计算机的公钥（public key）</td>
</tr>
<tr>
<td>id_rsa</td>
<td>生成的私钥</td>
</tr>
<tr>
<td>id_rsa.pub</td>
<td>生成的公钥</td>
</tr>
<tr>
<td>authorized_keys</td>
<td>存放授权过的无密登录服务器公钥</td>
</tr>
</tbody></table>
</li>
</ol>
<h4 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h4><h5 id="集群规划部署"><a href="#集群规划部署" class="headerlink" title="集群规划部署"></a>集群规划部署</h5><ol>
<li>NameNode 和 SecondaryNameNode 不要安装在同一台服务器</li>
<li>ResourceManager 也很消耗内存，不要和 NameNode、SecondaryNameNode 配置在同一台机器上</li>
</ol>
<table>
<thead>
<tr>
<th></th>
<th>hadoop102</th>
<th>hadoop103</th>
<th>hadoop104</th>
</tr>
</thead>
<tbody><tr>
<td>HDFS</td>
<td>NameNode<br />DataNode</td>
<td><br />DataNode</td>
<td>SecondaryNameNode<br />DataNode</td>
</tr>
<tr>
<td>YARN</td>
<td><br />NodeManager</td>
<td>ResourceManager<br />NodeManager</td>
<td><br />NodeManager</td>
</tr>
</tbody></table>
<h5 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h5><p>Hadoop 配置文件分两类：默认配置文件和自定义配置文件，只有用户想修改某一默认配置值时，才需要修改自定义配置文件，更改相应属性值。</p>
<ol>
<li><p>默认配置文件</p>
<table>
<thead>
<tr>
<th>要获取的默认文件</th>
<th>文件存放在 Hadoop 的 jar 包中的位置</th>
</tr>
</thead>
<tbody><tr>
<td>[core-default.xml]</td>
<td>hadoop-common-3.3.2.jar/core-default.xml</td>
</tr>
<tr>
<td>[hdfs-default.xml]</td>
<td>hadoop-hdfs-3.3.2.jar/hdfs-default.xml</td>
</tr>
<tr>
<td>[yarn-default.xml]</td>
<td>hadoop-yarn-common-3.3.2.jar/yarn-default.xml</td>
</tr>
<tr>
<td>[mapred-default.xml]</td>
<td>hadoop-mapreduce-client-core-3.3.2.jar/mapred-default.xml</td>
</tr>
</tbody></table>
</li>
<li><p>自定义配置文件</p>
<p>core-site.xml 、hdfs-site.xml 、yarn-site.xml 、mapred-site.xml 四个配置文件存放在 $HADOOP_HOME/etc/hadoop 这个路径上，用户可以根据项目需求重新进行修改配置。</p>
</li>
<li><p>配置集群</p>
<p>核心配置文件 core-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定NameNode的地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop102:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定hadoop数据的存储目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/module/hadoop-3.3.2/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置HDFS网页登录使用的静态用户为eitan --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.http.staticuser.user<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>eitan<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>HDFS配置文件 hdfs-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nn web端访问地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop102:9870<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 2nn web端访问地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop104:9868<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>YARN配置文件 yarn-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定MR走shuffle --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定ResourceManager的地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop103<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 环境变量的继承 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.env-whitelist<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>MapReduce配置文件 mapred-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定MapReduce程序运行在Yarn上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>分发到其他节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 hadoop]$ xsync ../hadoop</span><br><span class="line">================ hadoop102 ================</span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">sent 1,007 bytes  received 18 bytes  683.33 bytes/sec</span><br><span class="line">total size is 111,939  speedup is 109.21</span><br><span class="line">================ hadoop103 ================</span><br><span class="line">sending incremental file list</span><br><span class="line">hadoop/</span><br><span class="line">hadoop/core-site.xml</span><br><span class="line">hadoop/hdfs-site.xml</span><br><span class="line">hadoop/mapred-site.xml</span><br><span class="line">hadoop/yarn-site.xml</span><br><span class="line"></span><br><span class="line">sent 3,628 bytes  received 139 bytes  7,534.00 bytes/sec</span><br><span class="line">total size is 111,939  speedup is 29.72</span><br><span class="line">================ hadoop104 ================</span><br><span class="line">sending incremental file list</span><br><span class="line">hadoop/</span><br><span class="line">hadoop/core-site.xml</span><br><span class="line">hadoop/hdfs-site.xml</span><br><span class="line">hadoop/mapred-site.xml</span><br><span class="line">hadoop/yarn-site.xml</span><br><span class="line"></span><br><span class="line">sent 3,628 bytes  received 139 bytes  7,534.00 bytes/sec</span><br><span class="line">total size is 111,939  speedup is 29.72</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="群起集群"><a href="#群起集群" class="headerlink" title="群起集群"></a>群起集群</h4><h5 id="配置-workers"><a href="#配置-workers" class="headerlink" title="配置 workers"></a>配置 workers</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ vim /opt/module/hadoop-3.3.2/etc/hadoop/workers</span><br><span class="line">hadoop102</span><br><span class="line">hadoop103</span><br><span class="line">hadoop104</span><br><span class="line"><span class="meta">#</span><span class="bash"> 同步到其他节点</span></span><br><span class="line">[eitan@hadoop102 ~]$ xsync /opt/module/hadoop-3.3.2/etc/hadoop/workers</span><br></pre></td></tr></table></figure>

<h5 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h5><ol>
<li><p>如果集群是第一次启动，需要在hadoop102节点格式化NameNode（注意：格式化NameNode，会产生新的集群id，导致NameNode和DataNode的集群id不一致，集群找不到已往数据。如果集群在运行过程中报错，需要重新格式化NameNode的话，一定要先停止namenode和datanode进程，并且要删除所有机器的data和logs目录，然后再进行格式化。）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hdfs namenode -format</span><br></pre></td></tr></table></figure></li>
<li><p>启动HDFS</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 hadoop-3.3.2]$ ./sbin/start-dfs.sh</span><br></pre></td></tr></table></figure></li>
<li><p>在配置了ResourceManager的节点（hadoop103）启动YARN</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop103 hadoop-3.3.2]$ ./sbin/start-yarn.sh</span><br></pre></td></tr></table></figure></li>
<li><p>Web端查看HDFS的NameNode</p>
<ol>
<li>浏览器中输入：<a href="http://hadoop102:9870/">http://hadoop102:9870</a></li>
<li>查看HDFS上存储的数据信息</li>
</ol>
</li>
<li><p>Web端查看YARN的ResourceManager</p>
<ol>
<li>浏览器中输入：<a href="http://hadoop103:8088/">http://hadoop103:8088</a></li>
<li>查看YARN上运行的Job信息</li>
</ol>
</li>
</ol>
<h5 id="集群基本测试"><a href="#集群基本测试" class="headerlink" title="集群基本测试"></a>集群基本测试</h5><ol>
<li><p>上传文件到集群</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">[eitan@hadoop102 ~]$ hadoop fs -mkdir /wcinput</span><br><span class="line"><span class="comment"># 上传文件</span></span><br><span class="line">[eitan@hadoop102 ~]$ hadoop fs -put .<span class="regexp">/documents/</span>txt<span class="regexp">/helloword.txt /</span>wcinput</span><br><span class="line">[eitan@hadoop102 ~]$ hadoop fs -put <span class="regexp">/opt/</span>software<span class="regexp">/jdk-8u212-linux-x64.tar.gz /</span></span><br></pre></td></tr></table></figure></li>
<li><p>上传文件后查看文件存放位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 subdir0]$ pwd</span><br><span class="line">/opt/module/hadoop-3.3.2/data/dfs/data/current/BP-274625420-192.168.203.102-1652060367534/current/finalized/subdir0/subdir0</span><br></pre></td></tr></table></figure></li>
<li><p>拼接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 subdir0]$ ll</span><br><span class="line">总用量 193800</span><br><span class="line">-rw-rw-r--. 1 eitan eitan   1888910 5月   9 10:32 blk_1073741825</span><br><span class="line">-rw-rw-r--. 1 eitan eitan     14767 5月   9 10:32 blk_1073741825_1001.meta</span><br><span class="line">-rw-rw-r--. 1 eitan eitan 134217728 5月   9 10:35 blk_1073741826</span><br><span class="line">-rw-rw-r--. 1 eitan eitan   1048583 5月   9 10:35 blk_1073741826_1002.meta</span><br><span class="line">-rw-rw-r--. 1 eitan eitan  60795424 5月   9 10:35 blk_1073741827</span><br><span class="line">-rw-rw-r--. 1 eitan eitan    474975 5月   9 10:35 blk_1073741827_1003.meta</span><br><span class="line">[eitan@hadoop102 subdir0]$ cat blk_1073741826 &gt;&gt; temp.gz.tar</span><br><span class="line">[eitan@hadoop102 subdir0]$ cat blk_1073741827 &gt;&gt; temp.gz.tar</span><br><span class="line">[eitan@hadoop102 subdir0]$ tar -zxf temp.gz.tar </span><br><span class="line">[eitan@hadoop102 subdir0]$ ll</span><br><span class="line">总用量 384248</span><br><span class="line">-rw-rw-r--. 1 eitan eitan   1888910 5月   9 10:32 blk_1073741825</span><br><span class="line">-rw-rw-r--. 1 eitan eitan     14767 5月   9 10:32 blk_1073741825_1001.meta</span><br><span class="line">-rw-rw-r--. 1 eitan eitan 134217728 5月   9 10:35 blk_1073741826</span><br><span class="line">-rw-rw-r--. 1 eitan eitan   1048583 5月   9 10:35 blk_1073741826_1002.meta</span><br><span class="line">-rw-rw-r--. 1 eitan eitan  60795424 5月   9 10:35 blk_1073741827</span><br><span class="line">-rw-rw-r--. 1 eitan eitan    474975 5月   9 10:35 blk_1073741827_1003.meta</span><br><span class="line">drwxr-xr-x. 7 eitan eitan      4096 4月   2 2019 jdk1.8.0_212</span><br><span class="line">-rw-rw-r--. 1 eitan eitan 195013152 5月   9 10:42 temp.gz.tar</span><br></pre></td></tr></table></figure></li>
<li><p>下载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop104 ~]$ hadoop fs -get /jdk-8u212-linux-x64.tar.gz ./</span><br></pre></td></tr></table></figure></li>
<li><p>执行 wordcount 程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop jar /opt/module/hadoop-3.3.2/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.2.jar wordcount /wcinput /wcoutput</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="配置历史服务器"><a href="#配置历史服务器" class="headerlink" title="配置历史服务器"></a>配置历史服务器</h4><ol>
<li><p>配置mapred-site.xml</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 hadoop-3.3.2]$ vim ./etc/hadoop/mapred-site.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 历史服务器端地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop102:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">&lt;!-- 历史服务器web端地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop102:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>分发配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 hadoop-3.3.2]$ xsync ./etc/hadoop/mapred-site.xml</span><br></pre></td></tr></table></figure></li>
<li><p>启动历史服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在hadoop103 重启 yarn</span></span><br><span class="line">[eitan@hadoop103 hadoop-3.3.2]$ ./sbin/stop-yarn.sh </span><br><span class="line">[eitan@hadoop103 hadoop-3.3.2]$ ./sbin/start-yarn.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在 hadoop102 启动历史服务器</span></span><br><span class="line">[eitan@hadoop102 hadoop-3.3.2]$ mapred --daemon start historyserver</span><br></pre></td></tr></table></figure></li>
<li><p>查看JobHistory</p>
<p><a href="http://hadoop102:19888/jobhistory">http://hadoop102:19888/jobhistory</a></p>
</li>
</ol>
<h4 id="配置日志的聚集"><a href="#配置日志的聚集" class="headerlink" title="配置日志的聚集"></a>配置日志的聚集</h4><ol>
<li><p>配置 yarn-site.xml</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 hadoop-3.3.2]$ vim ./etc/hadoop/yarn-site.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启日志聚集功能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置日志聚集服务器地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://hadoop102:19888/jobhistory/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置日志保留时间为7天 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>分发配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 hadoop-3.3.2]$ xsync ./etc/hadoop/yarn-site.xml</span><br></pre></td></tr></table></figure></li>
<li><p>重启NodeManager 、ResourceManager和HistoryServer</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在 hadoop102 上重启 historyserver</span></span><br><span class="line">[eitan@hadoop102 hadoop-3.3.2]$ mapred --daemon stop historyserver</span><br><span class="line">[eitan@hadoop102 hadoop-3.3.2]$ mapred --daemon start historyserver</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在 hadoop103 上重启 yarn</span></span><br><span class="line">[eitan@hadoop103 hadoop-3.3.2]$ ./sbin/stop-yarn.sh </span><br><span class="line">[eitan@hadoop103 hadoop-3.3.2]$ ./sbin/start-yarn.sh </span><br></pre></td></tr></table></figure></li>
<li><p>删除HDFS上已经存在的输出文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop fs -rm -r /wcoutput</span><br></pre></td></tr></table></figure></li>
<li><p>执行WordCount程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ hadoop jar /opt/module/hadoop-3.3.2/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.2.jar wordcount /wcinput /wcoutput</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="集群启动-停止方式总结"><a href="#集群启动-停止方式总结" class="headerlink" title="集群启动/停止方式总结"></a>集群启动/停止方式总结</h4><ol>
<li><p>各个模块分开启动/停止（配置ssh是前提）常用</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 整体启动/停止HDFS</span></span><br><span class="line"><span class="literal">start</span>-dfs.sh/<span class="literal">stop</span>-dfs.sh</span><br><span class="line"><span class="comment"># 整体启动/停止YARN</span></span><br><span class="line"><span class="literal">start</span>-yarn.sh/<span class="literal">stop</span>-yarn.sh</span><br></pre></td></tr></table></figure></li>
<li><p>各个服务组件逐一启动/停止</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分别启动/停止HDFS组件</span></span><br><span class="line">hdfs --daemon start<span class="regexp">/stop namenode/</span>datanode/secondarynamenode</span><br><span class="line"><span class="comment"># 分别启动/停止YARN</span></span><br><span class="line">yarn --daemon start<span class="regexp">/stop  resourcemanager/</span>nodemanager</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="编写Hadoop集群常用脚本"><a href="#编写Hadoop集群常用脚本" class="headerlink" title="编写Hadoop集群常用脚本"></a>编写Hadoop集群常用脚本</h4><ol>
<li><p>Hadoop集群启停脚本（包含HDFS，Yarn，Historyserver）：myhadoop.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ vim bin/myhadoop.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">if [ $# -lt 1 ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;No Args Input...&quot;</span><br><span class="line">    exit;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">    echo &quot;================ 启动 hadooop 集群 ================&quot;</span><br><span class="line">    echo &quot;---------------- 启动 hdfs ----------------&quot;</span><br><span class="line">    ssh hadoop102 &quot;/opt/module/hadoop-3.3.2/sbin/start-dfs.sh&quot;</span><br><span class="line">    echo &quot;---------------- 启动 yarn ----------------&quot;</span><br><span class="line">    ssh hadoop103 &quot;/opt/module/hadoop-3.3.2/sbin/start-yarn.sh&quot;</span><br><span class="line">    echo &quot;---------------- 启动 historyserver ----------------&quot;</span><br><span class="line">    ssh hadoop102 &quot;/opt/module/hadoop-3.3.2/bin/mapred --daemon start historyserver&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">    echo &quot;================ 关闭 hadooop 集群 ================&quot;</span><br><span class="line">    echo &quot;---------------- 关闭 historyserver ----------------&quot;</span><br><span class="line">    ssh hadoop102 &quot;/opt/module/hadoop-3.3.2/bin/mapred --daemon stop historyserver&quot;</span><br><span class="line">    echo &quot;---------------- 关闭 yarn ----------------&quot;</span><br><span class="line">    ssh hadoop103 &quot;/opt/module/hadoop-3.3.2/sbin/stop-yarn.sh&quot;</span><br><span class="line">    echo &quot;---------------- 关闭 hdfs ----------------&quot;</span><br><span class="line">    ssh hadoop102 &quot;/opt/module/hadoop-3.3.2/sbin/stop-dfs.sh&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">    echo &quot;Input Args Errot...&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">[eitan@hadoop102 ~]$ chmod +x bin/myhadoop.sh</span><br></pre></td></tr></table></figure></li>
<li><p>查看三台服务器Java进程脚本：jpsall</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ vim bin/jpsall.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for host in hadoop102 hadoop103 hadoop104</span><br><span class="line">do</span><br><span class="line">    echo &quot;================ $host ================&quot;</span><br><span class="line">    ssh $host jps</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">[eitan@hadoop102 ~]$ chmod +x bin/jpsall.sh </span><br></pre></td></tr></table></figure></li>
<li><p>分发/home/atguigu/bin目录，保证自定义脚本在三台机器上都可以使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ xsync ./bin/</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="时间服务器配置（必须root用户）"><a href="#时间服务器配置（必须root用户）" class="headerlink" title="时间服务器配置（必须root用户）"></a>时间服务器配置（必须root用户）</h4><ol>
<li><p>查看所有节点ntpd服务状态和开机自启动状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ sudo systemctl status ntpd</span><br><span class="line">[eitan@hadoop102 ~]$ sudo systemctl start ntpd</span><br><span class="line">[eitan@hadoop102 ~]$ sudo systemctl is-enabled ntpd</span><br></pre></td></tr></table></figure></li>
<li><p>修改hadoop102的ntp.conf配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ sudo vim /etc/ntp.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改1（授权192.168.203.0-192.168.203.255网段上的所有机器可以从这台机器上查询和同步时间）</span></span><br><span class="line">restrict 192.168.203.0 mask 255.255.255.0 nomodify notrap</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改2（集群在局域网中，不使用其他互联网上的时间）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta">#</span><span class="bash">server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta">#</span><span class="bash">server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta">#</span><span class="bash">server 3.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加3（当该节点丢失网络连接，依然可以采用本地时间作为时间服务器为集群中的其他节点提供时间同步）</span></span><br><span class="line">server 127.127.1.0</span><br><span class="line">fudge 127.127.1.0 stratum 10</span><br></pre></td></tr></table></figure></li>
<li><p>修改hadoop102的/etc/sysconfig/ntpd 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ sudo vim /etc/sysconfig/ntpd</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加内容如下（让硬件时间与系统时间一起同步）</span></span><br><span class="line">SYNC_HWCLOCK=yes</span><br></pre></td></tr></table></figure></li>
<li><p>重新启动ntpd服务并设置开机启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ sudo systemctl start ntpd</span><br><span class="line">[eitan@hadoop102 ~]$ sudo systemctl enable ntpd</span><br></pre></td></tr></table></figure></li>
<li><p>其他机器配置（必须root用户）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭所有节点上ntp服务和自启动</span></span><br><span class="line">[eitan@hadoop103 ~]$ sudo systemctl stop ntpd</span><br><span class="line">[eitan@hadoop103 ~]$ sudo systemctl disable ntpd</span><br><span class="line">[eitan@hadoop104 ~]$ sudo systemctl stop ntpd</span><br><span class="line">[eitan@hadoop104 ~]$ sudo systemctl disable ntpd</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在其他机器配置1分钟与时间服务器同步一次</span></span><br><span class="line">[eitan@hadoop103 ~]$ sudo crontab -e</span><br><span class="line">*/1 * * * * /usr/sbin/ntpdate hadoop102</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改任意机器时间</span></span><br><span class="line">[eitan@hadoop103 ~]$ sudo date -s &quot;2021-9-11 11:11:11&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1分钟后查看机器是否与时间服务器同步</span></span><br><span class="line">[eitan@hadoop103 ~]$ sudo date</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Big Data</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark（一）：环境搭建</title>
    <url>/2022/05/20/Spark%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>本文为学习笔记，对应视频教程来自<a href="https://www.bilibili.com/video/BV11A411L7CK">尚硅谷大数据Spark教程从入门到精通</a></p>
<h3 id="Spark快速上手"><a href="#Spark快速上手" class="headerlink" title="Spark快速上手"></a>Spark快速上手</h3><h4 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h4><h5 id="增加Scala插件"><a href="#增加Scala插件" class="headerlink" title="增加Scala插件"></a>增加Scala插件</h5><p>Spark 由 Scala 语言开发的，我这里使用的 Scala 编译版本为 2.12.15。请通过官网查看 Spark 和 Scala 对应的版本关系<a href="https://spark.apache.org/docs/latest/">Spark Documentation</a>。</p>
<h5 id="WordCount"><a href="#WordCount" class="headerlink" title="WordCount"></a>WordCount</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.bigdata.spark.core.wordcount</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark03_WordCount</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建 Spark 运行配置对象</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)</span><br><span class="line">    <span class="comment">// 创建 Spark 上下文环境对象（连接对象）</span></span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line">    <span class="comment">// 读取文件数据</span></span><br><span class="line">    <span class="keyword">val</span> lines: <span class="type">RDD</span>[<span class="type">String</span>] = sparkContext.textFile(<span class="string">&quot;data\\1.txt,data\\2.txt&quot;</span>)</span><br><span class="line">    <span class="comment">// 将文件中的数据进行分词</span></span><br><span class="line">    <span class="keyword">val</span> words: <span class="type">RDD</span>[<span class="type">String</span>] = lines.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> wordToOne: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = words.map(</span><br><span class="line">      word =&gt; (word, <span class="number">1</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Spark 框架提供了更多功能，可以将分组和聚合使用一个方法实现</span></span><br><span class="line">    <span class="comment">// reduceByKey: 相同Key的数据，可以对value进行reduce聚合</span></span><br><span class="line">    <span class="keyword">val</span> wordToCount: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordToOne.reduceByKey(_ + _)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将转换结果采集到控制台打印出来</span></span><br><span class="line">    <span class="keyword">val</span> array: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordToCount.collect()</span><br><span class="line">    array.foreach(println)</span><br><span class="line">    <span class="comment">//关闭 Spark 连接</span></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h5 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h5><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootCategory</span>=<span class="string">ERROR, console</span></span><br><span class="line"><span class="meta">log4j.appender.console</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.target</span>=<span class="string">System.err</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">%d&#123;yy/MM/dd HH:mm:ss&#125; %p %c&#123;1&#125;: %m%n</span></span><br><span class="line"><span class="comment"># Set the default spark-shell log level to ERROR. When running the spark-shell,the</span></span><br><span class="line"><span class="comment"># log level for this class is used to overwrite the root logger&#x27;s log level, so that</span></span><br><span class="line"><span class="comment"># the user can have different defaults for the shell and regular Spark apps.</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.spark.repl.Main</span>=<span class="string">ERROR</span></span><br><span class="line"><span class="comment"># Settings to quiet third party logs that are too verbose</span></span><br><span class="line"><span class="meta">log4j.logger.org.spark_project.jetty</span>=<span class="string">ERROR</span></span><br><span class="line"><span class="meta">log4j.logger.org.spark_project.jetty.util.component.AbstractLifeCycle</span>=<span class="string">ERROR</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.spark.repl.SparkIMain$exprTyper</span>=<span class="string">ERROR</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.spark.repl.SparkILoop$SparkILoopInterpreter</span>=<span class="string">ERROR</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.parquet</span>=<span class="string">ERROR</span></span><br><span class="line"><span class="meta">log4j.logger.parquet</span>=<span class="string">ERROR</span></span><br><span class="line"><span class="comment"># SPARK-9183: Settings to avoid annoying messages when looking up nonexistent</span></span><br><span class="line"><span class="comment"># UDFs in SparkSQL with Hive support</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.hadoop.hive.metastore.RetryingHMSHandler</span>=<span class="string">FATAL</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.hadoop.hive.ql.exec.FunctionRegistry</span>=<span class="string">ERROR</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>为了不在控制台打印日志。</p>
</blockquote>
<h3 id="Spark运行环境"><a href="#Spark运行环境" class="headerlink" title="Spark运行环境"></a>Spark运行环境</h3><h4 id="Local模式"><a href="#Local模式" class="headerlink" title="Local模式"></a>Local模式</h4><p>所谓的 Local 模式，就是不需要其他任何节点资源就可以在本地执行 Spark 代码的环境，一般用于教学，调试，演示。</p>
<h5 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h5><p>参考文章：<a href="https://eitan-blog.github.io/2022/05/08/Hadoop%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/">Hadoop(一)：集群搭建</a></p>
<h5 id="下载压缩文件并解压"><a href="#下载压缩文件并解压" class="headerlink" title="下载压缩文件并解压"></a>下载压缩文件并解压</h5><p>下载地址：<a href="https://spark.apache.org/downloads.html">https://spark.apache.org/downloads.html</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过 xftp 上传到指定文件夹下并解压</span></span><br><span class="line">[root@CentOS7 software]# tar -zxf spark-3.2.1-bin-hadoop3.2.tgz -C /opt/module/</span><br><span class="line">[eitan@SparkOrigin module]$ mv spark-3.2.1-bin-hadoop3.2/ spark-local-3.2.1</span><br></pre></td></tr></table></figure>

<h5 id="启动Local环境"><a href="#启动Local环境" class="headerlink" title="启动Local环境"></a>启动Local环境</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@SparkOrigin module]$ ./spark-local-3.2.1/bin/spark-shell</span><br></pre></td></tr></table></figure>

<blockquote>
<p>WebUI监控页面：<a href="http://192.168.203.150:4040/">http://192.168.203.150:4040/</a></p>
</blockquote>
<h5 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Using Spark&#x27;s default log4j profile: org/apache/spark/log4j-defaults.properties</span><br><span class="line">Setting default log level to &quot;WARN&quot;.</span><br><span class="line">To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).</span><br><span class="line">22/05/20 16:59:20 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class="line">Spark context Web UI available at http://SparkOrigin:4040</span><br><span class="line">Spark context available as &#x27;sc&#x27; (master = local[*], app id = local-1653037162181).</span><br><span class="line">Spark session available as &#x27;spark&#x27;.</span><br><span class="line">Welcome to</span><br><span class="line">      ____              __</span><br><span class="line">     / __/__  ___ _____/ /__</span><br><span class="line">    _\ \/ _ \/ _ `/ __/  &#x27;_/</span><br><span class="line">   /___/ .__/\_,_/_/ /_/\_\   version 3.2.1</span><br><span class="line">      /_/</span><br><span class="line">         </span><br><span class="line">Using Scala version 2.12.15 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_212)</span><br><span class="line">Type in expressions to have them evaluated.</span><br><span class="line">Type :help for more information.</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> sc.textFile(<span class="string">&quot;spark-local-3.2.1/data/word.txt&quot;</span>).flatMap(_.split(<span class="string">&quot; &quot;</span>)).map((_,1)).reduceByKey(_+_).collect</span></span><br><span class="line">res0: Array[(String, Int)] = Array((Spark,1), (Hello,3), (World,1), (Scala,1))  </span><br></pre></td></tr></table></figure>

<h5 id="提交应用"><a href="#提交应用" class="headerlink" title="提交应用"></a>提交应用</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/spark-submit \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">--master local[2] \</span><br><span class="line">./examples/jars/spark-examples_2.12-3.2.1.jar \</span><br><span class="line">10</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>–class 表示要执行程序的主类，此处可以更换为咱们自己写的应用程序</li>
<li>–master local[2] 部署模式，默认为本地模式，数字表示分配的虚拟 CPU 核数量</li>
<li>spark-examples_2.12-3.0.0.jar 运行的应用类所在的 jar 包，实际使用时，可以设定为咱们自己打的 jar 包</li>
<li>数字 10 表示程序的入口参数，用于设定当前应用的任务数量</li>
</ul>
</blockquote>
<h5 id="提交参数说明"><a href="#提交参数说明" class="headerlink" title="提交参数说明"></a>提交参数说明</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/spark-submit \</span><br><span class="line">--class &lt;main-class&gt;</span><br><span class="line">--master &lt;master-url&gt; \</span><br><span class="line">... # other options</span><br><span class="line">&lt;application-jar&gt; \</span><br><span class="line">[application-arguments]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>解释</th>
<th>可选值举例</th>
</tr>
</thead>
<tbody><tr>
<td>–class</td>
<td>Spark 程序中包含主函数的类</td>
<td></td>
</tr>
<tr>
<td>–master</td>
<td>Spark 程序运行的模式(环境)</td>
<td>模式：local[*]、spark://linux1:7077、Yarn</td>
</tr>
<tr>
<td>–executor-memory 1G</td>
<td>指定每个 executor 可用内存为 1G</td>
<td>符合集群内存配置即可，具体情况具体分析。</td>
</tr>
<tr>
<td>–total-executor-cores 2</td>
<td>指定所有executor使用的cpu核数为 2 个</td>
<td></td>
</tr>
<tr>
<td>–executor-cores</td>
<td>指定每个executor使用的cpu核数</td>
<td></td>
</tr>
<tr>
<td>application-jar</td>
<td>打包好的应用 jar，包含依赖。这个 URL 在集群中全局可见。<br />比如 hdfs:// 共享存储系统，如果是file:// path，那么所有的节点的path 都包含同样的 jar</td>
<td></td>
</tr>
<tr>
<td>application-arguments</td>
<td>传给 main()方法的参数</td>
<td></td>
</tr>
</tbody></table>
<h4 id="Standalone模式"><a href="#Standalone模式" class="headerlink" title="Standalone模式"></a>Standalone模式</h4><p>local 本地模式毕竟只是用来进行练习演示的，真实工作中还是要将应用提交到对应的集群中去执行，这里我们来看看只使用 Spark 自身节点运行的集群模式，也就是我们所谓的独立部署（Standalone）模式。Spark 的 Standalone 模式体现了经典的 master-slave 模式。</p>
<h5 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h5><table>
<thead>
<tr>
<th>spark151</th>
<th>spark152</th>
<th>spark153</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Master</strong><br />Worker</td>
<td>Worker</td>
<td>Worker</td>
</tr>
</tbody></table>
<h5 id="解压缩文件"><a href="#解压缩文件" class="headerlink" title="解压缩文件"></a>解压缩文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@spark151 ~]$ cd /opt/software/</span><br><span class="line">[eitan@spark151 software]$ tar -zxf spark-3.2.1-bin-hadoop3.2.tgz -C /opt/module/</span><br><span class="line">[eitan@spark151 software]$ cd /opt/module/</span><br><span class="line">[eitan@spark151 module]$ mv spark-3.2.1-bin-hadoop3.2/ spark-standalone-3.2.1</span><br></pre></td></tr></table></figure>

<h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.进入解压缩后路径的 conf 目录，复制 workers.template 文件名为 workers</span></span><br><span class="line">[eitan@spark151 module]$ cd spark-standalone-3.2.1/conf/</span><br><span class="line">[eitan@spark151 conf]$ cp workers.template workers</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.修改 workers 文件，添加 worker 节点</span></span><br><span class="line">[eitan@spark151 conf]$ vim workers</span><br><span class="line"><span class="meta">#</span><span class="bash"> A Spark Worker will be started on each of the machines listed below.</span></span><br><span class="line">spark151</span><br><span class="line">spark152</span><br><span class="line">spark153</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.复制 spark-env.sh.template 文件名为 spark-env.sh</span></span><br><span class="line">[eitan@spark151 conf]$ cp spark-env.sh.template spark-env.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.修改 spark-env.sh 文件，添加 JAVA_HOME 环境变量和集群对应的 master 节点</span></span><br><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_212</span><br><span class="line">SPARK_MASTER_HOST=spark151</span><br><span class="line">SPARK_MASTER_PORT=7077</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.分发 spark-standalone-3.2.1 目录</span></span><br><span class="line">[eitan@spark151 ~]$ xsync /opt/module/spark-standalone-3.2.1/</span><br></pre></td></tr></table></figure>

<h5 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.执行脚本命令</span></span><br><span class="line">[eitan@spark151 spark-standalone-3.2.1]$ ./sbin/start-all.sh </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.查看三台服务器运行进程</span></span><br><span class="line">[eitan@spark151 spark-standalone-3.2.1]$ xcall jps</span><br><span class="line">================ spark151 ================</span><br><span class="line">8089 Worker</span><br><span class="line">8014 Master</span><br><span class="line">8142 Jps</span><br><span class="line">================ spark152 ================</span><br><span class="line">7958 Worker</span><br><span class="line">8007 Jps</span><br><span class="line">================ spark153 ================</span><br><span class="line">7944 Worker</span><br><span class="line">7993 Jps</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.查看 Master 资源监控 Web UI 界面: http://192.168.203.151:8080/</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. 提交应用</span></span><br><span class="line">bin/spark-submit \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">--master spark://spark151:7077 \</span><br><span class="line">./examples/jars/spark-examples_2.12-3.2.1.jar \</span><br><span class="line">10</span><br></pre></td></tr></table></figure>

<h5 id="配置历史服务"><a href="#配置历史服务" class="headerlink" title="配置历史服务"></a>配置历史服务</h5><p>首先要有Hadoop的集群环境，请参考<a href="https://eitan-blog.github.io/2022/05/08/Hadoop%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/">Hadoop(一)：集群搭建</a></p>
<h6 id="hadoop配置"><a href="#hadoop配置" class="headerlink" title="hadoop配置"></a>hadoop配置</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- core-site.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定NameNode的地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://spark152:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定hadoop数据的存储目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/module/hadoop-3.3.2/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置HDFS网页登录使用的静态用户为eitan --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.http.staticuser.user<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>eitan<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- hdfs-site.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nn web端访问地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>spark152:9870<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 2nn web端访问地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>spark153:9868<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@spark151 hadoop]$ cat workers </span><br><span class="line">spark151</span><br><span class="line">spark152</span><br><span class="line">spark153</span><br></pre></td></tr></table></figure>

<h6 id="spark配置"><a href="#spark配置" class="headerlink" title="spark配置"></a>spark配置</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.复制 spark-defaults.conf.template 文件名为 spark-defaults.conf</span></span><br><span class="line">[eitan@spark151 spark-standalone-3.2.1]$ cp conf/spark-defaults.conf.template conf/spark-defaults.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.修改 spark-default.conf 文件，配置日志存储路径</span></span><br><span class="line">[eitan@spark151 spark-standalone-3.2.1]$ vim conf/spark-defaults.conf</span><br><span class="line">spark.eventLog.enabled          true    </span><br><span class="line">spark.eventLog.dir              hdfs://spark152:8020/directory</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.需要启动 hadoop 集群，HDFS 上的 directory 目录需要提前存在</span></span><br><span class="line">[eitan@spark151 hadoop-3.3.2]$ ./sbin/start-dfs.sh</span><br><span class="line">[eitan@spark151 ~]$ hadoop fs -mkdir /directory</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.修改 spark-env.sh 文件, 添加日志配置</span></span><br><span class="line">[eitan@spark151 spark-standalone-3.2.1]$ vim conf/spark-env.sh</span><br><span class="line">export SPARK_HISTORY_OPTS=&quot;</span><br><span class="line">-Dspark.history.ui.port=18080 </span><br><span class="line">-Dspark.history.fs.logDirectory=hdfs://spark152:8020/directory </span><br><span class="line">-Dspark.history.retainedApplications=30&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数 1 含义：WEB UI 访问的端口号为 18080</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数 2 含义：指定历史服务器日志存储路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数 3 含义：指定保存 Application 历史记录的个数，如果超过这个值，旧的应用程序信息将被删除，这个是内存中的应用数，而不是页面上显示的应用数</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.重新启动集群和历史服务</span></span><br><span class="line">[eitan@spark151 ~]$ xsync /opt/module/spark-standalone-3.2.1/conf/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6.重新启动集群和历史服务</span></span><br><span class="line">[eitan@spark151 spark-standalone-3.2.1]$ ./sbin/start-all.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 7.重新执行任务</span></span><br><span class="line">bin/spark-submit \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">--master spark://spark151:7077 \</span><br><span class="line">./examples/jars/spark-examples_2.12-3.2.1.jar \</span><br><span class="line">10</span><br></pre></td></tr></table></figure>

<h4 id="Standalone配置高可用（HA）"><a href="#Standalone配置高可用（HA）" class="headerlink" title="Standalone配置高可用（HA）"></a>Standalone配置高可用（HA）</h4><h5 id="集群规划-1"><a href="#集群规划-1" class="headerlink" title="集群规划"></a>集群规划</h5><table>
<thead>
<tr>
<th>spark151</th>
<th>spark152</th>
<th>spark153</th>
</tr>
</thead>
<tbody><tr>
<td>Master<br />Zookeeper<br />Worker</td>
<td>Zookeeper<br />Worker</td>
<td>Master<br />Zookeeper<br />Worker</td>
</tr>
</tbody></table>
<h5 id="解压安装Zookeeper"><a href="#解压安装Zookeeper" class="headerlink" title="解压安装Zookeeper"></a>解压安装Zookeeper</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@spark151 software]$ tar -zxf apache-zookeeper-3.7.1-bin.tar.gz -C /opt/module/</span><br><span class="line">[eitan@spark151 module]$ mv apache-zookeeper-3.7.1-bin/ apache-zookeeper-3.7.1/</span><br></pre></td></tr></table></figure>

<h5 id="配置Zookeeper"><a href="#配置Zookeeper" class="headerlink" title="配置Zookeeper"></a>配置Zookeeper</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.在/opt/module/apache-zookeeper-3.7.1/这个目录下创建 zkData</span></span><br><span class="line">[eitan@spark151 apache-zookeeper-3.7.1]$ mkdir zkData</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.在/opt/module/apache-zookeeper-3.7.1/zkData 目录下创建一个 myid 的文件</span></span><br><span class="line">[eitan@spark151 apache-zookeeper-3.7.1]$ vim zkData/myid</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在文件中添加与 server 对应的编号（注意：上下不要有空行，左右不要有空格）</span></span><br><span class="line">1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.拷贝配置好的 zookeeper 到其他机器上并分别在 spark152、spark153 上修改 myid 文件中内容为 2、3</span></span><br><span class="line">[eitan@spark151 module]$ xsync apache-zookeeper-3.7.1/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.复制/opt/module/apache-zookeeper-3.7.1/conf 这个目录下的 zoo_sample.cfg 为 zoo.cfg</span></span><br><span class="line">[eitan@spark151 apache-zookeeper-3.7.1]$ cp conf/zoo_sample.cfg conf/zoo.cfg</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.修改 zoo.cfg 文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改</span></span><br><span class="line">dataDir=/opt/module/apache-zookeeper-3.7.1/zkData</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新增</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster</span></span><br><span class="line">server.1=spark151:2888:3888</span><br><span class="line">server.2=spark152:2888:3888</span><br><span class="line">server.3=spark153:2888:3888</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6.同步 zoo.cfg 配置文件</span></span><br><span class="line">[eitan@spark151 apache-zookeeper-3.7.1]$ xsync conf/zoo.cfg</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置参数解读：</p>
<p>​    server.A=B:C:D</p>
<ul>
<li><strong>A</strong> 是一个数字，表示这个是第几号服务器。集群模式下配置一个文件 myid，这个文件在 dataDir 目录下，这个文件里面有一个数据就是 A 的值，Zookeeper 启动时读取此文件，拿到里面的数据与 zoo.cfg 里面的配置信息比较从而判断到底是哪个server；</li>
<li><strong>B</strong> 是这个服务器的地址；</li>
<li><strong>C</strong> 是这个服务器 Follower 与集群中的 Leader 服务器交换信息的端口；</li>
<li><strong>D</strong> 是万一集群中的 Leader 服务器挂了，需要一个端口来重新进行选举，选出一个新的 Leader，而这个端口就是用来执行选举时服务器相互通信的端口。</li>
</ul>
</blockquote>
<h5 id="Zookeeper集群启动停止脚本"><a href="#Zookeeper集群启动停止脚本" class="headerlink" title="Zookeeper集群启动停止脚本"></a>Zookeeper集群启动停止脚本</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.编写脚本</span></span><br><span class="line">[eitan@spark151 ~]$ vim bin/zk.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)&#123;</span><br><span class="line">    for host in spark151 spark152 spark153</span><br><span class="line">    do</span><br><span class="line">        echo ---------- zookeeper $host 启动 ------------</span><br><span class="line">        ssh $host &quot;/opt/module/apache-zookeeper-3.7.1/bin/zkServer.sh start&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">&quot;stop&quot;)&#123;</span><br><span class="line">    for host in spark151 spark152 spark153</span><br><span class="line">    do</span><br><span class="line">        echo ---------- zookeeper $host 停止 ------------</span><br><span class="line">        ssh $host &quot;/opt/module/apache-zookeeper-3.7.1/bin/zkServer.sh stop&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">&quot;status&quot;)&#123;</span><br><span class="line">    for host in spark151 spark152 spark153</span><br><span class="line">    do</span><br><span class="line">        echo ---------- zookeeper $host 状态 ------------</span><br><span class="line">        ssh $host &quot;/opt/module/apache-zookeeper-3.7.1/bin/zkServer.sh status&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">esac</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.增加脚本执行权限</span></span><br><span class="line">[eitan@spark151 ~]$ chmod u+x bin/zk.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.通过脚本启动集群</span></span><br><span class="line">[eitan@spark151 ~]$ zk.sh start</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.通过脚本查看集群状态</span></span><br><span class="line">[eitan@spark151 ~]$ zk.sh status</span><br><span class="line">---------- zookeeper spark151 状态 ------------</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/module/apache-zookeeper-3.7.1/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: false.</span><br><span class="line">Mode: follower</span><br><span class="line">---------- zookeeper spark152 状态 ------------</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/module/apache-zookeeper-3.7.1/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: false.</span><br><span class="line">Mode: leader</span><br><span class="line">---------- zookeeper spark153 状态 ------------</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/module/apache-zookeeper-3.7.1/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: false.</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure>

<h5 id="修改-spark-env-sh-文件添加如下配置"><a href="#修改-spark-env-sh-文件添加如下配置" class="headerlink" title="修改 spark-env.sh 文件添加如下配置"></a>修改 spark-env.sh 文件添加如下配置</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@spark151 ~]$ vim /opt/module/spark-standalone-3.2.1/conf/spark-env.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注释以下内容</span></span><br><span class="line"><span class="meta">#</span><span class="bash">SPARK_MASTER_HOST=spark151</span></span><br><span class="line"><span class="meta">#</span><span class="bash">SPARK_MASTER_PORT=7077</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加如下内容</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Master 监控页面默认访问端口为 8080，但是可能会和 Zookeeper 冲突，所以改成 8989</span></span><br><span class="line">SPARK_MASTER_WEBUI_PORT=8989</span><br><span class="line"></span><br><span class="line">export SPARK_DAEMON_JAVA_OPTS=&quot;</span><br><span class="line">-Dspark.deploy.recoveryMode=ZOOKEEPER </span><br><span class="line">-Dspark.deploy.zookeeper.url=spark151,spark152,spark153</span><br><span class="line">-Dspark.deploy.zookeeper.dir=/spark&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 分发配置文件</span></span><br><span class="line">[eitan@spark151 ~]$ xsync /opt/module/spark-standalone-3.2.1/conf/</span><br></pre></td></tr></table></figure>

<h5 id="启动集群-1"><a href="#启动集群-1" class="headerlink" title="启动集群"></a>启动集群</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.在 spark152 上运行脚本启动集群</span></span><br><span class="line">[eitan@spark152 apache-zookeeper-3.7.1]$ /opt/module/spark-standalone-3.2.1/sbin/start-all.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.发现 Master 在 spark152 上</span></span><br><span class="line">[eitan@spark152 apache-zookeeper-3.7.1]$ xcall jps</span><br><span class="line">================ spark151 ================</span><br><span class="line">20006 Worker</span><br><span class="line">17798 DataNode</span><br><span class="line">19752 QuorumPeerMain</span><br><span class="line">20106 Jps</span><br><span class="line">================ spark152 ================</span><br><span class="line">14306 Master</span><br><span class="line">13443 NameNode</span><br><span class="line">14499 Jps</span><br><span class="line">14103 QuorumPeerMain</span><br><span class="line">13531 DataNode</span><br><span class="line">14399 Worker</span><br><span class="line">================ spark153 ================</span><br><span class="line">14371 QuorumPeerMain</span><br><span class="line">14709 Worker</span><br><span class="line">14789 Jps</span><br><span class="line">13560 SecondaryNameNode</span><br><span class="line">13450 DataNode</span><br></pre></td></tr></table></figure>

<h5 id="在-spark151-上启动备用-Master"><a href="#在-spark151-上启动备用-Master" class="headerlink" title="在 spark151 上启动备用 Master"></a>在 spark151 上启动备用 Master</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@spark151 ~]$ /opt/module/spark-standalone-3.2.1/sbin/start-master.sh</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220521170721.png" alt="image-20220521170716726"></p>
<h5 id="提交应用到高可用集群"><a href="#提交应用到高可用集群" class="headerlink" title="提交应用到高可用集群"></a>提交应用到高可用集群</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/spark-submit \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">--master spark://spark151:7077,spark152:7077 \</span><br><span class="line">./examples/jars/spark-examples_2.12-3.2.1.jar \</span><br><span class="line">10</span><br></pre></td></tr></table></figure>

<h5 id="停止-spark152-的-Master-资源监控进程"><a href="#停止-spark152-的-Master-资源监控进程" class="headerlink" title="停止 spark152 的 Master 资源监控进程"></a>停止 spark152 的 Master 资源监控进程</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@spark152 ~]$ jps</span><br><span class="line">14306 Master</span><br><span class="line">13443 NameNode</span><br><span class="line">14644 Jps</span><br><span class="line">14103 QuorumPeerMain</span><br><span class="line">13531 DataNode</span><br><span class="line">14399 Worker</span><br><span class="line">[eitan@spark152 ~]$ kill -9 14306</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220521172629.png" alt="image-20220521172625793"></p>
<h4 id="Spark-On-Yarn模式"><a href="#Spark-On-Yarn模式" class="headerlink" title="Spark-On-Yarn模式"></a>Spark-On-Yarn模式</h4><p>独立部署（Standalone）模式由 Spark 自身提供计算资源，无需其他框架提供资源。这种方式降低了和其他第三方资源框架的耦合性，独立性非常强。但是你也要记住，Spark 主要是计算框架，而不是资源调度框架，所以本身提供的资源调度并不是它的强项，所以还是和其他专业的资源调度框架集成会更靠谱一些。</p>
<h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><ol>
<li>SparkOnYarn 的本质是把 Spark 任务的 class 字节码文件打成 jar 包，上传到 Yarn 集群的 JVM 中运行；</li>
<li>Spark 集群的相关角色（Master，Worker）也会在 Yarn 的 JVM 中运行；</li>
<li>SparkOnYarn需要：<ol>
<li>修改一些配置，使支持 SparkOnYarn</li>
<li>Spark 程序打成的 jar 包，如示例中的 jar 包 spark-examples_2.12-3.2.1.jar，也可以使用我们自己开发的程序达成的 jar 包</li>
<li>Spark 任务提交工具：bin/spark-submit</li>
<li>Spark 本身依赖的 jars：提交任务时会被上传到 Yarn/HDFS，可手动提前上传</li>
</ol>
</li>
<li>SparkOnYarn 不需要 Spark 集群，只需要单机版 spark 即可；</li>
<li>SparkOnYarn 根据 Driver 运行在哪里分为两种模式：client 模式和 cluster 模式。</li>
</ol>
<h5 id="解压缩文件-1"><a href="#解压缩文件-1" class="headerlink" title="解压缩文件"></a>解压缩文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@spark151 software]$ tar -zxf spark-3.2.1-bin-hadoop3.2.tgz -C /opt/module/</span><br><span class="line">[eitan@spark151 software]$ cd /opt/module/</span><br><span class="line">[eitan@spark151 module]$ mv spark-3.2.1-bin-hadoop3.2/ spark-yarn-3.2.1</span><br></pre></td></tr></table></figure>

<h5 id="配置yarn-site-xml"><a href="#配置yarn-site-xml" class="headerlink" title="配置yarn-site.xml"></a>配置yarn-site.xml</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@spark151 module]$ vim hadoop-3.3.2/etc/hadoop/yarn-site.xml </span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置yarn主节点的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>spark151<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置yarn集群的内存分配方案 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.memory-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>20480<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.minimum-allocation-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>2048<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-pmem-ratio<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启日志聚合功能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置聚合日志在hdfs上的保存时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置yarn历史服务器地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://spark153:19888/jobhistory/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 关闭yarn内存检查 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.pmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 分发给其他节点</span></span><br><span class="line">[eitan@spark151 module]$ xsync hadoop-3.3.2/etc/hadoop/yarn-site.xml </span><br></pre></td></tr></table></figure>

<h5 id="配置Spark的历史服务器和Yarn的整合"><a href="#配置Spark的历史服务器和Yarn的整合" class="headerlink" title="配置Spark的历史服务器和Yarn的整合"></a>配置Spark的历史服务器和Yarn的整合</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.修改spark-defaults.conf</span></span><br><span class="line">[eitan@spark151 module]$ cp .conf/spark-defaults.conf.template  ./conf/spark-defaults.conf</span><br><span class="line">[eitan@spark151 spark-yarn-3.2.1]$ vim conf/spark-defaults.conf</span><br><span class="line">spark.eventLog.enabled                  true</span><br><span class="line">spark.eventLog.dir                      hdfs://spark152:8020/directory</span><br><span class="line">spark.yarn.historyServer.address        spark151:18080</span><br><span class="line">spark.history.ui.port                   18080</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.修改spark-env.sh</span></span><br><span class="line">[eitan@spark151 spark-yarn-3.2.1]$ cp conf/spark-env.sh.template conf/spark-env.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> spark-standalone</span></span><br><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_212</span><br><span class="line">YARN_CONF_DIR=/opt/module/hadoop-3.3.2/etc/hadoop</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> history-server</span></span><br><span class="line">export SPARK_HISTORY_OPTS=&quot;</span><br><span class="line">-Dspark.history.ui.port=18080 </span><br><span class="line">-Dspark.history.fs.logDirectory=hdfs://spark152:8020/directory </span><br><span class="line">-Dspark.history.retainedApplications=30&quot;</span><br></pre></td></tr></table></figure>

<h5 id="修改日志级别"><a href="#修改日志级别" class="headerlink" title="修改日志级别"></a>修改日志级别</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@spark151 spark-yarn-3.2.1]$ cp conf/log4j.properties.template conf/log4j.properties</span><br><span class="line">[eitan@spark151 spark-yarn-3.2.1]$ vim conf/log4j.properties</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改日志级别为 WARN</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set everything to be logged to the console</span></span><br><span class="line">log4j.rootCategory=WARN, console</span><br></pre></td></tr></table></figure>

<h5 id="配置依赖的-Spark-的jar包"><a href="#配置依赖的-Spark-的jar包" class="headerlink" title="配置依赖的 Spark 的jar包"></a>配置依赖的 Spark 的jar包</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.在HDFS上创建存储spark相关jar包的目录</span></span><br><span class="line">[eitan@spark151 ~]$ hadoop fs -mkdir -p /spark/jars</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.上传<span class="variable">$SPARK_HOME</span>/jars所有jar包到HDFS</span></span><br><span class="line">[eitan@spark151 ~]$ hadoop fs -put /opt/module/spark-yarn-3.2.1/jars/* /spark/jars</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.修改spark-defaults.conf</span></span><br><span class="line">[eitan@spark151 spark-yarn-3.2.1]$ vim conf/spark-defaults.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 预上传所需要的jar包</span></span><br><span class="line">spark.yarn.jars                         hdfs://spark152:8020/spark/jars/*</span><br></pre></td></tr></table></figure>

<h5 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@spark151 ~]$ /opt/module/hadoop-3.3.2/sbin/start-dfs.sh</span><br><span class="line">[eitan@spark151 ~]$ /opt/module/hadoop-3.3.2/sbin/start-yarn.sh</span><br></pre></td></tr></table></figure>

<h5 id="提交应用-1"><a href="#提交应用-1" class="headerlink" title="提交应用"></a>提交应用</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/spark-submit \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">--master yarn \</span><br><span class="line">--deploy-mode cluster \</span><br><span class="line">./examples/jars/spark-examples_2.12-3.2.1.jar \</span><br><span class="line">10</span><br></pre></td></tr></table></figure>

<blockquote>
<p>进入 <a href="http://192.168.203.151:8088/">http://192.168.203.151:8088/</a> 后无法点入每个 Application 的 History</p>
</blockquote>
<h5 id="启动-Spark-的历史服务器"><a href="#启动-Spark-的历史服务器" class="headerlink" title="启动 Spark 的历史服务器"></a>启动 Spark 的历史服务器</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@spark151 spark-yarn-3.2.1]$ sbin/start-history-server.sh</span><br></pre></td></tr></table></figure>

<blockquote>
<p>开启 Spark 的历史服务器，可以进入每个 Application 的 History，但是却看不了对应任务的 stdout 和 stderr</p>
</blockquote>
<h5 id="配置-MapReduce-的历史服务器"><a href="#配置-MapReduce-的历史服务器" class="headerlink" title="配置 MapReduce 的历史服务器"></a>配置 MapReduce 的历史服务器</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@spark151 hadoop-3.3.2]$ vim ./etc/hadoop/mapred-site.xml</span><br><span class="line">    &lt;!-- 指定MapReduce程序运行在Yarn上 --&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 历史服务器端地址 --&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;spark153:10020&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 历史服务器web端地址 --&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;spark153:19888&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br></pre></td></tr></table></figure>

<h5 id="重启所有服务"><a href="#重启所有服务" class="headerlink" title="重启所有服务"></a>重启所有服务</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@spark151 module]$ ./hadoop-3.3.2/sbin/start-dfs.sh</span><br><span class="line">[eitan@spark151 module]$ ./hadoop-3.3.2/sbin/start-yarn.sh </span><br><span class="line">[eitan@spark151 module]$ ./spark-yarn-3.2.1/sbin/start-history-server.sh</span><br><span class="line">[eitan@spark153 ~]$ mapred --daemon start historyserver</span><br></pre></td></tr></table></figure>

<blockquote>
<p>所有功能均可正常使用</p>
</blockquote>
<h4 id="部署模式对比"><a href="#部署模式对比" class="headerlink" title="部署模式对比"></a>部署模式对比</h4><table>
<thead>
<tr>
<th>模式</th>
<th>Spark 安装机器数</th>
<th>需启动的进程</th>
<th>所属者</th>
<th>应用场景</th>
</tr>
</thead>
<tbody><tr>
<td>Local</td>
<td>1</td>
<td>无</td>
<td>Spark</td>
<td>测试</td>
</tr>
<tr>
<td>Standalone</td>
<td>3</td>
<td>Master及Worker</td>
<td>Spark</td>
<td>单独部署</td>
</tr>
<tr>
<td>Yarn</td>
<td>1</td>
<td>Yarn及HDFS</td>
<td>Hadoop</td>
<td>混合部署</td>
</tr>
</tbody></table>
<h4 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h4><ul>
<li>Spark 查看当前 Spark-shell 运行任务情况端口号：4040（计算）</li>
<li>Spark Master 内部通信服务端口号：7077</li>
<li>Standalone 模式下，Spark Master Web 端口号：8080（资源）</li>
<li>Spark 历史服务器端口号：18080</li>
<li>Hadoop YARN 任务运行情况查看端口号：8088</li>
</ul>
]]></content>
      <categories>
        <category>Big Data</category>
      </categories>
      <tags>
        <tag>spark</tag>
      </tags>
  </entry>
  <entry>
    <title>从源码认识FactoryBean</title>
    <url>/2021/08/12/%E4%BB%8E%E6%BA%90%E7%A0%81%E8%AE%A4%E8%AF%86FactoryBean/</url>
    <content><![CDATA[<p>本文学习自<a href="https://ke.qq.com/course/package/20773">马士兵MAC课程-源码五班</a></p>
<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>通过 Debug 探究以下问题：</p>
<ol>
<li>在 <em>AbstractApplicationContext</em> 的 <em>refresh()</em> 中，完成对 bean 的实例化方法 <em>finishBeanFactoryInitialization(beanFactory)</em> 是否会实例化 UserFactoryBean 和 User 的对象</li>
<li><em>context.getBean(“&amp;userFactoryBean”)</em> 和 <em>context.getBean(“userFactoryBean”)</em> 会返回不同对象的逻辑是什么?</li>
</ol>
<span id="more"></span>

<h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.factorybean.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String password;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.factorybean.factorybean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eitan.factorybean.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		User user = <span class="keyword">new</span> User();</span><br><span class="line">		user.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">		user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> user;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">		<span class="keyword">return</span> User.class;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="factorybean-xml"><a href="#factorybean-xml" class="headerlink" title="factorybean.xml"></a>factorybean.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.eitan.factorybean.factorybean.UserFactoryBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.factorybean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eitan.factorybean.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.eitan.factorybean.factorybean.UserFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationContext</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;factorybean.xml&quot;</span>);</span><br><span class="line">		UserFactoryBean userFactoryBean = (UserFactoryBean) context.getBean(<span class="string">&quot;&amp;userFactoryBean&quot;</span>);</span><br><span class="line">		System.out.println(userFactoryBean);</span><br><span class="line">		User user = (User) context.getBean(<span class="string">&quot;userFactoryBean&quot;</span>);</span><br><span class="line">		System.out.println(user);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里我们手动获取了 UserFactoryBean 和 User，通过 Debug 跟踪其获取的具体步骤</p>
</blockquote>
<h2 id="首先关注-finishBeanFactoryInitialization-beanFactory-方法"><a href="#首先关注-finishBeanFactoryInitialization-beanFactory-方法" class="headerlink" title="首先关注 finishBeanFactoryInitialization(beanFactory) 方法"></a>首先关注 <em>finishBeanFactoryInitialization(beanFactory)</em> 方法</h2><h3 id="finishBeanFactoryInitialization-beanFactory"><a href="#finishBeanFactoryInitialization-beanFactory" class="headerlink" title="finishBeanFactoryInitialization(beanFactory)"></a><em>finishBeanFactoryInitialization(beanFactory)</em></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishBeanFactoryInitialization</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// Initialize conversion service for this context.</span></span><br><span class="line">	<span class="comment">// 为上下文初始化类型转换器</span></span><br><span class="line">	<span class="keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class="line">			beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</span><br><span class="line">		beanFactory.setConversionService(</span><br><span class="line">				beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Register a default embedded value resolver if no BeanFactoryPostProcessor</span></span><br><span class="line">	<span class="comment">// (such as a PropertySourcesPlaceholderConfigurer bean) registered any before:</span></span><br><span class="line">	<span class="comment">// at this point, primarily for resolution in annotation attribute values.</span></span><br><span class="line">	<span class="comment">// 如果beanFactory之前没有注册前入值解析器，则注册默认的嵌入值解析器，主要用于注解属性值的解析</span></span><br><span class="line">	<span class="keyword">if</span> (!beanFactory.hasEmbeddedValueResolver()) &#123;</span><br><span class="line">		beanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span></span><br><span class="line">	<span class="comment">// 尽早初始化loadTimeWeaverAware，以便尽早注册它们的转换器</span></span><br><span class="line">	String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">	<span class="keyword">for</span> (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class="line">		getBean(weaverAwareName);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Stop using the temporary ClassLoader for type matching.</span></span><br><span class="line">	<span class="comment">// 禁止使用临时类加载器进行类型匹配</span></span><br><span class="line">	beanFactory.setTempClassLoader(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Allow for caching all bean definition metadata, not expecting further changes.</span></span><br><span class="line">	<span class="comment">// 冻结所有的bean定义，说明注册的bean定义将不被修改或任何进一步处理</span></span><br><span class="line">	beanFactory.freezeConfiguration();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">	<span class="comment">// 初始化剩下的单例对象</span></span><br><span class="line">	beanFactory.preInstantiateSingletons();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个方法主要还是做了一些初始化前的准备操作，具体初始化发生在 <em>beanFactory.preInstantiateSingletons()</em> 中</p>
</blockquote>
<h3 id="preInstantiateSingletons"><a href="#preInstantiateSingletons" class="headerlink" title="preInstantiateSingletons()"></a>preInstantiateSingletons()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preInstantiateSingletons</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">		logger.trace(<span class="string">&quot;Pre-instantiating singletons in &quot;</span> + <span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span></span><br><span class="line">	<span class="comment">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span></span><br><span class="line">	<span class="comment">// 将所有BeanDefinitionNames创建一个集合</span></span><br><span class="line">	List&lt;String&gt; beanNames = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.beanDefinitionNames);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Trigger initialization of all non-lazy singleton beans...</span></span><br><span class="line">	<span class="comment">// 触发所有非延迟加载的单例bean的初始化，遍历集合的对象</span></span><br><span class="line">	<span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">		<span class="comment">// 合并父类BeanDefinition</span></span><br><span class="line">		RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">		<span class="comment">// 条件判断，非抽象，单例，非懒加载</span></span><br><span class="line">		<span class="keyword">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;</span><br><span class="line">			<span class="comment">// 判断是否实现了FactoryBean接口</span></span><br><span class="line">			<span class="keyword">if</span> (isFactoryBean(beanName)) &#123;</span><br><span class="line">				<span class="comment">// 根据&amp;+beanName来获取具体对象</span></span><br><span class="line">				Object bean = getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class="line">				<span class="comment">// 进行类型转换</span></span><br><span class="line">				<span class="keyword">if</span> (bean <span class="keyword">instanceof</span> FactoryBean) &#123;</span><br><span class="line">					FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) bean;</span><br><span class="line">					<span class="comment">// 判断这个FactoryBean是否希望急切的初始化</span></span><br><span class="line">					<span class="keyword">boolean</span> isEagerInit;</span><br><span class="line">					<span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span> &amp;&amp; factory <span class="keyword">instanceof</span> SmartFactoryBean) &#123;</span><br><span class="line">						isEagerInit = AccessController.doPrivileged(</span><br><span class="line">								(PrivilegedAction&lt;Boolean&gt;) ((SmartFactoryBean&lt;?&gt;) factory)::isEagerInit,</span><br><span class="line">								getAccessControlContext());</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> &#123;</span><br><span class="line">						isEagerInit = (factory <span class="keyword">instanceof</span> SmartFactoryBean &amp;&amp;</span><br><span class="line">								((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="comment">// 如果希望急切的初始化，则通过beanName获取bean实例</span></span><br><span class="line">					<span class="keyword">if</span> (isEagerInit) &#123;</span><br><span class="line">						getBean(beanName);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// 如果beanName对应的bean不是FactoryBean，只是普通的bean，通过beanName获取bean实例</span></span><br><span class="line">				getBean(beanName);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Trigger post-initialization callback for all applicable beans...</span></span><br><span class="line">	<span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">		Object singletonInstance = getSingleton(beanName);</span><br><span class="line">		<span class="keyword">if</span> (singletonInstance <span class="keyword">instanceof</span> SmartInitializingSingleton) &#123;</span><br><span class="line">			StartupStep smartInitialize = <span class="keyword">this</span>.getApplicationStartup().start(<span class="string">&quot;spring.beans.smart-initialize&quot;</span>)</span><br><span class="line">					.tag(<span class="string">&quot;beanName&quot;</span>, beanName);</span><br><span class="line">			SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;</span><br><span class="line">			<span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">				AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">					smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">				&#125;, getAccessControlContext());</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">			&#125;</span><br><span class="line">			smartInitialize.end();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="beanDefinitionNames"><a href="#beanDefinitionNames" class="headerlink" title="beanDefinitionNames"></a>beanDefinitionNames</h4><p>这里的 <em>beanDefinitionNames</em> 是包括所有通过 xml 配置和注解扫描到（这个案例没有开启注解扫描）的 BeanDefinitionName，本案例只包含一个在 xml 中配置的 <em>userFactoryBean</em></p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210812235441.png" alt="image-20210812235437097"></p>
<h4 id="getMergedLocalBeanDefinition-beanName"><a href="#getMergedLocalBeanDefinition-beanName" class="headerlink" title="getMergedLocalBeanDefinition(beanName)"></a>getMergedLocalBeanDefinition(beanName)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> RootBeanDefinition <span class="title">getMergedLocalBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">	<span class="comment">// Quick check on the concurrent map first, with minimal locking.</span></span><br><span class="line">	<span class="comment">// 检查beanName对应的mergedBeanDefinitions是否存在于缓存中，此缓存是在beanFactoryPostProcessor中添加的</span></span><br><span class="line">	RootBeanDefinition mbd = <span class="keyword">this</span>.mergedBeanDefinitions.get(beanName);</span><br><span class="line">	<span class="keyword">if</span> (mbd != <span class="keyword">null</span> &amp;&amp; !mbd.stale) &#123;</span><br><span class="line">		<span class="comment">// 如果存在于缓存中则直接返回</span></span><br><span class="line">		<span class="keyword">return</span> mbd;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 如果不存在于缓存中，根据beanName和BeanDefinition，获取mergedBeanDefinitions</span></span><br><span class="line">	<span class="keyword">return</span> getMergedBeanDefinition(beanName, getBeanDefinition(beanName));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>getMergedLocalBeanDefinition(beanName) 的用途是根据 beanName 获取对应的 BeanDefinition，这里返回的是已经与 parentBeanDefinition 合并后的 BeanDefinition</p>
<ol>
<li>通过 Debug 得知，此时是直接从缓存 mergedBeanDefinitions 中获取到 BeanDefinition 直接放回，那么它是合适首次进行合并操作并加入缓存的呢？是在调用 BeanFactoryPostProcessor 时 <em>beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false)</em> 方法中首次进行 merge 操作的。</li>
<li>该方法返回的 BeanDefinition 为 RootBeanDefinition。Spring 通过 xml 配置的 BeanDefinition 为 GenericBeanDefinition，而通过注解扫描 doScan() 找到的为 ScannedGenericBeanDefinition，通过该方法会将其同一转成 RootBeanDefinition</li>
<li>合并父类BeanDefinition的逻辑为：<ol>
<li>先判断该BeanDefinition有无父类，如果没有则直接转化为 RootBeanDefinition 返回</li>
<li>如果有父类，则递归调用 getMergedBeanDefinition(String name) 方法得到父类的 BeanDefinition，并将父类合并子类，最终返回合并后的 BeanDefinition</li>
</ol>
</li>
</ol>
</blockquote>
<h3 id="isFactoryBean-beanName"><a href="#isFactoryBean-beanName" class="headerlink" title="isFactoryBean(beanName)"></a>isFactoryBean(beanName)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFactoryBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException </span>&#123;</span><br><span class="line">	<span class="comment">// 拿到真正的beanName</span></span><br><span class="line">	String beanName = transformedBeanName(name);</span><br><span class="line">	<span class="comment">// 尝试从缓存中获取bean实例对象</span></span><br><span class="line">	Object beanInstance = getSingleton(beanName, <span class="keyword">false</span>);</span><br><span class="line">	<span class="keyword">if</span> (beanInstance != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="comment">// 如果beanInstance存在，则直接判断类型是否为FactoryBean</span></span><br><span class="line">		<span class="keyword">return</span> (beanInstance <span class="keyword">instanceof</span> FactoryBean);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// No singleton instance found -&gt; check bean definition.</span></span><br><span class="line">	<span class="comment">// 如果缓存中不存在此 beanName &amp;&amp; 父beanFactory是ConfigurableBeanFactory，则调用父BeanFactory判断是否为FactoryBean</span></span><br><span class="line">	<span class="keyword">if</span> (!containsBeanDefinition(beanName) &amp;&amp; getParentBeanFactory() <span class="keyword">instanceof</span> ConfigurableBeanFactory) &#123;</span><br><span class="line">		<span class="comment">// No bean definition found in this factory -&gt; delegate to parent.</span></span><br><span class="line">		<span class="keyword">return</span> ((ConfigurableBeanFactory) getParentBeanFactory()).isFactoryBean(name);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 通过MergedBeanDefinition来检查beanName对应的bean是否为FactoryBean</span></span><br><span class="line">	<span class="keyword">return</span> isFactoryBean(beanName, getMergedLocalBeanDefinition(beanName));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isFactoryBean</span><span class="params">(String beanName, RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 获取RootBeanDefinition的isFactoryBean属性</span></span><br><span class="line">	Boolean result = mbd.isFactoryBean;</span><br><span class="line">	<span class="comment">// 如果结果为空</span></span><br><span class="line">	<span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="comment">// 拿到beanName对应的bean实例的类型</span></span><br><span class="line">		Class&lt;?&gt; beanType = predictBeanType(beanName, mbd, FactoryBean.class);</span><br><span class="line">		<span class="comment">// 返回beanType是否为factoryBean本身、子类或子接口</span></span><br><span class="line">		result = (beanType != <span class="keyword">null</span> &amp;&amp; FactoryBean.class.isAssignableFrom(beanType));</span><br><span class="line">		mbd.isFactoryBean = result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以看到该方法一开始就使用 <em>String beanName = transformedBeanName(name)</em> 去除 <em>&amp;</em> 符号，因此不管入参是否带 &amp; 都是判断同一个 beanName 是否为工厂类</p>
</blockquote>
<p>之后的操作就是 getBean、doGetBean、createBean 和 doCreateBean，这不在我们此次探究范围之内暂且跳过，只要明白在 <em>refresh</em> 方法执行后：</p>
<ol>
<li>在 <em>BeanFactory</em> 的 <em>beanDefinitionMap</em> 中只有一对键值对，<em>key = userFactoryBean，value 为 UserFactoryBean 对应的 BeanDefinition</em></li>
</ol>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210813002904.png" alt="image-20210813002902145"></p>
<ol start="2">
<li>在 BeanFactory 的 singletonObjects 中，存在一个键值对，<em>key = userFactoryBean</em>，value 为类型 是 UserFactoeyBean 的对象</li>
</ol>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210813003705.png" alt="image-20210813003703270"></p>
<h2 id="getBean-String-name"><a href="#getBean-String-name" class="headerlink" title="getBean(String name)"></a>getBean(String name)</h2><p>在完成了 ApplicationContext 的创建之后，当我们手动调用 <em>context.getBean(“&amp;userFactoryBean”)</em> 和 *context.getBean(“userFactoryBean”)*，Spring 内部是如何处理的呢？</p>
<h3 id="doGetBean-…"><a href="#doGetBean-…" class="headerlink" title="doGetBean(…)"></a>doGetBean(…)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">doGetBean</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">		String name, <span class="meta">@Nullable</span> Class&lt;T&gt; requiredType, <span class="meta">@Nullable</span> Object[] args, <span class="keyword">boolean</span> typeCheckOnly)</span></span></span><br><span class="line"><span class="function">		<span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 提取对应的beanName，当bean对象实现FactoryBean接口之后就会变成&amp;beanName</span></span><br><span class="line">	<span class="comment">// 这一步的操作是去除&amp;符号</span></span><br><span class="line">	String beanName = transformedBeanName(name);</span><br><span class="line">	Object beanInstance;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Eagerly check singleton cache for manually registered singletons.</span></span><br><span class="line">	<span class="comment">// 提前检查单例缓存中是否有手动注册的单例对象，跟循环依赖有关联</span></span><br><span class="line">	Object sharedInstance = getSingleton(beanName);</span><br><span class="line">	<span class="keyword">if</span> (sharedInstance != <span class="keyword">null</span> &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">			<span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">				logger.trace(<span class="string">&quot;Returning eagerly cached instance of singleton bean &#x27;&quot;</span> + beanName +</span><br><span class="line">						<span class="string">&quot;&#x27; that is not fully initialized yet - a consequence of a circular reference&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				logger.trace(<span class="string">&quot;Returning cached instance of singleton bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 返回对象的实例，当你实现Factory接口，需要获取具体的对象就需要此方法进行获取</span></span><br><span class="line">		beanInstance = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 当从 singletonObjects 缓存中获取不到时，走的是 createBean 创建流程</span></span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		...</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> adaptBeanInstance(name, beanInstance, requiredType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li><em>String beanName = transformedBeanName(name)</em> 的作用是会将 &amp; 符号去除，因此无论入参 name 为 <em>&amp;userFactoryBean</em> 还是 <em>userFactoryBean</em>，得到的beanName 均为 <em>userFactoryBean</em></li>
<li>由上文可知，此时在 singletonObjects 中是存在了 <em>“userFactoryBean” -&gt; UserFactoryBean 的对象</em> 的缓存，因此这里的 <em>Object sharedInstance = getSingleton(beanName)</em> 返回的就是一个 UserFactoryBean 的对象</li>
<li>最终返回的对象是由 <em>beanInstance = getObjectForBeanInstance(sharedInstance, name, beanName, null)</em> 方法得到的，这里会把 <em>name</em> 和 <em>beanName</em> 都当作参数传入</li>
</ol>
</blockquote>
<h3 id="getObjectForBeanInstance-…"><a href="#getObjectForBeanInstance-…" class="headerlink" title="getObjectForBeanInstance(…)"></a>getObjectForBeanInstance(…)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getObjectForBeanInstance</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">		Object beanInstance, String name, String beanName, <span class="meta">@Nullable</span> RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Don&#x27;t let calling code try to dereference the factory if the bean isn&#x27;t a factory.</span></span><br><span class="line">	<span class="keyword">if</span> (BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class="line">		<span class="keyword">if</span> (beanInstance <span class="keyword">instanceof</span> NullBean) &#123;</span><br><span class="line">			<span class="keyword">return</span> beanInstance;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!(beanInstance <span class="keyword">instanceof</span> FactoryBean)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanIsNotAFactoryException(beanName, beanInstance.getClass());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (mbd != <span class="keyword">null</span>) &#123;</span><br><span class="line">			mbd.isFactoryBean = <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> beanInstance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Now we have the bean instance, which may be a normal bean or a FactoryBean.</span></span><br><span class="line">	<span class="comment">// If it&#x27;s a FactoryBean, we use it to create a bean instance, unless the</span></span><br><span class="line">	<span class="comment">// caller actually wants a reference to the factory.</span></span><br><span class="line">	<span class="keyword">if</span> (!(beanInstance <span class="keyword">instanceof</span> FactoryBean)) &#123;</span><br><span class="line">		<span class="keyword">return</span> beanInstance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Object object = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">if</span> (mbd != <span class="keyword">null</span>) &#123;</span><br><span class="line">		mbd.isFactoryBean = <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		object = getCachedObjectForFactoryBean(beanName);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="comment">// Return bean instance from factory.</span></span><br><span class="line">		FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) beanInstance;</span><br><span class="line">		<span class="comment">// Caches object obtained from FactoryBean if it is a singleton.</span></span><br><span class="line">		<span class="keyword">if</span> (mbd == <span class="keyword">null</span> &amp;&amp; containsBeanDefinition(beanName)) &#123;</span><br><span class="line">			mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">boolean</span> synthetic = (mbd != <span class="keyword">null</span> &amp;&amp; mbd.isSynthetic());</span><br><span class="line">		object = getObjectFromFactoryBean(factory, beanName, !synthetic);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>BeanFactoryUtils.isFactoryDereference(name) 方法，通过是否是 &amp; 开头来判断返回结果是工厂还是工厂创建的实体类</li>
<li>如果 name 是 &amp; 开头，代表需要返回的就是工厂本身，则直接把入参的 <em>beanInstance</em> 返回即可</li>
<li>如果是返回工厂创建的实体类：<ol>
<li>先从缓存 factoryBeanObjectCache 中去寻找，如果缓存中有则直接返回</li>
<li>缓存中没有则通过 <em>getObjectFromFactoryBean(factory, beanName, !synthetic)</em> 创建</li>
</ol>
</li>
</ol>
</blockquote>
<h3 id="getObjectFromFactoryBean-factory-beanName-synthetic"><a href="#getObjectFromFactoryBean-factory-beanName-synthetic" class="headerlink" title="getObjectFromFactoryBean(factory, beanName, !synthetic)"></a>getObjectFromFactoryBean(factory, beanName, !synthetic)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getObjectFromFactoryBean</span><span class="params">(FactoryBean&lt;?&gt; factory, String beanName, <span class="keyword">boolean</span> shouldPostProcess)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 如果工厂创建的类是单例的，并且一级缓存中已经存在这个工厂，则先尝试从缓存中获取</span></span><br><span class="line">       <span class="comment">// 否则直接使用工厂创建一个新的bean并返回</span></span><br><span class="line">       <span class="keyword">if</span> (factory.isSingleton() &amp;&amp; containsSingleton(beanName)) &#123;</span><br><span class="line">		<span class="keyword">synchronized</span> (getSingletonMutex()) &#123;</span><br><span class="line">			Object object = <span class="keyword">this</span>.factoryBeanObjectCache.get(beanName);</span><br><span class="line">			<span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">				object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">				<span class="comment">// Only post-process and store if not put there already during getObject() call above</span></span><br><span class="line">				<span class="comment">// (e.g. because of circular reference processing triggered by custom getBean calls)</span></span><br><span class="line">				Object alreadyThere = <span class="keyword">this</span>.factoryBeanObjectCache.get(beanName);</span><br><span class="line">				<span class="keyword">if</span> (alreadyThere != <span class="keyword">null</span>) &#123;</span><br><span class="line">					object = alreadyThere;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">if</span> (shouldPostProcess) &#123;</span><br><span class="line">						<span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">							<span class="comment">// Temporarily return non-post-processed object, not storing it yet..</span></span><br><span class="line">							<span class="keyword">return</span> object;</span><br><span class="line">						&#125;</span><br><span class="line">						beforeSingletonCreation(beanName);</span><br><span class="line">						<span class="keyword">try</span> &#123;</span><br><span class="line">							object = postProcessObjectFromFactoryBean(object, beanName);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">							<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName,</span><br><span class="line">									<span class="string">&quot;Post-processing of FactoryBean&#x27;s singleton object failed&quot;</span>, ex);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">finally</span> &#123;</span><br><span class="line">							afterSingletonCreation(beanName);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (containsSingleton(beanName)) &#123;</span><br><span class="line">						<span class="keyword">this</span>.factoryBeanObjectCache.put(beanName, object);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> object;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		Object object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">		<span class="keyword">if</span> (shouldPostProcess) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				object = postProcessObjectFromFactoryBean(object, beanName);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName, <span class="string">&quot;Post-processing of FactoryBean&#x27;s object failed&quot;</span>, ex);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> object;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里我们可以看到 FactoryBean 的 <em>isSingleton()</em> 方法是如何生效的</p>
<ol>
<li>在方法最开始时就会调用  <em>isSingleton()</em> 进行判断，如果是单例的会先从缓存 factoryBeanObjectCache 中获取，获取不到再进行创建</li>
<li>如果不是 singleton，则直接调用 <em>doGetObjectFromFactoryBean(factory, beanName)</em></li>
<li>获取到对象之后，调用 <em>this.factoryBeanObjectCache.put(beanName, object)</em> 将其放入缓存</li>
</ol>
</blockquote>
<h3 id="doGetObjectFromFactoryBean-factory-beanName"><a href="#doGetObjectFromFactoryBean-factory-beanName" class="headerlink" title="doGetObjectFromFactoryBean(factory, beanName)"></a>doGetObjectFromFactoryBean(factory, beanName)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">doGetObjectFromFactoryBean</span><span class="params">(FactoryBean&lt;?&gt; factory, String beanName)</span> <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line">	Object object;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">			AccessControlContext acc = getAccessControlContext();</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				object = AccessController.doPrivileged((PrivilegedExceptionAction&lt;Object&gt;) factory::getObject, acc);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class="line">				<span class="keyword">throw</span> pae.getException();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">// 调用 FactoryBean 的 getObject() 方法</span></span><br><span class="line">			object = factory.getObject();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (FactoryBeanNotInitializedException ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName, ex.toString());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName, <span class="string">&quot;FactoryBean threw exception on object creation&quot;</span>, ex);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Do not accept a null value for a FactoryBean that&#x27;s not fully</span></span><br><span class="line">	<span class="comment">// initialized yet: Many FactoryBeans just return null then.</span></span><br><span class="line">	<span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(</span><br><span class="line">					beanName, <span class="string">&quot;FactoryBean which is currently in creation returned null from getObject&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		object = <span class="keyword">new</span> NullBean();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以发现，最终是通过调用 FactoryBean 的 getObject() 方法来获取对应对象</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210813100559.png" alt="image-20210813100555949"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义动态代理与JDK动态代理</title>
    <url>/2021/05/13/%E5%B0%8F%E7%AA%A5JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="什么是动态代理"><a href="#什么是动态代理" class="headerlink" title="什么是动态代理"></a>什么是动态代理</h2><p>动态代理是在运行期利用 <em>JVM</em> 的反射机制生成代理类，可以在不需要知道具体被代理类的情况下编写代理规则，能避免因大量使用静态代理造成的类的急剧膨胀。</p>
<span id="more"></span>

<h2 id="自定义动态代理"><a href="#自定义动态代理" class="headerlink" title="自定义动态代理"></a>自定义动态代理</h2><h3 id="MyProxy"><a href="#MyProxy" class="headerlink" title="MyProxy"></a>MyProxy</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.custom.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.tools.JavaCompiler;</span><br><span class="line"><span class="keyword">import</span> javax.tools.StandardJavaFileManager;</span><br><span class="line"><span class="keyword">import</span> javax.tools.ToolProvider;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String Ln = <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String Tab = <span class="string">&quot;\t&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(MyClassLoader loader,</span></span></span><br><span class="line"><span class="params"><span class="function">                                          Class&lt;?&gt;[] interfaceName,</span></span></span><br><span class="line"><span class="params"><span class="function">                                          MyInvocationHandler h)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、动态生成一个.java的源文件</span></span><br><span class="line">        String proxy = generateCode(interfaceName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、把生成的这个.java源文件保存在磁盘上</span></span><br><span class="line">        String filePath = MyProxy.class.getResource(<span class="string">&quot;&quot;</span>).getPath();</span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath + <span class="string">&quot;$Proxy0.java&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists())&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                file.createNewFile();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        FileWriter fileWriter = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileWriter = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">            fileWriter.write(proxy);</span><br><span class="line">            fileWriter.flush();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3、把这个.java源文件编译成.class文件</span></span><br><span class="line">            <span class="comment">// 创建一个java文件编译器对象</span></span><br><span class="line">            JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();</span><br><span class="line">            <span class="comment">// java源代码文件管理器</span></span><br><span class="line">            StandardJavaFileManager fileManager = compiler.getStandardFileManager(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// java源文件的一个迭代器对象</span></span><br><span class="line">            Iterable iterable = fileManager.getJavaFileObjects(file);</span><br><span class="line">            <span class="comment">// 获取一个编译的任务</span></span><br><span class="line">            JavaCompiler.CompilationTask task = compiler.getTask(<span class="keyword">null</span>, fileManager, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, iterable);</span><br><span class="line">            <span class="comment">// 执行编译</span></span><br><span class="line">            task.call();</span><br><span class="line">            <span class="comment">// 关闭文件管理器</span></span><br><span class="line">            fileManager.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4、把编译后的.class文件加载到jvm内存中</span></span><br><span class="line">            Class clazz = loader.findClass(<span class="string">&quot;$Proxy0&quot;</span>);</span><br><span class="line">            </span><br><span class="line"><span class="comment">//			  不采用自定义ClassLoader的方式加载</span></span><br><span class="line"><span class="comment">//            URLClassLoader urlClassLoader = new URLClassLoader(new URL[]&#123;new URL(&quot;file:D:\\ideawork\\MySpring\\SpringDemo\\proxyCustom\\target\\classes&quot;)&#125;);</span></span><br><span class="line"><span class="comment">//            Class clazz = urlClassLoader.loadClass(&quot;com.custom.proxy.$Proxy0&quot;);</span></span><br><span class="line">            <span class="comment">//5、根据加载到jvm中的.class字节码文件生成Class类，然后创建Class类的对象</span></span><br><span class="line">            Constructor constructor = clazz.getConstructor(MyInvocationHandler.class);</span><br><span class="line">            <span class="keyword">return</span> constructor.newInstance(h);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileWriter.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateCode</span><span class="params">(Class&lt;?&gt;[] interfances)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        sb.append(<span class="string">&quot;package com.custom.proxy;&quot;</span> + Ln);</span><br><span class="line">        sb.append(<span class="string">&quot;import java.lang.reflect.Method;&quot;</span> + Ln);</span><br><span class="line">        sb.append(<span class="string">&quot;import com.custom.proxy.MyInvocationHandler;&quot;</span> + Ln);</span><br><span class="line">        sb.append(<span class="string">&quot;public class $Proxy0 implements &quot;</span> + interfances[<span class="number">0</span>].getName() + <span class="string">&quot;&#123;&quot;</span> + Ln);</span><br><span class="line">        sb.append(Tab + <span class="string">&quot;private MyInvocationHandler h;&quot;</span> + Ln);</span><br><span class="line">        sb.append(Tab + <span class="string">&quot;public $Proxy0(MyInvocationHandler h)&#123;&quot;</span> + Ln);</span><br><span class="line">        sb.append(Tab + Tab + <span class="string">&quot;this.h = h;&quot;</span> + Ln);</span><br><span class="line">        sb.append(Tab + <span class="string">&quot;&#125;&quot;</span> + Ln);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Method m : interfances[<span class="number">0</span>].getMethods()) &#123;</span><br><span class="line">            sb.append(Tab + <span class="string">&quot;public &quot;</span> + m.getReturnType().getName() + <span class="string">&quot; &quot;</span> + m.getName() + <span class="string">&quot;() &#123;&quot;</span> + Ln);</span><br><span class="line">            sb.append(Tab + Tab + <span class="string">&quot;try &#123;&quot;</span> + Ln);</span><br><span class="line">            sb.append(Tab + Tab + Tab + <span class="string">&quot;Method m = &quot;</span> + interfances[<span class="number">0</span>].getName() + <span class="string">&quot;.class.getMethod(\&quot;&quot;</span> + m.getName() + <span class="string">&quot;\&quot;);&quot;</span> + Ln);</span><br><span class="line">            sb.append(Tab + Tab + Tab + <span class="string">&quot;h.invoke(this, m, null);&quot;</span> + Ln);</span><br><span class="line"><span class="comment">//            sb.append(Tab + Tab + Tab + &quot;return (&quot; + m.getReturnType().getName() + &quot;)h.invoke(this, m, null);&quot; + Ln);</span></span><br><span class="line">            sb.append(Tab + Tab + <span class="string">&quot;&#125; catch (Throwable e) &#123;&quot;</span> + Ln);</span><br><span class="line">            sb.append(Tab + Tab + Tab + <span class="string">&quot;e.printStackTrace();&quot;</span> + Ln);</span><br><span class="line">            sb.append(Tab + Tab + <span class="string">&quot;&#125;&quot;</span> + Ln);</span><br><span class="line">            sb.append(Tab + <span class="string">&quot;&#125;&quot;</span> + Ln);</span><br><span class="line">            sb.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="MyClassLoader"><a href="#MyClassLoader" class="headerlink" title="MyClassLoader"></a>MyClassLoader</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.custom.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义一个类加载器</span></span><br><span class="line"><span class="comment"> * bootstrap ClassLoader  --jdk/jre/目录下的jar包加载</span></span><br><span class="line"><span class="comment"> * ext ClassLoader  --jdk/ext/目录下的jar包加载</span></span><br><span class="line"><span class="comment"> * App ClassLoader  --我们应用的ClassLoader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> File classPathFile;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String classPath = MyClassLoader.class.getResource(<span class="string">&quot;&quot;</span>).getPath();</span><br><span class="line">        <span class="keyword">this</span>.classPathFile = <span class="keyword">new</span> File(classPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (classPathFile != <span class="keyword">null</span>) &#123;</span><br><span class="line">            File classFile = <span class="keyword">new</span> File(classPathFile + <span class="string">&quot;\\&quot;</span> + name.replace(<span class="string">&quot;\\.&quot;</span>, <span class="string">&quot;/&quot;</span>) + <span class="string">&quot;.class&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (classFile.exists()) &#123;</span><br><span class="line">                FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">                ByteArrayOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis = <span class="keyword">new</span> FileInputStream(classFile);</span><br><span class="line">                    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</span><br><span class="line">                    bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                    <span class="keyword">int</span> len;</span><br><span class="line">                    <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        bos.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> defineClass(<span class="keyword">null</span>, bos.toByteArray(), <span class="number">0</span>, bos.size());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        fis.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bos.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="MyInvocationHandler"><a href="#MyInvocationHandler" class="headerlink" title="MyInvocationHandler"></a>MyInvocationHandler</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.custom.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="JDK动态代理源码分析"><a href="#JDK动态代理源码分析" class="headerlink" title="JDK动态代理源码分析"></a>JDK动态代理源码分析</h2><h3 id="Object-proxy-Proxy-newProxyInstance"><a href="#Object-proxy-Proxy-newProxyInstance" class="headerlink" title="Object proxy = Proxy.newProxyInstance(..);"></a>Object proxy = Proxy.newProxyInstance(..);</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span></span><br><span class="line"><span class="params"><span class="function">                                         Class&lt;?&gt;[] interfaces,</span></span></span><br><span class="line"><span class="params"><span class="function">                                         InvocationHandler h)</span></span></span><br><span class="line"><span class="function">       <span class="keyword">throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       Objects.requireNonNull(h);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class="line">       <span class="keyword">final</span> SecurityManager sm = System.getSecurityManager();</span><br><span class="line">       <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">           checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 查找或生成指定的代理类</span></span><br><span class="line"><span class="comment">        * Look up or generate the designated proxy class.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 使用指定的调用处理程序调用其构造函数</span></span><br><span class="line"><span class="comment">        * Invoke its constructor with the designated invocation handler.</span></span><br><span class="line"><span class="comment">        * 解释：将使用者写的InvacationHandler h 作为构造函数的参数传给代理对象</span></span><br><span class="line"><span class="comment">        * 		代理对象调用h.invoke()方法实现对target的代理和方法的增强</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">//检查创建代理类所需的权限</span></span><br><span class="line">               checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class="line">           <span class="keyword">final</span> InvocationHandler ih = h;</span><br><span class="line">           <span class="keyword">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class="line">               AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                   <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                       cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> cons.newInstance(<span class="keyword">new</span> Object[]&#123;h&#125;);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IllegalAccessException|InstantiationException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">           Throwable t = e.getCause();</span><br><span class="line">           <span class="keyword">if</span> (t <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">               <span class="keyword">throw</span> (RuntimeException) t;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(t.toString(), t);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Class-lt-gt-cl-getProxyClass0-loader-intfs"><a href="#Class-lt-gt-cl-getProxyClass0-loader-intfs" class="headerlink" title="Class&lt;?&gt; cl = getProxyClass0(loader, intfs);"></a>Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成代理类。在调用之前必须调用checkProxyAccess方法来执行权限检查</span></span><br><span class="line"><span class="comment">    * Generate a proxy class.  Must call the checkProxyAccess method</span></span><br><span class="line"><span class="comment">    * to perform permission checks before calling this.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; getProxyClass0(ClassLoader loader,</span><br><span class="line">                                          Class&lt;?&gt;... interfaces) &#123;</span><br><span class="line">       <span class="keyword">if</span> (interfaces.length &gt; <span class="number">65535</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;interface limit exceeded&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// If the proxy class defined by the given loader implementing</span></span><br><span class="line">       <span class="comment">// the given interfaces exists, this will simply return the cached copy;</span></span><br><span class="line">       <span class="comment">// otherwise, it will create the proxy class via the ProxyClassFactory</span></span><br><span class="line">       <span class="comment">// 简单所就是有缓存读缓存，没缓存就生成</span></span><br><span class="line">       <span class="keyword">return</span> proxyClassCache.get(loader, interfaces);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="proxyClassCache-get-loader-interfaces"><a href="#proxyClassCache-get-loader-interfaces" class="headerlink" title="proxyClassCache.get(loader, interfaces);"></a>proxyClassCache.get(loader, interfaces);</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Look-up the value through the cache. This always evaluates the</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> subKeyFactory&#125; function and optionally evaluates</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> valueFactory&#125; function if there is no entry in the cache for given</span></span><br><span class="line"><span class="comment">    * pair of (key, subKey) or the entry has already been cleared.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> key       possibly null key</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> parameter parameter used together with key to create sub-key and</span></span><br><span class="line"><span class="comment">    *                  value (should not be null)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the cached value (never null)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> parameter&#125; passed in or</span></span><br><span class="line"><span class="comment">    *                              &#123;<span class="doctag">@code</span> sub-key&#125; calculated by</span></span><br><span class="line"><span class="comment">    *                              &#123;<span class="doctag">@code</span> subKeyFactory&#125; or &#123;<span class="doctag">@code</span> value&#125;</span></span><br><span class="line"><span class="comment">    *                              calculated by &#123;<span class="doctag">@code</span> valueFactory&#125; is null.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key, P parameter)</span> </span>&#123;</span><br><span class="line">       Objects.requireNonNull(parameter);</span><br><span class="line"></span><br><span class="line">       expungeStaleEntries();</span><br><span class="line"></span><br><span class="line">       Object cacheKey = CacheKey.valueOf(key, refQueue);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// lazily install the 2nd level valuesMap for the particular cacheKey</span></span><br><span class="line">       ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; valuesMap = map.get(cacheKey);</span><br><span class="line">       <span class="keyword">if</span> (valuesMap == <span class="keyword">null</span>) &#123;</span><br><span class="line">           ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; oldValuesMap</span><br><span class="line">               = map.putIfAbsent(cacheKey,</span><br><span class="line">                                 valuesMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;());</span><br><span class="line">           <span class="keyword">if</span> (oldValuesMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">               valuesMap = oldValuesMap;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// create subKey and retrieve the possible Supplier&lt;V&gt; stored by that</span></span><br><span class="line">       <span class="comment">// subKey from valuesMap</span></span><br><span class="line">       Object subKey = Objects.requireNonNull(subKeyFactory.apply(key, parameter));</span><br><span class="line">       Supplier&lt;V&gt; supplier = valuesMap.get(subKey);</span><br><span class="line">       Factory factory = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (supplier != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">// supplier might be a Factory or a CacheValue&lt;V&gt; instance</span></span><br><span class="line">               <span class="comment">// 这一步为获得代理对象的Class</span></span><br><span class="line">               V value = supplier.get();</span><br><span class="line">               <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">return</span> value;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// else no supplier in cache</span></span><br><span class="line">           <span class="comment">// or a supplier that returned null (could be a cleared CacheValue</span></span><br><span class="line">           <span class="comment">// or a Factory that wasn&#x27;t successful in installing the CacheValue)</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">// lazily construct a Factory</span></span><br><span class="line">           <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">               factory = <span class="keyword">new</span> Factory(key, parameter, subKey, valuesMap);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (supplier == <span class="keyword">null</span>) &#123;</span><br><span class="line">               supplier = valuesMap.putIfAbsent(subKey, factory);</span><br><span class="line">               <span class="keyword">if</span> (supplier == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="comment">// successfully installed Factory</span></span><br><span class="line">                   supplier = factory;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// else retry with winning supplier</span></span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (valuesMap.replace(subKey, supplier, factory)) &#123;</span><br><span class="line">                   <span class="comment">// successfully replaced</span></span><br><span class="line">                   <span class="comment">// cleared CacheEntry / unsuccessful Factory</span></span><br><span class="line">                   <span class="comment">// with our Factory</span></span><br><span class="line">                   supplier = factory;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="comment">// retry with current supplier</span></span><br><span class="line">                   supplier = valuesMap.get(subKey);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="V-value-supplier-get"><a href="#V-value-supplier-get" class="headerlink" title="V value = supplier.get();"></a>V value = supplier.get();</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//WeakCache的内部类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> <span class="keyword">implements</span> <span class="title">Supplier</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">final</span> K key;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">final</span> P parameter;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">final</span> Object subKey;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; valuesMap;</span><br><span class="line"></span><br><span class="line">       Factory(K key, P parameter, Object subKey,</span><br><span class="line">               ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; valuesMap) &#123;</span><br><span class="line">           <span class="keyword">this</span>.key = key;</span><br><span class="line">           <span class="keyword">this</span>.parameter = parameter;</span><br><span class="line">           <span class="keyword">this</span>.subKey = subKey;</span><br><span class="line">           <span class="keyword">this</span>.valuesMap = valuesMap;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="comment">// serialize access</span></span><br><span class="line">           <span class="comment">// re-check</span></span><br><span class="line">           Supplier&lt;V&gt; supplier = valuesMap.get(subKey);</span><br><span class="line">           <span class="keyword">if</span> (supplier != <span class="keyword">this</span>) &#123;</span><br><span class="line">               <span class="comment">// something changed while we were waiting:</span></span><br><span class="line">               <span class="comment">// might be that we were replaced by a CacheValue</span></span><br><span class="line">               <span class="comment">// or were removed because of failure -&gt;</span></span><br><span class="line">               <span class="comment">// return null to signal WeakCache.get() to retry</span></span><br><span class="line">               <span class="comment">// the loop</span></span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// else still us (supplier == this)</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">// create new value</span></span><br><span class="line">           V value = <span class="keyword">null</span>;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">//Objects.requireNonNull()只是判断是否非空</span></span><br><span class="line">               <span class="comment">//valueFactory.apply(key, parameter)中key为类加载器，parameter为接口的类对象</span></span><br><span class="line">               value = Objects.requireNonNull(valueFactory.apply(key, parameter));</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123; <span class="comment">// remove us on failure</span></span><br><span class="line">                   valuesMap.remove(subKey, <span class="keyword">this</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// the only path to reach here is with non-null value</span></span><br><span class="line">           <span class="keyword">assert</span> value != <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// wrap value with CacheValue (WeakReference)</span></span><br><span class="line">           CacheValue&lt;V&gt; cacheValue = <span class="keyword">new</span> CacheValue&lt;&gt;(value);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// put into reverseMap</span></span><br><span class="line">           reverseMap.put(cacheValue, Boolean.TRUE);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// try replacing us with CacheValue (this should always succeed)</span></span><br><span class="line">           <span class="keyword">if</span> (!valuesMap.replace(subKey, <span class="keyword">this</span>, cacheValue)) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">&quot;Should not reach here&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// successfully replaced us with new CacheValue -&gt; return the value</span></span><br><span class="line">           <span class="comment">// wrapped by it</span></span><br><span class="line">           <span class="keyword">return</span> value;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * A factory function that generates, defines and returns the proxy class given</span></span><br><span class="line"><span class="comment">    * the ClassLoader and array of interfaces.</span></span><br><span class="line"><span class="comment">    * 指定类加载器和接口生成代理类.class的工厂</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyClassFactory</span></span></span><br><span class="line"><span class="class">       <span class="keyword">implements</span> <span class="title">BiFunction</span>&lt;<span class="title">ClassLoader</span>, <span class="title">Class</span>&lt;?&gt;[], <span class="title">Class</span>&lt;?&gt;&gt;</span></span><br><span class="line"><span class="class">   </span>&#123;</span><br><span class="line">       <span class="comment">// prefix for all proxy class names</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String proxyClassNamePrefix = <span class="string">&quot;$Proxy&quot;</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// next number to use for generation of unique proxy class names</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicLong nextUniqueNumber = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> Class&lt;?&gt; apply(ClassLoader loader, Class&lt;?&gt;[] interfaces) &#123;</span><br><span class="line"></span><br><span class="line">           Map&lt;Class&lt;?&gt;, Boolean&gt; interfaceSet = <span class="keyword">new</span> IdentityHashMap&lt;&gt;(interfaces.length);</span><br><span class="line">           <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Verify that the class loader resolves the name of this</span></span><br><span class="line"><span class="comment">                * interface to the same Class object.</span></span><br><span class="line"><span class="comment">                * 验证类加载器是否解析此接口名到同一个类对象</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               Class&lt;?&gt; interfaceClass = <span class="keyword">null</span>;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   interfaceClass = Class.forName(intf.getName(), <span class="keyword">false</span>, loader);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (interfaceClass != intf) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                       intf + <span class="string">&quot; is not visible from class loader&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Verify that the Class object actually represents an</span></span><br><span class="line"><span class="comment">                * interface.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="keyword">if</span> (!interfaceClass.isInterface()) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                       interfaceClass.getName() + <span class="string">&quot; is not an interface&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Verify that this interface is not a duplicate.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="keyword">if</span> (interfaceSet.put(interfaceClass, Boolean.TRUE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                       <span class="string">&quot;repeated interface: &quot;</span> + interfaceClass.getName());</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           String proxyPkg = <span class="keyword">null</span>;     <span class="comment">// package to define proxy class in</span></span><br><span class="line">           <span class="keyword">int</span> accessFlags = Modifier.PUBLIC | Modifier.FINAL;</span><br><span class="line"></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Record the package of a non-public proxy interface so that the</span></span><br><span class="line"><span class="comment">            * proxy class will be defined in the same package.  Verify that</span></span><br><span class="line"><span class="comment">            * all non-public proxy interfaces are in the same package.</span></span><br><span class="line"><span class="comment">            * 记录非公共代理接口所在的包，以便将代理类定义在同一包中</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">               <span class="keyword">int</span> flags = intf.getModifiers();</span><br><span class="line">               <span class="keyword">if</span> (!Modifier.isPublic(flags)) &#123;</span><br><span class="line">                   accessFlags = Modifier.FINAL;</span><br><span class="line">                   String name = intf.getName();</span><br><span class="line">                   <span class="keyword">int</span> n = name.lastIndexOf(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">                   String pkg = ((n == -<span class="number">1</span>) ? <span class="string">&quot;&quot;</span> : name.substring(<span class="number">0</span>, n + <span class="number">1</span>));</span><br><span class="line">                   <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                       proxyPkg = pkg;</span><br><span class="line">                   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pkg.equals(proxyPkg)) &#123;</span><br><span class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                           <span class="string">&quot;non-public interfaces from different packages&quot;</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">// if no non-public proxy interfaces, use com.sun.proxy package</span></span><br><span class="line">               proxyPkg = ReflectUtil.PROXY_PACKAGE + <span class="string">&quot;.&quot;</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Choose a name for the proxy class to generate.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="keyword">long</span> num = nextUniqueNumber.getAndIncrement();</span><br><span class="line">           String proxyName = proxyPkg + proxyClassNamePrefix + num;</span><br><span class="line"></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Generate the specified proxy class.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="comment">//动态生成class的byte数组，通过字符串拼接jvm指令</span></span><br><span class="line">           <span class="keyword">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(</span><br><span class="line">               proxyName, interfaces, accessFlags);</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">//将生成的byte数组加载进jvm，此方法为native方法，由C编写</span></span><br><span class="line">               <span class="keyword">return</span> defineClass0(loader, proxyName,</span><br><span class="line">                                   proxyClassFile, <span class="number">0</span>, proxyClassFile.length);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (ClassFormatError e) &#123;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * A ClassFormatError here means that (barring bugs in the</span></span><br><span class="line"><span class="comment">                * proxy class generation code) there was some other</span></span><br><span class="line"><span class="comment">                * invalid aspect of the arguments supplied to the proxy</span></span><br><span class="line"><span class="comment">                * class creation (such as virtual machine limitations</span></span><br><span class="line"><span class="comment">                * exceeded).</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e.toString());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li><p>自定义动态代理：</p>
<p>​    动态拼接字符串生成代理对象的.java文件 -&gt; 将.java文件编译成.class文件 -&gt; 通过类加载器加载.class文件进jvm -&gt; 反射生成代理对象</p>
</li>
<li><p>jdk动态代理：</p>
<p>​    生成.clsss文件的byte[]数组，直接将数组加载进jvm -&gt; 反射生成代理对象</p>
</li>
<li><p>jdk动态代理无需涉及io流，所以比自定义动态代理高效。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title>网络IO-IO模型的演变</title>
    <url>/2021/05/26/%E7%BD%91%E7%BB%9CIO-IO%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%BC%94%E5%8F%98/</url>
    <content><![CDATA[<p>代码、资料来自于马士兵MAC课程。</p>
<p>本文主要讲解了IO模型，由 <em>BIO</em> 到 <em>NIO</em>，再演变到多路复用 <em>select/poll</em> 和 <em>epoll</em> 的过程。</p>
<p>从本文中你可以了解到不同模型是如何解决之前模型所产生的问题，并且会带来什么样的新问题。</p>
<span id="more"></span>

<h2 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h2><h3 id="BIO-服务器端代码"><a href="#BIO-服务器端代码" class="headerlink" title="BIO 服务器端代码"></a>BIO 服务器端代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">9090</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;step1: new ServerSocket(9090) &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">//阻塞</span></span><br><span class="line">        Socket client = server.accept();  </span><br><span class="line">        System.out.println(<span class="string">&quot;step2:client\t&quot;</span> + client.getPort());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                InputStream in = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in = client.getInputStream();</span><br><span class="line">                    BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        <span class="comment">//阻塞</span></span><br><span class="line">                        String dataline = reader.readLine(); </span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">null</span> != dataline) &#123;</span><br><span class="line">                            System.out.println(dataline);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            client.close();</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;客户端断开&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="如何查看java所在位置"><a href="#如何查看java所在位置" class="headerlink" title="如何查看java所在位置"></a>如何查看java所在位置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whereis java</span><br><span class="line">java: /usr/bin/java /usr/lib/java /etc/java /usr/share/java /usr/share/man/man1/java.1.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -l 查看详细 -r 倒叙排序 -t 按时间排序</span></span><br><span class="line">ls -lrt /usr/bin/java</span><br><span class="line">lrwxrwxrwx. 1 root root 22 5月  25 11:11 /usr/bin/java -&gt; /etc/alternatives/java</span><br><span class="line"></span><br><span class="line">/etc/alternatives/java</span><br><span class="line">lrwxrwxrwx. 1 root root 73 5月  25 11:11 /etc/alternatives/java -&gt; /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.292.b10-1.el7_9.x86_64/jre/bin/java</span><br></pre></td></tr></table></figure>

<h3 id="使用strace追踪程序"><a href="#使用strace追踪程序" class="headerlink" title="使用strace追踪程序"></a>使用strace追踪程序</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -ff 监听所有请求，使用 1.4 以前版本才能看到最早 BIO 的系统调用函数</span></span><br><span class="line">strace -ff -o out /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.292.b10-1.el7_9.x86_64/jre/bin/java SocketBIO</span><br></pre></td></tr></table></figure>

<p>这时当前目录下就会生成对应文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ll</span><br><span class="line">总用量 832</span><br><span class="line">-rw-r--r--. 1 root root  13685 5月  26 12:40 out.8696</span><br><span class="line">-rw-r--r--. 1 root root 195208 5月  26 12:40 out.8697</span><br><span class="line">-rw-r--r--. 1 root root  33347 5月  26 12:43 out.8698</span><br><span class="line">-rw-r--r--. 1 root root    975 5月  26 12:40 out.8699</span><br><span class="line">-rw-r--r--. 1 root root   1098 5月  26 12:40 out.8700</span><br><span class="line">-rw-r--r--. 1 root root   1019 5月  26 12:40 out.8701</span><br><span class="line">-rw-r--r--. 1 root root  12260 5月  26 12:43 out.8702</span><br><span class="line">-rw-r--r--. 1 root root   9956 5月  26 12:43 out.8703</span><br><span class="line">-rw-r--r--. 1 root root    974 5月  26 12:40 out.8704</span><br><span class="line">-rw-r--r--. 1 root root 545800 5月  26 12:43 out.8705</span><br><span class="line">-rw-r--r--. 1 root root   1175 5月  26 11:47 SocketBIO$1.class</span><br><span class="line">-rw-r--r--. 1 root root   1104 5月  26 11:47 SocketBIO.class</span><br><span class="line">-rw-r--r--. 1 root root   1505 5月  26 11:47 SocketBIO.java</span><br></pre></td></tr></table></figure>

<p>之后便可以观察具体发生了哪些系统调用</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>系统调用socket(…)=3</li>
<li>系统调用bind(3, …8090…)绑定端口号</li>
<li>系统调用listen(3,…)来监听此端口，此时 netstat -napt 才会显示对应的socket在监听8090端口</li>
<li>主线程阻塞在系统调用accept(3,  处</li>
<li>调用 nc 命令去连接，则主线程通过系统调用clone(…)抛出一个线程去接收信息，此时主线程再次循环阻塞在accept(3,  处，而子线程阻塞在 recv(fd, 处</li>
</ol>
<h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><h3 id="NIO-服务器端代码"><a href="#NIO-服务器端代码" class="headerlink" title="NIO 服务器端代码"></a>NIO 服务器端代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    LinkedList&lt;SocketChannel&gt; clients = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务端开启监听：接受客户端</span></span><br><span class="line">    ServerSocketChannel ss = ServerSocketChannel.open();</span><br><span class="line">    ss.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9090</span>));</span><br><span class="line">    <span class="comment">// 重点  OS  NONBLOCKING!!!  只让接受客户端时不阻塞</span></span><br><span class="line">    ss.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 接受客户端的连接</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// 不会阻塞？  -1 NULL</span></span><br><span class="line">        SocketChannel client = ss.accept(); </span><br><span class="line">        <span class="comment">// accept  调用内核了：1，没有客户端连接进来，返回值？在BIO 的时候一直卡着，但是在NIO ，不卡着，返回-1，NULL</span></span><br><span class="line">        <span class="comment">// 如果来客户端的连接，accept 返回的是这个客户端的fd  5，client  object</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (client == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;null.....&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//重点  socket（服务端的listen socket&lt;连接请求三次握手后，往我这里扔，我去通过accept得到连接的socket&gt;，连接socket&lt;连接后的数据读写使用的&gt; ）</span></span><br><span class="line">            client.configureBlocking(<span class="keyword">false</span>); </span><br><span class="line">            <span class="keyword">int</span> port = client.socket().getPort();</span><br><span class="line">            System.out.println(<span class="string">&quot;client..port: &quot;</span> + port);</span><br><span class="line">            clients.add(client);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//可以在堆里   堆外</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocateDirect(<span class="number">4096</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历已经链接进来的客户端能不能读写数据</span></span><br><span class="line">        <span class="keyword">for</span> (SocketChannel c : clients) &#123;</span><br><span class="line">            <span class="comment">// 不会阻塞，num 的返回值有 &gt;0  -1  0</span></span><br><span class="line">            <span class="keyword">int</span> num = c.read(buffer);  </span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                buffer.flip();</span><br><span class="line">                <span class="keyword">byte</span>[] aaa = <span class="keyword">new</span> <span class="keyword">byte</span>[buffer.limit()];</span><br><span class="line">                buffer.get(aaa);</span><br><span class="line"></span><br><span class="line">                String b = <span class="keyword">new</span> String(aaa);</span><br><span class="line">                System.out.println(c.socket().getPort() + <span class="string">&quot; : &quot;</span> + b);</span><br><span class="line">                buffer.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用strace追踪程序-1"><a href="#使用strace追踪程序-1" class="headerlink" title="使用strace追踪程序"></a>使用strace追踪程序</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -ff 监听所有请求，使用 1.4 以前版本才能看到最早 BIO 的系统调用函数</span></span><br><span class="line">strace -ff -o out java SocketNIO</span><br></pre></td></tr></table></figure>

<h4 id="观察-out-文件，可以发现系统调用-accept-5-0x7f970c13bc70-28-1-EAGAIN-资源暂时不可用-并未发生阻塞，当无服务端连接时直接返回-1"><a href="#观察-out-文件，可以发现系统调用-accept-5-0x7f970c13bc70-28-1-EAGAIN-资源暂时不可用-并未发生阻塞，当无服务端连接时直接返回-1" class="headerlink" title="观察 out 文件，可以发现系统调用 accept(5, 0x7f970c13bc70, [28])         = -1 EAGAIN (资源暂时不可用) 并未发生阻塞，当无服务端连接时直接返回 -1"></a>观察 out 文件，可以发现系统调用 <em>accept(5, 0x7f970c13bc70, [28])         = -1 EAGAIN (资源暂时不可用)</em> 并未发生阻塞，当无服务端连接时直接返回 -1</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail out.9301</span><br><span class="line">mprotect(0x7f970c22d000, 4096, PROT_READ|PROT_WRITE) = 0</span><br><span class="line">futex(0x7f970c04c354, FUTEX_WAIT_BITSET_PRIVATE, 1, &#123;tv_sec=19890, tv_nsec=261222528&#125;, 0xffffffff) = -1 ETIMEDOUT (连接超时)</span><br><span class="line">futex(0x7f970c04c328, FUTEX_WAKE_PRIVATE, 1) = 0</span><br><span class="line">accept(5, 0x7f970c13bc70, [28])         = -1 EAGAIN (资源暂时不可用)</span><br><span class="line">write(1, &quot;null.....&quot;, 9)                = 9</span><br><span class="line">write(1, &quot;\n&quot;, 1)                       = 1</span><br><span class="line">futex(0x7f970c115954, FUTEX_WAKE_OP_PRIVATE, 1, 1, 0x7f970c115950, FUTEX_OP_SET&lt;&lt;28|0&lt;&lt;12|FUTEX_OP_CMP_GT&lt;&lt;24|0x1) = 1</span><br><span class="line">futex(0x7f970c115928, FUTEX_WAKE_PRIVATE, 1) = 0</span><br><span class="line">mprotect(0x7f970c22e000, 4096, PROT_READ|PROT_WRITE) = 0</span><br><span class="line">futex(0x7f970c04c354, FUTEX_WAIT_BITSET_PRIVATE, 1, &#123;tv_sec=19891, tv_nsec=272261757&#125;, 0xffffffff</span><br></pre></td></tr></table></figure>

<h4 id="通过命令-nc-localhost-9090-进行连接，再次观察-out-文件"><a href="#通过命令-nc-localhost-9090-进行连接，再次观察-out-文件" class="headerlink" title="通过命令 nc localhost 9090 进行连接，再次观察 out 文件"></a>通过命令 <em>nc localhost 9090</em> 进行连接，再次观察 out 文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail out.9301</span><br><span class="line">write(1, &quot;null.....&quot;, 9)                = 9</span><br><span class="line">write(1, &quot;\n&quot;, 1)                       = 1</span><br><span class="line">read(6, 0x7f970c2c7a90, 4096)           = -1 EAGAIN (资源暂时不可用)</span><br><span class="line">futex(0x7f970c04c354, FUTEX_WAIT_BITSET_PRIVATE, 1, &#123;tv_sec=20045, tv_nsec=470392585&#125;, 0xffffffff) = -1 ETIMEDOUT (连接超时)</span><br><span class="line">futex(0x7f970c04c328, FUTEX_WAKE_PRIVATE, 1) = 0</span><br><span class="line">accept(5, 0x7f970c13e760, [28])         = -1 EAGAIN (资源暂时不可用)</span><br><span class="line">write(1, &quot;null.....&quot;, 9)                = 9</span><br><span class="line">write(1, &quot;\n&quot;, 1)                       = 1</span><br><span class="line">read(6, 0x7f970c2c8aa0, 4096)           = -1 EAGAIN (资源暂时不可用)</span><br><span class="line">futex(0x7f970c04c354, FUTEX_WAIT_BITSET_PRIVATE, 1, &#123;tv_sec=20046, tv_nsec=479021706&#125;, 0xffffffff</span><br></pre></td></tr></table></figure>

<p>可以发现会调用 <em>read(6, 0x7f970c2c8aa0, 4096)           = -1 EAGAIN (资源暂时不可用)</em> 尝试获取客户端数据，当前没数据时不阻塞直接返回 -1</p>
<h4 id="当客户端输入数据12345时，观察-out-文件"><a href="#当客户端输入数据12345时，观察-out-文件" class="headerlink" title="当客户端输入数据12345时，观察 out 文件"></a>当客户端输入数据<em>12345</em>时，观察 out 文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail out.9301</span><br><span class="line">read(6, 0x7f970c3f7de0, 4096)           = -1 EAGAIN (资源暂时不可用)</span><br><span class="line">futex(0x7f970c04c354, FUTEX_WAIT_BITSET_PRIVATE, 1, &#123;tv_sec=20350, tv_nsec=802512162&#125;, 0xffffffff) = -1 ETIMEDOUT (连接超时)</span><br><span class="line">futex(0x7f970c04c328, FUTEX_WAKE_PRIVATE, 1) = 0</span><br><span class="line">accept(5, 0x7f970c13bc70, [28])         = -1 EAGAIN (资源暂时不可用)</span><br><span class="line">write(1, &quot;null.....&quot;, 9)                = 9</span><br><span class="line">write(1, &quot;\n&quot;, 1)                       = 1</span><br><span class="line">read(6, &quot;12345\n&quot;, 4096)                = 6</span><br><span class="line">write(1, &quot;34706 : 12345\n&quot;, 14)         = 14</span><br><span class="line">write(1, &quot;\n&quot;, 1)                       = 1</span><br><span class="line">futex(0x7f970c04c354, FUTEX_WAIT_BITSET_PRIVATE, 1, &#123;tv_sec=20351, tv_nsec=812756397&#125;, 0xffffffff</span><br></pre></td></tr></table></figure>

<p>可以发现 <em>read(6, “12345\n”, 4096)                = 6</em> 成功接收数据</p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul>
<li>对 <em>ServerSocketChannel</em> 设置 <em>configureBlocking</em> 为 false 时，系统调用 <em>accept(5, 0x7f970c13e760, [28])         = -1 EAGAIN (资源暂时不可用)</em> 将不会被阻塞，当前没有客户端连接时会直接返回 -1</li>
<li>对 <em>SocketChannel</em> 设置 <em>configureBlocking</em> 为 false 时，系统调用  <em>read(6, 0x7f970c2c8aa0, 4096)           = -1 EAGAIN (资源暂时不可用)</em> 尝试获取客户端数据，当前没数据时不阻塞直接返回 -1</li>
<li>NIO 在一个线程内，循环遍历询问是否有新的客户端连接，若有连接将其放进集合 clients 中，再遍历 client 查询这些客户端连接是否有传入数据，如果有则获取到对应数据，没有则返回 -1</li>
<li>NIO 的优势：能够解决 BIO 多次创建线程造成的系统调用频繁的问题</li>
<li>NIO 的问题：在循环 clients 集合是，多次进行 read 系统调用导致内核态用户态频繁切换</li>
</ul>
<h2 id="多路复用-POLL-SELECT"><a href="#多路复用-POLL-SELECT" class="headerlink" title="多路复用 POLL/SELECT"></a>多路复用 POLL/SELECT</h2><h3 id="计算机组成原理之系统来消息了"><a href="#计算机组成原理之系统来消息了" class="headerlink" title="计算机组成原理之系统来消息了"></a>计算机组成原理之系统来消息了</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210601154548.png" alt="image-20210601154546121"></p>
<ol>
<li>当系统接受到消息了，会产生 IO 中断</li>
<li>中断会导致调用 callback，将网卡中发来的数据走网络协议栈最终关联到 FD 的 buffer</li>
<li>所以在某一时间，如果从 app 询问内核某一个或者某些 FD 是否有可 R/W，会有状态返回</li>
</ol>
<h3 id="poll-select-原理"><a href="#poll-select-原理" class="headerlink" title="poll/select 原理"></a>poll/select 原理</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210601155532.png" alt="image-20210601155531168"></p>
<ol>
<li>app 发起软中断，调用内核 select/poll 方法</li>
<li>内核通过 select/poll 方法，轮询 app 传入的参数 fds，会返回可用的 fds</li>
<li>app 获取可用的 fds，再调用内核 read 方法获取数据</li>
</ol>
<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ol>
<li>select/poll 解决了 NIO 对暂无数据的 fd 调用内核 read 方法导致用户态内核态切换频繁的问题</li>
<li>select/poll 在内核层面筛选有数据的 fd 的时间复杂度为 O(n)，且每次调用 select 方法会将所有需要监听的 fd 传给内核</li>
</ol>
<h2 id="EPOLL"><a href="#EPOLL" class="headerlink" title="EPOLL"></a>EPOLL</h2><h3 id="epoll-create、epoll-ctl-和-epoll-wait"><a href="#epoll-create、epoll-ctl-和-epoll-wait" class="headerlink" title="epoll_create、epoll_ctl 和 epoll_wait"></a>epoll_create、epoll_ctl 和 epoll_wait</h3><ul>
<li><p>epoll_create - open an epoll file descriptor</p>
<blockquote>
<p>epoll_create() 返回一个引用新 epoll 实例的文件描述符。该文件描述符用于对epoll接口的所有后续调用。其本质是在内核中开辟一块内存空间，并返回描述该内存空间的 fd。</p>
</blockquote>
</li>
<li><p>epoll_ctl - control interface for an epoll descriptor</p>
<blockquote>
<p>int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);</p>
<p>epfd：即为 epoll_create 返回的 fd</p>
<p>op：表示要进行什么操作，例如 EPOLL_CTL_ADD、EPOLL_CTL_ADD、EPOLL_CTL_DEL</p>
<p>fd：表示这些操作是对这个 fd 进行的</p>
<p>*event：表示这个 fd 可用于什么操作，如 </p>
<p>​                EPOLLIN - The associated file is available for read(2) operations.</p>
<p>​                EPOLLOUT - The associated file is available for write(2) operations.</p>
</blockquote>
</li>
<li><p>epoll_wait - wait for an I/O event on an epoll file descriptor</p>
<blockquote>
<p>epoll_wait 表示等待返回一个可操作的 fd 链表</p>
</blockquote>
</li>
</ul>
<h3 id="epoll-原理"><a href="#epoll-原理" class="headerlink" title="epoll 原理"></a>epoll 原理</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210601174206.png" alt="image-20210601174205090"></p>
<ol>
<li>系统调用 <em>epoll_create</em> 在内核中开辟一块内存，并将 FD6 指向该空间</li>
<li>在客户端和服务器端三次握手结束后，并将该 socket 分配给 app 后，app 的线程会产生一个 FD5，并调用 <em>epoll_ctl(fd6,ADD,fd5…</em> 把 fd5 放入 fd6 指向的内核空间中</li>
<li>当系统接受到 IO 中断后，不仅将数据从网卡的 buffer 复制到 fd 的 buffer 中，还会将该 fd 复制到 fd 的链表里</li>
<li>当调用 <em>epoll_wait</em> 方法后，会将 fd 的链表返回。链表里的 fd 都是有数据的</li>
</ol>
<blockquote>
<p>fd4 表示处于 listen 时的 socket，也是会进入红黑树中的</p>
</blockquote>
<h2 id="java-代码实现多路复用"><a href="#java-代码实现多路复用" class="headerlink" title="java 代码实现多路复用"></a>java 代码实现多路复用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketMultiplexingSingleThreadv1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServerSocketChannel server = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// linux 多路复用器（select poll    epoll kqueue） nginx  event&#123;&#125;</span></span><br><span class="line">    <span class="keyword">private</span> Selector selector = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> port = <span class="number">9090</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server = ServerSocketChannel.open();</span><br><span class="line">            server.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            server.bind(<span class="keyword">new</span> InetSocketAddress(port));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果在epoll模型下，open--》  epoll_create -&gt; fd3</span></span><br><span class="line">            <span class="comment">// select  poll  *epoll  优先选择：epoll  但是可以 -D修正</span></span><br><span class="line">            selector = Selector.open();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// server 约等于 listen状态的 fd4</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            register</span></span><br><span class="line"><span class="comment">            如果：</span></span><br><span class="line"><span class="comment">            select，poll：jvm里开辟一个数组 fd4 放进去</span></span><br><span class="line"><span class="comment">            epoll：  epoll_ctl(fd3,ADD,fd4,EPOLLIN</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            server.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        initServer();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器启动了。。。。。&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                Set&lt;SelectionKey&gt; keys = selector.keys();</span><br><span class="line">                System.out.println(keys.size() + <span class="string">&quot;   size&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 1.调用多路复用器(select,poll  or  epoll  (epoll_wait))</span></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                select()是啥意思：</span></span><br><span class="line"><span class="comment">                1.select，poll  其实  内核的select（fd4）  poll(fd4)</span></span><br><span class="line"><span class="comment">                2.epoll：  其实 内核的 epoll_wait()</span></span><br><span class="line"><span class="comment">                参数可以带时间：没有时间，0  ：  阻塞，有时间设置一个超时</span></span><br><span class="line"><span class="comment">                selector.wakeup()  结果返回0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                懒加载：</span></span><br><span class="line"><span class="comment">                其实再触碰到selector.select()调用的时候触发了epoll_ctl的调用</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">while</span> (selector.select() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 返回的有状态的fd集合</span></span><br><span class="line">                    Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();  </span><br><span class="line">                    Iterator&lt;SelectionKey&gt; iter = selectionKeys.iterator();</span><br><span class="line">                    <span class="comment">// so，管你啥多路复用器，你呀只能给我状态，我还得一个一个的去处理他们的R/W。同步好辛苦！！！！！！！！</span></span><br><span class="line">                    <span class="comment">// NIO  自己对着每一个fd调用系统调用，浪费资源，那么你看，这里是不是调用了一次select方法，知道具体的那些可以R/W了？</span></span><br><span class="line">                    <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">                        SelectionKey key = iter.next();</span><br><span class="line">                        <span class="comment">//set  不移除会重复循环处理</span></span><br><span class="line">                        iter.remove(); </span><br><span class="line">                        <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                            <span class="comment">// 看代码的时候，这里是重点，如果要去接受一个新的连接</span></span><br><span class="line">                            <span class="comment">// 语义上，accept接受连接且返回新连接的FD对吧？</span></span><br><span class="line">                            <span class="comment">// 那新的FD怎么办？</span></span><br><span class="line">                            <span class="comment">// select，poll，因为他们内核没有空间，那么在jvm中保存和前边的fd4那个listen的一起</span></span><br><span class="line">                            <span class="comment">// epoll： 我们希望通过epoll_ctl把新的客户端fd注册到内核空间</span></span><br><span class="line">                            acceptHandler(key);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                            readHandler(key);  </span><br><span class="line">                            <span class="comment">//在当前线程，这个方法可能会阻塞  ，如果阻塞了十年，其他的IO早就没电了。。。</span></span><br><span class="line">                            <span class="comment">//所以，为什么提出了 IO THREADS</span></span><br><span class="line">                            <span class="comment">//redis  是不是用了epoll，redis是不是有个io threads的概念 ，redis是不是单线程的</span></span><br><span class="line">                            <span class="comment">//tomcat 8,9  异步的处理方式  IO  和   处理上  解耦</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acceptHandler</span><span class="params">(SelectionKey key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerSocketChannel ssc = (ServerSocketChannel) key.channel();</span><br><span class="line">            <span class="comment">//来啦，目的是调用accept接受客户端  fd7</span></span><br><span class="line">            SocketChannel client = ssc.accept(); </span><br><span class="line">            client.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">8192</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//你看，调用了register</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            select，poll：jvm里开辟一个数组 fd7 放进去</span></span><br><span class="line"><span class="comment">            epoll：  epoll_ctl(fd3,ADD,fd7,EPOLLIN</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            client.register(selector, SelectionKey.OP_READ, buffer);</span><br><span class="line">            System.out.println(<span class="string">&quot;-------------------------------------------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;新客户端：&quot;</span> + client.getRemoteAddress());</span><br><span class="line">            System.out.println(<span class="string">&quot;-------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readHandler</span><span class="params">(SelectionKey key)</span> </span>&#123;</span><br><span class="line">        SocketChannel client = (SocketChannel) key.channel();</span><br><span class="line">        ByteBuffer buffer = (ByteBuffer) key.attachment();</span><br><span class="line">        buffer.clear();</span><br><span class="line">        <span class="keyword">int</span> read = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                read = client.read(buffer);</span><br><span class="line">                <span class="keyword">if</span> (read &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    buffer.flip();</span><br><span class="line">                    <span class="keyword">while</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">                        client.write(buffer);</span><br><span class="line">                    &#125;</span><br><span class="line">                    buffer.clear();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (read == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    client.close();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SocketMultiplexingSingleThreadv1 service = <span class="keyword">new</span> SocketMultiplexingSingleThreadv1();</span><br><span class="line">        service.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><em>Selector selector = Selector.open();</em> 获取多路复用器模型，可以是 epoll、poll、select</li>
<li><em>server.register(selector, SelectionKey.OP_ACCEPT);</em> 如果是 select/poll 模型：jvm里开辟一个数组 fd4 放进去；如果是 epoll 模型：epoll_ctl(fd3,ADD,fd4,EPOLLIN</li>
<li><em>client.register(selector, SelectionKey.OP_READ, buffer);</em> 如果是 select/poll 模型：fd7 放进 jvm 里的一个数组；如果是 epoll 模型：epoll_ctl(fd3,ADD,fd7,EPOLLIN</li>
<li><em>selector.select()</em>  如果是 select，poll 模型其实是调用内核的 *select(fd4)/poll(fd4)*，如果是 epoll 模型则是调用 <em>epoll_wait()</em></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>io</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark（三）：SparkSQL</title>
    <url>/2022/05/28/Spark%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9ASparkSQL/</url>
    <content><![CDATA[<p>本文为学习笔记，对应视频教程来自<a href="https://www.bilibili.com/video/BV11A411L7CK">尚硅谷大数据Spark教程从入门到精通</a></p>
<h3 id="SparkSQL-概述"><a href="#SparkSQL-概述" class="headerlink" title="SparkSQL 概述"></a>SparkSQL 概述</h3><h4 id="SparkSQL-是什么"><a href="#SparkSQL-是什么" class="headerlink" title="SparkSQL 是什么"></a>SparkSQL 是什么</h4><p>Spark SQL 是 Spark 用于结构化数据(structured data)处理的 Spark 模块。</p>
<h4 id="SparkSQL-特点"><a href="#SparkSQL-特点" class="headerlink" title="SparkSQL 特点"></a>SparkSQL 特点</h4><ol>
<li>无缝的整合了 SQL 查询和 Spark 编程</li>
<li>统一的数据访问</li>
<li>兼容 Hive</li>
<li>标准数据连接</li>
</ol>
<h4 id="DataFrame-是什么"><a href="#DataFrame-是什么" class="headerlink" title="DataFrame 是什么"></a>DataFrame 是什么</h4><p>在 Spark 中，DataFrame 是一种以 RDD 为基础的分布式数据集，类似于传统数据库中的二维表格。DataFrame 与 RDD 的主要区别在于，前者带有 schema 元信息，即 DataFrame 所表示的二维表数据集的每一列都带有名称和类型。这使得 Spark SQL 得以洞察更多的结构信息，从而对藏于 DataFrame 背后的数据源以及作用于 DataFrame 之上的变换进行了针对性的优化，最终达到大幅提升运行时效率的目标。反观 RDD，由于无从得知所存数据元素的具体内部结构，Spark Core 只能在 stage 层面进行简单、通用的流水线优化。</p>
<p>DataFrame 是为数据提供了 Schema 的视图。可以把它当做数据库中的一张表来对待DataFrame 也是懒执行的，但性能上比 RDD 要高，主要原因：优化的执行计划，即查询计划通过 Spark catalyst optimiser 进行优化。</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220528122342.png" alt="image-20220528122337869"></p>
<span id="more"></span>

<h4 id="DataSet-是什么"><a href="#DataSet-是什么" class="headerlink" title="DataSet 是什么"></a>DataSet 是什么</h4><p>DataSet 是分布式数据集合。DataSet 是 Spark 1.6 中添加的一个新抽象，是 DataFrame 的一个扩展。它提供了 RDD 的优势（强类型，使用强大的 lambda 函数的能力）以及 Spark SQL 优化执行引擎的优点。DataSet 也可以使用功能性的转换（操作 map，flatMap，filter 等等）。</p>
<ul>
<li>DataSet 是 DataFrame API 的一个扩展，是 SparkSQL 最新的数据抽象；</li>
<li>用户友好的 API 风格，既具有类型安全检查也具有 DataFrame 的查询优化特性；</li>
<li>用样例类来对 DataSet 中定义数据的结构信息，样例类中每个属性的名称直接映射到 DataSet 中的字段名称；</li>
<li>DataSet 是强类型的。比如可以有 DataSet[Car]，DataSet[Person]；</li>
<li>DataFrame 是 DataSet 的特列，DataFrame=DataSet[Row] ，所以可以通过 as 方法将 DataFrame 转换为 DataSet。Row 是一个类型，跟 Car、Person 这些的类型一样，所有的表结构信息都用 Row 来表示。获取数据时需要指定顺序</li>
</ul>
<h3 id="SparkSQL-核心编程"><a href="#SparkSQL-核心编程" class="headerlink" title="SparkSQL 核心编程"></a>SparkSQL 核心编程</h3><h4 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h4><h5 id="创建-DataFrame"><a href="#创建-DataFrame" class="headerlink" title="创建 DataFrame"></a>创建 DataFrame</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在 spark 的 bin/input 目录中创建 user.json 文件</span></span><br><span class="line">[eitan@SparkOrigin ~]$ vim /opt/module/spark-local-3.2.1/bin/input/user.json</span><br><span class="line">&#123;&quot;username&quot;:&quot;zhangsan&quot;, &quot;age&quot;:30&#125;</span><br><span class="line">&#123;&quot;username&quot;:&quot;lisi&quot;, &quot;age&quot;:20&#125;</span><br><span class="line">&#123;&quot;username&quot;:&quot;wangwu&quot;, &quot;age&quot;:40&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 Spark 支持创建文件的数据源格式</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> spark.read.</span></span><br><span class="line">csv   format   jdbc   json   load   option   options   orc   parquet   schema   table   text   textFile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 读取 json 文件创建 DataFrame</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val df = spark.read.json(<span class="string">&quot;/opt/module/spark-local-3.2.1/bin/input/user.json&quot;</span>)</span></span><br><span class="line">df: org.apache.spark.sql.DataFrame = [age: bigint, username: string]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看数据</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> df.show</span></span><br><span class="line">+---+--------+</span><br><span class="line">|age|username|</span><br><span class="line">+---+--------+</span><br><span class="line">| 30|zhangsan|</span><br><span class="line">| 20|    lisi|</span><br><span class="line">| 40|  wangwu|</span><br><span class="line">+---+--------+</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对于 DataFrame 创建一个全局表</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> df.createOrReplaceGlobalTempView(<span class="string">&quot;people&quot;</span>)</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 SQL 语句实现查询全表</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> spark.newSession.sql(<span class="string">&quot;SELECT * FROM global_temp.people&quot;</span>).show</span></span><br><span class="line">+---+--------+</span><br><span class="line">|age|username|</span><br><span class="line">+---+--------+</span><br><span class="line">| 30|zhangsan|</span><br><span class="line">| 20|    lisi|</span><br><span class="line">| 40|  wangwu|</span><br><span class="line">+---+--------+</span><br></pre></td></tr></table></figure>

<h5 id="SQL-语法"><a href="#SQL-语法" class="headerlink" title="SQL 语法"></a>SQL 语法</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 读取 JSON 文件创建 DataFrame</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> var df = spark.read.json(<span class="string">&quot;bin/input/user.json&quot;</span>)</span></span><br><span class="line">df: org.apache.spark.sql.DataFrame = [age: bigint, username: string] </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对 DataFrame 创建一个临时表</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> df.createOrReplaceTempView(<span class="string">&quot;people&quot;</span>)</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 SQL 语句实现查询全表</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> var sqlDF = spark.sql(<span class="string">&quot;SELECT * FROM people&quot;</span>)</span></span><br><span class="line">sqlDF: org.apache.spark.sql.DataFrame = [age: bigint, username: string]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结果展示</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> sqlDF.show</span></span><br><span class="line">+---+--------+</span><br><span class="line">|age|username|</span><br><span class="line">+---+--------+</span><br><span class="line">| 30|zhangsan|</span><br><span class="line">| 20|    lisi|</span><br><span class="line">| 40|  wangwu|</span><br><span class="line">+---+--------+</span><br></pre></td></tr></table></figure>

<h5 id="DSL-语法"><a href="#DSL-语法" class="headerlink" title="DSL 语法"></a>DSL 语法</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看 DataFrame 的 Schema 信息</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> df.printSchema</span></span><br><span class="line">root</span><br><span class="line"> |-- age: long (nullable = true)</span><br><span class="line"> |-- username: string (nullable = true)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只查看<span class="string">&quot;username&quot;</span>列数据</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> df.select(<span class="string">&quot;username&quot;</span>).show</span></span><br><span class="line">+--------+</span><br><span class="line">|username|</span><br><span class="line">+--------+</span><br><span class="line">|zhangsan|</span><br><span class="line">|    lisi|</span><br><span class="line">|  wangwu|</span><br><span class="line">+--------+</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看<span class="string">&quot;username&quot;</span>列数据以及<span class="string">&quot;age+1&quot;</span>数据</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 涉及到运算的时候, 每列都必须使用$, 或者采用引号表达式：单引号+字段名</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> df.select($<span class="string">&quot;username&quot;</span>, $<span class="string">&quot;age&quot;</span>+1).show</span></span><br><span class="line">+--------+---------+</span><br><span class="line">|username|(age + 1)|</span><br><span class="line">+--------+---------+</span><br><span class="line">|zhangsan|       31|</span><br><span class="line">|    lisi|       21|</span><br><span class="line">|  wangwu|       41|</span><br><span class="line">+--------+---------+</span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> df.select(<span class="string">&#x27;username, &#x27;</span>age+1).show</span></span><br><span class="line">+--------+---------+</span><br><span class="line">|username|(age + 1)|</span><br><span class="line">+--------+---------+</span><br><span class="line">|zhangsan|       31|</span><br><span class="line">|    lisi|       21|</span><br><span class="line">|  wangwu|       41|</span><br><span class="line">+--------+---------+</span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> df.select(<span class="string">&#x27;username, &#x27;</span>age+1 as <span class="string">&quot;newage&quot;</span>).show</span></span><br><span class="line">+--------+------+</span><br><span class="line">|username|newage|</span><br><span class="line">+--------+------+</span><br><span class="line">|zhangsan|    31|</span><br><span class="line">|    lisi|    21|</span><br><span class="line">|  wangwu|    41|</span><br><span class="line">+--------+------+</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看<span class="string">&quot;age&quot;</span>大于<span class="string">&quot;30&quot;</span>的数据</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> df.filter(<span class="string">&#x27;age &gt; 30).show</span></span></span><br><span class="line">+---+--------+</span><br><span class="line">|age|username|</span><br><span class="line">+---+--------+</span><br><span class="line">| 40|  wangwu|</span><br><span class="line">+---+--------+</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 按照&quot;age&quot;分组，查看数据条数</span></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"><span class="string"> df.groupBy(&quot;age&quot;).count.show</span></span></span><br><span class="line">+---+-----+</span><br><span class="line">|age|count|</span><br><span class="line">+---+-----+</span><br><span class="line">| 30|    1|</span><br><span class="line">| 20|    1|</span><br><span class="line">| 40|    1|</span><br><span class="line">+---+-----+</span><br></pre></td></tr></table></figure>

<h5 id="RDD-转换为-DataFrame"><a href="#RDD-转换为-DataFrame" class="headerlink" title="RDD 转换为 DataFrame"></a>RDD 转换为 DataFrame</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 实际开发中，一般通过样例类将 RDD 转换为 DataFrame</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> <span class="keyword">case</span> class User(name:String, age:Int)</span></span><br><span class="line">defined class User</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> RDD 转换为 DataFrame</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val df = sc.makeRDD(List((<span class="string">&quot;zhangsan&quot;</span>,30), (<span class="string">&quot;lisi&quot;</span>,40))).map(t =&gt; User(t._1, t._2)).toDF</span></span><br><span class="line">df: org.apache.spark.sql.DataFrame = [name: string, age: int]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 展示数据</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> df.select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>).show</span></span><br><span class="line">+--------+---+</span><br><span class="line">|    name|age|</span><br><span class="line">+--------+---+</span><br><span class="line">|zhangsan| 30|</span><br><span class="line">|    lisi| 40|</span><br><span class="line">+--------+---+</span><br></pre></td></tr></table></figure>

<h5 id="DataFrame-转换为-RDD"><a href="#DataFrame-转换为-RDD" class="headerlink" title="DataFrame 转换为 RDD"></a>DataFrame 转换为 RDD</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> DataFrame 转换为 RDD</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时得到的 RDD 存储类型为 Row</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val rdd = df.rdd</span></span><br><span class="line">rdd: org.apache.spark.rdd.RDD[org.apache.spark.sql.Row] = MapPartitionsRDD[60] at rdd at &lt;console&gt;:24</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val array = rdd.collect</span></span><br><span class="line">array: Array[org.apache.spark.sql.Row] = Array([zhangsan,30], [lisi,40])</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> array(0)</span></span><br><span class="line">res24: org.apache.spark.sql.Row = [zhangsan,30]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> array(0)(0)</span></span><br><span class="line">res25: Any = zhangsan</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> array(0).getAs[String](<span class="string">&quot;name&quot;</span>)</span></span><br><span class="line">res27: String = zhangsan</span><br></pre></td></tr></table></figure>

<h4 id="DataSet"><a href="#DataSet" class="headerlink" title="DataSet"></a>DataSet</h4><h5 id="创建-DataSet"><a href="#创建-DataSet" class="headerlink" title="创建 DataSet"></a>创建 DataSet</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用样例类序列创建 DataSet</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> <span class="keyword">case</span> class Person(name: String, age: Long)</span></span><br><span class="line">defined class Person</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val caseClassDS = Seq(Person(<span class="string">&quot;zhangsan&quot;</span>,2)).toDS()</span></span><br><span class="line">caseClassDS: org.apache.spark.sql.Dataset[Person] = [name: string, age: bigint]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> caseClassDS.show</span></span><br><span class="line">+--------+---+</span><br><span class="line">|    name|age|</span><br><span class="line">+--------+---+</span><br><span class="line">|zhangsan|  2|</span><br><span class="line">+--------+---+</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用基本类型的序列创建 DataSet</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val ds = Seq(1,2,3,4,5).toDS</span></span><br><span class="line">ds: org.apache.spark.sql.Dataset[Int] = [value: int]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> ds.show</span></span><br><span class="line">+-----+</span><br><span class="line">|value|</span><br><span class="line">+-----+</span><br><span class="line">|    1|</span><br><span class="line">|    2|</span><br><span class="line">|    3|</span><br><span class="line">|    4|</span><br><span class="line">|    5|</span><br><span class="line">+-----+</span><br></pre></td></tr></table></figure>

<h5 id="RDD-转换为-DataSet"><a href="#RDD-转换为-DataSet" class="headerlink" title="RDD 转换为 DataSet"></a>RDD 转换为 DataSet</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">scala&gt;</span><span class="bash"> <span class="keyword">case</span> class User(name:String, age:Int)</span></span><br><span class="line">defined class User</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val ds = sc.makeRDD(List((<span class="string">&quot;zhangsan&quot;</span>,30), (<span class="string">&quot;lisi&quot;</span>,49))).map(t=&gt;User(t._1, t._2)).toDS</span></span><br><span class="line">ds: org.apache.spark.sql.Dataset[User] = [name: string, age: int]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> ds.show</span></span><br><span class="line">+--------+---+</span><br><span class="line">|    name|age|</span><br><span class="line">+--------+---+</span><br><span class="line">|zhangsan| 30|</span><br><span class="line">|    lisi| 49|</span><br><span class="line">+--------+---+</span><br></pre></td></tr></table></figure>

<h5 id="DataSet-转换为-RDD"><a href="#DataSet-转换为-RDD" class="headerlink" title="DataSet 转换为 RDD"></a>DataSet 转换为 RDD</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">scala&gt;</span><span class="bash"> <span class="keyword">case</span> class User(name:String, age:Int)</span></span><br><span class="line">defined class User</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val ds = sc.makeRDD(List((<span class="string">&quot;zhangsan&quot;</span>,30), (<span class="string">&quot;lisi&quot;</span>,49))).map(t=&gt;User(t._1, t._2)).toDS</span></span><br><span class="line">ds: org.apache.spark.sql.Dataset[User] = [name: string, age: int]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val rdd = ds.rdd</span></span><br><span class="line">rdd: org.apache.spark.rdd.RDD[User] = MapPartitionsRDD[70] at rdd at &lt;console&gt;:23</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> rdd.collect</span></span><br><span class="line">res32: Array[User] = Array(User(zhangsan,30), User(lisi,49))</span><br></pre></td></tr></table></figure>

<h4 id="DataFrame-和-和-DataSet-转换"><a href="#DataFrame-和-和-DataSet-转换" class="headerlink" title="DataFrame 和 和 DataSet 转换"></a>DataFrame 和 和 DataSet 转换</h4><h5 id="DataFrame-转换为-DataSet"><a href="#DataFrame-转换为-DataSet" class="headerlink" title="DataFrame 转换为 DataSet"></a>DataFrame 转换为 DataSet</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">scala&gt;</span><span class="bash"> <span class="keyword">case</span> class User(name:String, age:Int)</span></span><br><span class="line">defined class User</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val df = sc.makeRDD(List((<span class="string">&quot;zhangsan&quot;</span>,30), (<span class="string">&quot;lisi&quot;</span>,49))).toDF(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>)</span></span><br><span class="line">df: org.apache.spark.sql.DataFrame = [name: string, age: int]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val ds = df.as[User]</span></span><br><span class="line">ds: org.apache.spark.sql.Dataset[User] = [name: string, age: int]</span><br></pre></td></tr></table></figure>

<h5 id="DataSet-转换为-DataFrame"><a href="#DataSet-转换为-DataFrame" class="headerlink" title="DataSet 转换为 DataFrame"></a>DataSet 转换为 DataFrame</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val ds = df.as[User]</span></span><br><span class="line">ds: org.apache.spark.sql.Dataset[User] = [name: string, age: int]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val df = ds.toDF</span></span><br><span class="line">df: org.apache.spark.sql.DataFrame = [name: string, age: int]</span><br></pre></td></tr></table></figure>

<h4 id="IDEA-开发-SparkSQL"><a href="#IDEA-开发-SparkSQL" class="headerlink" title="IDEA 开发 SparkSQL"></a>IDEA 开发 SparkSQL</h4><h5 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_SparkSQL_Basic</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 创建 SparkSQL 运行环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;sparkSQL&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(sparkConf).getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// TODO 执行逻辑操作</span></span><br><span class="line">    <span class="comment">// DataFrame</span></span><br><span class="line">    <span class="keyword">val</span> df: <span class="type">DataFrame</span> = spark.read.json(<span class="string">&quot;data/user.json&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DataFrame =&gt; SQL</span></span><br><span class="line">    df.createOrReplaceTempView(<span class="string">&quot;user&quot;</span>)</span><br><span class="line"></span><br><span class="line">    spark.sql(<span class="string">&quot;SELECT * FROM user&quot;</span>).show()</span><br><span class="line">    spark.sql(<span class="string">&quot;SELECT username, age FROM user&quot;</span>).show()</span><br><span class="line">    spark.sql(<span class="string">&quot;SELECT avg(age) FROM user&quot;</span>).show()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DataFrame =&gt; DSL</span></span><br><span class="line">    df.select(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;age&quot;</span>).show()</span><br><span class="line">    <span class="comment">// 在使用 DataFrame 时，如果涉及到转换操作，需要引入转换规则</span></span><br><span class="line">    df.select($<span class="string">&quot;age&quot;</span> + <span class="number">1</span>).show</span><br><span class="line">    df.select(<span class="symbol">&#x27;age</span> + <span class="number">1</span>).show</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DataSet</span></span><br><span class="line">    <span class="comment">// DataFrame 是特定类型的 DataSet</span></span><br><span class="line">    <span class="keyword">val</span> seq = <span class="type">Seq</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">val</span> ds: <span class="type">Dataset</span>[<span class="type">Int</span>] = seq.toDS()</span><br><span class="line">    ds.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RDD &lt;=&gt; DataFrame</span></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Int</span>)] = spark.sparkContext.makeRDD(<span class="type">List</span>((<span class="number">1</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="number">30</span>), (<span class="number">2</span>, <span class="string">&quot;lisi&quot;</span>, <span class="number">40</span>)))</span><br><span class="line">    <span class="keyword">val</span> dataFrame: <span class="type">DataFrame</span> = rdd.toDF(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> rowRdd: <span class="type">RDD</span>[<span class="type">Row</span>] = dataFrame.rdd</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DataFrame &lt;=&gt; DataSet</span></span><br><span class="line">    <span class="keyword">val</span> dataSet: <span class="type">Dataset</span>[<span class="type">User</span>] = dataFrame.as[<span class="type">User</span>]</span><br><span class="line">    <span class="keyword">val</span> frame: <span class="type">DataFrame</span> = dataSet.toDF()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RDD &lt;=&gt; DataSet</span></span><br><span class="line">    <span class="keyword">val</span> set: <span class="type">Dataset</span>[<span class="type">User</span>] = rdd.map &#123;</span><br><span class="line">      <span class="keyword">case</span> (id, name, age) =&gt; &#123;</span><br><span class="line">        <span class="type">User</span>(id, name, age)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;.toDS()</span><br><span class="line">    <span class="keyword">val</span> userRdd: <span class="type">RDD</span>[<span class="type">User</span>] = set.rdd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 关闭环境</span></span><br><span class="line">    spark.close()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">id: <span class="type">Int</span>, name: <span class="type">String</span>, age: <span class="type">Int</span></span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="用户自定义函数"><a href="#用户自定义函数" class="headerlink" title="用户自定义函数"></a>用户自定义函数</h4><h5 id="UDF"><a href="#UDF" class="headerlink" title="UDF"></a>UDF</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark02_SparkSQL_UDF</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 创建 SparkSQL 运行环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;sparkSQL&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(sparkConf).getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> df: <span class="type">DataFrame</span> = spark.read.json(<span class="string">&quot;data/user.json&quot;</span>)</span><br><span class="line">    df.createOrReplaceTempView(<span class="string">&quot;user&quot;</span>)</span><br><span class="line"></span><br><span class="line">    spark.udf.register(<span class="string">&quot;prefixName&quot;</span>, (name: <span class="type">String</span>) =&gt; &#123;</span><br><span class="line">      <span class="string">&quot;Name: &quot;</span> + name</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    spark.sql(<span class="string">&quot;SELECT age, prefixName(username) FROM user&quot;</span>).show</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 关闭环境</span></span><br><span class="line">    spark.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="UDAF"><a href="#UDAF" class="headerlink" title="UDAF"></a>UDAF</h5><p>弱类型，不推荐使用</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark04_SparkSQL_UDAF_New</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 创建 SparkSQL 运行环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;sparkSQL&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(sparkConf).getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> df: <span class="type">DataFrame</span> = spark.read.json(<span class="string">&quot;data/user.json&quot;</span>)</span><br><span class="line">    df.createOrReplaceTempView(<span class="string">&quot;user&quot;</span>)</span><br><span class="line"></span><br><span class="line">    spark.udf.register(<span class="string">&quot;ageAvg&quot;</span>, functions.udaf(<span class="keyword">new</span> <span class="type">MyAvgUDAF</span>))</span><br><span class="line"></span><br><span class="line">    spark.sql(<span class="string">&quot;SELECT ageAvg(age) FROM user&quot;</span>).show</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 关闭环境</span></span><br><span class="line">    spark.close()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 自定义聚合函数类：计算年龄的平均值</span></span><br><span class="line"><span class="comment">   * 1.继承 org.apache.spark.sql.expressions.Aggregator，定义泛型</span></span><br><span class="line"><span class="comment">   * IN：输入的数据类型   Long</span></span><br><span class="line"><span class="comment">   * BUF：缓冲区数据类型 Buff</span></span><br><span class="line"><span class="comment">   * OUT：输出的数据类型  Long</span></span><br><span class="line"><span class="comment">   * 2.重写方法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Buff</span>(<span class="params">var total: <span class="type">Long</span>, var count: <span class="type">Long</span></span>)</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyAvgUDAF</span> <span class="keyword">extends</span> <span class="title">Aggregator</span>[<span class="type">Long</span>, <span class="type">Buff</span>, <span class="type">Long</span>] </span>&#123;</span><br><span class="line">    <span class="comment">// z &amp; zero：初始值或零值</span></span><br><span class="line">    <span class="comment">// 缓冲区初始化</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">zero</span></span>: <span class="type">Buff</span> = &#123;</span><br><span class="line">      <span class="type">Buff</span>(<span class="number">0</span>L, <span class="number">0</span>L)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据我们输入的数据跟新缓冲区数据</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">reduce</span></span>(buff: <span class="type">Buff</span>, in: <span class="type">Long</span>): <span class="type">Buff</span> = &#123;</span><br><span class="line">      buff.total += in</span><br><span class="line">      buff.count += <span class="number">1</span></span><br><span class="line">      buff</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并缓冲区</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(buff1: <span class="type">Buff</span>, buff2: <span class="type">Buff</span>): <span class="type">Buff</span> = &#123;</span><br><span class="line">      buff1.total += buff2.total</span><br><span class="line">      buff1.count += buff2.count</span><br><span class="line">      buff1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算结果</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">finish</span></span>(buff: <span class="type">Buff</span>): <span class="type">Long</span> = &#123;</span><br><span class="line">      buff.total / buff.count</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓冲区的编码操作</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">bufferEncoder</span></span>: <span class="type">Encoder</span>[<span class="type">Buff</span>] = <span class="type">Encoders</span>.product</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出的编码操作</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">outputEncoder</span></span>: <span class="type">Encoder</span>[<span class="type">Long</span>] = <span class="type">Encoders</span>.scalaLong</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>强类型，推荐使用</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark05_SparkSQL_UDAF_Old</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 创建 SparkSQL 运行环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;sparkSQL&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(sparkConf).getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> df: <span class="type">DataFrame</span> = spark.read.json(<span class="string">&quot;data/user.json&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 早期版本中，spark 不能在 sql 中使用强类型 UDAF 操作</span></span><br><span class="line">    <span class="comment">// SQL &amp; DSL</span></span><br><span class="line">    <span class="comment">// 早期的 UDAF 强类型聚合函数使用 DSL 语法操作</span></span><br><span class="line">    <span class="keyword">val</span> ds: <span class="type">Dataset</span>[<span class="type">User</span>] = df.as[<span class="type">User</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 UDAF 函数转换为查询的列对象</span></span><br><span class="line">    <span class="keyword">val</span> udafCol: <span class="type">TypedColumn</span>[<span class="type">User</span>, <span class="type">Long</span>] = <span class="keyword">new</span> <span class="type">MyAvgUDAF</span>().toColumn</span><br><span class="line"></span><br><span class="line">    ds.select(udafCol).show</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 关闭环境</span></span><br><span class="line">    spark.close()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">username: <span class="type">String</span>, age: <span class="type">Long</span></span>)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 自定义聚合函数类：计算年龄的平均值</span></span><br><span class="line"><span class="comment">   * 1.继承 org.apache.spark.sql.expressions.Aggregator，定义泛型</span></span><br><span class="line"><span class="comment">   * IN：输入的数据类型   User</span></span><br><span class="line"><span class="comment">   * BUF：缓冲区数据类型 Buff</span></span><br><span class="line"><span class="comment">   * OUT：输出的数据类型  Long</span></span><br><span class="line"><span class="comment">   * 2.重写方法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Buff</span>(<span class="params">var total: <span class="type">Long</span>, var count: <span class="type">Long</span></span>)</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyAvgUDAF</span> <span class="keyword">extends</span> <span class="title">Aggregator</span>[<span class="type">User</span>, <span class="type">Buff</span>, <span class="type">Long</span>] </span>&#123;</span><br><span class="line">    <span class="comment">// z &amp; zero：初始值或零值</span></span><br><span class="line">    <span class="comment">// 缓冲区初始化</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">zero</span></span>: <span class="type">Buff</span> = &#123;</span><br><span class="line">      <span class="type">Buff</span>(<span class="number">0</span>L, <span class="number">0</span>L)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据我们输入的数据跟新缓冲区数据</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">reduce</span></span>(buff: <span class="type">Buff</span>, in: <span class="type">User</span>): <span class="type">Buff</span> = &#123;</span><br><span class="line">      buff.total += in.age</span><br><span class="line">      buff.count += <span class="number">1</span></span><br><span class="line">      buff</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并缓冲区</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(buff1: <span class="type">Buff</span>, buff2: <span class="type">Buff</span>): <span class="type">Buff</span> = &#123;</span><br><span class="line">      buff1.total += buff2.total</span><br><span class="line">      buff1.count += buff2.count</span><br><span class="line">      buff1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算结果</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">finish</span></span>(buff: <span class="type">Buff</span>): <span class="type">Long</span> = &#123;</span><br><span class="line">      buff.total / buff.count</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓冲区的编码操作</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">bufferEncoder</span></span>: <span class="type">Encoder</span>[<span class="type">Buff</span>] = <span class="type">Encoders</span>.product</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出的编码操作</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">outputEncoder</span></span>: <span class="type">Encoder</span>[<span class="type">Long</span>] = <span class="type">Encoders</span>.scalaLong</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="数据的加载和保存"><a href="#数据的加载和保存" class="headerlink" title="数据的加载和保存"></a>数据的加载和保存</h4><h5 id="通用的加载和保存方式"><a href="#通用的加载和保存方式" class="headerlink" title="通用的加载和保存方式"></a>通用的加载和保存方式</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> spark.read.load 是加载数据的通用方法</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> spark.read.format(<span class="string">&quot;…&quot;</span>)[.option(<span class="string">&quot;…&quot;</span>)].load(<span class="string">&quot;…&quot;</span>)</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 案例</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val df = spark.read.format(<span class="string">&quot;json&quot;</span>).load(<span class="string">&quot;bin/input/user.json&quot;</span>)</span></span><br><span class="line">df: org.apache.spark.sql.DataFrame = [age: bigint, username: string]            </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> df.show</span></span><br><span class="line">+---+--------+</span><br><span class="line">|age|username|</span><br><span class="line">+---+--------+</span><br><span class="line">| 30|zhangsan|</span><br><span class="line">| 20|    lisi|</span><br><span class="line">| 40|  wangwu|</span><br><span class="line">+---+--------+</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> spark.sql(<span class="string">&quot;SELECT * FROM json.`bin/input/user.json`&quot;</span>).show</span></span><br><span class="line">22/05/29 10:06:43 WARN ObjectStore: Failed to get database global_temp, returning NoSuchObjectException</span><br><span class="line">22/05/29 10:06:43 WARN ObjectStore: Failed to get database json, returning NoSuchObjectException</span><br><span class="line">+---+--------+</span><br><span class="line">|age|username|</span><br><span class="line">+---+--------+</span><br><span class="line">| 30|zhangsan|</span><br><span class="line">| 20|    lisi|</span><br><span class="line">| 40|  wangwu|</span><br><span class="line">+---+--------+</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>format(“…”)：指定加载的数据类型，包括”csv”、”jdbc”、”json”、”orc”、”parquet” 和 “textFile”;</li>
<li>load(“…”)：在”csv”、”jdbc”、”json”、”orc”、”parquet”和”textFile”格式下需要传入加载数据的路径;</li>
<li>option(“…”)：在”jdbc”格式下需要传入 JDBC 相应参数，url、user、password 和 dbtable</li>
</ol>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> df.write.save 是保存数据的通用方法</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash">df.write.format(<span class="string">&quot;…&quot;</span>)[.option(<span class="string">&quot;…&quot;</span>)].save(<span class="string">&quot;…&quot;</span>)</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 案例</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> df.write.format(<span class="string">&quot;json&quot;</span>).save(<span class="string">&quot;bin/output&quot;</span>)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>format(“…”)：指定保存的数据类型，包括”csv”、”jdbc”、”json”、”orc”、”parquet”和 “textFile”;</li>
<li>save (“…”)：在”csv”、”orc”、”parquet”和”textFile”格式下需要传入保存数据的路径;</li>
<li>option(“…”)：在”jdbc”格式下需要传入 JDBC 相应参数，url、user、password 和 dbtable。保存操作可以使用 SaveMode, 用来指明如何处理数据，使用 mode()方法来设置。有一点很重要: 这些 SaveMode 都是没有加锁的, 也不是原子操作。</li>
</ol>
</blockquote>
<table>
<thead>
<tr>
<th>Scala/Java</th>
<th>Any Language</th>
<th>Meaning</th>
</tr>
</thead>
<tbody><tr>
<td>SaveMode.ErrorIfExists(default)</td>
<td>“error”(default)</td>
<td>如果文件已经存在则抛出异常</td>
</tr>
<tr>
<td>SaveMode.Append</td>
<td>“append”</td>
<td>如果文件已经存在则追加</td>
</tr>
<tr>
<td>SaveMode.Overwrite</td>
<td>“overwrite”</td>
<td>如果文件已经存在则覆盖</td>
</tr>
<tr>
<td>SaveMode.Ignore</td>
<td>“ignore”</td>
<td>如果文件已经存在则忽略</td>
</tr>
</tbody></table>
<h5 id="Parquet"><a href="#Parquet" class="headerlink" title="Parquet"></a>Parquet</h5><p>Spark SQL 的默认数据源为 Parquet 格式。Parquet 是一种能够有效存储嵌套数据的列式存储格式。<br>数据源为 Parquet 文件时，Spark SQL 可以方便的执行所有的操作，不需要使用 format。修改配置项 spark.sql.sources.default，可修改默认数据源格式。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 加载数据</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val df = spark.read.load(<span class="string">&quot;examples/src/main/resources/users.parquet&quot;</span>)</span></span><br><span class="line">df: org.apache.spark.sql.DataFrame = [name: string, favorite_color: string ... 1 more field]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> df.show</span></span><br><span class="line">+------+--------------+----------------+                                        </span><br><span class="line">|  name|favorite_color|favorite_numbers|</span><br><span class="line">+------+--------------+----------------+</span><br><span class="line">|Alyssa|          null|  [3, 9, 15, 20]|</span><br><span class="line">|   Ben|           red|              []|</span><br><span class="line">+------+--------------+----------------+</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存数据</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> df.write.mode(<span class="string">&quot;append&quot;</span>).save(<span class="string">&quot;bin/output&quot;</span>)</span></span><br></pre></td></tr></table></figure>

<h5 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h5><p>Spark SQL 能够自动推测 JSON 数据集的结构，并将它加载为一个 Dataset[Row]. 可以通过 SparkSession.read.json()去加载 JSON 文件。注意：Spark 读取的 JSON 文件不是传统的 JSON 文件，每一行都应该是一个 JSON 串。格式如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;Michael&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;Andy&quot;</span>， <span class="string">&quot;age&quot;</span>:<span class="number">30</span>&#125;</span><br><span class="line">[&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;Justin&quot;</span>， <span class="string">&quot;age&quot;</span>:<span class="number">19</span>&#125;,&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;Justin&quot;</span>， <span class="string">&quot;age&quot;</span>:<span class="number">19</span>&#125;]</span><br></pre></td></tr></table></figure>

<h5 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h5><p>Spark SQL 可以配置 CSV 文件的列表信息，读取 CSV 文件,CSV 文件的第一行设置为数据列。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 数据源</span></span><br><span class="line">name;age;job</span><br><span class="line">Jorge;30;Developer</span><br><span class="line">Bob;32;Developer</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 读取 CSV 文件</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val df = spark.read.format(<span class="string">&quot;csv&quot;</span>).option(<span class="string">&quot;sep&quot;</span>, <span class="string">&quot;;&quot;</span>).option(<span class="string">&quot;inferSchema&quot;</span>,<span class="string">&quot;true&quot;</span>).option(<span class="string">&quot;header&quot;</span>, <span class="string">&quot;true&quot;</span>).load(<span class="string">&quot;examples/src/main/resources/people.csv&quot;</span>)</span></span><br><span class="line">df: org.apache.spark.sql.DataFrame = [name: string, age: int ... 1 more field]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> df.show</span></span><br><span class="line">+-----+---+---------+</span><br><span class="line">| name|age|      job|</span><br><span class="line">+-----+---+---------+</span><br><span class="line">|Jorge| 30|Developer|</span><br><span class="line">|  Bob| 32|Developer|</span><br><span class="line">+-----+---+---------+</span><br></pre></td></tr></table></figure>

<h5 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h5><p>Spark SQL 可以通过 JDBC 从关系型数据库中读取数据的方式创建 DataFrame，通过对 DataFrame 一系列的计算后，还可以将数据再写回关系型数据库中。如果使用 spark-shell 操作，可在启动 shell 时指定相关的数据库驱动路径或者将相关的数据库驱动放到 spark 的类路径下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/spark-shell --jars mysql-connector-java-5.1.27-bin.jar</span><br></pre></td></tr></table></figure>

<p>我们这里只演示在 Idea 中通过 JDBC 对 Mysql 进行操作：</p>
<h6 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="读写数据"><a href="#读写数据" class="headerlink" title="读写数据"></a>读写数据</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark06_SparkSQL_JDBC</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 创建 SparkSQL 运行环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;sparkSQL&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(sparkConf).getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取 Mysql 数据</span></span><br><span class="line">    <span class="keyword">val</span> df: <span class="type">DataFrame</span> = spark.read.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;jdbc:mysql://localhost:3306/spark-sql&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;driver&quot;</span>, <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;user&quot;</span>)</span><br><span class="line">      .load()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 展示数据</span></span><br><span class="line">    df.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存数据</span></span><br><span class="line">    df.write.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;jdbc:mysql://localhost:3306/spark-sql&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;driver&quot;</span>, <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;user_new&quot;</span>)</span><br><span class="line">      .mode(<span class="type">SaveMode</span>.<span class="type">Append</span>)</span><br><span class="line">      .save</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 关闭环境</span></span><br><span class="line">    spark.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h5><p>Apache Hive 是 Hadoop 上的 SQL 引擎，Spark SQL 编译时可以包含 Hive 支持，也可以不包含。包含 Hive 支持的 Spark SQL 可以支持 Hive 表访问、UDF (用户自定义函数)以及 Hive 查询语言(HiveQL/HQL)等。</p>
<h6 id="内嵌-Hive"><a href="#内嵌-Hive" class="headerlink" title="内嵌 Hive"></a>内嵌 Hive</h6><p>如果使用 Spark 内嵌的 Hive，则什么都不用做，直接使用即可。</p>
<p>Hive 的元数据存储在 derby 中, 默认仓库地址:$SPARK_HOME/spark-warehouse</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建表</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> spark.sql(<span class="string">&quot;show tables&quot;</span>).show</span></span><br><span class="line">+---------+---------+-----------+</span><br><span class="line">|namespace|tableName|isTemporary|</span><br><span class="line">+---------+---------+-----------+</span><br><span class="line">+---------+---------+-----------+</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> spark.sql(<span class="string">&quot;CREATE TABLE user(id int, name String, age int) ROW FORMAT DELIMITED FIELDS TERMINATED BY &#x27; &#x27;&quot;</span>)</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> spark.sql(<span class="string">&quot;show tables&quot;</span>).show</span></span><br><span class="line">+---------+---------+-----------+                                               </span><br><span class="line">|namespace|tableName|isTemporary|</span><br><span class="line">+---------+---------+-----------+</span><br><span class="line">|  default|     user|      false|</span><br><span class="line">+---------+---------+-----------+</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加数据</span></span><br><span class="line">[eitan@SparkOrigin ~]$ vim /opt/module/spark-local-3.2.1/data/user.txt</span><br><span class="line">1 zhangsan 20</span><br><span class="line">2 lisi 30</span><br><span class="line">3 wangwu 40</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> spark.sql(<span class="string">&quot;LOAD DATA LOCAL INPATH &#x27;/opt/module/spark-local-3.2.1/data/user.txt/&#x27; INTO TABLE user&quot;</span>)</span></span><br><span class="line">res13: org.apache.spark.sql.DataFrame = []</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> spark.sql(<span class="string">&quot;SELECT * FROM user&quot;</span>).show</span></span><br><span class="line">+---+--------+---+</span><br><span class="line">| id|    name|age|</span><br><span class="line">+---+--------+---+</span><br><span class="line">|  1|zhangsan| 20|</span><br><span class="line">|  2|    lisi| 30|</span><br><span class="line">|  3|  wangwu| 40|</span><br><span class="line">+---+--------+---+</span><br></pre></td></tr></table></figure>

<h6 id="外部的-HIVE"><a href="#外部的-HIVE" class="headerlink" title="外部的 HIVE"></a>外部的 HIVE</h6><p>这里选用的 Hive 部署方式可用查看 <a href="https://eitan-blog.github.io/2022/05/08/Hadoop%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/">Hadoop（一）：集群搭建</a> 和 <a href="https://eitan-blog.github.io/2022/05/11/Hadoop%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9AHive/">Hadoop（三）：Hive</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.启动 Hive 环境</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 msql</span></span><br><span class="line">[eitan@hadoop102 ~]$ systemctl start mysqld</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 hdfs 集群</span></span><br><span class="line">[eitan@hadoop102 ~]$ /opt/module/hadoop-3.3.2/sbin/start-dfs.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 metastore 服务</span></span><br><span class="line">[eitan@hadoop102 ~]$ nohup /opt/module/apache-hive-3.1.3/bin/hive --service metastore &gt; /home/eitan/log/metastore.out 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 hiveserver2 服务</span></span><br><span class="line">[eitan@hadoop103 ~]$ nohup /opt/module/apache-hive-3.1.3/bin/hiveserver2 &gt; /home/eitan/log/hiveserver2.out 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.Spark 要接管 Hive 需要把 hive-site.xml 拷贝到 <span class="variable">$SPARK_HOME</span>/conf 目录下</span></span><br><span class="line">[eitan@hadoop103 ~]$ scp /opt/module/apache-hive-3.1.3/conf/hive-site.xml eitan@192.168.203.150:/opt/module/spark-local-3.2.1/conf、</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.把 Mysql 的驱动 copy 到 jars/ 目录下</span></span><br><span class="line">[eitan@hadoop103 ~]$ scp /opt/module/apache-hive-3.1.3/lib/mysql-connector-java-8.0.29.jar eitan@192.168.203.150:/opt/module/spark-local-3.2.1/jars</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.如果访问不到 hdfs，则需要把 core-site.xml 和 hdfs-site.xml 拷贝到 conf/目录下，我访问的到</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.重启 spark-shell</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> spark.sql(<span class="string">&quot;show databases&quot;</span>).show</span></span><br><span class="line">+---------+</span><br><span class="line">|namespace|</span><br><span class="line">+---------+</span><br><span class="line">|  default|</span><br><span class="line">|   itcast|</span><br><span class="line">+---------+</span><br></pre></td></tr></table></figure>

<h6 id="运行-Spark-SQL-CLI"><a href="#运行-Spark-SQL-CLI" class="headerlink" title="运行 Spark SQL CLI"></a>运行 Spark SQL CLI</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@SparkOrigin ~]$ /opt/module/spark-local-3.2.1/bin/spark-sql</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">spark-sql&gt;</span><span class="bash"> show databases;</span></span><br><span class="line">default</span><br><span class="line">itcast</span><br><span class="line">Time taken: 0.046 seconds, Fetched 2 row(s)</span><br></pre></td></tr></table></figure>

<h6 id="运行-Spark-beeline"><a href="#运行-Spark-beeline" class="headerlink" title="运行 Spark beeline"></a>运行 Spark beeline</h6><p>Spark Thrift Server 是 Spark 社区基于 HiveServer2 实现的一个 Thrift 服务。旨在无缝兼容 HiveServer2。因为 Spark Thrift Server 的接口和协议都和 HiveServer2 完全一致，因此我们部署好 Spark Thrift Server 后，可以直接使用 hive 的 beeline 访问 Spark Thrift Server 执行相关语句。Spark Thrift Server 的目的也只是取代 HiveServer2，因此它依旧可以和 Hive Metastore 进行交互，获取到 hive 的元数据。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.Spark 要接管 Hive 需要把 hive-site.xml 拷贝到 <span class="variable">$SPARK_HOME</span>/conf 目录下</span></span><br><span class="line">[eitan@hadoop103 ~]$ scp /opt/module/apache-hive-3.1.3/conf/hive-site.xml eitan@192.168.203.150:/opt/module/spark-local-3.2.1/conf、</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.把 Mysql 的驱动 copy 到 jars/ 目录下</span></span><br><span class="line">[eitan@hadoop103 ~]$ scp /opt/module/apache-hive-3.1.3/lib/mysql-connector-java-8.0.29.jar eitan@192.168.203.150:/opt/module/spark-local-3.2.1/jars</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.如果访问不到 hdfs，则需要把 core-site.xml 和 hdfs-site.xml 拷贝到 conf/目录下，我访问的到</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.启动 Thrift Server</span></span><br><span class="line">[eitan@SparkOrigin ~]$ /opt/module/spark-local-3.2.1/sbin/start-thriftserver.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.使用 beeline 连接 Thrift Server</span></span><br><span class="line">[eitan@SparkOrigin ~]$ /opt/module/spark-local-3.2.1/bin/beeline -u jdbc:hive2://192.168.203.103:10000 -n eitan</span><br><span class="line">log4j:WARN No appenders could be found for logger (org.apache.hadoop.util.Shell).</span><br><span class="line">log4j:WARN Please initialize the log4j system properly.</span><br><span class="line">log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.</span><br><span class="line">Connecting to jdbc:hive2://192.168.203.103:10000</span><br><span class="line">Connected to: Apache Hive (version 3.1.3)</span><br><span class="line">Driver: Hive JDBC (version 2.3.9)</span><br><span class="line">Transaction isolation: TRANSACTION_REPEATABLE_READ</span><br><span class="line">Beeline version 2.3.9 by Apache Hive</span><br><span class="line">0: jdbc:hive2://192.168.203.103:10000&gt; show databases;</span><br><span class="line">+----------------+</span><br><span class="line">| database_name  |</span><br><span class="line">+----------------+</span><br><span class="line">| default        |</span><br><span class="line">| itcast         |</span><br><span class="line">+----------------+</span><br></pre></td></tr></table></figure>

<h5 id="代码操作-Hive"><a href="#代码操作-Hive" class="headerlink" title="代码操作 Hive"></a>代码操作 Hive</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-hive_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark07_SparkSQL_Hive</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 创建 SparkSQL 运行环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;sparkSQL&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().enableHiveSupport().config(sparkConf).getOrCreate()</span><br><span class="line"></span><br><span class="line">    spark.sql(<span class="string">&quot;show databases&quot;</span>).show()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 关闭环境</span></span><br><span class="line">    spark.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SparkSQL-项目实战"><a href="#SparkSQL-项目实战" class="headerlink" title="SparkSQL 项目实战"></a>SparkSQL 项目实战</h3><h4 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark08_SparkSQL_PrepareData</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 解决权限问题</span></span><br><span class="line">    <span class="type">System</span>.setProperty(<span class="string">&quot;HADOOP_USER_NAME&quot;</span>, <span class="string">&quot;eitan&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 创建 SparkSQL 运行环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;sparkSQL&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().enableHiveSupport().config(sparkConf).getOrCreate()</span><br><span class="line"></span><br><span class="line">    spark.sql(<span class="string">&quot;USE atguigu&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 准备数据</span></span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |CREATE TABLE `user_visit_action`</span></span><br><span class="line"><span class="string">        |(</span></span><br><span class="line"><span class="string">        |    `date`               string,</span></span><br><span class="line"><span class="string">        |    `user_id`            bigint,</span></span><br><span class="line"><span class="string">        |    `session_id`         string,</span></span><br><span class="line"><span class="string">        |    `page_id`            bigint,</span></span><br><span class="line"><span class="string">        |    `action_time`        string,</span></span><br><span class="line"><span class="string">        |    `search_keyword`     string,</span></span><br><span class="line"><span class="string">        |    `click_category_id`  bigint,</span></span><br><span class="line"><span class="string">        |    `click_product_id`   bigint,</span></span><br><span class="line"><span class="string">        |    `order_category_ids` string,</span></span><br><span class="line"><span class="string">        |    `order_product_ids`  string,</span></span><br><span class="line"><span class="string">        |    `pay_category_ids`   string,</span></span><br><span class="line"><span class="string">        |    `pay_product_ids`    string,</span></span><br><span class="line"><span class="string">        |    ` city_id `          bigint</span></span><br><span class="line"><span class="string">        |) ROW FORMAT DELIMITED FIELDS TERMINATED BY &#x27;\t&#x27;</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line">    spark.sql(<span class="string">&quot;LOAD DATA LOCAL INPATH &#x27;data/user_visit_action.txt&#x27; INTO TABLE user_visit_action&quot;</span>)</span><br><span class="line"></span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |CREATE TABLE `product_info`</span></span><br><span class="line"><span class="string">        |(</span></span><br><span class="line"><span class="string">        |    `product_id`   bigint,</span></span><br><span class="line"><span class="string">        |    `product_name` string,</span></span><br><span class="line"><span class="string">        |    `extend_info`  string</span></span><br><span class="line"><span class="string">        |) ROW FORMAT DELIMITED FIELDS TERMINATED BY &#x27;\t&#x27;</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line">    spark.sql(<span class="string">&quot;LOAD DATA LOCAL INPATH &#x27;data/product_info.txt&#x27; INTO TABLE product_info&quot;</span>)</span><br><span class="line"></span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |CREATE TABLE `city_info`</span></span><br><span class="line"><span class="string">        |(</span></span><br><span class="line"><span class="string">        |    `city_id`   bigint,</span></span><br><span class="line"><span class="string">        |    `city_name` string,</span></span><br><span class="line"><span class="string">        |    `area`      string</span></span><br><span class="line"><span class="string">        |) ROW FORMAT DELIMITED FIELDS TERMINATED BY &#x27;\t&#x27;</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line">    spark.sql(<span class="string">&quot;LOAD DATA LOCAL INPATH &#x27;data/city_info.txt&#x27; INTO TABLE city_info&quot;</span>)</span><br><span class="line"></span><br><span class="line">    spark.sql(<span class="string">&quot;SELECT * FROM city_info&quot;</span>).show</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 关闭环境</span></span><br><span class="line">    spark.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h4><p>这里的热门商品是从点击量的维度来看的，计算各个区域前三大热门商品，并备注上每个商品在主要城市中的分布比例，超过两个城市用其他显示。</p>
<p>例如：</p>
<table>
<thead>
<tr>
<th>地区</th>
<th>商品名称</th>
<th>点击次数</th>
<th>城市备注</th>
</tr>
</thead>
<tbody><tr>
<td>华北</td>
<td>商品 A</td>
<td>100000</td>
<td>北京 21.2%，天津 13.2%，其他 65.6%</td>
</tr>
<tr>
<td>华北</td>
<td>商品 P</td>
<td>80200</td>
<td>北京 63.0%，太原 10%，其他 27.0%</td>
</tr>
<tr>
<td>华北</td>
<td>商品 M</td>
<td>40000</td>
<td>北京 63.0%，太原 10%，其他 27.0%</td>
</tr>
<tr>
<td>东北</td>
<td>商品 J</td>
<td>92000</td>
<td>大连 28%，辽宁 17.0%，其他 55.0%</td>
</tr>
</tbody></table>
<h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark09_SparkSQL_Search</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 解决权限问题</span></span><br><span class="line">    <span class="type">System</span>.setProperty(<span class="string">&quot;HADOOP_USER_NAME&quot;</span>, <span class="string">&quot;eitan&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 创建 SparkSQL 运行环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;sparkSQL&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().enableHiveSupport().config(sparkConf).getOrCreate()</span><br><span class="line"></span><br><span class="line">    spark.sql(<span class="string">&quot;USE atguigu&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询基本数据</span></span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |SELECT b.product_name,</span></span><br><span class="line"><span class="string">        |       c.city_name,</span></span><br><span class="line"><span class="string">        |       c.area</span></span><br><span class="line"><span class="string">        |FROM user_visit_action a</span></span><br><span class="line"><span class="string">        |         JOIN product_info b ON a.click_product_id = b.product_id</span></span><br><span class="line"><span class="string">        |         JOIN city_info c ON a.city_id = c.city_id</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin).createOrReplaceTempView(<span class="string">&quot;t1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据区域，进行商品的聚合</span></span><br><span class="line"></span><br><span class="line">    spark.udf.register(<span class="string">&quot;cityRemark&quot;</span>, functions.udaf(<span class="keyword">new</span> <span class="type">CityRemarkUDAF</span>))</span><br><span class="line"></span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |SELECT area,</span></span><br><span class="line"><span class="string">        |       product_name,</span></span><br><span class="line"><span class="string">        |       count(*) AS clickCnt,</span></span><br><span class="line"><span class="string">        |       cityRemark(city_name) AS cityRemark</span></span><br><span class="line"><span class="string">        |FROM t1</span></span><br><span class="line"><span class="string">        |GROUP BY area, product_name</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin).createOrReplaceTempView(<span class="string">&quot;t2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分区内对点击数量排行</span></span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |SELECT *,</span></span><br><span class="line"><span class="string">        |       rank() OVER (PARTITION BY area ORDER BY clickCnt DESC) AS rank</span></span><br><span class="line"><span class="string">        |FROM t2</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin).createOrReplaceTempView(<span class="string">&quot;t3&quot;</span>)</span><br><span class="line"></span><br><span class="line">    spark.sql(<span class="string">&quot;SELECT * FROM t3 WHERE rank &lt;= 3&quot;</span>).show(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 关闭环境</span></span><br><span class="line">    spark.close()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Buff</span>(<span class="params">var count: <span class="type">Long</span>, map: mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Long</span>]</span>)</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">CityRemarkUDAF</span> <span class="keyword">extends</span> <span class="title">Aggregator</span>[<span class="type">String</span>, <span class="type">Buff</span>, <span class="type">String</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">zero</span></span>: <span class="type">Buff</span> = &#123;</span><br><span class="line">      <span class="type">Buff</span>(<span class="number">0</span>L, mutable.<span class="type">Map</span>())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">reduce</span></span>(buff: <span class="type">Buff</span>, in: <span class="type">String</span>): <span class="type">Buff</span> = &#123;</span><br><span class="line">      buff.count += <span class="number">1</span></span><br><span class="line">      <span class="keyword">val</span> newCnt: <span class="type">Long</span> = buff.map.getOrElse(in, <span class="number">0</span>L) + <span class="number">1</span></span><br><span class="line">      buff.map.update(in, newCnt)</span><br><span class="line">      buff</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(buff1: <span class="type">Buff</span>, buff2: <span class="type">Buff</span>): <span class="type">Buff</span> = &#123;</span><br><span class="line">      buff2.map.foreach &#123;</span><br><span class="line">        <span class="keyword">case</span> (cityName, cnt) =&gt; &#123;</span><br><span class="line">          <span class="keyword">val</span> newCnt: <span class="type">Long</span> = buff1.map.getOrElse(cityName, <span class="number">0</span>L) + cnt</span><br><span class="line">          buff1.map.update(cityName, newCnt)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      buff1.count += buff2.count</span><br><span class="line">      buff1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将统计结果生成字符串信息</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">finish</span></span>(buff: <span class="type">Buff</span>): <span class="type">String</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> remarkList = <span class="type">ListBuffer</span>[<span class="type">String</span>]()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> cityCntList: <span class="type">List</span>[(<span class="type">String</span>, <span class="type">Long</span>)] = buff.map.toList.sortBy(_._2)(<span class="type">Ordering</span>.<span class="type">Long</span>.reverse)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> total: <span class="type">Long</span> = buff.count</span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> list: <span class="type">List</span>[(<span class="type">String</span>, <span class="type">Long</span>)] = cityCntList.take(<span class="number">2</span>)</span><br><span class="line">      <span class="keyword">var</span> rsum = <span class="number">0</span>L;</span><br><span class="line">      list.foreach &#123;</span><br><span class="line">        <span class="keyword">case</span> (city, cnt) =&gt; &#123;</span><br><span class="line">          <span class="keyword">val</span> ratio: <span class="type">Long</span> = cnt * <span class="number">100</span> / total</span><br><span class="line">          remarkList.append(<span class="string">s&quot;<span class="subst">$&#123;city&#125;</span> <span class="subst">$&#123;ratio&#125;</span>%&quot;</span>)</span><br><span class="line">          rsum += ratio</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (cityCntList.size &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        remarkList.append(<span class="string">s&quot;其他 <span class="subst">$&#123;100 - rsum&#125;</span>%&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      remarkList.mkString(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">bufferEncoder</span></span>: <span class="type">Encoder</span>[<span class="type">Buff</span>] = <span class="type">Encoders</span>.product</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">outputEncoder</span></span>: <span class="type">Encoder</span>[<span class="type">String</span>] = <span class="type">Encoders</span>.<span class="type">STRING</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Big Data</category>
      </categories>
      <tags>
        <tag>spark</tag>
      </tags>
  </entry>
  <entry>
    <title>CGLIB 动态代理原理</title>
    <url>/2022/03/29/CGLIB%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><h3 id="被代理类Calculator"><a href="#被代理类Calculator" class="headerlink" title="被代理类Calculator"></a>被代理类Calculator</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i + j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i - j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i * j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i / j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="MethodInterceptor"><a href="#MethodInterceptor" class="headerlink" title="MethodInterceptor"></a>MethodInterceptor</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCglib</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用cglib动态代理&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> methodProxy.invokeSuper(o, objects);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="程序入口"><a href="#程序入口" class="headerlink" title="程序入口"></a>程序入口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置cglib生成的class文件保存路径</span></span><br><span class="line">        System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, <span class="string">&quot;E:\\mashibing\\spring&quot;</span>);</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(Calculator.class);</span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> MyCglib());</span><br><span class="line">        Calculator myCalculator = (Calculator) enhancer.create();</span><br><span class="line">        myCalculator.add(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(myCalculator.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="从add-1-1-开始说起"><a href="#从add-1-1-开始说起" class="headerlink" title="从add(1, 1)开始说起"></a>从add(1, 1)开始说起</h2><h3 id="代理对象的class文件"><a href="#代理对象的class文件" class="headerlink" title="代理对象的class文件"></a>代理对象的class文件</h3><p>当程序运行完成之后，会在指定位置生成代理对象的class文件。为了后续讲解，这里先将生成的class文件展示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.proxy.cglib;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.core.ReflectUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.core.Signature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Callback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Factory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span>$$<span class="title">EnhancerByCGLIB</span>$$345<span class="title">a285a</span> <span class="keyword">extends</span> <span class="title">Calculator</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> CGLIB$BOUND;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object CGLIB$FACTORY_DATA;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal CGLIB$THREAD_CALLBACKS;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Callback[] CGLIB$STATIC_CALLBACKS;</span><br><span class="line">    <span class="keyword">private</span> MethodInterceptor CGLIB$CALLBACK_0;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object CGLIB$CALLBACK_FILTER;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$add$<span class="number">0</span>$Method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$add$<span class="number">0</span>$Proxy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] CGLIB$emptyArgs;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$sub$<span class="number">1</span>$Method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$sub$<span class="number">1</span>$Proxy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$mult$<span class="number">2</span>$Method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$mult$<span class="number">2</span>$Proxy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$div$<span class="number">3</span>$Method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$div$<span class="number">3</span>$Proxy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$equals$<span class="number">4</span>$Method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$equals$<span class="number">4</span>$Proxy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$toString$<span class="number">5</span>$Method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$toString$<span class="number">5</span>$Proxy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$hashCode$<span class="number">6</span>$Method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$hashCode$<span class="number">6</span>$Proxy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$clone$<span class="number">7</span>$Method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$clone$<span class="number">7</span>$Proxy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> CGLIB$STATICHOOK1() &#123;</span><br><span class="line">        CGLIB$THREAD_CALLBACKS = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line">        CGLIB$emptyArgs = <span class="keyword">new</span> Object[<span class="number">0</span>];</span><br><span class="line">        Class var0 = Class.forName(<span class="string">&quot;com.eitan.proxy.cglib.Calculator$$EnhancerByCGLIB$$345a285a&quot;</span>);</span><br><span class="line">        Class var1;</span><br><span class="line">        Method[] var10000 = ReflectUtils.findMethods(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;add&quot;</span>, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;sub&quot;</span>, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;mult&quot;</span>, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;div&quot;</span>, <span class="string">&quot;(II)I&quot;</span>&#125;, (var1 = Class.forName(<span class="string">&quot;com.eitan.proxy.cglib.Calculator&quot;</span>)).getDeclaredMethods());</span><br><span class="line">        CGLIB$add$<span class="number">0</span>$Method = var10000[<span class="number">0</span>];</span><br><span class="line">        CGLIB$add$<span class="number">0</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;add&quot;</span>, <span class="string">&quot;CGLIB$add$0&quot;</span>);</span><br><span class="line">        CGLIB$sub$<span class="number">1</span>$Method = var10000[<span class="number">1</span>];</span><br><span class="line">        CGLIB$sub$<span class="number">1</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;sub&quot;</span>, <span class="string">&quot;CGLIB$sub$1&quot;</span>);</span><br><span class="line">        CGLIB$mult$<span class="number">2</span>$Method = var10000[<span class="number">2</span>];</span><br><span class="line">        CGLIB$mult$<span class="number">2</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;mult&quot;</span>, <span class="string">&quot;CGLIB$mult$2&quot;</span>);</span><br><span class="line">        CGLIB$div$<span class="number">3</span>$Method = var10000[<span class="number">3</span>];</span><br><span class="line">        CGLIB$div$<span class="number">3</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;div&quot;</span>, <span class="string">&quot;CGLIB$div$3&quot;</span>);</span><br><span class="line">        var10000 = ReflectUtils.findMethods(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;equals&quot;</span>, <span class="string">&quot;(Ljava/lang/Object;)Z&quot;</span>, <span class="string">&quot;toString&quot;</span>, <span class="string">&quot;()Ljava/lang/String;&quot;</span>, <span class="string">&quot;hashCode&quot;</span>, <span class="string">&quot;()I&quot;</span>, <span class="string">&quot;clone&quot;</span>, <span class="string">&quot;()Ljava/lang/Object;&quot;</span>&#125;, (var1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>)).getDeclaredMethods());</span><br><span class="line">        CGLIB$equals$<span class="number">4</span>$Method = var10000[<span class="number">0</span>];</span><br><span class="line">        CGLIB$equals$<span class="number">4</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;(Ljava/lang/Object;)Z&quot;</span>, <span class="string">&quot;equals&quot;</span>, <span class="string">&quot;CGLIB$equals$4&quot;</span>);</span><br><span class="line">        CGLIB$toString$<span class="number">5</span>$Method = var10000[<span class="number">1</span>];</span><br><span class="line">        CGLIB$toString$<span class="number">5</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;()Ljava/lang/String;&quot;</span>, <span class="string">&quot;toString&quot;</span>, <span class="string">&quot;CGLIB$toString$5&quot;</span>);</span><br><span class="line">        CGLIB$hashCode$<span class="number">6</span>$Method = var10000[<span class="number">2</span>];</span><br><span class="line">        CGLIB$hashCode$<span class="number">6</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;()I&quot;</span>, <span class="string">&quot;hashCode&quot;</span>, <span class="string">&quot;CGLIB$hashCode$6&quot;</span>);</span><br><span class="line">        CGLIB$clone$<span class="number">7</span>$Method = var10000[<span class="number">3</span>];</span><br><span class="line">        CGLIB$clone$<span class="number">7</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;()Ljava/lang/Object;&quot;</span>, <span class="string">&quot;clone&quot;</span>, <span class="string">&quot;CGLIB$clone$7&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> CGLIB$add$<span class="number">0</span>(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.add(var1, var2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2)</span> </span>&#123;</span><br><span class="line">        MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">            var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var10000 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object var3 = var10000.intercept(<span class="keyword">this</span>, CGLIB$add$<span class="number">0</span>$Method, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> Integer(var1), <span class="keyword">new</span> Integer(var2)&#125;, CGLIB$add$<span class="number">0</span>$Proxy);</span><br><span class="line">            <span class="keyword">return</span> var3 == <span class="keyword">null</span> ? <span class="number">0</span> : ((Number)var3).intValue();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.add(var1, var2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> CGLIB$sub$<span class="number">1</span>(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.sub(var1, var2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2)</span> </span>&#123;</span><br><span class="line">        MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">            var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var10000 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object var3 = var10000.intercept(<span class="keyword">this</span>, CGLIB$sub$<span class="number">1</span>$Method, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> Integer(var1), <span class="keyword">new</span> Integer(var2)&#125;, CGLIB$sub$<span class="number">1</span>$Proxy);</span><br><span class="line">            <span class="keyword">return</span> var3 == <span class="keyword">null</span> ? <span class="number">0</span> : ((Number)var3).intValue();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.sub(var1, var2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> CGLIB$mult$<span class="number">2</span>(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.mult(var1, var2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2)</span> </span>&#123;</span><br><span class="line">        MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">            var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var10000 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object var3 = var10000.intercept(<span class="keyword">this</span>, CGLIB$mult$<span class="number">2</span>$Method, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> Integer(var1), <span class="keyword">new</span> Integer(var2)&#125;, CGLIB$mult$<span class="number">2</span>$Proxy);</span><br><span class="line">            <span class="keyword">return</span> var3 == <span class="keyword">null</span> ? <span class="number">0</span> : ((Number)var3).intValue();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.mult(var1, var2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> CGLIB$div$<span class="number">3</span>(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.div(var1, var2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2)</span> </span>&#123;</span><br><span class="line">        MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">            var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var10000 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object var3 = var10000.intercept(<span class="keyword">this</span>, CGLIB$div$<span class="number">3</span>$Method, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> Integer(var1), <span class="keyword">new</span> Integer(var2)&#125;, CGLIB$div$<span class="number">3</span>$Proxy);</span><br><span class="line">            <span class="keyword">return</span> var3 == <span class="keyword">null</span> ? <span class="number">0</span> : ((Number)var3).intValue();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.div(var1, var2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> CGLIB$equals$<span class="number">4</span>(Object var1) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.equals(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object var1)</span> </span>&#123;</span><br><span class="line">        MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">            var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var10000 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object var2 = var10000.intercept(<span class="keyword">this</span>, CGLIB$equals$<span class="number">4</span>$Method, <span class="keyword">new</span> Object[]&#123;var1&#125;, CGLIB$equals$<span class="number">4</span>$Proxy);</span><br><span class="line">            <span class="keyword">return</span> var2 == <span class="keyword">null</span> ? <span class="keyword">false</span> : (Boolean)var2;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.equals(var1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String CGLIB$toString$<span class="number">5</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">            var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var10000 != <span class="keyword">null</span> ? (String)var10000.intercept(<span class="keyword">this</span>, CGLIB$toString$<span class="number">5</span>$Method, CGLIB$emptyArgs, CGLIB$toString$<span class="number">5</span>$Proxy) : <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> CGLIB$hashCode$<span class="number">6</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">            var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var10000 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object var1 = var10000.intercept(<span class="keyword">this</span>, CGLIB$hashCode$<span class="number">6</span>$Method, CGLIB$emptyArgs, CGLIB$hashCode$<span class="number">6</span>$Proxy);</span><br><span class="line">            <span class="keyword">return</span> var1 == <span class="keyword">null</span> ? <span class="number">0</span> : ((Number)var1).intValue();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.hashCode();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Object CGLIB$clone$<span class="number">7</span>() <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">            var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var10000 != <span class="keyword">null</span> ? var10000.intercept(<span class="keyword">this</span>, CGLIB$clone$<span class="number">7</span>$Method, CGLIB$emptyArgs, CGLIB$clone$<span class="number">7</span>$Proxy) : <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MethodProxy CGLIB$findMethodProxy(Signature var0) &#123;</span><br><span class="line">        String var10000 = var0.toString();</span><br><span class="line">        <span class="keyword">switch</span>(var10000.hashCode()) &#123;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">2131682232</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;sub(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> CGLIB$sub$<span class="number">1</span>$Proxy;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1287932281</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;add(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> CGLIB$add$<span class="number">0</span>$Proxy;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1267343528</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;mult(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> CGLIB$mult$<span class="number">2</span>$Proxy;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">508378822</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;clone()Ljava/lang/Object;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> CGLIB$clone$<span class="number">7</span>$Proxy;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">303407255</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;div(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> CGLIB$div$<span class="number">3</span>$Proxy;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1826985398</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;equals(Ljava/lang/Object;)Z&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> CGLIB$equals$<span class="number">4</span>$Proxy;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1913648695</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;toString()Ljava/lang/String;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> CGLIB$toString$<span class="number">5</span>$Proxy;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1984935277</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;hashCode()I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> CGLIB$hashCode$<span class="number">6</span>$Proxy;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Calculator$$EnhancerByCGLIB$$345a285a() &#123;</span><br><span class="line">        CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> CGLIB$SET_THREAD_CALLBACKS(Callback[] var0) &#123;</span><br><span class="line">        CGLIB$THREAD_CALLBACKS.set(var0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> CGLIB$SET_STATIC_CALLBACKS(Callback[] var0) &#123;</span><br><span class="line">        CGLIB$STATIC_CALLBACKS = var0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> CGLIB$BIND_CALLBACKS(Object var0) &#123;</span><br><span class="line">        Calculator$$EnhancerByCGLIB$$345a285a var1 = (Calculator$$EnhancerByCGLIB$$345a285a)var0;</span><br><span class="line">        <span class="keyword">if</span> (!var1.CGLIB$BOUND) &#123;</span><br><span class="line">            var1.CGLIB$BOUND = <span class="keyword">true</span>;</span><br><span class="line">            Object var10000 = CGLIB$THREAD_CALLBACKS.get();</span><br><span class="line">            <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                var10000 = CGLIB$STATIC_CALLBACKS;</span><br><span class="line">                <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var1.CGLIB$CALLBACK_0 = (MethodInterceptor)((Callback[])var10000)[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">newInstance</span><span class="params">(Callback[] var1)</span> </span>&#123;</span><br><span class="line">        CGLIB$SET_THREAD_CALLBACKS(var1);</span><br><span class="line">        Calculator$$EnhancerByCGLIB$$345a285a var10000 = <span class="keyword">new</span> Calculator$$EnhancerByCGLIB$$345a285a();</span><br><span class="line">        CGLIB$SET_THREAD_CALLBACKS((Callback[])<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> var10000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">newInstance</span><span class="params">(Callback var1)</span> </span>&#123;</span><br><span class="line">        CGLIB$SET_THREAD_CALLBACKS(<span class="keyword">new</span> Callback[]&#123;var1&#125;);</span><br><span class="line">        Calculator$$EnhancerByCGLIB$$345a285a var10000 = <span class="keyword">new</span> Calculator$$EnhancerByCGLIB$$345a285a();</span><br><span class="line">        CGLIB$SET_THREAD_CALLBACKS((Callback[])<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> var10000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">newInstance</span><span class="params">(Class[] var1, Object[] var2, Callback[] var3)</span> </span>&#123;</span><br><span class="line">        CGLIB$SET_THREAD_CALLBACKS(var3);</span><br><span class="line">        Calculator$$EnhancerByCGLIB$$345a285a var10000 = <span class="keyword">new</span> Calculator$$EnhancerByCGLIB$$345a285a;</span><br><span class="line">        <span class="keyword">switch</span>(var1.length) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            var10000.&lt;init&gt;();</span><br><span class="line">            CGLIB$SET_THREAD_CALLBACKS((Callback[])<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> var10000;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Constructor not found&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Callback <span class="title">getCallback</span><span class="params">(<span class="keyword">int</span> var1)</span> </span>&#123;</span><br><span class="line">        CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">        MethodInterceptor var10000;</span><br><span class="line">        <span class="keyword">switch</span>(var1) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            var10000 = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var10000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallback</span><span class="params">(<span class="keyword">int</span> var1, Callback var2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(var1) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">this</span>.CGLIB$CALLBACK_0 = (MethodInterceptor)var2;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Callback[] getCallbacks() &#123;</span><br><span class="line">        CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Callback[]&#123;<span class="keyword">this</span>.CGLIB$CALLBACK_0&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallbacks</span><span class="params">(Callback[] var1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.CGLIB$CALLBACK_0 = (MethodInterceptor)var1[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        CGLIB$STATICHOOK1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="add-int-var1-int-var2"><a href="#add-int-var1-int-var2" class="headerlink" title="add(int var1, int var2)"></a>add(int var1, int var2)</h3><p>当主程序调用 add 方法后，实际调用的是被代理对象的 add 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2)</span> </span>&#123;</span><br><span class="line">    MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">    <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">        var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (var10000 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Object var3 = var10000.intercept(<span class="keyword">this</span>, CGLIB$add$<span class="number">0</span>$Method, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> Integer(var1), <span class="keyword">new</span> Integer(var2)&#125;, CGLIB$add$<span class="number">0</span>$Proxy);</span><br><span class="line">        <span class="keyword">return</span> var3 == <span class="keyword">null</span> ? <span class="number">0</span> : ((Number)var3).intValue();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.add(var1, var2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当首次进入时 <em><strong>this.CGLIB$CALLBACK_0</strong></em> 并未赋值，因此 <em><strong>var1000</strong></em> 为 <em><strong>null</strong></em>，将会执行 <em><strong>CGLIB$BIND_CALLBACKS(this)</strong></em> 。</p>
<h3 id="CGLIB-BIND-CALLBACKS-Object-var0"><a href="#CGLIB-BIND-CALLBACKS-Object-var0" class="headerlink" title="CGLIB$BIND_CALLBACKS(Object var0)"></a>CGLIB$BIND_CALLBACKS(Object var0)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> CGLIB$BIND_CALLBACKS(Object var0) &#123;</span><br><span class="line">    Calculator$$EnhancerByCGLIB$$345a285a var1 = (Calculator$$EnhancerByCGLIB$$345a285a)var0;</span><br><span class="line">    <span class="keyword">if</span> (!var1.CGLIB$BOUND) &#123;</span><br><span class="line">        var1.CGLIB$BOUND = <span class="keyword">true</span>;</span><br><span class="line">        Object var10000 = CGLIB$THREAD_CALLBACKS.get();</span><br><span class="line">        <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            var10000 = CGLIB$STATIC_CALLBACKS;</span><br><span class="line">            <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var1.CGLIB$CALLBACK_0 = (MethodInterceptor)((Callback[])var10000)[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>CGLIB$CALLBACK_0</strong></em> 为 <em><strong>CGLIB$THREAD_CALLBACKS</strong></em> 调用 <em><strong>get()</strong></em> 方法后返回的 <em><strong>Callback[]</strong></em> 数组的第0个元素，而 <em><strong>CGLIB$THREAD_CALLBACKS</strong></em> 为一个静态的 <em><strong>ThreadLocal</strong></em> 对象且通过一个静态方法进行赋值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> CGLIB$SET_THREAD_CALLBACKS(Callback[] var0) &#123;</span><br><span class="line">    CGLIB$THREAD_CALLBACKS.set(var0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此，我们只需要明白 <em><strong>CGLIB$SET_THREAD_CALLBACKS(Callback[] var0)</strong></em> 是何时被调用的，且传入的参数 <em><strong>Callback[] var0</strong></em> 为何值就能清楚代理对象在调用被代理方法的具体流程，而这个静态方法被调用的时机在  <em><strong>Calculator myCalculator = (Calculator) enhancer.create()</strong></em> 方法中。</p>
<h2 id="浅析代理对象的创建方法-enhancer-create"><a href="#浅析代理对象的创建方法-enhancer-create" class="headerlink" title="浅析代理对象的创建方法 enhancer.create()"></a>浅析代理对象的创建方法 enhancer.create()</h2><p>我们跳过各种对数据的包装和缓存的代码，可以看到真正对代理对象的创建代码在 <em><strong>Enhancer</strong></em> 的父类 <em><strong>AbstractClassGenerator</strong></em> 的 <em><strong>create(Object key)</strong></em> 方法中。</p>
<h3 id="create"><a href="#create" class="headerlink" title="create()"></a>create()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	classOnly = <span class="keyword">false</span>;</span><br><span class="line">	argumentTypes = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">return</span> createHelper();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="createHelper"><a href="#createHelper" class="headerlink" title="createHelper()"></a>createHelper()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">createHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	preValidate();</span><br><span class="line">	Object key = KEY_FACTORY.newInstance((superclass != <span class="keyword">null</span>) ? superclass.getName() : <span class="keyword">null</span>,</span><br><span class="line">			ReflectUtils.getNames(interfaces),</span><br><span class="line">			filter == ALL_ZERO ? <span class="keyword">null</span> : <span class="keyword">new</span> WeakCacheKey&lt;CallbackFilter&gt;(filter),</span><br><span class="line">			callbackTypes,</span><br><span class="line">			useFactory,</span><br><span class="line">			interceptDuringConstruction,</span><br><span class="line">			serialVersionUID);</span><br><span class="line">	<span class="keyword">this</span>.currentKey = key;</span><br><span class="line">	Object result = <span class="keyword">super</span>.create(key);</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="super-create-key"><a href="#super-create-key" class="headerlink" title="super.create(key)"></a>super.create(key)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">create</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		ClassLoader loader = getClassLoader();</span><br><span class="line">		Map&lt;ClassLoader, ClassLoaderData&gt; cache = CACHE;</span><br><span class="line">		ClassLoaderData data = cache.get(loader);</span><br><span class="line">		<span class="keyword">if</span> (data == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">synchronized</span> (AbstractClassGenerator.class) &#123;</span><br><span class="line">				cache = CACHE;</span><br><span class="line">				data = cache.get(loader);</span><br><span class="line">				<span class="keyword">if</span> (data == <span class="keyword">null</span>) &#123;</span><br><span class="line">					Map&lt;ClassLoader, ClassLoaderData&gt; newCache = <span class="keyword">new</span> WeakHashMap&lt;ClassLoader, ClassLoaderData&gt;(cache);</span><br><span class="line">					data = <span class="keyword">new</span> ClassLoaderData(loader);</span><br><span class="line">					newCache.put(loader, data);</span><br><span class="line">					CACHE = newCache;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>.key = key;</span><br><span class="line">           <span class="comment">// 这一步是生成代理对象的class文件的包装对象EnhancerFactoryData</span></span><br><span class="line">		Object obj = data.get(<span class="keyword">this</span>, getUseCache());</span><br><span class="line">		<span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">			<span class="keyword">return</span> firstInstance((Class) obj);</span><br><span class="line">		&#125;</span><br><span class="line">           <span class="comment">// 这一步通过代理对象的class文件将代理对象创建出来</span></span><br><span class="line">		<span class="keyword">return</span> nextInstance(obj);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (RuntimeException | Error ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> ex;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> CodeGenerationException(ex);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 <em><strong>Object obj = data.get(this, getUseCache())</strong></em> 是生成代理对象的class文件的方法，而 <em><strong>nextInstance(obj)</strong></em> 方法则是通过代理对象的class文件将代理对象创建出来。代理对象的静态方法 <em><strong>CGLIB$SET_THREAD_CALLBACKS(Callback[] var0)</strong></em>  肯定是在其class文件生成之后被调用的，因此我们继续跟踪 <em><strong>nextInstance(obj)</strong></em> 方法。</p>
<h3 id="Enhancer的nextInstance-Object-instance"><a href="#Enhancer的nextInstance-Object-instance" class="headerlink" title="Enhancer的nextInstance(Object instance)"></a>Enhancer的nextInstance(Object instance)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">nextInstance</span><span class="params">(Object instance)</span> </span>&#123;</span><br><span class="line">	EnhancerFactoryData data = (EnhancerFactoryData) instance;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (classOnly) &#123;</span><br><span class="line">		<span class="keyword">return</span> data.generatedClass;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Class[] argumentTypes = <span class="keyword">this</span>.argumentTypes;</span><br><span class="line">	Object[] arguments = <span class="keyword">this</span>.arguments;</span><br><span class="line">	<span class="keyword">if</span> (argumentTypes == <span class="keyword">null</span>) &#123;</span><br><span class="line">		argumentTypes = Constants.EMPTY_CLASS_ARRAY;</span><br><span class="line">		arguments = <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> data.newInstance(argumentTypes, arguments, callbacks);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="EnhancerFactoryData的newInstance-Class-argumentTypes-Object-arguments-Callback-callbacks"><a href="#EnhancerFactoryData的newInstance-Class-argumentTypes-Object-arguments-Callback-callbacks" class="headerlink" title="EnhancerFactoryData的newInstance(Class[] argumentTypes, Object[] arguments, Callback[] callbacks)"></a>EnhancerFactoryData的newInstance(Class[] argumentTypes, Object[] arguments, Callback[] callbacks)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">newInstance</span><span class="params">(Class[] argumentTypes, Object[] arguments, Callback[] callbacks)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用代理的对象静态方法 CGLIB$SET_THREAD_CALLBACKS(Callback[] var0)</span></span><br><span class="line">    setThreadCallbacks(callbacks);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Explicit reference equality is added here just in case Arrays.equals does not have one</span></span><br><span class="line">        <span class="keyword">if</span> (primaryConstructorArgTypes == argumentTypes ||</span><br><span class="line">            Arrays.equals(primaryConstructorArgTypes, argumentTypes)) &#123;</span><br><span class="line">            <span class="comment">// If we have relevant Constructor instance at hand, just call it</span></span><br><span class="line">            <span class="comment">// This skips &quot;get constructors&quot; machinery</span></span><br><span class="line">            <span class="keyword">return</span> ReflectUtils.newInstance(primaryConstructor, arguments);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Take a slow path if observing unexpected argument types</span></span><br><span class="line">        <span class="keyword">return</span> ReflectUtils.newInstance(generatedClass, argumentTypes, arguments);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// clear thread callbacks to allow them to be gc&#x27;d</span></span><br><span class="line">        setThreadCallbacks(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>EnhancerFactoryData</strong></em> 是 <em><strong>Enhancer</strong></em> 的内部类，而这里的 <em><strong>setThreadCallbacks(callbacks)</strong></em> 的入参 <em><strong>callbacks</strong></em> 往上追溯来自于 <em><strong>Enhancer</strong></em> 类的属性<em><strong>private Callback[] callbacks</strong></em>，那这个属性是何时赋值的呢？将目光移向我们写道程序入口，我们将自定义的 <em><strong>MethodInterceptor</strong></em> 对象 <em><strong>MyCglib</strong></em> 创建并赋值给了 <em><strong>Enhancer</strong></em> 的对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置cglib生成的class文件保存路径</span></span><br><span class="line">        System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, <span class="string">&quot;E:\\mashibing\\spring&quot;</span>);</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(Calculator.class);</span><br><span class="line">        <span class="comment">// 对Enhancer类的callbacks属性赋值</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> MyCglib());</span><br><span class="line">        Calculator myCalculator = (Calculator) enhancer.create();</span><br><span class="line">        myCalculator.add(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(myCalculator.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="setThreadCallbacks-Callback-callbacks"><a href="#setThreadCallbacks-Callback-callbacks" class="headerlink" title="setThreadCallbacks(Callback[] callbacks)"></a>setThreadCallbacks(Callback[] callbacks)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setThreadCallbacks</span><span class="params">(Callback[] callbacks)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        setThreadCallbacks.invoke(generatedClass, (Object) callbacks);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CodeGenerationException(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CodeGenerationException(e.getTargetException());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>setThreadCallbacks</strong></em>  是代理类静态方法  <em><strong>CGLIB$SET_THREAD_CALLBACKS(Callback[] var0)</strong></em> 的 <em><strong>Method</strong></em> 对象，<em><strong>generatedClass</strong></em> 为代理对象的 <em><strong>class</strong></em> 对象。这两个对象都是 <em><strong>EnhancerFactoryData</strong></em> 的内部属性字段，是通过  <em><strong>EnhancerFactoryData</strong></em> 的构造方法赋值的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EnhancerFactoryData</span><span class="params">(Class generatedClass, Class[] primaryConstructorArgTypes, <span class="keyword">boolean</span> classOnly)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 代理对象的class对象</span></span><br><span class="line">    <span class="keyword">this</span>.generatedClass = generatedClass;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 通过class对象和方法名获取Method对象</span></span><br><span class="line">        setThreadCallbacks = getCallbacksSetter(generatedClass, SET_THREAD_CALLBACKS_NAME);</span><br><span class="line">        <span class="keyword">if</span> (classOnly) &#123;</span><br><span class="line">            <span class="keyword">this</span>.primaryConstructorArgTypes = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.primaryConstructor = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.primaryConstructorArgTypes = primaryConstructorArgTypes;</span><br><span class="line">            <span class="keyword">this</span>.primaryConstructor = ReflectUtils.getConstructor(generatedClass, primaryConstructorArgTypes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CodeGenerationException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MethodInterceptor的intercept方法是怎么实现代理的"><a href="#MethodInterceptor的intercept方法是怎么实现代理的" class="headerlink" title="MethodInterceptor的intercept方法是怎么实现代理的"></a>MethodInterceptor的intercept方法是怎么实现代理的</h2><p>通过以上讲解，我们得知代理对象 <em><strong>Calculator myCalculator = (Calculator) enhancer.create()</strong></em> 调用 <em><strong>myCalculator.add(1, 1)</strong></em>  方法，实际上会去调用我们在 <em><strong>Enhancer</strong></em> 对象中设置的回调对象 <em><strong>enhancer.setCallback(new MyCglib())</strong></em> 的 <em><strong>intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy)</strong></em> 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2)</span> </span>&#123;</span><br><span class="line">    MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">    <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">        var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (var10000 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Object var3 = var10000.intercept(<span class="keyword">this</span>, CGLIB$add$<span class="number">0</span>$Method, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> Integer(var1), <span class="keyword">new</span> Integer(var2)&#125;, CGLIB$add$<span class="number">0</span>$Proxy);</span><br><span class="line">        <span class="keyword">return</span> var3 == <span class="keyword">null</span> ? <span class="number">0</span> : ((Number)var3).intValue();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.add(var1, var2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们先关注两个对象 <em><strong>CGLIB$add$0$Method</strong></em> 和 <em><strong>CGLIB$add$0$Proxy</strong></em>，这两个变量的赋值都在静态方法 <em><strong>CGLIB$STATICHOOK1()</strong></em> 中，这个方法在静态代码块中被调用，也就是说当代理类的class文件被加载到内存中时便已经执行了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span>$$<span class="title">EnhancerByCGLIB</span>$$345<span class="title">a285a</span> <span class="keyword">extends</span> <span class="title">Calculator</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;    </span><br><span class="line">	...</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        CGLIB$STATICHOOK1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CGLIB-add-0-Method"><a href="#CGLIB-add-0-Method" class="headerlink" title="CGLIB$add$0$Method"></a>CGLIB$add$0$Method</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> CGLIB$STATICHOOK1() &#123;</span><br><span class="line">    CGLIB$THREAD_CALLBACKS = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line">    CGLIB$emptyArgs = <span class="keyword">new</span> Object[<span class="number">0</span>];</span><br><span class="line">    Class var0 = Class.forName(<span class="string">&quot;com.eitan.proxy.cglib.Calculator$$EnhancerByCGLIB$$345a285a&quot;</span>);</span><br><span class="line">    Class var1;</span><br><span class="line">    Method[] var10000 = ReflectUtils.findMethods(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;add&quot;</span>, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;sub&quot;</span>, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;mult&quot;</span>, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;div&quot;</span>, <span class="string">&quot;(II)I&quot;</span>&#125;, (var1 = Class.forName(<span class="string">&quot;com.eitan.proxy.cglib.Calculator&quot;</span>)).getDeclaredMethods());</span><br><span class="line">    CGLIB$add$<span class="number">0</span>$Method = var10000[<span class="number">0</span>];</span><br><span class="line">    CGLIB$add$<span class="number">0</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;add&quot;</span>, <span class="string">&quot;CGLIB$add$0&quot;</span>);</span><br><span class="line">    CGLIB$sub$<span class="number">1</span>$Method = var10000[<span class="number">1</span>];</span><br><span class="line">    CGLIB$sub$<span class="number">1</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;sub&quot;</span>, <span class="string">&quot;CGLIB$sub$1&quot;</span>);</span><br><span class="line">    CGLIB$mult$<span class="number">2</span>$Method = var10000[<span class="number">2</span>];</span><br><span class="line">    CGLIB$mult$<span class="number">2</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;mult&quot;</span>, <span class="string">&quot;CGLIB$mult$2&quot;</span>);</span><br><span class="line">    CGLIB$div$<span class="number">3</span>$Method = var10000[<span class="number">3</span>];</span><br><span class="line">    CGLIB$div$<span class="number">3</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;(II)I&quot;</span>, <span class="string">&quot;div&quot;</span>, <span class="string">&quot;CGLIB$div$3&quot;</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出，该成员变量是通过 <em><strong>var1 = Class.forName(“com.eitan.proxy.cglib.Calculator”)).getDeclaredMethods()</strong></em> 拿到被代理类的所有 Method 方法对象，然后按顺序依次赋值 <em><strong>CGLIB$add$0$Method = var10000[0]</strong></em> ，因此变量 <em><strong>CGLIB$add$0$Method</strong></em> 就代表被代理对象的 add方法的 Method 对象。</p>
<h3 id="CGLIB-add-0-Proxy"><a href="#CGLIB-add-0-Proxy" class="headerlink" title="CGLIB$add$0$Proxy"></a>CGLIB$add$0$Proxy</h3><p>这是 <em><strong>CGLIB</strong></em> 框架里的 <em><strong>MethodProxy</strong></em> 类的对象，通过 <em><strong>MethodProxy.create(var1, var0, “(II)I”, “add”, “CGLIB$add$0”)</strong></em> 方法构建。其中 <em><strong>var1</strong></em> 为被代理对象的class对象 <em><strong>var1 = Class.forName(“com.eitan.proxy.cglib.Calculator”)<em><strong>，</strong></em>var0</strong></em> 为代理对象的class对象 <em><strong>Class var0 = Class.forName(“com.eitan.proxy.cglib.Calculator$$EnhancerByCGLIB$$345a285a”)</strong></em> 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MethodProxy <span class="title">create</span><span class="params">(Class c1, Class c2, String desc, String name1, String name2)</span> </span>&#123;</span><br><span class="line">	MethodProxy proxy = <span class="keyword">new</span> MethodProxy();</span><br><span class="line">       <span class="comment">// name1 = &quot;add&quot;</span></span><br><span class="line">	proxy.sig1 = <span class="keyword">new</span> Signature(name1, desc);</span><br><span class="line">       <span class="comment">// name2 = &quot;CGLIB$add$0&quot;</span></span><br><span class="line">	proxy.sig2 = <span class="keyword">new</span> Signature(name2, desc);</span><br><span class="line">	proxy.createInfo = <span class="keyword">new</span> CreateInfo(c1, c2);</span><br><span class="line">	<span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 <em><strong>name1 = “add”<em><strong>，</strong></em>name2 = “CGLIB$add$0”</strong></em> 是两个方法名：</p>
<ul>
<li>add 方法：代理对象对原方法的增强，在其中调用了 MethodInterceptor 的 intercept 方法</li>
<li>CGLIB$add$0：直接调用父类的 add 方法，也就是直接调用被代理对象的 add 方法</li>
</ul>
<h3 id="methodProxy-invokeSuper-o-objects"><a href="#methodProxy-invokeSuper-o-objects" class="headerlink" title="methodProxy.invokeSuper(o, objects)"></a>methodProxy.invokeSuper(o, objects)</h3><p>当我们知道了 <em><strong>MethodInterceptor</strong></em> 的 <em><strong>intercept</strong></em> 方法的入参代表何值之后，我们将注意力放在自定义的 <em><strong>MethodInceptor</strong></em> 子类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCglib</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用cglib动态代理&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> methodProxy.invokeSuper(o, objects);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当代理对象执行 <em><strong>add(1, 1)</strong></em> 方法时，最终将调用该对象的 <em><strong>intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy)</strong></em> 方法。从代理对象的class文件可以分析出这个方法的各个入参的实际含义：</p>
<ul>
<li>Object o：代理对象</li>
<li>Method method：被代理类所执行方法的Method对象</li>
<li>Object[] objects：所执行方法的入参</li>
<li>MethodProxy methodProxy：cglib包下的类，包含了代理类和被代理类的class对象以及两个方法名 add 和 CGLIB$add$0</li>
</ul>
<h3 id="为什么methodProxy-invokeSuper-o-objects-方法会调用被代理对象的方法呢？"><a href="#为什么methodProxy-invokeSuper-o-objects-方法会调用被代理对象的方法呢？" class="headerlink" title="为什么methodProxy.invokeSuper(o, objects)方法会调用被代理对象的方法呢？"></a>为什么methodProxy.invokeSuper(o, objects)方法会调用被代理对象的方法呢？</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invokeSuper</span><span class="params">(Object obj, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		init();</span><br><span class="line">		FastClassInfo fci = fastClassInfo;</span><br><span class="line">		<span class="keyword">return</span> fci.f2.invoke(fci.i2, obj, args);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">		<span class="keyword">throw</span> e.getTargetException();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="init"><a href="#init" class="headerlink" title="init()"></a>init()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Using a volatile invariant allows us to initialize the FastClass and</span></span><br><span class="line"><span class="comment">	 * method index pairs atomically.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * Double-checked locking is safe with volatile in Java 5.  Before 1.5 this</span></span><br><span class="line"><span class="comment">	 * code could allow fastClassInfo to be instantiated more than once, which</span></span><br><span class="line"><span class="comment">	 * appears to be benign.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (fastClassInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">synchronized</span> (initLock) &#123;</span><br><span class="line">			<span class="keyword">if</span> (fastClassInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">				CreateInfo ci = createInfo;</span><br><span class="line"></span><br><span class="line">				FastClassInfo fci = <span class="keyword">new</span> FastClassInfo();</span><br><span class="line">                   <span class="comment">// 生成被代理类的 FastClass 对象</span></span><br><span class="line">				fci.f1 = helper(ci, ci.c1);</span><br><span class="line">                   <span class="comment">// 生成代理类的 FastClass 对象</span></span><br><span class="line">				fci.f2 = helper(ci, ci.c2);</span><br><span class="line">                   <span class="comment">// 即调用被代理类的 FastClass 对象找出 sig1 包含的方法名 add 的下标</span></span><br><span class="line">				fci.i1 = fci.f1.getIndex(sig1);</span><br><span class="line">                   <span class="comment">// 即调用代理类的 FastClass 对象找出 sig2 包含的方法名 CGLIB$add$0 的下标</span></span><br><span class="line">				fci.i2 = fci.f2.getIndex(sig2);</span><br><span class="line">				fastClassInfo = fci;</span><br><span class="line">				createInfo = <span class="keyword">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="fci-f2-invoke-fci-i2-obj-args"><a href="#fci-f2-invoke-fci-i2-obj-args" class="headerlink" title="fci.f2.invoke(fci.i2, obj, args);"></a>fci.f2.invoke(fci.i2, obj, args);</h4><p>调用代理类的 FastClass 对象的 <em><strong>invoke(fci.i2, obj, args)</strong></em> 方法，其中：</p>
<ul>
<li>fci.i2：调用代理类的 FastClass 对象的 fci.f2.getIndex(sig2) 找出的索引</li>
<li>obj：methodProxy.invokeSuper(o, objects) 传入的对象 o，这里也就是代理对象</li>
<li>args：要调用的方法参数</li>
</ul>
<h4 id="Calculator-EnhancerByCGLIB-345a285a-FastClassByCGLIB-cfb242b8d代理对象的FastClass"><a href="#Calculator-EnhancerByCGLIB-345a285a-FastClassByCGLIB-cfb242b8d代理对象的FastClass" class="headerlink" title="Calculator$$EnhancerByCGLIB$$345a285a$$FastClassByCGLIB$$cfb242b8d代理对象的FastClass"></a>Calculator$$EnhancerByCGLIB$$345a285a$$FastClassByCGLIB$$cfb242b8d代理对象的FastClass</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span>$$<span class="title">EnhancerByCGLIB</span>$$345<span class="title">a285a</span>$$<span class="title">FastClassByCGLIB</span>$$<span class="title">cfb242b8</span> <span class="keyword">extends</span> <span class="title">FastClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Calculator$$EnhancerByCGLIB$$345a285a$$FastClassByCGLIB$$cfb242b8(Class var1) &#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(Signature var1)</span> </span>&#123;</span><br><span class="line">        String var10000 = var1.toString();</span><br><span class="line">        <span class="keyword">switch</span>(var10000.hashCode()) &#123;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">2131682232</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;sub(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1870561232</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$findMethodProxy(Lorg/springframework/cglib/core/Signature;)Lorg/springframework/cglib/proxy/MethodProxy;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">17</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1860420502</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$clone$7()Ljava/lang/Object;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">22</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1745842178</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;setCallbacks([Lorg/springframework/cglib/proxy/Callback;)V&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1641413109</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;newInstance([Lorg/springframework/cglib/proxy/Callback;)Ljava/lang/Object;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1457535688</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$STATICHOOK1()V&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">25</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1411753352</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$hashCode$6()I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1287932281</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;add(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1267343528</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;mult(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">15</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1034266769</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$SET_STATIC_CALLBACKS([Lorg/springframework/cglib/proxy/Callback;)V&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">14</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1025895669</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$SET_THREAD_CALLBACKS([Lorg/springframework/cglib/proxy/Callback;)V&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">13</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">988317324</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;newInstance([Ljava/lang/Class;[Ljava/lang/Object;[Lorg/springframework/cglib/proxy/Callback;)Ljava/lang/Object;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">984241474</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$add$0(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">26</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">974181657</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$mult$2(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">23</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">629417301</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$div$3(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">24</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">508378822</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;clone()Ljava/lang/Object;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">50496290</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$sub$1(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">21</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">303407255</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;div(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">16</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">593200387</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$equals$4(Ljava/lang/Object;)Z&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">18</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">610042816</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;newInstance(Lorg/springframework/cglib/proxy/Callback;)Ljava/lang/Object;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1132856532</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;getCallbacks()[Lorg/springframework/cglib/proxy/Callback;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">12</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1246779367</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;setCallback(ILorg/springframework/cglib/proxy/Callback;)V&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">9</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1364367423</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;getCallback(I)Lorg/springframework/cglib/proxy/Callback;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1826985398</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;equals(Ljava/lang/Object;)Z&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1913648695</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;toString()Ljava/lang/String;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1940521675</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;CGLIB$toString$5()Ljava/lang/String;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">19</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1984935277</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;hashCode()I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(String var1, Class[] var2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(var1.hashCode()) &#123;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1776922004</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;toString&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1295482945</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;equals&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;java.lang.Object&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1053468136</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;getCallbacks&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">12</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">124978606</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$equals$4&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;java.lang.Object&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">18</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">60403779</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$SET_STATIC_CALLBACKS&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;[Lorg.springframework.cglib.proxy.Callback;&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">14</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">29025552</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$hashCode$6&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">96417</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;add&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">99473</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;div&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">16</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">114240</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;sub&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3363120</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;mult&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">15</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">85179481</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$SET_THREAD_CALLBACKS&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;[Lorg.springframework.cglib.proxy.Callback;&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">13</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">94756189</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;clone&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">147696667</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;hashCode&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">161998109</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$STATICHOOK1&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">25</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">357484609</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$mult$2&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">23</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">495524492</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;setCallbacks&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;[Lorg.springframework.cglib.proxy.Callback;&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1108311562</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$add$0&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">26</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1111248381</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$div$3&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">24</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1125439466</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$sub$1&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">21</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1154623345</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$findMethodProxy&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;org.springframework.cglib.core.Signature&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">17</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1543336192</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$toString$5&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">19</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1811874389</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;newInstance&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    String var10001 = var2[<span class="number">0</span>].getName();</span><br><span class="line">                    <span class="keyword">switch</span>(var10001.hashCode()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> -<span class="number">1997738671</span>:</span><br><span class="line">                        <span class="keyword">if</span> (var10001.equals(<span class="string">&quot;[Lorg.springframework.cglib.proxy.Callback;&quot;</span>)) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1364160985</span>:</span><br><span class="line">                        <span class="keyword">if</span> (var10001.equals(<span class="string">&quot;org.springframework.cglib.proxy.Callback&quot;</span>)) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;[Ljava.lang.Class;&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;[Ljava.lang.Object;&quot;</span>) &amp;&amp; var2[<span class="number">2</span>].getName().equals(<span class="string">&quot;[Lorg.springframework.cglib.proxy.Callback;&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1817099975</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;setCallback&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;org.springframework.cglib.proxy.Callback&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">9</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1905679803</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;getCallback&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1951977613</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;CGLIB$clone$7&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">22</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(Class[] var1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(var1.length) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(<span class="keyword">int</span> var1, Object var2, Object[] var3)</span> <span class="keyword">throws</span> InvocationTargetException </span>&#123;</span><br><span class="line">        345a285a var10000 = (345a285a)var2;</span><br><span class="line">        <span class="keyword">int</span> var10001 = var1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span>(var10001) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.add(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Boolean(var10000.equals(var3[<span class="number">0</span>]));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> var10000.toString();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.hashCode());</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">return</span> var10000.clone();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">return</span> var10000.newInstance((Callback[])var3[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="keyword">return</span> var10000.newInstance((Class[])var3[<span class="number">0</span>], (Object[])var3[<span class="number">1</span>], (Callback[])var3[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="keyword">return</span> var10000.newInstance((Callback)var3[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.sub(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                var10000.setCallback(((Number)var3[<span class="number">0</span>]).intValue(), (Callback)var3[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                var10000.setCallbacks((Callback[])var3[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                <span class="keyword">return</span> var10000.getCallback(((Number)var3[<span class="number">0</span>]).intValue());</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                <span class="keyword">return</span> var10000.getCallbacks();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">                345a285a.CGLIB$SET_THREAD_CALLBACKS((Callback[])var3[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">                345a285a.CGLIB$SET_STATIC_CALLBACKS((Callback[])var3[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.mult(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.div(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">                <span class="keyword">return</span> 345a285a.CGLIB$findMethodProxy((Signature)var3[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">18</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Boolean(var10000.CGLIB$equals$<span class="number">4</span>(var3[<span class="number">0</span>]));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">19</span>:</span><br><span class="line">                <span class="keyword">return</span> var10000.CGLIB$toString$<span class="number">5</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.CGLIB$hashCode$<span class="number">6</span>());</span><br><span class="line">            <span class="keyword">case</span> <span class="number">21</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.CGLIB$sub$<span class="number">1</span>(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">22</span>:</span><br><span class="line">                <span class="keyword">return</span> var10000.CGLIB$clone$<span class="number">7</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">23</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.CGLIB$mult$<span class="number">2</span>(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">24</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.CGLIB$div$<span class="number">3</span>(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">25</span>:</span><br><span class="line">                345a285a.CGLIB$STATICHOOK1();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">26</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.CGLIB$add$<span class="number">0</span>(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvocationTargetException(var4);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot find matching method/constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">newInstance</span><span class="params">(<span class="keyword">int</span> var1, Object[] var2)</span> <span class="keyword">throws</span> InvocationTargetException </span>&#123;</span><br><span class="line">        345a285a var10000 = <span class="keyword">new</span> 345a285a;</span><br><span class="line">        345a285a var10001 = var10000;</span><br><span class="line">        <span class="keyword">int</span> var10002 = var1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span>(var10002) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                var10001.&lt;init&gt;();</span><br><span class="line">                <span class="keyword">return</span> var10000;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvocationTargetException(var3);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot find matching method/constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">26</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Calculator-FastClassByCGLIB-9bbbb4ed被代理对象的FastClass"><a href="#Calculator-FastClassByCGLIB-9bbbb4ed被代理对象的FastClass" class="headerlink" title="Calculator$$FastClassByCGLIB$$9bbbb4ed被代理对象的FastClass"></a>Calculator$$FastClassByCGLIB$$9bbbb4ed被代理对象的FastClass</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span>$$<span class="title">FastClassByCGLIB</span>$$9<span class="title">bbbb4ed</span> <span class="keyword">extends</span> <span class="title">FastClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Calculator$$FastClassByCGLIB$$9bbbb4ed(Class var1) &#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(Signature var1)</span> </span>&#123;</span><br><span class="line">        String var10000 = var1.toString();</span><br><span class="line">        <span class="keyword">switch</span>(var10000.hashCode()) &#123;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">2131682232</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;sub(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1287932281</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;add(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1267343528</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;mult(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">303407255</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;div(II)I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1826985398</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;equals(Ljava/lang/Object;)Z&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1913648695</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;toString()Ljava/lang/String;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1984935277</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;hashCode()I&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(String var1, Class[] var2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(var1.hashCode()) &#123;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1776922004</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;toString&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1295482945</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;equals&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;java.lang.Object&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">96417</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;add&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">99473</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;div&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">114240</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;sub&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3363120</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;mult&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var2[<span class="number">0</span>].getName().equals(<span class="string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="number">1</span>].getName().equals(<span class="string">&quot;int&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">147696667</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;hashCode&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(var2.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(Class[] var1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(var1.length) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(<span class="keyword">int</span> var1, Object var2, Object[] var3)</span> <span class="keyword">throws</span> InvocationTargetException </span>&#123;</span><br><span class="line">        Calculator var10000 = (Calculator)var2;</span><br><span class="line">        <span class="keyword">int</span> var10001 = var1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span>(var10001) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.add(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.sub(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.mult(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.div(((Number)var3[<span class="number">0</span>]).intValue(), ((Number)var3[<span class="number">1</span>]).intValue()));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Boolean(var10000.equals(var3[<span class="number">0</span>]));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">return</span> var10000.toString();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.hashCode());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvocationTargetException(var4);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot find matching method/constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">newInstance</span><span class="params">(<span class="keyword">int</span> var1, Object[] var2)</span> <span class="keyword">throws</span> InvocationTargetException </span>&#123;</span><br><span class="line">        Calculator var10000 = <span class="keyword">new</span> Calculator;</span><br><span class="line">        Calculator var10001 = var10000;</span><br><span class="line">        <span class="keyword">int</span> var10002 = var1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span>(var10002) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                var10001.&lt;init&gt;();</span><br><span class="line">                <span class="keyword">return</span> var10000;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvocationTargetException(var3);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot find matching method/constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以，<em><strong>fci.f2.invoke(fci.i2, obj, args)</strong></em> 实际上会通过方法的索引 <em><strong>fci.i2</strong></em> 找出对应相应执行的方法，再通过传入的对象直接调用该方法达成目的。总结一句，FastClass 类将目标类的所有方法建立索引，且通过方法名可以找出对应下标，在代码里直接对传入对象进行方法调用，避免了使用反射造成的性能消耗。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>cglib</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop（三）：Hive</title>
    <url>/2022/05/11/Hadoop%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9AHive/</url>
    <content><![CDATA[<p>本文为学习笔记，对应视频教程来自<a href="https://www.bilibili.com/video/BV1L5411u7ae">黑马程序员Hive教程</a></p>
<h3 id="Hive部署"><a href="#Hive部署" class="headerlink" title="Hive部署"></a>Hive部署</h3><h4 id="Mysql-安装"><a href="#Mysql-安装" class="headerlink" title="Mysql 安装"></a>Mysql 安装</h4><h5 id="卸载Centos7自带mariadb和mysql"><a href="#卸载Centos7自带mariadb和mysql" class="headerlink" title="卸载Centos7自带mariadb和mysql"></a>卸载Centos7自带mariadb和mysql</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop102 ~]# rpm -qa | grep mariadb</span><br><span class="line">mariadb-libs-5.5.60-1.el7_5.x86_64</span><br><span class="line">[root@hadoop102 ~]# rpm -e mariadb-libs-5.5.60-1.el7_5.x86_64 --nodeps</span><br><span class="line"><span class="meta">#</span><span class="bash"> 最小化安装不会自带MySQL</span></span><br><span class="line">[root@hadoop102 ~]# rpm -e --nodeps $(rpm -qa | grep mysql)</span><br></pre></td></tr></table></figure>

<h5 id="mysql安装介质下载"><a href="#mysql安装介质下载" class="headerlink" title="mysql安装介质下载"></a>mysql安装介质下载</h5><p><strong>官网下载地址：</strong><a href="https://downloads.mysql.com/archives/community/"><strong>MySQL Product Archives</strong></a></p>
<table>
<thead>
<tr>
<th>Product Version</th>
<th>Operating System</th>
<th>OS Version</th>
</tr>
</thead>
<tbody><tr>
<td>5.7.20</td>
<td>Linux - Generic</td>
<td>Linux - Generic(glibc 2.12)(x86,64-bit)</td>
</tr>
</tbody></table>
<h5 id="解压安装介质"><a href="#解压安装介质" class="headerlink" title="解压安装介质"></a>解压安装介质</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop102 ~]# cd /opt/software/</span><br><span class="line">[root@hadoop102 software]# tar -zxf mysql-5.7.20-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将解压出的文件夹名称修改为mysql-5.7.20</span></span><br><span class="line">[root@hadoop102 software]# mv mysql-5.7.20-linux-glibc2.12-x86_64 ../module/mysql-5.7.20</span><br></pre></td></tr></table></figure>

<h5 id="建立用户和组并创建相关目录"><a href="#建立用户和组并创建相关目录" class="headerlink" title="建立用户和组并创建相关目录"></a>建立用户和组并创建相关目录</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop102 mysql-5.7.20]# groupadd mysql</span><br><span class="line">[root@hadoop102 mysql-5.7.20]# useradd -r -g mysql -s /bin/false mysql</span><br><span class="line"></span><br><span class="line">[root@hadoop102 mysql-5.7.20]# mkdir -p /data/mysql</span><br><span class="line">[root@hadoop102 mysql-5.7.20]# chown -R mysql:mysql /data</span><br><span class="line">[root@hadoop102 mysql-5.7.20]# chmod 750 /data</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h5 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop102 ~]# vim /etc/profile.d/my_env.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">MYSQL_HOME</span></span><br><span class="line">export MYSQL_HOME=/opt/module/mysql-5.7.20</span><br><span class="line">export PATH=$PATH:$MYSQL_HOME/bin</span><br><span class="line"></span><br><span class="line">[root@hadoop102 ~]# source /etc/profile</span><br></pre></td></tr></table></figure>

<h5 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop102 ~]# yum install libaio</span><br></pre></td></tr></table></figure>

<h5 id="初始化MySQL"><a href="#初始化MySQL" class="headerlink" title="初始化MySQL"></a>初始化MySQL</h5><ol>
<li><p>初始化创建mysql数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop102 ~]# mysqld --initialize --user=mysql --basedir=/opt/module/mysql-5.7.20/ --datadir=/data/mysql/</span><br><span class="line">2022-05-11T10:50:24.777743Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).</span><br><span class="line">2022-05-11T10:50:25.027412Z 0 [Warning] InnoDB: New log files created, LSN=45790</span><br><span class="line">2022-05-11T10:50:25.068499Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.</span><br><span class="line">2022-05-11T10:50:25.139430Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: 29be3489-d118-11ec-ba45-000c2900c11d.</span><br><span class="line">2022-05-11T10:50:25.140670Z 0 [Warning] Gtid table is not ready to be used. Table &#x27;mysql.gtid_executed&#x27; cannot be opened.</span><br><span class="line">2022-05-11T10:50:25.141518Z 1 [Note] A temporary password is generated for root@localhost: L2)cw18vE8lw</span><br></pre></td></tr></table></figure></li>
<li><p>配置mysql.cnf文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 找到配置文件所在位置</span></span><br><span class="line">[root@hadoop102 ~]# mysql --help | grep cnf</span><br><span class="line">                      order of preference, my.cnf, $MYSQL_TCP_PORT,</span><br><span class="line">/etc/my.cnf /etc/mysql/my.cnf /usr/local/mysql/etc/my.cnf /opt/module/mysql-5.7.20/my.cnf ~/.my.cnf </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑配置文件</span></span><br><span class="line">[root@hadoop102 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">user=mysql</span><br><span class="line">port=3306</span><br><span class="line">basedir=/opt/module/mysql-5.7.20</span><br><span class="line">datadir=/data/mysql</span><br><span class="line">server_id=1</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">[mysql]</span><br><span class="line">socket=/tmp/mysql.sock</span><br></pre></td></tr></table></figure></li>
<li><p>配置mysql服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop102 ~]# vim /usr/lib/systemd/system/mysqld.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=MySQL Server</span><br><span class="line">Documentation=man:mysqld(8)</span><br><span class="line">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span><br><span class="line">After=network.target</span><br><span class="line">After=syslog.target</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">[Service]</span><br><span class="line">User=mysql</span><br><span class="line">Group=mysql</span><br><span class="line">ExecStart=/opt/module/mysql-5.7.20/bin/mysqld --defaults-file=/etc/my.cnf</span><br><span class="line">LimitNOFILE = 5000</span><br></pre></td></tr></table></figure></li>
<li><p>启动服务并修改密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop102 ~]# systemctl start mysqld</span><br><span class="line"></span><br><span class="line">[root@hadoop102 ~]# mysql -uroot -p</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改密码</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> ALTER USER USER() IDENTIFIED BY <span class="string">&#x27;root&#x27;</span>;</span></span><br></pre></td></tr></table></figure></li>
<li><p>授权允许远程访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看MySQL当前远程访问权限配置</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use mysql;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT User,authentication_string,Host FROM user;</span></span><br><span class="line">+---------------+-------------------------------------------+-----------+</span><br><span class="line">| User          | authentication_string                     | Host      |</span><br><span class="line">+---------------+-------------------------------------------+-----------+</span><br><span class="line">| root          | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B | localhost |</span><br><span class="line">| mysql.session | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | localhost |</span><br><span class="line">| mysql.sys     | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | localhost |</span><br><span class="line">+---------------+-------------------------------------------+-----------+</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;password&#x27; WITH GRANT OPTION;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从mysql数据库的grant表中重新加载权限数据</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> FLUSH PRIVILEGES;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="Hive-安装-远程模式"><a href="#Hive-安装-远程模式" class="headerlink" title="Hive 安装 - 远程模式"></a>Hive 安装 - 远程模式</h4><h5 id="Hive安装介质的下载与解压"><a href="#Hive安装介质的下载与解压" class="headerlink" title="Hive安装介质的下载与解压"></a>Hive安装介质的下载与解压</h5><p><strong>官网下载地址：</strong><a href="https://hive.apache.org/downloads.html"><strong>Apache Hive Downloads</strong></a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop102 ~]# cd /opt/software/</span><br><span class="line">[root@hadoop102 software]# tar -zxf apache-hive-3.1.3-bin.tar.gz </span><br><span class="line">[root@hadoop102 software]# mv apache-hive-3.1.3-bin ../module/apache-hive-3.1.3</span><br></pre></td></tr></table></figure>

<h5 id="解决hadoop、hive之间guava版本差异"><a href="#解决hadoop、hive之间guava版本差异" class="headerlink" title="解决hadoop、hive之间guava版本差异"></a>解决hadoop、hive之间guava版本差异</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除 hive 中低版本的 jar 包</span></span><br><span class="line">[root@hadoop102 ~]# cd /opt/module/apache-hive-3.1.3/</span><br><span class="line">[root@hadoop102 apache-hive-3.1.3]# rm -rf lib/guava-19.0.jar </span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制 hadoop 中高版本的 jar 包到 hive 的 lib 目录下</span></span><br><span class="line">[root@hadoop102 apache-hive-3.1.3]# cp /opt/module/hadoop-3.3.2/share/hadoop/common/lib/guava-27.0-jre.jar ./lib/</span><br></pre></td></tr></table></figure>

<h5 id="添加mysql-jdbc驱动"><a href="#添加mysql-jdbc驱动" class="headerlink" title="添加mysql jdbc驱动"></a>添加mysql jdbc驱动</h5><p><strong>官网下载地址：</strong><a href="https://dev.mysql.com/downloads/">MySQL Community Downloads</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@hadoop102 eitan]# cd /opt/software/</span><br><span class="line">[root@hadoop102 software]# tar -zxf mysql-connector-java-8.0.29.tar.gz </span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加mysql jdbc驱动到hive安装包lib/文件下</span></span><br><span class="line">[root@hadoop102 software]# cd mysql-connector-java-8.0.29</span><br><span class="line">[root@hadoop102 mysql-connector-java-8.0.29]# cp mysql-connector-java-8.0.29.jar /opt/module/apache-hive-3.1.3/lib/</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">Connector/J version</th>
<th align="left">JDBC version</th>
<th align="left">MySQL Server version</th>
<th align="left">JRE Required</th>
<th align="left">JDK Required for Compilation</th>
<th align="left">Status</th>
</tr>
</thead>
<tbody><tr>
<td align="left">5.1</td>
<td align="left">3.0, 4.0, 4.1, 4.2</td>
<td align="left">5.61, 5.71, 8.01</td>
<td align="left">JRE 5 or higher1</td>
<td align="left">JDK 5.0 AND JDK 8.0 or higher2, 3</td>
<td align="left">General availability</td>
</tr>
<tr>
<td align="left">8.0</td>
<td align="left">4.2</td>
<td align="left">5.6, 5.7, 8.0</td>
<td align="left">JRE 8 or higher</td>
<td align="left">JDK 8.0 or higher2</td>
<td align="left">General availability. Recommended version.</td>
</tr>
</tbody></table>
<blockquote>
<p>说明：mysql jdbc 的java驱动只有两个版本，且两个版本都支持mysql-5.7。官方推荐使用8.0版本。</p>
</blockquote>
<h5 id="修改hive环境变量文件"><a href="#修改hive环境变量文件" class="headerlink" title="修改hive环境变量文件"></a>修改hive环境变量文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop102 ~]# cd /opt/module/apache-hive-3.1.3/conf/</span><br><span class="line">[root@hadoop102 conf]# cp hive-env.sh.template hive-env.sh</span><br><span class="line">[root@hadoop102 conf]# vim hive-env.sh</span><br><span class="line">export HADOOP_HOME=/opt/module/hadoop-3.3.2</span><br><span class="line">export HIVE_CONF_DIR=/opt/module/apache-hive-3.1.3/conf</span><br><span class="line">export HIVE_AUX_JARS_PATH=/opt/module/apache-hive-3.1.3/lib</span><br></pre></td></tr></table></figure>

<h5 id="新增hive-site-xml"><a href="#新增hive-site-xml" class="headerlink" title="新增hive-site.xml"></a>新增hive-site.xml</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop102 conf]# vim hive-site.xml</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- 存储元数据mysql相关配置 --&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;jdbc:mysql://hadoop102:3306/hive?createDatabaseIfNotExist=true&amp;amp;useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;com.mysql.cj.jdbc.Driver&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;root&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;root&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Bind host on which to run the HiveServer2 Thrift interface --&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hive.server2.thrift.bind.host&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hadoop102&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 远程模式部署metastore服务地址 --&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hive.metastore.uris&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;thrift://hadoop102:9083&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 关闭元数据存储授权  --&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hive.metastore.event.db.notification.api.auth&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 关闭元数据存储版本的验证 --&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hive.metastore.schema.verification&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<h5 id="初始化metadata"><a href="#初始化metadata" class="headerlink" title="初始化metadata"></a>初始化metadata</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop102 ~]# cd /opt/module/apache-hive-3.1.3/</span><br><span class="line">[root@hadoop102 apache-hive-3.1.3]# ./bin/schematool -initSchema -dbType mysql -verbos</span><br></pre></td></tr></table></figure>

<blockquote>
<p>校验是否成功：MySQL中创建hive数据库并持有74张表</p>
</blockquote>
<h5 id="启动-hive"><a href="#启动-hive" class="headerlink" title="启动 hive"></a>启动 hive</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动 hadoop 集群，hadoop 集群启动脚本在 Hadoop（一）：集群搭建.md</span></span><br><span class="line">[eitan@hadoop102 ~]$ myhadoop.sh start</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 Metastore</span></span><br><span class="line">[eitan@hadoop102 ~]$ nohup /opt/module/apache-hive-3.1.3/bin/hive --service metastore &amp;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 Hive</span></span><br><span class="line">[eitan@hadoop102 ~]$ /opt/module/apache-hive-3.1.3/bin/hive</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证是否启动成功</span></span><br><span class="line"><span class="meta">hive&gt;</span><span class="bash"> show databases;</span></span><br><span class="line">OK</span><br><span class="line">default</span><br><span class="line">Time taken: 0.52 seconds, Fetched: 1 row(s)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 前台启动开启debug日志</span></span><br><span class="line">/opt/module/apache-hive-3.1.3/bin/hive --service metastore  --hiveconf hive.root.logger=DEBUG,console</span><br></pre></td></tr></table></figure>

<h4 id="使用-Hive-Beeline-Client-连接"><a href="#使用-Hive-Beeline-Client-连接" class="headerlink" title="使用 Hive Beeline Client 连接"></a>使用 Hive Beeline Client 连接</h4><h5 id="Hive服务和客户端关系梳理"><a href="#Hive服务和客户端关系梳理" class="headerlink" title="Hive服务和客户端关系梳理"></a>Hive服务和客户端关系梳理</h5><p>HiveServer2通过Metastore服务读写元数据。所以在远程模式下，启动HiveServer2之前必须先首先启动metastore服务。远程模式下，Beeline客户端只能通过HiveServer2服务访问Hive。而Hive Client是通过Metastore服务访问的。具体关系如下：</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220512093654.png" alt="image-20220512093652882"></p>
<h5 id="Hive服务规划部署"><a href="#Hive服务规划部署" class="headerlink" title="Hive服务规划部署"></a>Hive服务规划部署</h5><table>
<thead>
<tr>
<th>hadoop102</th>
<th>hadoop103</th>
<th>hadoop104</th>
</tr>
</thead>
<tbody><tr>
<td>Metastore<br />Mysql</td>
<td>HiveServer2</td>
<td>Beeline Client</td>
</tr>
</tbody></table>
<h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><ol>
<li><p>Metastore需要知道HiveServer2运行位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ sudo vim /opt/module/apache-hive-3.1.3/conf/hive-site.xml</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 修改&lt;value&gt;为hadoop103</span></span><br><span class="line">    &lt;!-- Bind host on which to run the HiveServer2 Thrift interface --&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hive.server2.thrift.bind.host&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hadoop103&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>HiveServer2需要知道Metastore运行位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ sudo vim /opt/module/apache-hive-3.1.3/conf/hive-site.xml</span><br><span class="line">    # 确认 metastore 启动在 hadoop102 并监听9083接口</span><br><span class="line">    &lt;!-- 远程模式部署metastore服务地址 --&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hive.metastore.uris&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;thrift://hadoop102:9083&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>开启各项服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动MySQL</span></span><br><span class="line">[eitan@hadoop102 ~]$ systemctl start mysqld</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动Hadoop集群</span></span><br><span class="line">[eitan@hadoop102 ~]$ myhadoop.sh start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动metastore服务，只需先启动了MySQL就行与Hadoop无关</span></span><br><span class="line">[eitan@hadoop102 ~]$ /opt/module/apache-hive-3.1.3/bin/hive --service metastore</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动hiveserver2,需要提前启动Hadoop</span></span><br><span class="line">[eitan@hadoop103 ~]$ /opt/module/apache-hive-3.1.3/bin/hiveserver2 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动beeline，并连接hiveserver2</span></span><br><span class="line">[eitan@hadoop104 ~]$ /opt/module/apache-hive-3.1.3/bin/beeline</span><br><span class="line"><span class="meta">beeline&gt;</span><span class="bash"> ! connect jdbc:hive2://hadoop103:10000</span></span><br><span class="line">Connecting to jdbc:hive2://hadoop103:10000</span><br><span class="line">Enter username for jdbc:hive2://hadoop103:10000: eitan</span><br><span class="line">Enter password for jdbc:hive2://hadoop103:10000: </span><br><span class="line">Connected to: Apache Hive (version 3.1.3)</span><br><span class="line">Driver: Hive JDBC (version 3.1.3)</span><br><span class="line">Transaction isolation: TRANSACTION_REPEATABLE_READ</span><br><span class="line">0: jdbc:hive2://hadoop103:10000&gt; </span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="编写hive启动停止脚本"><a href="#编写hive启动停止脚本" class="headerlink" title="编写hive启动停止脚本"></a>编写hive启动停止脚本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ vim bin/myhive.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">if [ $# -lt 1 ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;No Args Input...&quot;</span><br><span class="line">    exit;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">    echo &quot;================ 启动 Hive ================&quot;</span><br><span class="line">    echo &quot;---------------- 启动 metastore ----------------&quot;</span><br><span class="line">    ssh hadoop102 &quot;nohup /opt/module/apache-hive-3.1.3/bin/hive --service metastore &gt; /home/eitan/log/metastore.out 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">    echo &quot;---------------- 启动 hiveserver2 ----------------&quot;</span><br><span class="line">    ssh hadoop103 &quot;nohup /opt/module/apache-hive-3.1.3/bin/hiveserver2 &gt; /home/eitan/log/hiveserver2.out 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">    echo &quot;================ 关闭 Hive ================&quot;</span><br><span class="line">    echo &quot;---------------- 关闭 metastore ----------------&quot;</span><br><span class="line">    ssh hadoop102 &quot;ps -ef | grep metastore | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill -9&quot;</span><br><span class="line">    echo &quot;---------------- 关闭 hiveserver2 ----------------&quot;</span><br><span class="line">    ssh hadoop103 &quot;ps -ef | grep hiveserver2 | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill -9&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">    echo &quot;Input Args Error...&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">[eitan@hadoop102 ~]$ chmod +x bin/myhive.sh </span><br><span class="line">[eitan@hadoop102 ~]$ xsync bin/myhive.sh </span><br></pre></td></tr></table></figure>

<h3 id="Hive-的数据定义语言（DDL）"><a href="#Hive-的数据定义语言（DDL）" class="headerlink" title="Hive 的数据定义语言（DDL）"></a>Hive 的数据定义语言（DDL）</h3><h4 id="完整建表语法树"><a href="#完整建表语法树" class="headerlink" title="完整建表语法树"></a>完整建表语法树</h4><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220512170427.png" alt="image-20220512170423242"></p>
<blockquote>
<ul>
<li><p><strong>蓝色</strong>字体是建表语法的关键字，用于指定某些功能。</p>
</li>
<li><p>**[]**中括号的语法表示可选。</p>
</li>
<li><p>**|**表示使用的时候，左右语法二选一。</p>
</li>
<li><p>建表语句中的语法顺序要和上述语法规则保持一致。</p>
</li>
</ul>
</blockquote>
<h4 id="Hive数据类型"><a href="#Hive数据类型" class="headerlink" title="Hive数据类型"></a>Hive数据类型</h4><p>Hive中的数据类型指的是Hive表中的列字段类型。Hive数据类型整体分为两个类别：<strong>原生数据类型</strong>（primitive data type）和<strong>复杂数据类型</strong>（complex data type）。</p>
<p>原生数据类型包括：数值类型、时间类型、字符串类型、杂项数据类型；</p>
<p>复杂数据类型包括：array数组、map映射、struct结构、union联合体。</p>
<p>官方文档链接：<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Types">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Types</a></p>
<h4 id="Hive读写文件机制"><a href="#Hive读写文件机制" class="headerlink" title="Hive读写文件机制"></a>Hive读写文件机制</h4><h5 id="Hive读写文件流程"><a href="#Hive读写文件流程" class="headerlink" title="Hive读写文件流程"></a>Hive读写文件流程</h5><p><strong>Hive读取文件机制</strong>：首先调用InputFormat（默认TextInputFormat），返回一条一条kv键值对记录（默认是一行对应一条记录）。然后调用SerDe（默认LazySimpleSerDe）的Deserializer，将一条记录中的value根据分隔符切分为各个字段。</p>
<p><strong>Hive写文件机制</strong>：将Row写入文件时，首先调用SerDe（默认LazySimpleSerDe）的Serializer将对象转换成字节序列，然后调用OutputFormat将数据写入HDFS文件中。</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220512173124.png" alt="image-20220512173122549"></p>
<h5 id="SerDe概念及相关语法"><a href="#SerDe概念及相关语法" class="headerlink" title="SerDe概念及相关语法"></a>SerDe概念及相关语法</h5><p>SerDe是Serializer、Deserializer的简称，目的是用于序列化和反序列化。序列化是对象转化为字节码的过程；而反序列化是字节码转换为对象的过程。</p>
<p>在Hive的建表语句中，和SerDe相关的语法为：</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220512194842.png" alt="image-20220512194839798"></p>
<blockquote>
<p>其中ROW FORMAT是语法关键字，DELIMITED和SERDE二选其一。</p>
<p>如果使用DELIMITED表示使用默认的LazySimpleSerDe类来处理数据。如果数据文件格式比较特殊可以使用ROW FORMAT SERDE serde_name指定其他的Serde类来处理数据,甚至支持用户自定义SerDe类。</p>
</blockquote>
<p>LazySimpleSerDe是Hive默认的序列化类，包含4种子语法，分别用于指定<strong>字段之间</strong>、<strong>集合元素之间</strong>、<strong>map映射 kv之间</strong>、<strong>换行</strong>的分隔符号：</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220512195058.png" alt="image-20220512195056138"></p>
<blockquote>
<p>默认分隔符为 ‘\001’</p>
<table>
<thead>
<tr>
<th>二进制</th>
<th>十进制</th>
<th>十六进制</th>
<th>缩写</th>
</tr>
</thead>
<tbody><tr>
<td>0000 0001</td>
<td>1</td>
<td>01</td>
<td>SOH</td>
</tr>
</tbody></table>
</blockquote>
<h4 id="Hive数据存储路径"><a href="#Hive数据存储路径" class="headerlink" title="Hive数据存储路径"></a>Hive数据存储路径</h4><h5 id="默认存储路径"><a href="#默认存储路径" class="headerlink" title="默认存储路径"></a>默认存储路径</h5><p>Hive表默认存储路径是由${HIVE_HOME}/conf/hive-site.xml配置文件的hive.metastore.warehouse.dir属性指定。默认值是：/user/hive/warehouse。</p>
<h5 id="指定存储路径"><a href="#指定存储路径" class="headerlink" title="指定存储路径"></a>指定存储路径</h5><p>在Hive建表的时候，可以通过<strong>LOCATION语法来更改数据在HDFS上的存储路径</strong>，使得建表加载数据更加灵活方便。</p>
<p>语法：<strong>LOCATION ‘<hdfs_location>‘</strong></p>
<h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><h5 id="原生数据类型建表练习"><a href="#原生数据类型建表练习" class="headerlink" title="原生数据类型建表练习"></a>原生数据类型建表练习</h5><p><strong>需求：</strong>文件archer.txt中记录了手游《王者荣耀》射手的相关信息，内容如下所示，其中字段之间分隔符为制表符\t,要求在Hive中建表映射成功该文件。</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>	后羿	<span class="number">5986</span>	<span class="number">1784</span>	<span class="number">396</span>	<span class="number">336</span>	<span class="comment">remotely	archer</span></span><br><span class="line"><span class="number">2</span>	马可波罗	<span class="number">5584</span>	<span class="number">200</span>	<span class="number">362</span>	<span class="number">344</span>	<span class="comment">remotely	archer</span></span><br><span class="line"><span class="number">3</span>	鲁班七号	<span class="number">5989</span>	<span class="number">1756</span>	<span class="number">400</span>	<span class="number">323</span>	<span class="comment">remotely	archer</span></span><br><span class="line"><span class="number">4</span>	李元芳	<span class="number">5725</span>	<span class="number">1770</span>	<span class="number">396</span>	<span class="number">340</span>	<span class="comment">remotely	archer</span></span><br><span class="line"><span class="number">5</span>	孙尚香	<span class="number">6014</span>	<span class="number">1756</span>	<span class="number">411</span>	<span class="number">346</span>	<span class="comment">remotely	archer</span></span><br><span class="line"><span class="number">6</span>	黄忠	<span class="number">5898</span>	<span class="number">1784</span>	<span class="number">403</span>	<span class="number">319</span>	<span class="comment">remotely	archer</span></span><br><span class="line"><span class="number">7</span>	狄仁杰	<span class="number">5710</span>	<span class="number">1770</span>	<span class="number">376</span>	<span class="number">338</span>	<span class="comment">remotely	archer</span></span><br><span class="line"><span class="number">8</span>	虞姬	<span class="number">5669</span>	<span class="number">1770</span>	<span class="number">407</span>	<span class="number">329</span>	<span class="comment">remotely	archer</span></span><br><span class="line"><span class="number">9</span>	成吉思汗	<span class="number">5799</span>	<span class="number">1742</span>	<span class="number">394</span>	<span class="number">329</span>	<span class="comment">remotely	archer</span></span><br><span class="line"><span class="number">10</span>	百里守约	<span class="number">5611</span>	<span class="number">1784</span>	<span class="number">410</span>	<span class="number">329</span>	<span class="comment">remotely	archer	assassin</span></span><br></pre></td></tr></table></figure>

<p>字段含义：id、name（英雄名称）、hp_max（最大生命）、mp_max（最大法力）、attack_max（最高物攻）、defense_max（最大物防）、attack_range（攻击范围）、role_main（主要定位）、role_assist（次要定位）</p>
<p><strong>实践：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_archer (</span><br><span class="line">    id <span class="type">int</span> comment &quot;ID&quot;,</span><br><span class="line">    name string comment &quot;英雄名称&quot;,</span><br><span class="line">    hp_max <span class="type">int</span> comment &quot;最大生命&quot;,</span><br><span class="line">    mp_max <span class="type">int</span> comment &quot;最大法力&quot;,</span><br><span class="line">    attack_max <span class="type">int</span> comment &quot;最高物攻&quot;,</span><br><span class="line">    defense_max <span class="type">int</span> comment &quot;最大物防&quot;,</span><br><span class="line">    attack_range string comment &quot;攻击范围&quot;,</span><br><span class="line">    role_main string comment &quot;主要定位&quot;,</span><br><span class="line">    role_assist string comment &quot;次要定位&quot;</span><br><span class="line">) comment &quot;王者荣耀射手信息&quot;</span><br><span class="line"><span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> &quot;\t&quot;;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 上传文件</span></span><br><span class="line">[eitan@hadoop102 ~]$ hadoop fs -put documents/txt/archer.txt /user/hive/warehouse/itcast.db/t_archer/</span><br></pre></td></tr></table></figure>

<h5 id="复杂数据类型建表练习"><a href="#复杂数据类型建表练习" class="headerlink" title="复杂数据类型建表练习"></a>复杂数据类型建表练习</h5><p><strong>需求：</strong>文件hot_hero_skin_price.txt中记录了手游《王者荣耀》热门英雄的相关皮肤价格信息，内容如下,要求在Hive中建表映射成功该文件。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>,孙悟空,<span class="number">53</span>,西部大镖客:<span class="number">288</span>-大圣娶亲:<span class="number">888</span>-全息碎片:<span class="number">0</span>-至尊宝:<span class="number">888</span>-地狱火:<span class="number">1688</span></span><br><span class="line"><span class="attribute">2</span>,鲁班七号,<span class="number">54</span>,木偶奇遇记:<span class="number">288</span>-福禄兄弟:<span class="number">288</span>-黑桃队长:<span class="number">60</span>-电玩小子:<span class="number">2288</span>-星空梦想:<span class="number">0</span></span><br><span class="line"><span class="attribute">3</span>,后裔,<span class="number">53</span>,精灵王:<span class="number">288</span>-阿尔法小队:<span class="number">588</span>-辉光之辰:<span class="number">888</span>-黄金射手座:<span class="number">1688</span>-如梦令:<span class="number">1314</span></span><br><span class="line"><span class="attribute">4</span>,铠,<span class="number">52</span>,龙域领主:<span class="number">288</span>-曙光守护者:<span class="number">1776</span></span><br><span class="line"><span class="attribute">5</span>,韩信,<span class="number">52</span>,飞衡:<span class="number">1788</span>-逐梦之影:<span class="number">888</span>-白龙吟:<span class="number">1188</span>-教廷特使:<span class="number">0</span>-街头霸王:<span class="number">888</span></span><br></pre></td></tr></table></figure>

<p>字段：id、name（英雄名称）、win_rate（胜率）、skin_price（皮肤及价格）</p>
<p><strong>实践：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先上传文件</span></span><br><span class="line">[eitan@hadoop102 ~]$ hadoop fs -put -p documents/txt/hot_hero_skin_price.txt /user/hive/warehouse/itcast.db/t_hot_hero_skin_price/</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 后建表并指定文件所在位置</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_hot_hero_skin_price (</span><br><span class="line">    id <span class="type">int</span> comment &quot;ID&quot;,</span><br><span class="line">    name string comment &quot;英雄名称&quot;,</span><br><span class="line">    win_rate <span class="type">int</span> comment &quot;胜率&quot;,</span><br><span class="line">    skin_price map<span class="operator">&lt;</span>string,<span class="type">int</span><span class="operator">&gt;</span> comment &quot;皮肤及价格&quot;</span><br><span class="line">)</span><br><span class="line"><span class="type">ROW</span> FORMAT DELIMITED</span><br><span class="line">    FIELDS TERMINATED <span class="keyword">BY</span> &quot;,&quot;            <span class="comment">-- 字段之间分隔符</span></span><br><span class="line">    COLLECTION ITEMS TERMINATED <span class="keyword">BY</span> &quot;-&quot;  <span class="comment">-- 集合元素之间分隔符</span></span><br><span class="line">    MAP KEYS TERMINATED <span class="keyword">BY</span> &quot;:&quot;</span><br><span class="line">LOCATION &quot;/user/hive/warehouse/itcast.db/t_hot_hero_skin_price&quot;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_hot_hero_skin_price;</span><br></pre></td></tr></table></figure>

<h4 id="Hive内、外部表"><a href="#Hive内、外部表" class="headerlink" title="Hive内、外部表"></a>Hive内、外部表</h4><table>
<thead>
<tr>
<th></th>
<th>内部表</th>
<th>外部表</th>
</tr>
</thead>
<tbody><tr>
<td>创建方式</td>
<td>默认情况</td>
<td>使用EXTERNAL语法关键字</td>
</tr>
<tr>
<td>Hive管理范围</td>
<td>元数据、表数据</td>
<td>元数据</td>
</tr>
<tr>
<td>删除表结果</td>
<td>删除元数据及HDFS上的文件数据</td>
<td>只删除元数据</td>
</tr>
<tr>
<td>操作</td>
<td>支持ARCHIVE，UNARCHIVE，TRUNCATE，MERGE，CONCATENATE</td>
<td>不支持</td>
</tr>
<tr>
<td>事务</td>
<td>支持ACID/事务性</td>
<td>不支持</td>
</tr>
<tr>
<td>缓存</td>
<td>支持结果缓存</td>
<td>不支持</td>
</tr>
</tbody></table>
<h4 id="Hive分区表"><a href="#Hive分区表" class="headerlink" title="Hive分区表"></a>Hive分区表</h4><p><strong>概念：</strong> 分区的概念提供了一种将Hive表数据分离为多个文件/目录的方法。不同分区对应着不同的文件夹，同一分区的数据存储在同一个文件夹下。只需要根据分区值找到对应的文件夹，扫描本分区下的文件即可，避免全表数据扫描。</p>
<h5 id="静态分区"><a href="#静态分区" class="headerlink" title="静态分区"></a>静态分区</h5><p><strong>描述：</strong>静态分区指的是分区的字段值是由用户在加载数据的时候手动指定的。</p>
<p><strong>语法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LOAD DATA [<span class="keyword">LOCAL</span>] INPATH &quot;&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> table_name <span class="keyword">PARTITION</span> (分区字段 <span class="operator">=</span> <span class="string">&#x27;分区值&#x27;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>[LOCAL] 表示数据是位于本地文件系统还是HDFS文件系统</p>
<p>分区字段不能是表中已经存在的</p>
</blockquote>
<p><strong>案例：</strong></p>
<p>有一组文件位于本地文件系统上，请为其建立分区表。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop102 ~]$ cd documents/txt/hero/</span><br><span class="line">[eitan@hadoop102 hero]$ ll</span><br><span class="line">总用量 24</span><br><span class="line">-rw-rw-r--. 1 eitan eitan 480 5月  13 09:48 archer.txt</span><br><span class="line">-rw-rw-r--. 1 eitan eitan 292 5月  13 09:48 assassin.txt</span><br><span class="line">-rw-rw-r--. 1 eitan eitan 883 5月  13 09:48 mage.txt</span><br><span class="line">-rw-rw-r--. 1 eitan eitan 289 5月  13 09:48 support.txt</span><br><span class="line">-rw-rw-r--. 1 eitan eitan 446 5月  13 09:48 tank.txt</span><br><span class="line">-rw-rw-r--. 1 eitan eitan 837 5月  13 09:48 warrior.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 需要把文件同步到hiveserver2所在机器hadoop103上</span></span><br><span class="line">[eitan@hadoop102 ~]$ xsync documents/txt/hero/</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表时需要指定分区字段</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_static_hero_partition (</span><br><span class="line">    id <span class="type">INT</span> COMMENT &quot;ID&quot;,</span><br><span class="line">    name STRING COMMENT &quot;英雄名称&quot;,</span><br><span class="line">    hp_max <span class="type">INT</span> COMMENT &quot;最大生命&quot;,</span><br><span class="line">    mp_max <span class="type">INT</span> COMMENT &quot;最大法力&quot;,</span><br><span class="line">    attack_max <span class="type">INT</span> COMMENT &quot;最高攻击&quot;,</span><br><span class="line">    defense_max <span class="type">INT</span> COMMENT &quot;最大物防&quot;,</span><br><span class="line">    attack_range STRING COMMENT &quot;攻击范围&quot;,</span><br><span class="line">    role_main STRING COMMENT &quot;主要定位&quot;,</span><br><span class="line">    role_assist STRING COMMENT &quot;次要定位&quot;</span><br><span class="line">) COMMENT &quot;王者荣耀英雄信息&quot;</span><br><span class="line">    PARTITIONED <span class="keyword">BY</span> (role STRING)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> &quot;\t&quot;;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 加载本地文件并为其分区</span></span><br><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INPATH &quot;/home/eitan/documents/txt/hero/archer.txt&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> t_static_hero_partition <span class="keyword">PARTITION</span> (role <span class="operator">=</span> &quot;sheshou&quot;);</span><br><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INPATH &quot;/home/eitan/documents/txt/hero/assassin.txt&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> t_static_hero_partition <span class="keyword">PARTITION</span> (role <span class="operator">=</span> &quot;cike&quot;);</span><br><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INPATH &quot;/home/eitan/documents/txt/hero/mage.txt&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> t_static_hero_partition <span class="keyword">PARTITION</span> (role <span class="operator">=</span> &quot;fashi&quot;);</span><br><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INPATH &quot;/home/eitan/documents/txt/hero/support.txt&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> t_static_hero_partition <span class="keyword">PARTITION</span> (role <span class="operator">=</span> &quot;fuzhu&quot;);</span><br><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INPATH &quot;/home/eitan/documents/txt/hero/tank.txt&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> t_static_hero_partition <span class="keyword">PARTITION</span> (role <span class="operator">=</span> &quot;tanke&quot;);</span><br><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INPATH &quot;/home/eitan/documents/txt/hero/warrior.txt&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> t_static_hero_partition <span class="keyword">PARTITION</span> (role <span class="operator">=</span> &quot;zhanshi&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询使用分页</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_static_hero_partition <span class="keyword">WHERE</span> role <span class="operator">=</span> &quot;sheshou&quot;;</span><br></pre></td></tr></table></figure>

<h5 id="动态分区"><a href="#动态分区" class="headerlink" title="动态分区"></a>动态分区</h5><p><strong>描述：</strong>动态分区指的是分区的字段值是基于查询结果自动推断出来的。核心语法就是insert+select。</p>
<blockquote>
<p>启用hive动态分区，需要在hive会话中设置两个参数：</p>
<p>set hive.exec.dynamic.partition=true;</p>
<p>set hive.exec.dynamic.partition.mode=nonstrict;</p>
</blockquote>
<p><strong>语法：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">INSERT INTO TABLE table_name PARTITION (分区字段) SELECT table_fields FROM table_name; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>SELECT 查询字段必须要与 INSERT 后的 table_name 表字段一一对应，并最后加上 PARTITION 的分区字段</p>
</blockquote>
<p><strong>案例：</strong> 对学生表按地区、年龄分区</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建原数据表，并把响应数据放入目标目录下</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_student</span><br><span class="line">(</span><br><span class="line">    id   <span class="type">int</span> COMMENT &quot;ID&quot;,</span><br><span class="line">    name string COMMENT &quot;学生姓名&quot;,</span><br><span class="line">    sex  string COMMENT &quot;姓名&quot;,</span><br><span class="line">    age  <span class="type">int</span> COMMENT &quot;年龄&quot;,</span><br><span class="line">    area string COMMENT &quot;地区&quot;</span><br><span class="line">) <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> &quot;,&quot;;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建动态分区数据表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_dynamic_student_partition</span><br><span class="line">(</span><br><span class="line">    id   <span class="type">int</span> COMMENT &quot;ID&quot;,</span><br><span class="line">    name string COMMENT &quot;学生姓名&quot;,</span><br><span class="line">    sex  string COMMENT &quot;姓名&quot;</span><br><span class="line">) PARTITIONED <span class="keyword">BY</span> (area string COMMENT &quot;地区&quot;,age <span class="type">int</span> COMMENT &quot;年龄&quot;)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> &quot;,&quot;;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过 INSERT...SELECT 语句插入数据，Hive会启动MAPREDUCE逐行扫描按所定义分区将数据划分到不懂的子目录中</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> t_dynamic_student_partition <span class="keyword">SELECT</span> id, name, sex, area, age <span class="keyword">FROM</span> t_student;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果表中定义了PARTITIONED，则INSERT语句中PARTITION不用写，并且写了分区顺序也是按表定义的来。</p>
</blockquote>
<h4 id="Hive分桶表"><a href="#Hive分桶表" class="headerlink" title="Hive分桶表"></a>Hive分桶表</h4><p><strong>概念：</strong> 将所给数据按规则划分到不同物理文件中。</p>
<p><strong>语法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--分桶表建表语句</span></span><br><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">EXTERNAL</span>] <span class="keyword">TABLE</span> [db_name.]table_name</span><br><span class="line">[(col_name data_type, ...)]</span><br><span class="line">CLUSTERED <span class="keyword">BY</span> (col_name)</span><br><span class="line"><span class="keyword">INTO</span> N BUCKETS;</span><br></pre></td></tr></table></figure>

<p><strong>案例：</strong></p>
<p>现有美国2021-1-28号，各个县county的新冠疫情累计案例信息，包括确诊病例和死亡病例，数据格式如下所示：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">2021</span>-<span class="number">01</span>-<span class="number">28</span>,Juneau City and Borough,Alaska,<span class="number">02110</span>,<span class="number">1108</span>,<span class="number">3</span></span><br><span class="line"><span class="attribute">2021</span>-<span class="number">01</span>-<span class="number">28</span>,Kenai Peninsula Borough,Alaska,<span class="number">02122</span>,<span class="number">3866</span>,<span class="number">18</span></span><br><span class="line"><span class="attribute">2021</span>-<span class="number">01</span>-<span class="number">28</span>,Ketchikan Gateway Borough,Alaska,<span class="number">02130</span>,<span class="number">272</span>,<span class="number">1</span></span><br><span class="line"><span class="attribute">2021</span>-<span class="number">01</span>-<span class="number">28</span>,Kodiak Island Borough,Alaska,<span class="number">02150</span>,<span class="number">1021</span>,<span class="number">5</span></span><br><span class="line"><span class="attribute">2021</span>-<span class="number">01</span>-<span class="number">28</span>,Kusilvak Census Area,Alaska,<span class="number">02158</span>,<span class="number">1099</span>,<span class="number">3</span></span><br><span class="line"><span class="attribute">2021</span>-<span class="number">01</span>-<span class="number">28</span>,Lake and Peninsula Borough,Alaska,<span class="number">02164</span>,<span class="number">5</span>,<span class="number">0</span></span><br><span class="line"><span class="attribute">2021</span>-<span class="number">01</span>-<span class="number">28</span>,Matanuska-Susitna Borough,Alaska,<span class="number">02170</span>,<span class="number">7406</span>,<span class="number">27</span></span><br><span class="line"><span class="attribute">2021</span>-<span class="number">01</span>-<span class="number">28</span>,Nome Census Area,Alaska,<span class="number">02180</span>,<span class="number">307</span>,<span class="number">0</span></span><br><span class="line"><span class="attribute">2021</span>-<span class="number">01</span>-<span class="number">28</span>,North Slope Borough,Alaska,<span class="number">02185</span>,<span class="number">973</span>,<span class="number">3</span></span><br><span class="line"><span class="attribute">2021</span>-<span class="number">01</span>-<span class="number">28</span>,Northwest Arctic Borough,Alaska,<span class="number">02188</span>,<span class="number">567</span>,<span class="number">1</span></span><br><span class="line"><span class="attribute">2021</span>-<span class="number">01</span>-<span class="number">28</span>,Petersburg Borough,Alaska,<span class="number">02195</span>,<span class="number">43</span>,<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>字段含义如下：count_date（统计日期）,county（县）,state（州）,fips（县编码code）,cases（累计确诊病例）,deaths（累计死亡病例）。</p>
<p><strong>实践：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--step1:开启分桶的功能 从Hive2.0开始不再需要设置</span></span><br><span class="line"><span class="keyword">set</span> hive.enforce.bucketing<span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--step2:创建分桶表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_usa_covid19_bucket_sort</span><br><span class="line">(</span><br><span class="line">    count_date string COMMENT &quot;统计日期&quot;,</span><br><span class="line">    county     string COMMENT &quot;县&quot;,</span><br><span class="line">    state      string COMMENT &quot;州&quot;,</span><br><span class="line">    fips       <span class="type">int</span> COMMENT &quot;县编码 code&quot;,</span><br><span class="line">    cases      <span class="type">int</span> COMMENT &quot;累计确诊病例&quot;,</span><br><span class="line">    deaths     <span class="type">int</span> COMMENT &quot;累计死亡病例&quot;</span><br><span class="line">)</span><br><span class="line">    <span class="comment">-- 按 state 分组后按 case 降序排序</span></span><br><span class="line">    CLUSTERED <span class="keyword">BY</span> (state) SORTED <span class="keyword">BY</span> (cases <span class="keyword">DESC</span>) <span class="keyword">INTO</span> <span class="number">5</span> BUCKETS</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">--step3:创建普通表，并上传数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_usa_covid19</span><br><span class="line">(</span><br><span class="line">    count_date string COMMENT &quot;统计日期&quot;,</span><br><span class="line">    county     string COMMENT &quot;县&quot;,</span><br><span class="line">    state      string COMMENT &quot;州&quot;,</span><br><span class="line">    fips       <span class="type">int</span> COMMENT &quot;县编码 code&quot;,</span><br><span class="line">    cases      <span class="type">int</span> COMMENT &quot;累计确诊病例&quot;,</span><br><span class="line">    deaths     <span class="type">int</span> COMMENT &quot;累计死亡病例&quot;</span><br><span class="line">) <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line">[eitan<span class="variable">@hadoop102</span> <span class="operator">~</span>]$ hadoop fs <span class="operator">-</span>put documents<span class="operator">/</span>txt<span class="operator">/</span>us<span class="operator">-</span>covid19<span class="operator">-</span>counties.dat <span class="operator">/</span><span class="keyword">user</span><span class="operator">/</span>hive<span class="operator">/</span>warehouse<span class="operator">/</span>itcast.db<span class="operator">/</span>t_usa_covid19</span><br><span class="line"></span><br><span class="line"><span class="comment">--step4:使用insert+select语法将数据加载到分桶表中</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_usa_covid19_bucket_sort <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_usa_covid19;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>到HDFS上查看t_usa_covid19_bucket底层数据结构可以发现，数据被分为了5个文件</p>
</blockquote>
<h4 id="Hive事务表"><a href="#Hive事务表" class="headerlink" title="Hive事务表"></a>Hive事务表</h4><h5 id="Hive事务表的局限性"><a href="#Hive事务表的局限性" class="headerlink" title="Hive事务表的局限性"></a>Hive事务表的局限性</h5><ul>
<li>尚不支持BEGIN，COMMIT和ROLLBACK。所有语言操作都是自动提交的；</li>
<li>仅支持<strong>ORC文件格式（STORED AS ORC）</strong>；</li>
<li>默认情况下事务配置为关闭。需要<strong>配置参数开启</strong>使用；</li>
<li>表必须是<strong>分桶表（Bucketed）</strong>才可以使用事务功能；</li>
<li>表参数<strong>transactional必须为true</strong>；</li>
<li>外部表不能成为ACID表，不允许从非ACID会话读取/写入ACID表。</li>
</ul>
<h5 id="Hive事务表实践"><a href="#Hive事务表实践" class="headerlink" title="Hive事务表实践"></a>Hive事务表实践</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--Hive中事务表的创建使用</span></span><br><span class="line"><span class="comment">-- 开启事务配置（可以使用set设置当前session生效 也可以配置在hive-site.xml中）</span></span><br><span class="line"><span class="comment">-- 从Hive2.0开始不再需要  是否开启分桶功能</span></span><br><span class="line"><span class="keyword">set</span> hive.enforce.bucketing <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">-- Hive是否支持并发</span></span><br><span class="line"><span class="keyword">set</span> hive.support.concurrency <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">-- 动态分区模式  非严格</span></span><br><span class="line"><span class="keyword">set</span> hive.exec.dynamic.partition.mode <span class="operator">=</span> nonstrict</span><br><span class="line"><span class="keyword">set</span> hive.txn.manager <span class="operator">=</span> org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;</span><br><span class="line"><span class="comment">--是否在Metastore实例上运行启动线程和清理线程</span></span><br><span class="line"><span class="keyword">set</span> hive.compactor.initiator.on <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">--在此metastore实例上运行多少个压缩程序工作线程。</span></span><br><span class="line"><span class="keyword">set</span> hive.compactor.worker.threads <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建Hive事务表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> trans_student</span><br><span class="line">(</span><br><span class="line">    id   <span class="type">int</span>,</span><br><span class="line">    name String,</span><br><span class="line">    age  <span class="type">int</span></span><br><span class="line">) CLUSTERED <span class="keyword">BY</span> (id) <span class="keyword">INTO</span> <span class="number">2</span> BUCKETS <span class="comment">-- 按id分桶</span></span><br><span class="line">    STORED <span class="keyword">AS</span> ORC <span class="comment">-- 以ORC文件格式存储</span></span><br><span class="line">    TBLPROPERTIES (<span class="string">&#x27;transactional&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;true&#x27;</span>);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> trans_student <span class="keyword">VALUES</span> (<span class="number">1</span>, &quot;allen&quot;, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> trans_student;</span><br></pre></td></tr></table></figure>

<h4 id="Hive视图"><a href="#Hive视图" class="headerlink" title="Hive视图"></a>Hive视图</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>Hive中的视图（view）是一种虚拟表，只保存定义，不实际存储数据。通常从真实的物理表查询中创建生成视图，也可以从已经存在的视图上创建新视图。</p>
<p>创建视图时，将冻结视图的架构，如果删除或更改基础表，则视图将失败，并且视图不能存储数据，操作数据，只能查询。</p>
<p>概况起来就是：视图是用来简化操作的，它其实是一张虚表，在视图中不缓冲记录，也没有提高查询性能。</p>
<h5 id="视图语法"><a href="#视图语法" class="headerlink" title="视图语法"></a>视图语法</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1、创建视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v_usa_covid19 <span class="keyword">AS</span> <span class="keyword">SELECT</span> count_date, county,state,deaths <span class="keyword">FROM</span> t_usa_covid19 LIMIT <span class="number">5</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v_usa_covid19_from_view <span class="keyword">AS</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> v_usa_covid19 LIMIT <span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 2、显示当前已有的视图</span></span><br><span class="line"><span class="keyword">SHOW</span> VIEWS;</span><br><span class="line"><span class="comment">-- 3、视图的查询使用</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> v_usa_covid19;</span><br><span class="line"><span class="comment">-- 4、查看视图定义</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> v_usa_covid19;</span><br><span class="line"><span class="comment">-- 5、删除视图</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> v_usa_covid19_from_view;</span><br><span class="line"><span class="comment">-- 6、更改视图属性</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> v_usa_covid19 <span class="keyword">SET</span> TBLPROPERTIES (&quot;comment&quot; <span class="operator">=</span> &quot;this is a view&quot;);</span><br><span class="line"><span class="comment">-- 7、更改视图定义</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> v_usa_covid19 <span class="keyword">AS</span> <span class="keyword">SELECT</span> county,deaths <span class="keyword">FROM</span> t_usa_covid19 LIMIT <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h4 id="Hive物化视图"><a href="#Hive物化视图" class="headerlink" title="Hive物化视图"></a>Hive物化视图</h4><h5 id="物化视图、视图区别"><a href="#物化视图、视图区别" class="headerlink" title="物化视图、视图区别"></a>物化视图、视图区别</h5><ol>
<li>视图是虚拟的，逻辑存在的，只有定义没有存储数据；</li>
<li>物化视图是真实的，物理存在的，里面存储着预计算的数据；</li>
<li>视图的目的是简化降低查询的复杂度，而物化视图的目的是提高查询性能。</li>
</ol>
<h5 id="物化视图语法"><a href="#物化视图语法" class="headerlink" title="物化视图语法"></a>物化视图语法</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--物化视图的创建语法</span></span><br><span class="line"><span class="keyword">CREATE</span> MATERIALIZED <span class="keyword">VIEW</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] [db_name.]materialized_view_name</span><br><span class="line">    [DISABLE REWRITE]</span><br><span class="line">    [COMMENT materialized_view_comment]</span><br><span class="line">    [PARTITIONED <span class="keyword">ON</span> (col_name, ...)]</span><br><span class="line">    [CLUSTERED <span class="keyword">ON</span> (col_name, ...) <span class="operator">|</span> DISTRIBUTED <span class="keyword">ON</span> (col_name, ...) SORTED <span class="keyword">ON</span> (col_name, ...)]</span><br><span class="line">    [</span><br><span class="line">    [<span class="type">ROW</span> FORMAT row_format]</span><br><span class="line">    [STORED <span class="keyword">AS</span> file_format]</span><br><span class="line">    <span class="operator">|</span> STORED <span class="keyword">BY</span> <span class="string">&#x27;storage.handler.class.name&#x27;</span> [<span class="keyword">WITH</span> SERDEPROPERTIES (...)]</span><br><span class="line">  ]</span><br><span class="line">  [LOCATION hdfs_path]</span><br><span class="line">  [TBLPROPERTIES (property_name<span class="operator">=</span>property_value, ...)]</span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">SELECT</span> ...;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Drops a materialized view</span></span><br><span class="line"><span class="keyword">DROP</span> MATERIALIZED <span class="keyword">VIEW</span> [db_name.]materialized_view_name;</span><br><span class="line"><span class="comment">-- Shows materialized views (with optional filters)</span></span><br><span class="line"><span class="keyword">SHOW</span> MATERIALIZED VIEWS [<span class="keyword">IN</span> database_name];</span><br><span class="line"><span class="comment">-- Shows information about a specific materialized view</span></span><br><span class="line"><span class="keyword">DESCRIBE</span> [EXTENDED <span class="operator">|</span> FORMATTED] [db_name.]materialized_view_name;</span><br><span class="line"><span class="comment">-- 数据源变更了需要手动执行更新物化视图</span></span><br><span class="line"><span class="keyword">ALTER</span> MATERIALIZED <span class="keyword">VIEW</span> [db_name.]materialized_view_name REBUILD;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li><p>物化视图创建后，select查询执行数据自动落地，”自动”也即在query的执行期间，任何用户对该物化视图是不可见的；</p>
</li>
<li><p>默认该物化视图可被用于查询优化器optimizer查询重写（在物化视图创建期间可以通过DISABLE REWRITE参数设置禁止使用）；</p>
</li>
<li><p>SerDe和storage format非强制参数，可以用户配置，默认可用hive.materializedview.serde、 hive.materializedview.fileformat；</p>
</li>
<li><p>物化视图可以使用custom storage handlers存储在外部系统（如druid）</p>
</li>
</ol>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CREATE MATERIALIZED VIEW druid_wiki_mv</span><br><span class="line">STORED AS &#x27;org.apache.hadoop.hive.druid.DruidStorageHandler&#x27;</span><br><span class="line">AS SELECT __time, page, user, c_added, c_removed FROM src;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>物化视图创建后即可用于相关查询的加速，用户提交查询query，若该query经过重写后可命中已建视图，则被重写命中相关已建视图实现查询加速。是否重写查询使用物化视图可以通过全局参数控制（默认为true）：</li>
</ol>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> hive.materializedview.rewriting<span class="operator">=</span><span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>  用户可选择性的失能物化视图的重写：</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> MATERIALIZED <span class="keyword">VIEW</span> [db_name.]materialized_view_name ENABLE<span class="operator">|</span>DISABLE REWRITE;</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-- 1、Hive是否支持并发</span><br><span class="line">set hive.support.concurrency = true;</span><br><span class="line">-- 2、设置事务管理器</span><br><span class="line">set hive.txn.manager = org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;</span><br><span class="line">-- 3、创建事务表</span><br><span class="line">CREATE TABLE trans_student</span><br><span class="line">(</span><br><span class="line">    id   int,</span><br><span class="line">    name string,</span><br><span class="line">    area string</span><br><span class="line">) CLUSTERED BY (id) INTO 2 BUCKETS</span><br><span class="line">    STORED AS ORC</span><br><span class="line">    TBLPROPERTIES (&quot;transactional&quot; = &quot;true&quot;);</span><br><span class="line">-- 4、往事务表插入数据</span><br><span class="line">INSERT INTO trans_student SELECT id, name, area FROM t_student;</span><br><span class="line">-- 5、不用物化视图查询聚合结果</span><br><span class="line">SELECT area, count(*) FROM trans_student GROUP BY area;</span><br><span class="line">-- 6、创建物化视图</span><br><span class="line">CREATE MATERIALIZED VIEW m_student_agg AS SELECT age, count(*) FROM trans_student GROUP BY age;</span><br><span class="line">-- 7、再次查询</span><br><span class="line">SELECT area, count(*) FROM trans_student GROUP BY area;</span><br><span class="line">-- 8、失能物化视图</span><br><span class="line">ALTER MATERIALIZED VIEW m_student_agg DISABLE REWRITE;</span><br><span class="line">-- 9、查询执行计划，发现查询的表重物化视图又改回了原事务表</span><br><span class="line">EXPLAIN SELECT area, count(*) FROM trans_student GROUP BY area;</span><br></pre></td></tr></table></figure>

<h4 id="Database（数据库）DDL操作"><a href="#Database（数据库）DDL操作" class="headerlink" title="Database（数据库）DDL操作"></a>Database（数据库）DDL操作</h4><h5 id="Create-Database"><a href="#Create-Database" class="headerlink" title="Create Database"></a>Create Database</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> (DATABASE<span class="operator">|</span>SCHEMA) [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] database_name</span><br><span class="line">[COMMENT database_comment]</span><br><span class="line">[LOCATION hdfs_path]</span><br><span class="line">[<span class="keyword">WITH</span> DBPROPERTIES (property_name<span class="operator">=</span>property_value, ...)];</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>COMMENT</strong>：数据库的注释说明语句</p>
<p><strong>LOCATION</strong>：指定数据库在HDFS存储位置，默认/user/hive/warehouse</p>
<p><strong>WITH DBPROPERTIES</strong>：用于指定一些数据库的属性配置。</p>
</blockquote>
<h5 id="Describe-Database"><a href="#Describe-Database" class="headerlink" title="Describe Database"></a>Describe Database</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DESCRIBE</span> DATABASE<span class="operator">/</span>SCHEMA [EXTENDED] db_name;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>EXTENDED</strong>：用于显示更多信息。</p>
</blockquote>
<h5 id="Use-Database"><a href="#Use-Database" class="headerlink" title="Use Database"></a>Use Database</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE database_name;</span><br></pre></td></tr></table></figure>

<h5 id="Drop-Database"><a href="#Drop-Database" class="headerlink" title="Drop Database"></a>Drop Database</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> (DATABASE<span class="operator">|</span>SCHEMA) [IF <span class="keyword">EXISTS</span>] database_name [RESTRICT<span class="operator">|</span>CASCADE];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>默认行为是<strong>RESTRICT</strong>，这意味着仅在数据库为空时才删除它。要删除带有表的数据库，我们可以使用<strong>CASCADE</strong>。</p>
</blockquote>
<h5 id="Alter-Database"><a href="#Alter-Database" class="headerlink" title="Alter Database"></a>Alter Database</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--更改数据库属性</span></span><br><span class="line"><span class="keyword">ALTER</span> (DATABASE<span class="operator">|</span>SCHEMA) database_name <span class="keyword">SET</span> DBPROPERTIES (property_name<span class="operator">=</span>property_value, ...);</span><br><span class="line"></span><br><span class="line"><span class="comment">--更改数据库所有者</span></span><br><span class="line"><span class="keyword">ALTER</span> (DATABASE<span class="operator">|</span>SCHEMA) database_name <span class="keyword">SET</span> OWNER [<span class="keyword">USER</span><span class="operator">|</span>ROLE] user_or_role;</span><br><span class="line"></span><br><span class="line"><span class="comment">--更改数据库位置</span></span><br><span class="line"><span class="keyword">ALTER</span> (DATABASE<span class="operator">|</span>SCHEMA) database_name <span class="keyword">SET</span> LOCATION hdfs_path;</span><br></pre></td></tr></table></figure>

<h4 id="Table（表）DDL操作"><a href="#Table（表）DDL操作" class="headerlink" title="Table（表）DDL操作"></a>Table（表）DDL操作</h4><h5 id="Describe-Table"><a href="#Describe-Table" class="headerlink" title="Describe Table"></a>Describe Table</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DESCRIBE</span> [FORMATTED<span class="operator">|</span>EXTENDED] [db_name.]table_name;</span><br></pre></td></tr></table></figure>

<h5 id="Drop-Table"><a href="#Drop-Table" class="headerlink" title="Drop Table"></a>Drop Table</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span>] table_name [PURGE]; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果已配置垃圾桶（且未指定PURGE），则该表对应的数据实际上将移动到.Trash/Current目录，而元数据完全丢失。如果指定了PURGE，则表数据不会进入.Trash/Current目录，跳过垃圾桶直接被删除。</p>
</blockquote>
<h5 id="Truncate-Table"><a href="#Truncate-Table" class="headerlink" title="Truncate Table"></a>Truncate Table</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> [<span class="keyword">TABLE</span>] table_name;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>从表中删除所有行。可以简单理解为清空表的所有数据但是保留表的元数据结构。如果HDFS启用了垃圾桶，数据将被丢进垃圾桶，否则将被删除。</p>
</blockquote>
<h5 id="Alter-Table"><a href="#Alter-Table" class="headerlink" title="Alter Table"></a>Alter Table</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1、更改表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name RENAME <span class="keyword">TO</span> new_table_name;</span><br><span class="line"><span class="comment">-- 2、更改表属性</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">SET</span> TBLPROPERTIES (property_name <span class="operator">=</span> property_value, ... );</span><br><span class="line"><span class="comment">-- 3、更改表注释</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">SET</span> TBLPROPERTIES (<span class="string">&#x27;comment&#x27;</span> <span class="operator">=</span> &quot;new comment for student table&quot;);</span><br><span class="line"><span class="comment">-- 4、更改SerDe属性</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">SET</span> SERDE serde_class_name [<span class="keyword">WITH</span> SERDEPROPERTIES (property_name <span class="operator">=</span> property_value, ... )];</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name [<span class="keyword">PARTITION</span> partition_spec] <span class="keyword">SET</span> SERDEPROPERTIES serde_properties;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">SET</span> SERDEPROPERTIES (<span class="string">&#x27;field.delim&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line"><span class="comment">-- 5、移除SerDe属性</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name [<span class="keyword">PARTITION</span> partition_spec] UNSET SERDEPROPERTIES (property_name, ... );</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 6、更改表的文件存储格式 该操作仅更改表元数据。现有数据的任何转换都必须在Hive之外进行。</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name  <span class="keyword">SET</span> FILEFORMAT file_format;</span><br><span class="line"><span class="comment">-- 7、更改表的存储位置路径</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">SET</span> LOCATION &quot;new location&quot;;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 8、更改列名称/类型/位置/注释</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_change (a <span class="type">int</span>, b <span class="type">int</span>, c <span class="type">int</span>);</span><br><span class="line"><span class="comment">-- First change column a&#x27;s name to a1.</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test_change CHANGE a a1 <span class="type">INT</span>;</span><br><span class="line"><span class="comment">-- Next change column a1&#x27;s name to a2, its data type to string, and put it after column b.</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test_change CHANGE a1 a2 STRING AFTER b;</span><br><span class="line"><span class="comment">-- The new table&#x27;s structure is:  b int, a2 string, c int.</span></span><br><span class="line"><span class="comment">-- Then change column c&#x27;s name to c1, and put it as the first column.</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test_change CHANGE c c1 <span class="type">INT</span> <span class="keyword">FIRST</span>;</span><br><span class="line"><span class="comment">-- The new table&#x27;s structure is:  c1 int, b int, a2 string.</span></span><br><span class="line"><span class="comment">-- Add a comment to column a1</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test_change CHANGE a1 a1 <span class="type">INT</span> COMMENT <span class="string">&#x27;this is column a1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 9、添加/替换列</span></span><br><span class="line"><span class="comment">-- 使用ADD COLUMNS，您可以将新列添加到现有列的末尾但在分区列之前。</span></span><br><span class="line"><span class="comment">-- REPLACE COLUMNS 将删除所有现有列，并添加新的列集。</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span><span class="operator">|</span>REPLACE COLUMNS (col_name data_type,...);</span><br></pre></td></tr></table></figure>

<h4 id="Partition（分区）DDL操作"><a href="#Partition（分区）DDL操作" class="headerlink" title="Partition（分区）DDL操作"></a>Partition（分区）DDL操作</h4><h5 id="Add-Partition"><a href="#Add-Partition" class="headerlink" title="Add Partition"></a>Add Partition</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 一次添加一个分区</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> <span class="keyword">PARTITION</span> (dt<span class="operator">=</span><span class="string">&#x27;20170101&#x27;</span>) location <span class="string">&#x27;/user/hadoop/warehouse/table_name/dt=20170101&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 一次添加多个分区</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> <span class="keyword">PARTITION</span> (dt<span class="operator">=</span><span class="string">&#x27;2008-08-08&#x27;</span>, country<span class="operator">=</span><span class="string">&#x27;us&#x27;</span>) location <span class="string">&#x27;/path/to/us/part080808&#x27;</span></span><br><span class="line"><span class="keyword">PARTITION</span> (dt<span class="operator">=</span><span class="string">&#x27;2008-08-09&#x27;</span>, country<span class="operator">=</span><span class="string">&#x27;us&#x27;</span>) location <span class="string">&#x27;/path/to/us/part080809&#x27;</span>;  </span><br></pre></td></tr></table></figure>

<blockquote>
<p>分区值仅在为字符串时才应加引号。位置必须是数据文件所在的目录。</p>
<p>ADD PARTITION会更改表元数据，但不会加载数据。如果分区位置中不存在数据，查询将不会返回任何结果。</p>
</blockquote>
<h5 id="Rename-Partition"><a href="#Rename-Partition" class="headerlink" title="Rename Partition"></a>Rename Partition</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 重命名分区</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">PARTITION</span> partition_spec RENAME <span class="keyword">TO</span> <span class="keyword">PARTITION</span> partition_spec;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">PARTITION</span> (dt<span class="operator">=</span><span class="string">&#x27;2008-08-09&#x27;</span>) RENAME <span class="keyword">TO</span> <span class="keyword">PARTITION</span> (dt<span class="operator">=</span><span class="string">&#x27;20080809&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="Delete-Partition"><a href="#Delete-Partition" class="headerlink" title="Delete Partition"></a>Delete Partition</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> [IF <span class="keyword">EXISTS</span>] <span class="keyword">PARTITION</span> (dt<span class="operator">=</span><span class="string">&#x27;2008-08-08&#x27;</span>, country<span class="operator">=</span><span class="string">&#x27;us&#x27;</span>);</span><br><span class="line"><span class="comment">-- 直接删除数据 不进垃圾桶</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> [IF <span class="keyword">EXISTS</span>] <span class="keyword">PARTITION</span> (dt<span class="operator">=</span><span class="string">&#x27;2008-08-08&#x27;</span>, country<span class="operator">=</span><span class="string">&#x27;us&#x27;</span>) PURGE;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将删除该分区的数据和元数据。</p>
</blockquote>
<h5 id="Msck-Partition"><a href="#Msck-Partition" class="headerlink" title="Msck Partition"></a>Msck Partition</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修复分区</span></span><br><span class="line">MSCK [REPAIR] <span class="keyword">TABLE</span> table_name [<span class="keyword">ADD</span><span class="operator">/</span><span class="keyword">DROP</span><span class="operator">/</span>SYNC PARTITIONS];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MSCK命令的默认选项是“添加分区”。使用此选项，它将把HDFS上存在但元存储中不存在的所有分区添加到元存储中。DROP PARTITIONS选项将从已经从HDFS中删除的metastore中删除分区信息。SYNC PARTITIONS选项等效于调用ADD和DROP PARTITIONS。</p>
<p>如果存在大量未跟踪的分区，则可以批量运行MSCK REPAIR TABLE，以避免OOME（内存不足错误）。</p>
</blockquote>
<h5 id="Alter-Partition"><a href="#Alter-Partition" class="headerlink" title="Alter Partition"></a>Alter Partition</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 更改分区文件存储格式</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">PARTITION</span> (dt<span class="operator">=</span><span class="string">&#x27;2008-08-09&#x27;</span>) <span class="keyword">SET</span> FILEFORMAT file_format;</span><br><span class="line"><span class="comment">-- 更改分区位置</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">PARTITION</span> (dt<span class="operator">=</span><span class="string">&#x27;2008-08-09&#x27;</span>) <span class="keyword">SET</span> LOCATION &quot;new location&quot;;</span><br></pre></td></tr></table></figure>

<h4 id="Hive-Show显示语法"><a href="#Hive-Show显示语法" class="headerlink" title="Hive Show显示语法"></a>Hive Show显示语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1、显示所有数据库 SCHEMAS和DATABASES的用法 功能一样</span></span><br><span class="line"><span class="keyword">SHOW</span> DATABASES<span class="operator">|</span>SCHEMAS;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2、显示当前数据库所有表/视图/物化视图/分区/索引</span></span><br><span class="line"><span class="keyword">SHOW</span> TABLES [<span class="keyword">IN</span> database_name]; <span class="comment">--指定某个数据库</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3、显示当前数据库下所有视图</span></span><br><span class="line"><span class="keyword">SHOW</span> VIEWS;</span><br><span class="line"><span class="comment">-- show all views that start with &quot;test_&quot;</span></span><br><span class="line"><span class="keyword">SHOW</span> VIEWS <span class="string">&#x27;test_*&#x27;</span>;</span><br><span class="line"><span class="comment">-- show views from database database_name</span></span><br><span class="line"><span class="keyword">SHOW</span> VIEWS [<span class="keyword">IN</span><span class="operator">/</span><span class="keyword">FROM</span> database_name];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4、显示当前数据库下所有物化视图</span></span><br><span class="line"><span class="keyword">SHOW</span> MATERIALIZED VIEWS [<span class="keyword">IN</span><span class="operator">/</span><span class="keyword">FROM</span> database_name];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5、显示表分区信息，分区按字母顺序列出，不是分区表执行该语句会报错</span></span><br><span class="line"><span class="keyword">SHOW</span> PARTITIONS table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 6、显示表/分区的扩展信息</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> EXTENDED [<span class="keyword">IN</span><span class="operator">|</span><span class="keyword">FROM</span> database_name] <span class="keyword">LIKE</span> table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 7、显示表的属性信息</span></span><br><span class="line"><span class="keyword">SHOW</span> TBLPROPERTIES table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 8、显示表、视图的创建语句</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ([db_name.]table_name<span class="operator">|</span>view_name);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 9、显示表中的所有列，包括分区列。</span></span><br><span class="line"><span class="keyword">SHOW</span> COLUMNS (<span class="keyword">FROM</span><span class="operator">|</span><span class="keyword">IN</span>) table_name [(<span class="keyword">FROM</span><span class="operator">|</span><span class="keyword">IN</span>) db_name];</span><br><span class="line"></span><br><span class="line"><span class="comment">--10、显示当前支持的所有自定义和内置的函数</span></span><br><span class="line"><span class="keyword">SHOW</span> FUNCTIONS;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 11、Describe desc</span></span><br><span class="line"><span class="comment">-- 查看表信息</span></span><br><span class="line"><span class="keyword">DESC</span> EXTENDED table_name;</span><br><span class="line"><span class="comment">-- 查看表信息（格式化美观）</span></span><br><span class="line"><span class="keyword">DESC</span> FORMATTED table_name;</span><br><span class="line"><span class="comment">-- 查看数据库相关信息</span></span><br><span class="line"><span class="keyword">DESC</span> DATABASE database_name;</span><br></pre></td></tr></table></figure>

<h3 id="Hive-的数据操纵语言（DML）"><a href="#Hive-的数据操纵语言（DML）" class="headerlink" title="Hive 的数据操纵语言（DML）"></a>Hive 的数据操纵语言（DML）</h3><h4 id="DML-LOAD加载数据"><a href="#DML-LOAD加载数据" class="headerlink" title="DML-LOAD加载数据"></a>DML-LOAD加载数据</h4><h5 id="LOAD语法"><a href="#LOAD语法" class="headerlink" title="LOAD语法"></a>LOAD语法</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LOAD DATA [<span class="keyword">LOCAL</span>] INPATH <span class="string">&#x27;filepath&#x27;</span> [OVERWRITE] <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tablename [<span class="keyword">PARTITION</span> (partcol1<span class="operator">=</span>val1, partcol2<span class="operator">=</span>val2 ...)]</span><br><span class="line"></span><br><span class="line">LOAD DATA [<span class="keyword">LOCAL</span>] INPATH <span class="string">&#x27;filepath&#x27;</span> [OVERWRITE] <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tablename [<span class="keyword">PARTITION</span> (partcol1<span class="operator">=</span>val1, partcol2<span class="operator">=</span>val2 ...)] [INPUTFORMAT <span class="string">&#x27;inputformat&#x27;</span> SERDE <span class="string">&#x27;serde&#x27;</span>] (<span class="number">3.0</span> <span class="keyword">or</span> later)</span><br></pre></td></tr></table></figure>

<ol>
<li><p><strong>filepath</strong></p>
<p>filepath表示的待移动数据的路径，可以引用一个文件（在这种情况下，Hive将文件移动到表中），也可以是一个目录（在这种情况下，Hive将把该目录中的所有文件移动到表中）。</p>
<p>具有schema的完整URI，例如：hdfs://namenode:9000/user/hive/project/data1</p>
</li>
<li><p><strong>LOCAL</strong></p>
<p>如果指定了LOCAL， load命令将在本地文件系统中查找文件路径。</p>
<p>如果没有指定LOCAL关键字，如果filepath指向的是一个完整的URI，hive会直接使用这个URI。否则Hive会使用hadoop配置文件中定义的schema 和 authority，即参数fs.default.name指定的（默认HDFS）。</p>
</li>
<li><p><strong>OVERWRITE</strong></p>
<p>如果使用了OVERWRITE关键字，则目标表（或者分区）中的内容会被删除，然后再将 filepath 指向的文件/目录中的内容添加到表/分区中。</p>
</li>
</ol>
<h5 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- step1:建表</span></span><br><span class="line"><span class="comment">-- 建表 student_local 用于演示从本地加载数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student_local</span><br><span class="line">(</span><br><span class="line">    num  <span class="type">int</span>,</span><br><span class="line">    name string,</span><br><span class="line">    sex  string,</span><br><span class="line">    age  <span class="type">int</span>,</span><br><span class="line">    dept string</span><br><span class="line">) <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="comment">-- 建表 student_hdfs  用于演示从HDFS加载数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student_hdfs</span><br><span class="line">(</span><br><span class="line">    num  <span class="type">int</span>,</span><br><span class="line">    name string,</span><br><span class="line">    sex  string,</span><br><span class="line">    age  <span class="type">int</span>,</span><br><span class="line">    dept string</span><br><span class="line">) <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="comment">-- 建表 student_hdfs_p 用于演示从HDFS加载数据到分区表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student_hdfs_p</span><br><span class="line">(</span><br><span class="line">    num  <span class="type">int</span>,</span><br><span class="line">    name string,</span><br><span class="line">    sex  string,</span><br><span class="line">    age  <span class="type">int</span>,</span><br><span class="line">    dept string</span><br><span class="line">) PARTITIONED <span class="keyword">BY</span> (country string)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">-- step2:加载数据</span></span><br><span class="line"><span class="comment">-- 从本地加载数据  数据位于HS2本地文件系统  本质是hadoop fs -put上传操作</span></span><br><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INPATH &quot;/home/eitan/documents/txt/students.txt&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> student_local;</span><br><span class="line"><span class="comment">-- 从HDFS加载数据  数据位于HDFS文件系统根目录下  本质是hadoop fs -mv 移动操作</span></span><br><span class="line">LOAD DATA INPATH &quot;/students.txt&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> student_hdfs;</span><br><span class="line"><span class="comment">-- 从HDFS加载数据到分区表中并制定分区  数据位于HDFS文件系统根目录下</span></span><br><span class="line">LOAD DATA INPATH &quot;/students.txt&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> student_hdfs_p <span class="keyword">PARTITION</span> (country <span class="operator">=</span> &quot;China&quot;);</span><br></pre></td></tr></table></figure>

<h5 id="Hive3-0-Load新特性"><a href="#Hive3-0-Load新特性" class="headerlink" title="Hive3.0 Load新特性"></a>Hive3.0 Load新特性</h5><p>Hive 3.0及更高版本中，除了移动复制操作之外，还支持其他加载操作，因为Hive在内部在某些场合下会将加载重写为INSERT AS SELECT。</p>
<p>比如，如果表具有分区，则load命令没有指定分区，则将load转换为INSERT AS SELECT，并假定最后一组列为分区列。如果文件不符合预期的架构，它将引发错误。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">------- hive 3.0 load命令新特性 ------------------</span></span><br><span class="line"><span class="comment">-- tab1.txt内容如下</span></span><br><span class="line"><span class="number">11</span>,<span class="number">22</span>,<span class="number">1</span></span><br><span class="line"><span class="number">33</span>,<span class="number">44</span>,<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tab1</span><br><span class="line">(</span><br><span class="line">    col1 <span class="type">int</span>,</span><br><span class="line">    col2 <span class="type">int</span></span><br><span class="line">) PARTITIONED <span class="keyword">BY</span> (col3 <span class="type">int</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 加载数据</span></span><br><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INPATH &quot;/home/eitan/documents/txt/tab1.txt&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tab1;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>本来加载的时候没有指定分区，语句是报错的，但是文件的格式符合表的结构，前两个是col1,col2,最后一个是分区字段col3，则此时会将load语句转换成为insert as select语句。</p>
</blockquote>
<h4 id="DML-Insert插入数据"><a href="#DML-Insert插入数据" class="headerlink" title="DML-Insert插入数据"></a>DML-Insert插入数据</h4><h5 id="insert-select"><a href="#insert-select" class="headerlink" title="insert + select"></a>insert + select</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Hive中insert主要是结合select查询语句使用，将查询结果插入到表中，例如：</span></span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> tablename1 [<span class="keyword">PARTITION</span> (partcol1<span class="operator">=</span>val1, partcol2<span class="operator">=</span>val2 ...) [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>]] select_statement1 <span class="keyword">FROM</span> from_statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tablename1 [<span class="keyword">PARTITION</span> (partcol1<span class="operator">=</span>val1, partcol2<span class="operator">=</span>val2 ...)] select_statement1 <span class="keyword">FROM</span> from_statement;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>INSERT OVERWRITE将覆盖表或分区中的任何现有数据。</p>
<p>如果查询出来的数据类型和插入表格对应的列数据类型不一致，将会进行转换，但是不能保证转换一定成功，转换失败的数据将会为NULL。</p>
</blockquote>
<h5 id="multiple-inserts多重插入"><a href="#multiple-inserts多重插入" class="headerlink" title="multiple inserts多重插入"></a>multiple inserts多重插入</h5><p>multiple inserts可以翻译成为多次插入，多重插入，核心是：一次扫描，多次插入。其功能也体现出来了就是减少扫描的次数。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">------------ multiple inserts ----------------------</span></span><br><span class="line"><span class="comment">-- 当前库下已有一张表student</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="comment">-- 创建两张新表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student_insert1(sno <span class="type">int</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student_insert2(sname string);</span><br><span class="line"><span class="comment">-- 多重插入</span></span><br><span class="line"><span class="keyword">FROM</span> t_student</span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> student_insert1 <span class="keyword">SELECT</span> id</span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> student_insert2 <span class="keyword">SELECT</span> name;</span><br></pre></td></tr></table></figure>

<h5 id="dynamic-partition-insert动态分区插入"><a href="#dynamic-partition-insert动态分区插入" class="headerlink" title="dynamic partition insert动态分区插入"></a>dynamic partition insert动态分区插入</h5><p>分区的值是由后续的select查询语句的结果来动态确定的。根据查询结果自动分区。案例参照 <strong>分区表-动态分区</strong></p>
<h5 id="insert-directory导出数据"><a href="#insert-directory导出数据" class="headerlink" title="insert + directory导出数据"></a>insert + directory导出数据</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 标准语法:</span></span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE [<span class="keyword">LOCAL</span>] DIRECTORY directory1</span><br><span class="line">    [<span class="type">ROW</span> FORMAT row_format] [STORED <span class="keyword">AS</span> file_format]</span><br><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 多重导出 Hive extension (multiple inserts):</span></span><br><span class="line"><span class="keyword">FROM</span> from_statement</span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE [<span class="keyword">LOCAL</span>] DIRECTORY directory1 select_statement1</span><br><span class="line">[<span class="keyword">INSERT</span> OVERWRITE [<span class="keyword">LOCAL</span>] DIRECTORY directory2 select_statement2] ...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>导出操作是一个OVERWRITE覆盖操作。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--1、导出查询结果到HDFS指定目录下</span></span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE DIRECTORY <span class="string">&#x27;/tmp/hive_export/e1&#x27;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">--2、导出时指定分隔符和文件存储格式</span></span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE DIRECTORY <span class="string">&#x27;/tmp/hive_export/e2&#x27;</span> <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">--3、导出数据到本地文件系统指定目录下</span></span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">LOCAL</span> DIRECTORY <span class="string">&#x27;/home/eitan/hive_export/e1&#x27;</span> STORED <span class="keyword">AS</span> ORC <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student;</span><br></pre></td></tr></table></figure>

<h4 id="Hive-Transaction事务"><a href="#Hive-Transaction事务" class="headerlink" title="Hive Transaction事务"></a>Hive Transaction事务</h4><h5 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h5><ol>
<li><p>用HDFS文件作为原始数据（基础数据），用delta保存事务操作的记录增量数据；</p>
</li>
<li><p>正在执行中的事务，是以一个staging开头的文件夹维护的，执行结束就是delta文件夹。每次执行一次事务操作都会有这样的一个delta增量文件夹;</p>
</li>
<li><p>当访问Hive数据时，根据HDFS原始文件和delta增量文件做合并，查询最新的数据。</p>
</li>
</ol>
<h5 id="合并器-Compactor"><a href="#合并器-Compactor" class="headerlink" title="合并器(Compactor)"></a><strong>合并器(Compactor)</strong></h5><ol>
<li><p>随着表的修改操作，创建了越来越多的delta增量文件，就需要合并以保持足够的性能。</p>
</li>
<li><p>合并器Compactor是一套在Hive Metastore内运行，支持ACID系统的后台进程。所有合并都是在后台完成的，不会阻止数据的并发读、写。合并后，系统将等待所有旧文件的读操作完成后，删除旧文件。</p>
</li>
<li><p>合并操作分为两种，minor compaction（小合并）、major compaction（大合并）：</p>
<ol>
<li><p>小合并会将一组delta增量文件重写为单个增量文件，默认触发条件为10个delta文件；</p>
</li>
<li><p>大合并将一个或多个增量文件和基础文件重写为新的基础文件，默认触发条件为delta文件相应于基础文件占比，10%。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>hive.compactor.delta.num.threshold</td>
<td>Specifies the number of delta directories in a partition that triggers an automatic minor compaction.The default value is 10.</td>
</tr>
<tr>
<td>hive.compactor.delta.pct.threshold</td>
<td>Specifies the percentage size of delta files relative to the corresponding base files that triggers an automatic major compaction. The default value is. 1, which is 10 percent.</td>
</tr>
</tbody></table>
</li>
</ol>
</li>
</ol>
<h4 id="DML-Update、Delete更新、删除数据"><a href="#DML-Update、Delete更新、删除数据" class="headerlink" title="DML-Update、Delete更新、删除数据"></a>DML-Update、Delete更新、删除数据</h4><p>见<strong>Hive事务表-Hive事务表实践</strong></p>
<h3 id="Hive-的数据查询语言（DQL）"><a href="#Hive-的数据查询语言（DQL）" class="headerlink" title="Hive 的数据查询语言（DQL）"></a>Hive 的数据查询语言（DQL）</h3><h5 id="语法树"><a href="#语法树" class="headerlink" title="语法树"></a>语法树</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">WITH</span> CommonTableExpression (, CommonTableExpression)<span class="operator">*</span>] </span><br><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>] select_expr, select_expr, ...</span><br><span class="line">  <span class="keyword">FROM</span> table_reference</span><br><span class="line">  [<span class="keyword">WHERE</span> where_condition]</span><br><span class="line">  [<span class="keyword">GROUP</span> <span class="keyword">BY</span> col_list]</span><br><span class="line">  [<span class="keyword">ORDER</span> <span class="keyword">BY</span> col_list]</span><br><span class="line">  [CLUSTER <span class="keyword">BY</span> col_list</span><br><span class="line">    <span class="operator">|</span> [DISTRIBUTE <span class="keyword">BY</span> col_list] [SORT <span class="keyword">BY</span> col_list]</span><br><span class="line">  ]</span><br><span class="line"> [LIMIT [<span class="keyword">offset</span>,] <span class="keyword">rows</span>]</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>ALL和DISTINCT选项指定是否应返回重复的行。如果没有给出这些选项，则默认值为ALL（返回所有匹配的行）。DISTINCT指定从结果集中删除重复的行。</li>
</ul>
</blockquote>
<h5 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h5><p>在查询过程中执行顺序：<strong>from &gt; where &gt; group（含聚合）&gt; having &gt;order &gt; select；</strong></p>
<ol>
<li><p>聚合语句(sum,min,max,avg,count)要比having子句优先执行</p>
</li>
<li><p>where子句在查询过程中执行优先级别优先于聚合语句(sum,min,max,avg,count)</p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> state,<span class="built_in">sum</span>(deaths) <span class="keyword">as</span> cnts</span><br><span class="line"><span class="keyword">from</span> t_usa_covid19_p</span><br><span class="line"><span class="keyword">where</span> count_date <span class="operator">=</span> &quot;2021-01-28&quot;</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> state</span><br><span class="line"><span class="keyword">having</span> cnts<span class="operator">&gt;</span> <span class="number">10000</span>;</span><br></pre></td></tr></table></figure>

<h5 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">---order by</span></span><br><span class="line"><span class="comment">--根据字段进行排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_usa_covid19_p</span><br><span class="line"><span class="keyword">where</span> count_date <span class="operator">=</span> &quot;2021-01-28&quot;</span><br><span class="line"><span class="keyword">and</span> state <span class="operator">=</span>&quot;California&quot;</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> deaths; <span class="comment">--默认asc null first</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_usa_covid19_p</span><br><span class="line"><span class="keyword">where</span> count_date <span class="operator">=</span> &quot;2021-01-28&quot;</span><br><span class="line"><span class="keyword">and</span> state <span class="operator">=</span>&quot;California&quot;</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> deaths <span class="keyword">desc</span>; <span class="comment">--指定desc null last</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--强烈建议将LIMIT与ORDER BY一起使用。避免数据集行数过大</span></span><br><span class="line"><span class="comment">--当hive.mapred.mode设置为strict严格模式时，使用不带LIMIT的ORDER BY时会引发异常。</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_usa_covid19_p</span><br><span class="line"><span class="keyword">where</span> count_date <span class="operator">=</span> &quot;2021-01-28&quot;</span><br><span class="line">  <span class="keyword">and</span> state <span class="operator">=</span>&quot;California&quot;</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> deaths <span class="keyword">desc</span></span><br><span class="line">limit <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h5 id="CLUSTER-BY"><a href="#CLUSTER-BY" class="headerlink" title="CLUSTER BY"></a>CLUSTER BY</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--cluster by</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="comment">--不指定reduce task个数</span></span><br><span class="line"><span class="comment">--日志显示：Number of reduce tasks not specified. Estimated from input data size: 1</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student cluster <span class="keyword">by</span> sno;</span><br><span class="line"></span><br><span class="line"><span class="comment">--手动设置reduce task个数</span></span><br><span class="line"><span class="keyword">set</span> mapreduce.job.reduces <span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student cluster <span class="keyword">by</span> sno;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Hive SQL中的<strong>CLUSTER BY</strong>语法可以指定根据后面的字段将数据分组，每组内再根据这个字段正序排序（不允许指定排序规则），概况起来就是：<strong>根据同一个字段，分且排序</strong>。</p>
</blockquote>
<h5 id="DISTRIBUTE-BY-SORT-BY"><a href="#DISTRIBUTE-BY-SORT-BY" class="headerlink" title="DISTRIBUTE BY +SORT BY"></a>DISTRIBUTE BY +SORT BY</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例：把学生表数据根据性别分为两个部分，每个分组内根据年龄的倒序排序。</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student distribute <span class="keyword">by</span> sex sort <span class="keyword">by</span> sage <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果说CLUSTER BY的功能是分且排序（同一个字段），那么DISTRIBUTE BY +SORT BY就相当于把cluster by的功能一分为二：<strong>DISTRIBUTE BY负责分，SORT BY负责分组内排序</strong>，并且可以是不同的字段。</p>
<p>sort by不是全局排序，其在数据进入reducer前完成排序。因此，如果用sort by进行排序，并且设置mapred.reduce.tasks&gt;1，则sort by只保证每个reducer的输出有序，不保证全局有序。</p>
<p>distribute by(字段)根据指定字段将数据分到不同的reducer，分发算法是hash散列。</p>
</blockquote>
<h5 id="Union联合查询"><a href="#Union联合查询" class="headerlink" title="Union联合查询"></a>Union联合查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">select_statement <span class="keyword">UNION</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>] select_statement <span class="keyword">UNION</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>] select_statement ...</span><br></pre></td></tr></table></figure>

<h5 id="Common-Table-Expressions（CTE）"><a href="#Common-Table-Expressions（CTE）" class="headerlink" title="Common Table Expressions（CTE）"></a>Common Table Expressions（CTE）</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--选择语句中的CTE</span></span><br><span class="line"><span class="keyword">with</span> q1 <span class="keyword">as</span> (<span class="keyword">select</span> sno,sname,sage <span class="keyword">from</span> student <span class="keyword">where</span> sno <span class="operator">=</span> <span class="number">95002</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> q1;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>公用表表达式（CTE）是一个临时结果集，该结果集是从WITH子句中指定的简单查询派生而来的，该查询紧接在SELECT或INSERT关键字之前。</p>
</blockquote>
<h5 id="join连接查询"><a href="#join连接查询" class="headerlink" title="join连接查询"></a>join连接查询</h5><ol>
<li><p>inner join</p>
<p>连接的两个表中都存在与连接条件相匹配的数据才会被留下来。</p>
</li>
<li><p>left join</p>
<p>join时以左表的全部数据为准，右边与之关联；左表数据全部返回，右表关联上的显示返回，关联不上的显示null返回。</p>
</li>
<li><p>right jion</p>
<p>join时以右表的全部数据为准，左边与之关联；右表数据全部返回，左表关联上的显示返回，关联不上的显示null返回。</p>
</li>
<li><p>full outer join</p>
<p>它等价于对这两个数据集合分别进行左外连接和右外连接，然后再使用消去重复行的操作将上述两个结果集合并为一个结果集。</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220513231016.png" alt="image-20220513231011099"></p>
</li>
<li><p>left semi join</p>
<p>只返回左边表的记录的字段，前提是其记录对于右边的表满足ON语句中的判定条件。相当于inner join但是只返回左边的字段。</p>
</li>
<li><p>cross join</p>
<p>相当于无条件的inner join。</p>
</li>
<li><p>join注意事项</p>
<ul>
<li><p>如果每个表在联接子句中使用相同的列，则Hive将多个表上的联接转换为单个MR作业</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.val, b.val, c.val <span class="keyword">FROM</span> a <span class="keyword">JOIN</span> b <span class="keyword">ON</span> (a.key <span class="operator">=</span> b.key1) <span class="keyword">JOIN</span> c <span class="keyword">ON</span> (c.key <span class="operator">=</span> b.key1)</span><br><span class="line"><span class="comment">--由于联接中仅涉及b的key1列，因此被转换为1个MR作业来执行，并且表a和b的键的特定值的值被缓冲在reducer的内存中。然后，对于从c中检索的每一行，将使用缓冲的行来计算联接。</span></span><br><span class="line"><span class="keyword">SELECT</span> a.val, b.val, c.val <span class="keyword">FROM</span> a <span class="keyword">JOIN</span> b <span class="keyword">ON</span> (a.key <span class="operator">=</span> b.key1) <span class="keyword">JOIN</span> c <span class="keyword">ON</span> (c.key <span class="operator">=</span> b.key2)</span><br><span class="line"><span class="comment">--计算涉及两个MR作业。其中的第一个将a与b连接起来，并缓冲a的值，同时在reducer中流式传输b的值。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>在join的时候，可以通过语法STREAMTABLE提示指定要流式传输的表。如果省略STREAMTABLE提示，则Hive将流式传输最右边的表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="comment">/*+ STREAMTABLE(a) */</span> a.val, b.val, c.val <span class="keyword">FROM</span> a <span class="keyword">JOIN</span> b <span class="keyword">ON</span> (a.key <span class="operator">=</span> b.key1) <span class="keyword">JOIN</span> c <span class="keyword">ON</span> (c.key <span class="operator">=</span> b.key1)</span><br><span class="line"><span class="comment">--a,b,c三个表都在一个MR作业中联接，并且表b和c的键的特定值的值被缓冲在reducer的内存中。然后，对于从a中检索到的每一行，将使用缓冲的行来计算联接。如果省略STREAMTABLE提示，则Hive将流式传输最右边的表。</span></span><br></pre></td></tr></table></figure></li>
<li><p> 如果除一个要连接的表之外的所有表都很小，则可以将其作为仅map作业执行</p>
</li>
</ul>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="comment">/*+ MAPJOIN(b) */</span> a.key, a.value <span class="keyword">FROM</span> a <span class="keyword">JOIN</span> b <span class="keyword">ON</span> a.key <span class="operator">=</span> b.key</span><br><span class="line"><span class="comment">--不需要reducer。对于A的每个Mapper，B都会被完全读取。限制是不能执行FULL / RIGHT OUTER JOIN b。</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Big Data</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop（四）：Hive</title>
    <url>/2022/05/20/Hadoop%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9AHive/</url>
    <content><![CDATA[<p>本文为学习笔记，对应视频教程来自<a href="https://www.bilibili.com/video/BV1L5411u7ae">黑马程序员Hive教程</a></p>
<h3 id="Hive函数入门"><a href="#Hive函数入门" class="headerlink" title="Hive函数入门"></a>Hive函数入门</h3><h4 id="函数概述"><a href="#函数概述" class="headerlink" title="函数概述"></a>函数概述</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 显示所有的函数和运算符</span></span><br><span class="line"><span class="keyword">SHOW</span> FUNCTIONS;</span><br><span class="line"><span class="comment">-- 查看运算符或者函数的使用说明</span></span><br><span class="line"><span class="keyword">DESCRIBE</span> <span class="keyword">FUNCTION</span> avg;</span><br><span class="line"><span class="comment">-- 使用extended 可以查看更加详细的使用说明</span></span><br><span class="line"><span class="keyword">DESCRIBE</span> <span class="keyword">FUNCTION</span> EXTENDED avg;</span><br></pre></td></tr></table></figure>

<h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h4><h5 id="String-Functions-字符串函数"><a href="#String-Functions-字符串函数" class="headerlink" title="String Functions 字符串函数"></a>String Functions 字符串函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 字符串长度函数：length(str | binary)</span></span><br><span class="line"><span class="keyword">SELECT</span> length(&quot;Facebook&quot;);</span><br><span class="line"><span class="comment">-- 字符串反转函数：reverse</span></span><br><span class="line"><span class="keyword">SELECT</span> reverse(&quot;Facebook&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串连接函数：concat(str1, str2, ... strN)</span></span><br><span class="line"><span class="keyword">SELECT</span> concat(&quot;abc&quot;,&quot;def&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 带分隔符字符串连接函数：concat_ws(separator, [string | array(string)]+)</span></span><br><span class="line"><span class="keyword">SELECT</span> concat_ws(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;www&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;facebook&#x27;</span>, <span class="string">&#x27;com&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串截取函数：substr(str, pos[, len]) 或者  substring(str, pos[, len])</span></span><br><span class="line"><span class="comment">-- pos是从1开始的索引，如果为负数则倒着数</span></span><br><span class="line"><span class="keyword">SELECT</span> substr(&quot;Facebook&quot;,<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> substr(&quot;Facebook&quot;,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串转大写函数：upper,ucase</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">upper</span>(&quot;Facebook&quot;);</span><br><span class="line"><span class="keyword">SELECT</span> ucase(&quot;Facebook&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串转小写函数：lower,lcase</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">lower</span>(&quot;Facebook&quot;);</span><br><span class="line"><span class="keyword">SELECT</span> lcase(&quot;Facebook&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 去空格函数：trim 去除左右两边的空格</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">trim</span>(&quot; facebook &quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 左边去空格函数：ltrim</span></span><br><span class="line"><span class="keyword">SELECT</span> ltrim(&quot; facebook &quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 右边去空格函数：rtrim</span></span><br><span class="line"><span class="keyword">SELECT</span> rtrim(&quot; facebook &quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正则表达式替换函数：regexp_replace(str, regexp, rep)</span></span><br><span class="line"><span class="keyword">SELECT</span> regexp_replace(<span class="string">&#x27;100-200&#x27;</span>, <span class="string">&#x27;(\\d+)&#x27;</span>, <span class="string">&#x27;num&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正则表达式解析函数：regexp_extract(str, regexp[, idx]) 提取正则匹配到的指定组内容</span></span><br><span class="line"><span class="keyword">SELECT</span> regexp_extract(<span class="string">&#x27;100-200&#x27;</span>, <span class="string">&#x27;(\\d+)-(\\d+)&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- URL解析函数：parse_url 注意要想一次解析出多个 可以使用parse_url_tuple这个UDTF函数</span></span><br><span class="line"><span class="keyword">SELECT</span> parse_url(<span class="string">&#x27;http://www.facebook.cn/path/p1.php?query=1&#x27;</span>, <span class="string">&#x27;HOST&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- json解析函数：get_json_object</span></span><br><span class="line"><span class="comment">-- $代表当前JSON对象</span></span><br><span class="line"><span class="keyword">SELECT</span> get_json_object(</span><br><span class="line">               <span class="string">&#x27;[&#123;&quot;website&quot;:&quot;www.itcast.cn&quot;,&quot;name&quot;:&quot;allenwoon&quot;&#125;, &#123;&quot;website&quot;:&quot;cloud.itcast.com&quot;,&quot;name&quot;:&quot;carbondata 中文文档&quot;&#125;]&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;$.[1].website&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 空格字符串函数：space(n) 返回指定个数空格</span></span><br><span class="line"><span class="keyword">SELECT</span> space(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重复字符串函数：repeat(str, n) 重复str字符串n次</span></span><br><span class="line"><span class="keyword">SELECT</span> repeat(&quot;123&quot;, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 返回首字符ascii函数：ascii</span></span><br><span class="line"><span class="comment">-- a对应ASCII 97</span></span><br><span class="line"><span class="keyword">SELECT</span> ascii(&quot;apple&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 左补足函数：lpad</span></span><br><span class="line"><span class="comment">-- ???hi</span></span><br><span class="line"><span class="keyword">SELECT</span> lpad(<span class="string">&#x27;hi&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;??&#x27;</span>);</span><br><span class="line"><span class="comment">-- h</span></span><br><span class="line"><span class="keyword">SELECT</span> lpad(<span class="string">&#x27;hi&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;??&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 右补足函数：rpad</span></span><br><span class="line"><span class="keyword">SELECT</span> rpad(<span class="string">&#x27;hi&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;??&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分割字符串函数: split(str, regex)</span></span><br><span class="line"><span class="keyword">SELECT</span> split(<span class="string">&#x27;oneAtwoBthreeC&#x27;</span>, <span class="string">&#x27;[ABC]&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 集合查找函数: find_in_set(str,str_array)</span></span><br><span class="line"><span class="keyword">SELECT</span> find_in_set(<span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;abc,b,ab,c,def&#x27;</span>);</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h5 id="Date-Functions-日期函数"><a href="#Date-Functions-日期函数" class="headerlink" title="Date Functions 日期函数"></a>Date Functions 日期函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 获取当前日期: current_date</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">current_date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取当前时间戳: current_timestamp</span></span><br><span class="line"><span class="comment">-- 同一查询中对current_timestamp的所有调用均返回相同的值。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">current_timestamp</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取当前UNIX时间戳函数: unix_timestamp</span></span><br><span class="line"><span class="keyword">SELECT</span> unix_timestamp();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- UNIX时间戳转日期函数: from_unixtime</span></span><br><span class="line"><span class="keyword">SELECT</span> from_unixtime(<span class="number">0</span>, <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 日期转UNIX时间戳函数: unix_timestamp</span></span><br><span class="line"><span class="keyword">SELECT</span> unix_timestamp(&quot;2011-12-07 13:01:03&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定格式日期转UNIX时间戳函数: unix_timestamp</span></span><br><span class="line"><span class="keyword">SELECT</span> unix_timestamp(<span class="string">&#x27;20111207 13:01:03&#x27;</span>,<span class="string">&#x27;yyyyMMdd HH:mm:ss&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 抽取日期函数: to_date</span></span><br><span class="line"><span class="keyword">SELECT</span> to_date(<span class="string">&#x27;2009-07-30 04:17:52&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 日期转年函数: year</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">year</span>(<span class="string">&#x27;2009-07-30 04:17:52&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 日期转月函数: month</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">month</span>(<span class="string">&#x27;2009-07-30 04:17:52&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 日期转天函数: day</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">day</span>(<span class="string">&#x27;2009-07-30 04:17:52&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 日期转小时函数: hour</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">hour</span>(<span class="string">&#x27;2009-07-30 04:17:52&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 日期转分钟函数: minute</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">minute</span>(<span class="string">&#x27;2009-07-30 04:17:52&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 日期转秒函数: second</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">second</span>(<span class="string">&#x27;2009-07-30 04:17:52&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 日期转周函数: weekofyear 返回指定日期所示年份第几周</span></span><br><span class="line"><span class="keyword">SELECT</span> weekofyear(<span class="string">&#x27;2009-07-30 04:17:52&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 日期比较函数: datediff  日期格式要求&#x27;yyyy-MM-dd HH:mm:ss&#x27; or &#x27;yyyy-MM-dd&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> datediff(<span class="string">&#x27;2012-12-08&#x27;</span>,<span class="string">&#x27;2012-05-09&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 日期增加函数: date_add</span></span><br><span class="line"><span class="keyword">SELECT</span> date_add(<span class="string">&#x27;2012-02-28&#x27;</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 日期减少函数: date_sub</span></span><br><span class="line"><span class="keyword">SELECT</span> date_sub(<span class="string">&#x27;2012-01-1&#x27;</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<h5 id="Mathematical-Functions-数学函数"><a href="#Mathematical-Functions-数学函数" class="headerlink" title="Mathematical Functions 数学函数"></a>Mathematical Functions 数学函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 取整函数: round  返回double类型的整数值部分 （遵循四舍五入）</span></span><br><span class="line"><span class="keyword">SELECT</span> round(<span class="number">3.1415926</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定精度取整函数: round(double a, int d) 返回指定精度d的double类型</span></span><br><span class="line"><span class="keyword">SELECT</span> round(<span class="number">3.1415926</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向下取整函数: floor</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">floor</span>(<span class="number">3.1415926</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">floor</span>(<span class="number">-3.1415926</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向上取整函数: ceil</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ceil</span>(<span class="number">3.1415926</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ceil</span>(<span class="number">-3.1415926</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 取随机数函数: rand 每次执行都不一样 返回一个0到1范围内的随机数</span></span><br><span class="line"><span class="keyword">SELECT</span> rand();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定种子取随机数函数: rand(int seed) 得到一个稳定的随机数序列</span></span><br><span class="line"><span class="keyword">SELECT</span> rand(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 二进制函数:  bin(BIGINT a)</span></span><br><span class="line"><span class="keyword">SELECT</span> bin(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 进制转换函数: conv(BIGINT num, int from_base, int to_base)</span></span><br><span class="line"><span class="keyword">SELECT</span> conv(<span class="number">17</span>,<span class="number">10</span>,<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 绝对值函数: abs</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">abs</span>(<span class="number">-3.9</span>);</span><br></pre></td></tr></table></figure>

<h5 id="Collection-Functions-集合函数"><a href="#Collection-Functions-集合函数" class="headerlink" title="Collection Functions 集合函数"></a>Collection Functions 集合函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 集合元素size函数: size(Map&lt;K.V&gt;) size(Array&lt;T&gt;)</span></span><br><span class="line"><span class="keyword">SELECT</span> size(`<span class="keyword">array</span>`(<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>));</span><br><span class="line"><span class="keyword">SELECT</span> size(`map`(&quot;id&quot;,<span class="number">10086</span>,&quot;name&quot;,&quot;zhangsan&quot;,&quot;age&quot;,<span class="number">18</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 取map集合keys函数: map_keys(Map&lt;K.V&gt;)</span></span><br><span class="line"><span class="keyword">SELECT</span> map_keys(`map`(&quot;id&quot;,<span class="number">10086</span>,&quot;name&quot;,&quot;zhangsan&quot;,&quot;age&quot;,<span class="number">18</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 取map集合values函数: map_values(Map&lt;K.V&gt;)</span></span><br><span class="line"><span class="keyword">SELECT</span> map_values(`map`(&quot;id&quot;,<span class="number">10086</span>,&quot;name&quot;,&quot;zhangsan&quot;,&quot;age&quot;,<span class="number">18</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 判断数组是否包含指定元素: array_contains(Array&lt;T&gt;, value)</span></span><br><span class="line"><span class="keyword">SELECT</span> array_contains(`<span class="keyword">array</span>`(<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>),<span class="number">11</span>);</span><br><span class="line"><span class="keyword">SELECT</span> array_contains(`<span class="keyword">array</span>`(<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>),<span class="number">66</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 数组排序函数:sort_array(Array&lt;T&gt;)</span></span><br><span class="line"><span class="keyword">SELECT</span> sort_array(`<span class="keyword">array</span>`(<span class="number">12</span>,<span class="number">2</span>,<span class="number">32</span>));</span><br></pre></td></tr></table></figure>

<h5 id="Conditional-Functions-条件函数"><a href="#Conditional-Functions-条件函数" class="headerlink" title="Conditional Functions 条件函数"></a>Conditional Functions 条件函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用之前课程创建好的t_student表数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student LIMIT <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- if条件判断: if(boolean testCondition, T valueTrue, T valueFalseOrNull)</span></span><br><span class="line"><span class="keyword">SELECT</span> if(<span class="number">1</span><span class="operator">=</span><span class="number">2</span>,<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line"><span class="keyword">SELECT</span> if(sex <span class="operator">=</span><span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;W&#x27;</span>) <span class="keyword">from</span> t_student limit <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 空判断函数: isnull( a )</span></span><br><span class="line"><span class="keyword">SELECT</span> isnull(&quot;allen&quot;);</span><br><span class="line"><span class="keyword">SELECT</span> isnull(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 非空判断函数: isnotnull ( a )</span></span><br><span class="line"><span class="keyword">SELECT</span> isnotnull(&quot;allen&quot;);</span><br><span class="line"><span class="keyword">SELECT</span> isnotnull(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 空值转换函数: nvl(T value, T default_value)</span></span><br><span class="line"><span class="keyword">SELECT</span> nvl(&quot;allen&quot;,&quot;itcast&quot;);</span><br><span class="line"><span class="keyword">SELECT</span> nvl(<span class="keyword">null</span>,&quot;itcast&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 非空查找函数: COALESCE(T v1, T v2, ...)</span></span><br><span class="line"><span class="comment">-- 返回参数中的第一个非空值；如果所有值都为NULL，那么返回NULL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COALESCE</span>(<span class="keyword">null</span>,<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COALESCE</span>(<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="number">33</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COALESCE</span>(<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--条件转换函数: CASE a WHEN b THEN c [WHEN d THEN e]* [ELSE f] END</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="number">100</span> <span class="keyword">WHEN</span> <span class="number">50</span> <span class="keyword">THEN</span> <span class="string">&#x27;tom&#x27;</span> <span class="keyword">WHEN</span> <span class="number">100</span> <span class="keyword">THEN</span> <span class="string">&#x27;mary&#x27;</span> <span class="keyword">ELSE</span> <span class="string">&#x27;tim&#x27;</span> <span class="keyword">END</span> ;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> sex <span class="keyword">WHEN</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;man&#x27;</span> <span class="keyword">ELSE</span> <span class="string">&#x27;women&#x27;</span> <span class="keyword">END</span> <span class="keyword">FROM</span> t_student LIMIT <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- nullif( a, b ):</span></span><br><span class="line"><span class="comment">-- 如果 a = b，则返回NULL；否则返回NULL。否则返回一个</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">nullif</span>(<span class="number">11</span>,<span class="number">11</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">nullif</span>(<span class="number">11</span>,<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- assert_true(condition)</span></span><br><span class="line"><span class="comment">-- 如果&#x27;condition&#x27;不为真，则引发异常，否则返回null</span></span><br><span class="line"><span class="keyword">SELECT</span> assert_true(<span class="number">11</span> <span class="operator">&gt;=</span> <span class="number">0</span>);</span><br><span class="line"><span class="keyword">SELECT</span> assert_true(<span class="number">-1</span> <span class="operator">&gt;=</span> <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h5 id="Type-Conversion-Functions-类型转换函数"><a href="#Type-Conversion-Functions-类型转换函数" class="headerlink" title="Type Conversion Functions 类型转换函数"></a>Type Conversion Functions 类型转换函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 任意数据类型之间转换:cast</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">cast</span>(<span class="number">12.14</span> <span class="keyword">as</span> <span class="type">bigint</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">cast</span>(<span class="number">12.14</span> <span class="keyword">as</span> string);</span><br></pre></td></tr></table></figure>

<h5 id="Data-Masking-Functions-数据脱敏函数"><a href="#Data-Masking-Functions-数据脱敏函数" class="headerlink" title="Data Masking Functions 数据脱敏函数"></a>Data Masking Functions 数据脱敏函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- mask</span></span><br><span class="line"><span class="comment">-- 将查询回的数据，大写字母转换为X，小写字母转换为x，数字转换为n。</span></span><br><span class="line"><span class="keyword">SELECT</span> mask(&quot;abc123DEF&quot;);</span><br><span class="line"><span class="keyword">SELECT</span> mask(&quot;abc123DEF&quot;,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;^&#x27;</span>); <span class="comment">--自定义替换的字母</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- mask_first_n(string str[, int n]</span></span><br><span class="line"><span class="comment">-- 对前n个进行脱敏替换</span></span><br><span class="line"><span class="keyword">SELECT</span> mask_first_n(&quot;abc123DEF&quot;,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- mask_last_n(string str[, int n])</span></span><br><span class="line"><span class="keyword">SELECT</span> mask_last_n(&quot;abc123DEF&quot;,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- mask_show_first_n(string str[, int n])</span></span><br><span class="line"><span class="comment">-- 除了前n个字符，其余进行掩码处理</span></span><br><span class="line"><span class="keyword">SELECT</span> mask_show_first_n(&quot;abc123DEF&quot;,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--mask_show_last_n(string str[, int n])</span></span><br><span class="line"><span class="keyword">SELECT</span> mask_show_last_n(&quot;abc123DEF&quot;,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--mask_hash(string|char|varchar str)</span></span><br><span class="line"><span class="comment">--返回字符串的hash编码。</span></span><br><span class="line"><span class="keyword">SELECT</span> mask_hash(&quot;abc123DEF&quot;);</span><br></pre></td></tr></table></figure>

<h5 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- hive调用java方法: java_method(class, method[, arg1[, arg2..]])</span></span><br><span class="line"><span class="keyword">SELECT</span> java_method(&quot;java.lang.Math&quot;,&quot;max&quot;,<span class="number">11</span>,<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 反射函数: reflect(class, method[, arg1[, arg2..]])</span></span><br><span class="line"><span class="keyword">SELECT</span> reflect(&quot;java.lang.Math&quot;,&quot;max&quot;,<span class="number">11</span>,<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 取哈希值函数:hash</span></span><br><span class="line"><span class="keyword">SELECT</span> hash(&quot;allen&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">--current_user()、logged_in_user()、current_database()、version()</span></span><br><span class="line"><span class="keyword">SELECT</span> logged_in_user();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SHA-1加密: sha1(string/binary)</span></span><br><span class="line"><span class="keyword">SELECT</span> sha1(&quot;allen&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SHA-2家族算法加密：sha2(string/binary, int)  (SHA-224, SHA-256, SHA-384, SHA-512)</span></span><br><span class="line"><span class="keyword">SELECT</span> sha2(&quot;allen&quot;,<span class="number">224</span>);</span><br><span class="line"><span class="keyword">SELECT</span> sha2(&quot;allen&quot;,<span class="number">512</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- crc32加密:</span></span><br><span class="line"><span class="keyword">SELECT</span> crc32(&quot;allen&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- MD5加密: md5(string/binary)</span></span><br><span class="line"><span class="keyword">SELECT</span> md5(&quot;allen&quot;);</span><br></pre></td></tr></table></figure>

<h4 id="用户自定义函数"><a href="#用户自定义函数" class="headerlink" title="用户自定义函数"></a>用户自定义函数</h4><h5 id="UDF-普通函数"><a href="#UDF-普通函数" class="headerlink" title="UDF 普通函数"></a>UDF 普通函数</h5><p>UDF函数通常把它叫做普通函数，最大的特点是一进一出，也就是输入一行输出一行。</p>
<h5 id="UDAF-聚合函数"><a href="#UDAF-聚合函数" class="headerlink" title="UDAF 聚合函数"></a>UDAF 聚合函数</h5><p>UDAF函数通常把它叫做聚合函数，A所代表的单词就是Aggregation聚合的意思。最大的特点是多进一出，也就是输入多行输出一行。</p>
<h5 id="UDTF-表生成函数"><a href="#UDTF-表生成函数" class="headerlink" title="UDTF 表生成函数"></a>UDTF 表生成函数</h5><p>UDTF函数通常把它叫做表生成函数，T所代表的单词是Table-Generating表生成的意思。最大的特点是一进多出，也就是输入一行输出多行。</p>
<h4 id="案例：用户自定义UDF"><a href="#案例：用户自定义UDF" class="headerlink" title="案例：用户自定义UDF"></a>案例：用户自定义UDF</h4><h5 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h5><p>自定义开发实现Hive函数，对手机号机号中间4位进行****处理。</p>
<ol>
<li>能够对输入数据进行非空判断、位数判断处理</li>
<li>能够实现校验手机号格式，把满足规则的进行处理</li>
<li>对于不符合手机号规则的数据原封不动不处理</li>
</ol>
<h5 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h5><ol>
<li><p>开发环境准备</p>
<p>创建Maven工程，添加下述pom依赖：</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入 hive 对应版本的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-exec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 打包插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">artifact</span>&gt;</span>*:*<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.SF<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.DSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.RSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写处理逻辑代码</p>
<p>写一个java类，继承UDF，并重载evaluate方法；</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hive.udf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDFArgumentException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDFArgumentLengthException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.metadata.HiveException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.udf.generic.GenericUDF;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorConverters;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorConverter;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当Hive解析query时，会得到传入UDF参数的参数类型，并调用initialize()方法。</span></span><br><span class="line"><span class="comment"> * 针对该UDF的每个参数该方法都会收到一个对应的ObjectInspector参数，且该方法必须返回一个ObjectInspector表示返回值类型。</span></span><br><span class="line"><span class="comment"> * 通过调用该方法，Hive知道该UDF将返回什么数据类型，因此可以继续解析query。</span></span><br><span class="line"><span class="comment"> * 对于Hive的每行记录，我们在initialize()方法内读取ObjectInspector参数，并执行传参的数量和数据类型的检查，正确时才进行计算；</span></span><br><span class="line"><span class="comment"> * 在evaluate()方法中，我们使用initialize()方法里收到的ObjectInspector去读evaluate()方法接收的参数，</span></span><br><span class="line"><span class="comment"> * 即一串泛型Object（实际是DeferredObject），ObjectInspector解析Object并转成具体类型的对象执行数据处理，最后输出结果。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncryptPhoneNumber</span> <span class="keyword">extends</span> <span class="title">GenericUDF</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String udfName = <span class="string">&quot;ENCRYPT_PHONUM&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> PrimitiveObjectInspectorConverter.TextConverter converter;</span><br><span class="line">    <span class="keyword">private</span> Text result = <span class="keyword">new</span> Text();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectInspector <span class="title">initialize</span><span class="params">(ObjectInspector[] arguments)</span> <span class="keyword">throws</span> UDFArgumentException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arguments.length != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UDFArgumentException(udfName + <span class="string">&quot; requires one value argument. Found :&quot;</span></span><br><span class="line">                    + arguments.length);</span><br><span class="line">        &#125;</span><br><span class="line">        PrimitiveObjectInspector argumentOI;</span><br><span class="line">        <span class="keyword">if</span>(arguments[<span class="number">0</span>] <span class="keyword">instanceof</span> PrimitiveObjectInspector) &#123;</span><br><span class="line">            argumentOI = (PrimitiveObjectInspector) arguments[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UDFArgumentException(udfName + <span class="string">&quot; takes only primitive types. found &quot;</span></span><br><span class="line">                    + arguments[<span class="number">0</span>].getTypeName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (argumentOI.getPrimitiveCategory()) &#123;</span><br><span class="line">            <span class="keyword">case</span> STRING:</span><br><span class="line">            <span class="keyword">case</span> CHAR:</span><br><span class="line">            <span class="keyword">case</span> VARCHAR:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UDFArgumentException(udfName + <span class="string">&quot; takes only STRING/CHAR/VARCHAR types. Found &quot;</span></span><br><span class="line">                        + argumentOI.getPrimitiveCategory());</span><br><span class="line">        &#125;</span><br><span class="line">        converter = <span class="keyword">new</span> PrimitiveObjectInspectorConverter.TextConverter(argumentOI);</span><br><span class="line">        <span class="keyword">return</span> PrimitiveObjectInspectorFactory.writableStringObjectInspector;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">evaluate</span><span class="params">(DeferredObject[] arguments)</span> <span class="keyword">throws</span> HiveException </span>&#123;</span><br><span class="line">        Object valObject = arguments[<span class="number">0</span>].get();</span><br><span class="line">        <span class="keyword">if</span> (valObject == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String val = ((Text) converter.convert(valObject)).toString();</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result.set(encryptPhonum(val.toString()));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 能够对输入数据进行非空判断、位数判断处理</span></span><br><span class="line">    <span class="comment">//2. 能够实现校验手机号格式，把满足规则的进行处理</span></span><br><span class="line">    <span class="comment">//3. 对于不符合手机号规则的数据原封不动不处理</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">encryptPhonum</span><span class="params">(String phoNum)</span> </span>&#123;</span><br><span class="line">        String encryptPhoNum = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 手机号不为空 并且为11位</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(phoNum) &amp;&amp; phoNum.trim().length() == <span class="number">11</span> ) &#123;</span><br><span class="line">            <span class="comment">//判断数据是否满足中国大陆手机号码规范</span></span><br><span class="line">            String regex = <span class="string">&quot;^(1[3-9]\\d&#123;9&#125;$)&quot;</span>;</span><br><span class="line">            Pattern p = Pattern.compile(regex);</span><br><span class="line">            Matcher m = p.matcher(phoNum);</span><br><span class="line">            <span class="keyword">if</span> (m.matches()) &#123;<span class="comment">//进入这里都是符合手机号规则的</span></span><br><span class="line">                <span class="comment">//使用正则替换 返回加密后数据</span></span><br><span class="line">                encryptPhoNum = phoNum.trim().replaceAll(<span class="string">&quot;()\\d&#123;4&#125;(\\d&#123;4&#125;)&quot;</span>,<span class="string">&quot;$1****$2&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//不符合手机号规则 数据直接原封不动返回</span></span><br><span class="line">                encryptPhoNum = phoNum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//不符合11位 数据直接原封不动返回</span></span><br><span class="line">            encryptPhoNum = phoNum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> encryptPhoNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDisplayString</span><span class="params">(String[] children)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;This is encrypt_phonum&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考内置的GenericUDFBaseTrim</p>
</blockquote>
</li>
<li><p>将项目打包上传到hiveserver2服务器的家目录下</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[eitan<span class="variable">@hadoop103</span> <span class="operator">~</span>]$ ll</span><br><span class="line">总用量 <span class="number">116120</span></span><br><span class="line">drwxrwxr<span class="operator">-</span>x. <span class="number">2</span> eitan eitan      <span class="number">4096</span> <span class="number">5</span>月  <span class="number">12</span> <span class="number">16</span>:<span class="number">09</span> bin</span><br><span class="line">drwxrwxr<span class="operator">-</span>x. <span class="number">3</span> eitan eitan      <span class="number">4096</span> <span class="number">5</span>月  <span class="number">13</span> <span class="number">10</span>:<span class="number">15</span> documents</span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">--. 1 eitan eitan 118888832 5月  14 23:54 hive-example-1.0-SNAPSHOT.jar</span></span><br><span class="line">drwxr<span class="operator">-</span>xr<span class="operator">-</span>x. <span class="number">3</span> eitan eitan      <span class="number">4096</span> <span class="number">5</span>月  <span class="number">13</span> <span class="number">21</span>:<span class="number">55</span> hive_export</span><br><span class="line">drwxrwxr<span class="operator">-</span>x. <span class="number">2</span> eitan eitan      <span class="number">4096</span> <span class="number">5</span>月  <span class="number">12</span> <span class="number">16</span>:<span class="number">08</span> log</span><br></pre></td></tr></table></figure></li>
<li><p>使用命令把jar包添加至classpath</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ADD</span> JAR <span class="operator">/</span>home<span class="operator">/</span>eitan<span class="operator">/</span>hive<span class="operator">-</span>example<span class="number">-1.0</span><span class="operator">-</span>SNAPSHOT.jar;</span><br></pre></td></tr></table></figure></li>
<li><p>注册临时函数</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMPORARY <span class="keyword">FUNCTION</span> encrypt_phonum <span class="keyword">AS</span> <span class="string">&#x27;cn.itcast.hive.udf.EncryptPhoneNumber&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>使用效果</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 10086</span></span><br><span class="line"><span class="keyword">SELECT</span> encrypt_phonum(&quot;10086&quot;);</span><br><span class="line"><span class="comment">-- ****5338730</span></span><br><span class="line"><span class="keyword">SELECT</span> encrypt_phonum(&quot;18905338730&quot;);</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Hive函数高级"><a href="#Hive函数高级" class="headerlink" title="Hive函数高级"></a>Hive函数高级</h3><h4 id="explode函数"><a href="#explode函数" class="headerlink" title="explode函数"></a>explode函数</h4><h5 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h5><ul>
<li>explode接收map、array类型的数据作为输入，然后把输入数据中的每个元素拆开变成一行数据，一个元素一行；</li>
<li>lexplode执行效果正好满足于输入一行输出多行，所有叫做UDTF函数。</li>
</ul>
<h5 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> explode(`<span class="keyword">array</span>`(<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)) <span class="keyword">AS</span> item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> explode(`map`(&quot;id&quot;,<span class="number">10086</span>,&quot;name&quot;,&quot;zhangsan&quot;,&quot;age&quot;,<span class="number">18</span>));</span><br></pre></td></tr></table></figure>

<h5 id="explode使用限制及原因"><a href="#explode使用限制及原因" class="headerlink" title="explode使用限制及原因"></a>explode使用限制及原因</h5><p><strong>限制：</strong>在select的时候，explode的旁边不支持其他字段的同时出现</p>
<p><strong>原因：</strong></p>
<ol>
<li>explode函数属于UDTF函数，即表生成函数；</li>
<li>explode函数执行返回的结果可以理解为一张虚拟的表，其数据来源于源表；</li>
<li>在select中只查询源表数据没有问题，只查询explode生成的虚拟表数据也没问题</li>
<li>但是不能在只查询源表的时候，既想返回源表字段又想返回explode生成的虚拟表字段</li>
<li>通俗点讲，有两张表，不能只查询一张表但是返回分别属于两张表的字段；</li>
<li>从SQL层面上来说应该对两张表进行关联查询</li>
<li>Hive专门提供了语法lateral View侧视图，专门用于搭配explode这样的UDTF函数，以满足上述需要。</li>
</ol>
<h4 id="Lateral-View侧视图"><a href="#Lateral-View侧视图" class="headerlink" title="Lateral View侧视图"></a>Lateral View侧视图</h4><h5 id="概念及原理"><a href="#概念及原理" class="headerlink" title="概念及原理"></a>概念及原理</h5><ol>
<li>Lateral View是一种特殊的语法，主要用于搭配UDTF类型功能的函数一起使用，用于解决UDTF函数的一些查询限制的问题；</li>
<li>将UDTF的结果构建成一个类似于视图的表，然后将原表中的每一行和UDTF函数输出的每一行进行连接，生成一张新的虚拟表；</li>
<li>使用lateral view时也可以对UDTF产生的记录设置字段名称，产生的字段可以用于group by、order by 、limit等语句中，不需要再单独嵌套一层子查询。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220520193317.png" alt="image-20220515104535030"></p>
<h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--lateral view侧视图基本语法如下</span></span><br><span class="line"><span class="keyword">SELECT</span> …… <span class="keyword">FROM</span> tabelA <span class="keyword">LATERAL</span> <span class="keyword">VIEW</span>  UDTF(xxx) 别名 <span class="keyword">AS</span> col1,col2,col3……;</span><br></pre></td></tr></table></figure>

<h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p>有一份数据《The_NBA_Championship.txt》，关于部分年份的NBA总冠军球队名单：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Chicago Bulls,1991|1992|1993|1996|1997|1998</span><br><span class="line">San Antonio Spurs,1999|2003|2005|2007|2014</span><br><span class="line">Golden State Warriors,1947|1956|1975|2015</span><br><span class="line">Boston Celtics,1957|1959|1960|1961|1962|1963|1964|1965|1966|1968|1969|1974|1976|1981|1984|1986|2008</span><br><span class="line">L.A. Lakers,1949|1950|1952|1953|1954|1972|1980|1982|1985|1987|1988|2000|2001|2002|2009|2010</span><br><span class="line">Miami Heat,2006|2012|2013</span><br><span class="line">Philadelphia 76ers,1955|1967|1983</span><br><span class="line">Detroit Pistons,1989|1990|2004</span><br><span class="line">Houston Rockets,1994|1995</span><br><span class="line">New York Knicks,1970|1973</span><br></pre></td></tr></table></figure>

<p><strong>需求：</strong>使用Hive建表映射成功数据，对数据拆分，并且根据年份的倒序进行排序。</p>
<p><strong>实践：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- step1 建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> the_nba_championship</span><br><span class="line">(</span><br><span class="line">    team_name     string COMMENT &quot;队伍名称&quot;,</span><br><span class="line">    champion_year <span class="keyword">array</span><span class="operator">&lt;</span>string<span class="operator">&gt;</span> COMMENT &quot;夺冠年份&quot;</span><br><span class="line">) <span class="type">ROW</span> FORMAT DELIMITED</span><br><span class="line">    FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line">    COLLECTION ITEMS TERMINATED <span class="keyword">BY</span> &quot;|&quot;;</span><br><span class="line">    </span><br><span class="line"><span class="comment">-- step2 上传数据|加载数据</span></span><br><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INPATH <span class="string">&#x27;/home/eitan/documents/txt/The_NBA_Championship.txt&#x27;</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> the_nba_championship;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- step3 数据拆分查询，不排序则不需要MR操作</span></span><br><span class="line"><span class="keyword">SELECT</span> a.team_name,b.year <span class="keyword">FROM</span> the_nba_championship a <span class="keyword">LATERAL</span> <span class="keyword">VIEW</span> explode(champion_year) b <span class="keyword">AS</span> <span class="keyword">year</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> b.year <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<h4 id="Aggregation-聚合函数"><a href="#Aggregation-聚合函数" class="headerlink" title="Aggregation 聚合函数"></a>Aggregation 聚合函数</h4><h5 id="基础聚合函数"><a href="#基础聚合函数" class="headerlink" title="基础聚合函数"></a>基础聚合函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student;</span><br><span class="line"><span class="comment">-- 场景1：没有group by子句的聚合操作</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">AS</span> cnt1,<span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">AS</span> cnt2 <span class="keyword">FROM</span> t_student;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">AS</span> cnt1,<span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">AS</span> cnt2,<span class="built_in">count</span>(sex) <span class="keyword">FROM</span> t_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 场景2：带有group by子句的聚合操作 注意group by语法限制</span></span><br><span class="line"><span class="keyword">SELECT</span> sex, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">AS</span> cnt <span class="keyword">FROM</span> t_student <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 场景3：select时多个聚合函数一起使用</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">AS</span> cnt1,<span class="built_in">avg</span>(age) <span class="keyword">AS</span> cnt2 <span class="keyword">FROM</span> t_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 场景4：聚合函数和case when条件转换函数、coalesce函数、if函数使用</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="built_in">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> sex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span><span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)</span><br><span class="line"><span class="keyword">FROM</span> t_student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="built_in">sum</span>(if(sex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>,<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line"><span class="keyword">FROM</span> t_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 聚合参数针对null的处理方式</span></span><br><span class="line"><span class="comment">-- null null 0</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">max</span>(<span class="keyword">null</span>), <span class="built_in">min</span>(<span class="keyword">null</span>), <span class="built_in">count</span>(<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">-- 下面这两个不支持null</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(<span class="keyword">null</span>), <span class="built_in">avg</span>(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 场景5：聚合操作时针对null的处理</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tmp_1 (val1 <span class="type">int</span>, val2 <span class="type">int</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tmp_1 <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">2</span>),(<span class="keyword">null</span>,<span class="number">2</span>),(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tmp_1;</span><br><span class="line"><span class="comment">-- 第二行数据(NULL, 2) 在进行sum(val1 + val2)的时候会被忽略</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(val1), <span class="built_in">sum</span>(val1 <span class="operator">+</span> val2) <span class="keyword">FROM</span> tmp_1;</span><br><span class="line"><span class="comment">-- 可以使用coalesce函数解决</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="built_in">sum</span>(<span class="built_in">coalesce</span>(val1,<span class="number">0</span>)),</span><br><span class="line">    <span class="built_in">sum</span>(<span class="built_in">coalesce</span>(val1,<span class="number">0</span>) <span class="operator">+</span> val2)</span><br><span class="line"><span class="keyword">FROM</span> tmp_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 场景6：配合distinct关键字去重聚合</span></span><br><span class="line"><span class="comment">-- 此场景下，会编译期间会自动设置只启动一个reduce task处理数据  性能可能会不会 造成数据拥堵</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="keyword">DISTINCT</span> sex) <span class="keyword">AS</span> cnt1 <span class="keyword">FROM</span> t_student;</span><br><span class="line"><span class="comment">-- 可以先去重 在聚合 通过子查询完成</span></span><br><span class="line"><span class="comment">-- 因为先执行distinct的时候 可以使用多个reducetask来跑数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">AS</span> gender_uni_cnt</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> sex <span class="keyword">FROM</span> t_student) a;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例需求：找出t_student中男女学生年龄最大的及其名字</span></span><br><span class="line"><span class="comment">-- 这里使用了struct来构造数据 然后针对struct应用max找出最大元素 然后取值</span></span><br><span class="line"><span class="keyword">SELECT</span> struct(age, name) <span class="keyword">FROM</span> t_student;</span><br><span class="line"><span class="keyword">SELECT</span> struct(age, name).col1 <span class="keyword">FROM</span> t_student;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">max</span>(struct(age, name)) <span class="keyword">FROM</span> t_student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> sex,</span><br><span class="line">       <span class="built_in">max</span>(struct(age, name)).col1 <span class="keyword">as</span> age,</span><br><span class="line">       <span class="built_in">max</span>(struct(age, name)).col2 <span class="keyword">as</span> name</span><br><span class="line"><span class="keyword">FROM</span> t_student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br></pre></td></tr></table></figure>

<h5 id="增强聚合函数"><a href="#增强聚合函数" class="headerlink" title="增强聚合函数"></a>增强聚合函数</h5><p>增强聚合的GROUPING SETS、CUBE、ROLLUP这几个函数主要适用于OLAP多维数据分析模式中，多维分析中的<strong>维</strong>指的分析问题时看待问题的维度、角度。</p>
<ol>
<li><p>准备数据 字段：月份、天、用户cookieid</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2018-03,2018-03-10,cookie1</span><br><span class="line">2018-03,2018-03-10,cookie5</span><br><span class="line">2018-03,2018-03-12,cookie7</span><br><span class="line">2018-04,2018-04-12,cookie3</span><br><span class="line">2018-04,2018-04-13,cookie2</span><br><span class="line">2018-04,2018-04-13,cookie4</span><br><span class="line">2018-04,2018-04-16,cookie4</span><br><span class="line">2018-03,2018-03-10,cookie2</span><br><span class="line">2018-03,2018-03-10,cookie3</span><br><span class="line">2018-04,2018-04-12,cookie5</span><br><span class="line">2018-04,2018-04-13,cookie6</span><br><span class="line">2018-04,2018-04-15,cookie3</span><br><span class="line">2018-04,2018-04-15,cookie2</span><br><span class="line">2018-04,2018-04-16,cookie1</span><br></pre></td></tr></table></figure></li>
<li><p>表创建并加载数据</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> cookie_info</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">month</span>    STRING,</span><br><span class="line">    <span class="keyword">day</span>      STRING,</span><br><span class="line">    cookieid STRING</span><br><span class="line">) <span class="type">ROW</span> FORMAT DELIMITED</span><br><span class="line">    FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INPATH &quot;/home/eitan/documents/txt/cookie_info.txt&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> cookie_info;</span><br></pre></td></tr></table></figure></li>
<li><p>GROUPING SETS</p>
<p><strong>GROUPING SETS</strong>是一种将多个group by逻辑写在一个sql语句中的便利写法。等价于将不同维度的GROUP BY结果集进行UNION ALL。GROUPING__ID表示结果属于哪一个分组集合。</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">month</span>,</span><br><span class="line">       <span class="keyword">day</span>,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> cookieid) <span class="keyword">AS</span> nums,</span><br><span class="line">       GROUPING__ID</span><br><span class="line"><span class="keyword">FROM</span> cookie_info</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">month</span>, <span class="keyword">day</span></span><br><span class="line">    <span class="keyword">GROUPING</span> SETS ( <span class="keyword">month</span>, <span class="keyword">day</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> GROUPING__ID;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- GROUPING__ID表示这一组结果属于哪个分组集合，</span></span><br><span class="line"><span class="comment">-- 根据grouping sets中的分组条件month，day，1是代表month，2是代表day</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 等价于</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">month</span>, <span class="keyword">NULL</span>, <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> cookieid) <span class="keyword">AS</span> nums, <span class="number">1</span> <span class="keyword">AS</span> GROUPING__ID <span class="keyword">FROM</span> cookie_info <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">month</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NULL</span> <span class="keyword">as</span> <span class="keyword">month</span>, <span class="keyword">day</span>, <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> cookieid) <span class="keyword">AS</span> nums, <span class="number">2</span> <span class="keyword">AS</span> GROUPING__ID <span class="keyword">FROM</span> cookie_info <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">day</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 再比如</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">month</span>,</span><br><span class="line">       <span class="keyword">day</span>,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> cookieid) <span class="keyword">AS</span> nums,</span><br><span class="line">       GROUPING__ID</span><br><span class="line"><span class="keyword">FROM</span> cookie_info</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">month</span>, <span class="keyword">day</span></span><br><span class="line">    <span class="keyword">GROUPING</span> SETS ( <span class="keyword">month</span>, <span class="keyword">day</span>, ( <span class="keyword">month</span>, <span class="keyword">day</span>))</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> GROUPING__ID;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 等价于</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">month</span>, <span class="keyword">NULL</span>, <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> cookieid) <span class="keyword">AS</span> nums, <span class="number">1</span> <span class="keyword">AS</span> GROUPING__ID <span class="keyword">FROM</span> cookie_info <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">month</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NULL</span>, <span class="keyword">day</span>, <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> cookieid) <span class="keyword">AS</span> nums, <span class="number">2</span> <span class="keyword">AS</span> GROUPING__ID <span class="keyword">FROM</span> cookie_info <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">day</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">month</span>, <span class="keyword">day</span>, <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> cookieid) <span class="keyword">AS</span> nums, <span class="number">3</span> <span class="keyword">AS</span> GROUPING__ID <span class="keyword">FROM</span> cookie_info <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">month</span>, <span class="keyword">day</span>;</span><br></pre></td></tr></table></figure></li>
<li><h5 id="CUBE"><a href="#CUBE" class="headerlink" title="CUBE"></a>CUBE</h5><p>CUBE的语法功能指的是：根据GROUP BY的维度的所有组合进行聚合。对于CUBE,如果有n个维度,则所有组合的总个数是：<strong>2^n</strong>。比如CUBE有a,b,c3个维度，则所有组合情况是： ((a,b,c),(a,b),(b,c),(a,c),(a),(b),(c),())。</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">month</span>,</span><br><span class="line">    <span class="keyword">day</span>,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> cookieid) <span class="keyword">AS</span> nums,</span><br><span class="line">    GROUPING__ID</span><br><span class="line"><span class="keyword">FROM</span> cookie_info</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">month</span>,<span class="keyword">day</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CUBE</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> GROUPING__ID;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 等价于</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> cookieid) <span class="keyword">AS</span> nums,<span class="number">0</span> <span class="keyword">AS</span> GROUPING__ID <span class="keyword">FROM</span> cookie_info</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">month</span>,<span class="keyword">NULL</span>,<span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> cookieid) <span class="keyword">AS</span> nums,<span class="number">1</span> <span class="keyword">AS</span> GROUPING__ID <span class="keyword">FROM</span> cookie_info <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">month</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NULL</span>,<span class="keyword">day</span>,<span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> cookieid) <span class="keyword">AS</span> nums,<span class="number">2</span> <span class="keyword">AS</span> GROUPING__ID <span class="keyword">FROM</span> cookie_info <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">day</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">month</span>,<span class="keyword">day</span>,<span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> cookieid) <span class="keyword">AS</span> nums,<span class="number">3</span> <span class="keyword">AS</span> GROUPING__ID <span class="keyword">FROM</span> cookie_info <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">month</span>,<span class="keyword">day</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>ROLLUP</p>
<p>CUBE的语法功能指的是：根据GROUP BY的维度的所有组合进行聚合。</p>
<p>ROLLUP是Cube的子集，以最左侧的维度为主，从该维度进行层级聚合。比如ROLLUP有a,b,c3个维度，则所有组合情况是：((a,b,c),(a,b),(a),())。</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--rollup-------------</span></span><br><span class="line"><span class="comment">--比如，以month维度进行层级聚合：</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">month</span>,</span><br><span class="line">    <span class="keyword">day</span>,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> cookieid) <span class="keyword">AS</span> nums,</span><br><span class="line">    GROUPING__ID</span><br><span class="line"><span class="keyword">FROM</span> cookie_info</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">month</span>,<span class="keyword">day</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">ROLLUP</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> GROUPING__ID;</span><br><span class="line"></span><br><span class="line"><span class="comment">--把month和day调换顺序，则以day维度进行层级聚合：</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">day</span>,</span><br><span class="line">    <span class="keyword">month</span>,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> cookieid) <span class="keyword">AS</span> uv,</span><br><span class="line">    GROUPING__ID</span><br><span class="line"><span class="keyword">FROM</span> cookie_info</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">day</span>,<span class="keyword">month</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">ROLLUP</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> GROUPING__ID;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="Window-functions-窗口函数"><a href="#Window-functions-窗口函数" class="headerlink" title="Window functions 窗口函数"></a>Window functions 窗口函数</h4><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><ol>
<li><strong>窗口函数</strong>（Window functions）也叫做开窗函数、OLAP函数，其最大特点是：输入值是从SELECT语句的结果集中的一行或多行的“窗口”中获取的。</li>
<li>如果函数具有OVER子句，则它是窗口函数。</li>
<li>窗口函数可以简单地解释为类似于聚合函数的计算函数，但是通过GROUP BY子句组合的常规聚合会隐藏正在聚合的各个行，最终输出一行，窗口函数聚合后还可以访问当中的各个行，并且可以将这些行中的某些属性添加到结果集中。</li>
</ol>
<h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Function</span>(arg1,..., argn) <span class="keyword">OVER</span> ([<span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>...<span class="operator">&gt;</span>] [<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>....<span class="operator">&gt;</span>] [<span class="operator">&lt;</span>window_expression<span class="operator">&gt;</span>])</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><p>其中Function(arg1,…, argn) 可以是下面分类中的任意一个</p>
<ul>
<li>聚合函数：比如sum max avg等</li>
<li>排序函数：比如rank row_number等</li>
<li>分析函数：比如lead lag first_value等</li>
</ul>
</li>
<li><p>OVER [PARTITION BY &lt;…&gt;] 类似于group by 用于指定分组 每个分组你可以把它叫做窗口</p>
</li>
<li><p>如果没有PARTITION BY 那么整张表的所有行就是一组</p>
</li>
<li><p>[ORDER BY &lt;….&gt;] 用于指定每个分组内的数据排序规则 支持ASC、DESC</p>
</li>
<li><p>[<window_expression>] 用于指定每个窗口中 操作的数据范围 默认是窗口中所有行</p>
</li>
</ul>
</blockquote>
<h5 id="实践-1"><a href="#实践-1" class="headerlink" title="实践"></a>实践</h5><ol>
<li><p>建表并导入数据</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> website_pv_info</span><br><span class="line">(</span><br><span class="line">    cookieid   string,</span><br><span class="line">    createtime string,</span><br><span class="line">    pv         <span class="type">int</span></span><br><span class="line">) <span class="type">ROW</span> FORMAT DELIMITED</span><br><span class="line">    FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> website_url_info</span><br><span class="line">(</span><br><span class="line">    cookieid   string,</span><br><span class="line">    createtime string, <span class="comment">--访问时间</span></span><br><span class="line">    url        string  <span class="comment">--访问页面</span></span><br><span class="line">) <span class="type">ROW</span> FORMAT DELIMITED</span><br><span class="line">    FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INPATH &quot;/home/eitan/documents/txt/website_pv_info.txt&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> website_pv_info;</span><br><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INPATH &quot;/home/eitan/documents/txt/website_url_info.txt&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> website_url_info;</span><br></pre></td></tr></table></figure></li>
<li><p>窗口聚合函数</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1、求出每个用户总pv数  sum+group by普通常规聚合操作</span></span><br><span class="line"><span class="keyword">SELECT</span> cookieid,<span class="built_in">sum</span>(pv) <span class="keyword">AS</span> total_pv <span class="keyword">FROM</span> website_pv_info <span class="keyword">GROUP</span> <span class="keyword">BY</span> cookieid;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2、sum+窗口函数 总共有四种用法 注意是整体聚合 还是累积聚合</span></span><br><span class="line"><span class="comment">-- sum(...) over( )对表所有行求和</span></span><br><span class="line"><span class="comment">-- sum(...) over( order by ... ) 连续累积求和</span></span><br><span class="line"><span class="comment">-- sum(...) over( partition by... ) 同组内所有行求和</span></span><br><span class="line"><span class="comment">-- sum(...) over( partition by... order by ... ) 在每个分组内，连续累积求和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 需求：求出网站总的pv数 所有用户所有访问加起来</span></span><br><span class="line"><span class="comment">-- sum(...) over( )对表所有行求和</span></span><br><span class="line"><span class="keyword">SELECT</span> cookieid,createtime,pv,</span><br><span class="line">       <span class="built_in">sum</span>(pv) <span class="keyword">OVER</span>() <span class="keyword">AS</span> total_pv <span class="keyword">FROM</span> website_pv_info;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 需求：求出每个用户总pv数</span></span><br><span class="line"><span class="comment">-- sum(...) over( partition by... )，同组内所行求和</span></span><br><span class="line"><span class="keyword">SELECT</span> cookieid,createtime,pv,</span><br><span class="line">       <span class="built_in">sum</span>(pv) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid) <span class="keyword">AS</span> total_pv <span class="keyword">FROM</span> website_pv_info;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 需求：求出每个用户截止到当天，累积的总pv数</span></span><br><span class="line"><span class="comment">-- sum(...) over( partition by... order by ... )，在每个分组内，连续累积求和</span></span><br><span class="line"><span class="keyword">SELECT</span> cookieid,createtime,pv,</span><br><span class="line">       <span class="built_in">sum</span>(pv) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime) <span class="keyword">AS</span> current_total_pv</span><br><span class="line"><span class="keyword">FROM</span> website_pv_info;</span><br></pre></td></tr></table></figure></li>
<li><p>窗口表达式</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">关键字是<span class="keyword">rows</span> <span class="keyword">between</span>，包括下面这几个选项</span><br><span class="line"><span class="operator">-</span> preceding：往前</span><br><span class="line"><span class="operator">-</span> following：往后</span><br><span class="line"><span class="operator">-</span> <span class="keyword">current</span> <span class="type">row</span>：当前行</span><br><span class="line"><span class="operator">-</span> unbounded：边界</span><br><span class="line"><span class="operator">-</span> unbounded preceding 表示从前面的起点</span><br><span class="line"><span class="operator">-</span> unbounded following：表示到后面的终点</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 第一行到当前行</span></span><br><span class="line"><span class="keyword">SELECT</span> cookieid,createtime,pv,</span><br><span class="line">       <span class="built_in">sum</span>(pv) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime <span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> UNBOUNDED PRECEDING <span class="keyword">AND</span> <span class="keyword">CURRENT</span> <span class="type">ROW</span> ) <span class="keyword">AS</span> pv2</span><br><span class="line"><span class="keyword">FROM</span> website_pv_info;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向前3行至当前行</span></span><br><span class="line"><span class="keyword">SELECT</span> cookieid,createtime,pv,</span><br><span class="line">       <span class="built_in">sum</span>(pv) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime <span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> <span class="number">3</span> PRECEDING <span class="keyword">AND</span> <span class="keyword">CURRENT</span> <span class="type">ROW</span> ) <span class="keyword">AS</span> pv4</span><br><span class="line"><span class="keyword">from</span> website_pv_info;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向前3行 向后1行</span></span><br><span class="line"><span class="keyword">SELECT</span> cookieid,createtime,pv,</span><br><span class="line">       <span class="built_in">sum</span>(pv) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime <span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> <span class="number">3</span> PRECEDING <span class="keyword">AND</span> <span class="number">1</span> FOLLOWING) <span class="keyword">AS</span> pv5</span><br><span class="line"><span class="keyword">FROM</span> website_pv_info;</span><br><span class="line"></span><br><span class="line"><span class="comment">--当前行至最后一行</span></span><br><span class="line"><span class="keyword">SELECT</span> cookieid,createtime,pv,</span><br><span class="line">       <span class="built_in">sum</span>(pv) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime <span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> <span class="keyword">CURRENT</span> <span class="type">ROW</span> <span class="keyword">AND</span> UNBOUNDED FOLLOWING) <span class="keyword">AS</span> pv6</span><br><span class="line"><span class="keyword">FROM</span> website_pv_info;</span><br><span class="line"></span><br><span class="line"><span class="comment">--第一行到最后一行 也就是分组内的所有行</span></span><br><span class="line"><span class="keyword">SELECT</span> cookieid,createtime,pv,</span><br><span class="line">       <span class="built_in">sum</span>(pv) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime <span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> UNBOUNDED PRECEDING <span class="keyword">AND</span> UNBOUNDED FOLLOWING) <span class="keyword">AS</span> pv6</span><br><span class="line"><span class="keyword">FROM</span> website_pv_info;</span><br></pre></td></tr></table></figure></li>
<li><p>窗口排序函数</p>
<p>窗口排序函数用于给每个分组内的数据打上排序的标号。注意窗口排序函数不支持窗口表达式。总共有4个函数需要掌握：</p>
<ol>
<li><p><strong>row_number：</strong>在每个分组中，为每行分配一个从1开始的唯一序列号，递增，不考虑重复；</p>
</li>
<li><p><strong>rank：</strong> 在每个分组中，为每行分配一个从1开始的序列号，考虑重复，挤占后续位置；</p>
</li>
<li><p><strong>dense_rank：</strong> 在每个分组中，为每行分配一个从1开始的序列号，考虑重复，不挤占后续位置；</p>
</li>
<li><p><strong>ntile：</strong>将每个分组内的数据分为指定的若干个桶里（分为若干个部分），并且为每一个桶分配一个桶编号。如果不能平均分配，则优先分配较小编号的桶，并且各个桶中能放的行数最多相差1。</p>
</li>
</ol>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    cookieid,</span><br><span class="line">    createtime,</span><br><span class="line">    pv,</span><br><span class="line">    <span class="built_in">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> pv <span class="keyword">desc</span>) <span class="keyword">AS</span> rn1,</span><br><span class="line">    <span class="built_in">DENSE_RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> pv <span class="keyword">desc</span>) <span class="keyword">AS</span> rn2,</span><br><span class="line">    <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> pv <span class="keyword">DESC</span>) <span class="keyword">AS</span> rn3</span><br><span class="line"><span class="keyword">FROM</span> website_pv_info</span><br><span class="line"><span class="keyword">WHERE</span> cookieid <span class="operator">=</span> <span class="string">&#x27;cookie1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 需求：找出每个用户访问pv最多的是哪天的Top3 重复并列的不考虑</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> cookieid,</span><br><span class="line">        createtime,</span><br><span class="line">        pv,</span><br><span class="line">        <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> pv <span class="keyword">DESC</span>) <span class="keyword">AS</span> seq <span class="keyword">FROM</span> website_pv_info) tmp</span><br><span class="line"><span class="keyword">WHERE</span> tmp.seq <span class="operator">&lt;</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 把每个分组内的数据分为3桶 NTILE</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    cookieid,</span><br><span class="line">    createtime,</span><br><span class="line">    pv,</span><br><span class="line">    <span class="built_in">NTILE</span>(<span class="number">3</span>) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime) <span class="keyword">AS</span> rn2</span><br><span class="line"><span class="keyword">FROM</span> website_pv_info</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cookieid,createtime;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 需求：统计每个用户pv数最多的前3分之1天。</span></span><br><span class="line"><span class="comment">-- 理解：将数据根据cookieid分 根据pv倒序排序 排序之后分为3个部分 取第一部分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span></span><br><span class="line">        cookieid,</span><br><span class="line">        createtime,</span><br><span class="line">        pv,</span><br><span class="line">        <span class="built_in">NTILE</span>(<span class="number">3</span>) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> pv <span class="keyword">DESC</span>) <span class="keyword">AS</span> rn <span class="keyword">FROM</span> website_pv_info) tmp</span><br><span class="line"><span class="keyword">WHERE</span> rn <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>窗口分析函数</p>
<ul>
<li><p>LAG(col,n,DEFAULT) 用于统计窗口内往上第n行值</p>
<p>第一个参数为列名，第二个参数为往上第n行（可选，默认为1），第三个参数为默认值（当往上第n行为NULL时候，取默认值，如不指定，则为NULL）；</p>
</li>
<li><p>LEAD(col,n,DEFAULT) 用于统计窗口内往下第n行值</p>
<p>第一个参数为列名，第二个参数为往下第n行（可选，默认为1），第三个参数为默认值（当往下第n行为NULL时候，取默认值，如不指定，则为NULL）；</p>
</li>
<li><p>FIRST_VALUE 取分组内排序后，截止到当前行，第一个值；</p>
</li>
<li><p>LAST_VALUE 取分组内排序后，截止到当前行，最后一个值；</p>
</li>
</ul>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- LAG</span></span><br><span class="line"><span class="keyword">SELECT</span> cookieid,</span><br><span class="line">       createtime,</span><br><span class="line">       url,</span><br><span class="line">       <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime) <span class="keyword">AS</span> rn,</span><br><span class="line">       <span class="built_in">LAG</span>(createtime,<span class="number">1</span>,<span class="string">&#x27;1970-01-01 00:00:00&#x27;</span>) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime) <span class="keyword">AS</span> last_1_time,</span><br><span class="line">       <span class="built_in">LAG</span>(createtime,<span class="number">2</span>) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime) <span class="keyword">AS</span> last_2_time</span><br><span class="line"><span class="keyword">FROM</span> website_url_info;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- LEAD</span></span><br><span class="line"><span class="keyword">SELECT</span> cookieid,</span><br><span class="line">       createtime,</span><br><span class="line">       url,</span><br><span class="line">       <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime) <span class="keyword">AS</span> rn,</span><br><span class="line">       <span class="built_in">LEAD</span>(createtime,<span class="number">1</span>,<span class="string">&#x27;1970-01-01 00:00:00&#x27;</span>) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime) <span class="keyword">AS</span> next_1_time,</span><br><span class="line">       <span class="built_in">LEAD</span>(createtime,<span class="number">2</span>) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime) <span class="keyword">AS</span> next_2_time</span><br><span class="line"><span class="keyword">FROM</span> website_url_info;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- FIRST_VALUE</span></span><br><span class="line"><span class="keyword">SELECT</span> cookieid,</span><br><span class="line">       createtime,</span><br><span class="line">       url,</span><br><span class="line">       <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime) <span class="keyword">AS</span> rn,</span><br><span class="line">       <span class="built_in">FIRST_VALUE</span>(url) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime) <span class="keyword">AS</span> first1</span><br><span class="line"><span class="keyword">FROM</span> website_url_info;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- LAST_VALUE</span></span><br><span class="line"><span class="keyword">SELECT</span> cookieid,</span><br><span class="line">       createtime,</span><br><span class="line">       url,</span><br><span class="line">       <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime) <span class="keyword">AS</span> rn,</span><br><span class="line">       <span class="built_in">LAST_VALUE</span>(url) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime) <span class="keyword">AS</span> last1</span><br><span class="line"><span class="keyword">FROM</span> website_url_info;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="Sampling-抽样函数"><a href="#Sampling-抽样函数" class="headerlink" title="Sampling 抽样函数"></a>Sampling 抽样函数</h4><h5 id="Random随机抽样"><a href="#Random随机抽样" class="headerlink" title="Random随机抽样"></a>Random随机抽样</h5><p>随机抽样使用rand()函数和LIMIT关键字来获取数据。 使用了DISTRIBUTE和SORT关键字，可以确保数据也随机分布在mapper和reducer之间，使得底层执行有效率。 </p>
<p>ORDER BY 和rand()语句也可以达到相同的目的，但是表现不好。因为ORDER BY是全局排序，只会启动运行一个Reducer。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 需求：随机抽取2个学生的情况进行查看</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student</span><br><span class="line">    DISTRIBUTE <span class="keyword">BY</span> rand() SORT <span class="keyword">BY</span> rand() LIMIT <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用order by+rand也可以实现同样的效果 但是效率不高</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">ORDER</span> <span class="keyword">BY</span> rand() LIMIT <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h5 id="Block块抽样"><a href="#Block块抽样" class="headerlink" title="Block块抽样"></a>Block块抽样</h5><p>Block块采样允许select随机获取n行数据，即数据大小或n个字节的数据。采样粒度是HDFS块大小。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">---block抽样</span></span><br><span class="line"><span class="comment">--根据行数抽样</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">TABLESAMPLE</span>(<span class="number">1</span> <span class="keyword">ROWS</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--根据数据大小百分比抽样</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">TABLESAMPLE</span>(<span class="number">50</span> <span class="keyword">PERCENT</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--根据数据大小抽样</span></span><br><span class="line"><span class="comment">--支持数据单位 b/B, k/K, m/M, g/G</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">TABLESAMPLE</span>(<span class="number">1</span>b);</span><br></pre></td></tr></table></figure>

<h5 id="Bucket-table分桶表抽样"><a href="#Bucket-table分桶表抽样" class="headerlink" title="Bucket table分桶表抽样"></a>Bucket table分桶表抽样</h5><p>这是一种特殊的采样方法，针对分桶表进行了优化。优点是既随机速度也很快。</p>
<p>语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TABLESAMPLE</span> (BUCKET x <span class="keyword">OUT</span> <span class="keyword">OF</span> y [<span class="keyword">ON</span> colname])</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>y必须是table总bucket数的倍数或者因子。hive根据y的大小，决定抽样的比例。<br>例如，table总共分了4份（4个bucket），当y=2时，抽取(4/2=)2个bucket的数据，当y=8时，抽取(4/8=)1/2个bucket的数据</li>
<li>x表示从哪个bucket开始抽取。<br>例如，table总bucket数为4，tablesample(bucket 4 out of 4)，表示总共抽取（4/4=）1个bucket的数据，抽取第4个bucket的数据。<br>注意：x的值必须小于等于y的值，否则FAILED:Numerator should not be bigger than denominator in sample clause for table stu_buck</li>
<li>ON colname表示基于什么抽<br>ON rand()表示随机抽<br>ON 分桶字段 表示基于分桶字段抽样 效率更高 推荐</li>
</ol>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">---bucket table抽样</span></span><br><span class="line"><span class="comment">--根据整行数据进行抽样</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_usa_covid19_bucket <span class="keyword">TABLESAMPLE</span>(BUCKET <span class="number">1</span> <span class="keyword">OUT</span> <span class="keyword">OF</span> <span class="number">2</span> <span class="keyword">ON</span> rand());</span><br><span class="line"></span><br><span class="line"><span class="comment">--根据分桶字段进行抽样 效率更高</span></span><br><span class="line"><span class="keyword">describe</span> formatted t_usa_covid19_bucket;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_usa_covid19_bucket <span class="keyword">TABLESAMPLE</span>(BUCKET <span class="number">1</span> <span class="keyword">OUT</span> <span class="keyword">OF</span> <span class="number">2</span> <span class="keyword">ON</span> state);</span><br></pre></td></tr></table></figure>

<h3 id="Hive函数应用案例"><a href="#Hive函数应用案例" class="headerlink" title="Hive函数应用案例"></a>Hive函数应用案例</h3><h4 id="多字节分隔符"><a href="#多字节分隔符" class="headerlink" title="多字节分隔符"></a>多字节分隔符</h4><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><p>Hive中默认使用<strong>单字节分隔符</strong>来加载文本数据，但在实际工作中，我们遇到的数据往往不是非常规范化的数据，我们会遇到以下的两种情况：</p>
<ol>
<li><p>每一行数据的分隔符是多字节分隔符，例如：”||”、“–”等</p>
 <figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">01||<span class="string">周杰伦</span>||<span class="string">中国</span>||<span class="string">台湾</span>||<span class="string">男</span>||<span class="string">七里香</span></span><br><span class="line"><span class="string">02</span>||<span class="string">刘德华</span>||<span class="string">中国</span>||<span class="string">香港</span>||<span class="string">男</span>||<span class="string">笨小孩</span></span><br><span class="line"><span class="string">03</span>||<span class="string">汪  峰</span>||<span class="string">中国</span>||<span class="string">北京</span>||<span class="string">男</span>||<span class="string">光明</span></span><br><span class="line"><span class="string">04</span>||<span class="string">朴  树</span>||<span class="string">中国</span>||<span class="string">北京</span>||<span class="string">男</span>||<span class="string">那些花儿</span></span><br><span class="line"><span class="string">05</span>||<span class="string">许  巍</span>||<span class="string">中国</span>||<span class="string">陕西</span>||<span class="string">男</span>||<span class="string">故乡</span></span><br><span class="line"><span class="string">06</span>||<span class="string">张靓颖</span>||<span class="string">中国</span>||<span class="string">四川</span>||<span class="string">女</span>||<span class="string">画心</span></span><br><span class="line"><span class="string">07</span>||<span class="string">黄家驹</span>||<span class="string">中国</span>||<span class="string">香港</span>||<span class="string">男</span>||<span class="string">光辉岁月</span></span><br><span class="line"><span class="string">08</span>||<span class="string">周传雄</span>||<span class="string">中国</span>||<span class="string">台湾</span>||<span class="string">男</span>||<span class="string">青花</span></span><br><span class="line"><span class="string">09</span>||<span class="string">刘若英</span>||<span class="string">中国</span>||<span class="string">台湾</span>||<span class="string">女</span>||<span class="string">很爱很爱你</span></span><br><span class="line"><span class="string">10</span>||<span class="string">张  杰</span>||<span class="string">中国</span>||<span class="string">四川</span>||<span class="string">男</span>||<span class="string">天下</span></span><br></pre></td></tr></table></figure></li>
<li><p>数据的字段中包含了分隔符</p>
 <figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">192.168.88.134</span> <span class="string">[08/Nov/2020:10:44:32 +0800]</span> <span class="string">&quot;<span class="keyword">GET</span> / HTTP/1.1&quot;</span> <span class="number">404</span> <span class="number">951</span></span><br><span class="line"><span class="number">192.168.88.100</span> <span class="string">[08/Nov/2020:10:44:33 +0800]</span> <span class="string">&quot;<span class="keyword">GET</span> /hpsk_sdk/index.html HTTP/1.1&quot;</span> <span class="number">200</span> <span class="number">328</span></span><br><span class="line"><span class="number">192.168.88.134</span> <span class="string">[08/Nov/2020:20:19:06 +0800]</span> <span class="string">&quot;<span class="keyword">GET</span> / HTTP/1.1&quot;</span> <span class="number">404</span> <span class="number">951</span></span><br><span class="line"><span class="number">192.168.88.100</span> <span class="string">[08/Nov/2020:20:19:13 +0800]</span> <span class="string">&quot;<span class="keyword">GET</span> /hpsk_sdk/demo4.html HTTP/1.1&quot;</span> <span class="number">200</span> <span class="number">982</span></span><br><span class="line"><span class="number">192.168.88.100</span> <span class="string">[08/Nov/2020:20:19:13 +0800]</span> <span class="string">&quot;<span class="keyword">GET</span> /hpsk_sdk/js/analytics.js HTTP/1.1&quot;</span> <span class="number">200</span> <span class="number">11095</span></span><br><span class="line"><span class="number">192.168.88.100</span> <span class="string">[08/Nov/2020:20:19:23 +0800]</span> <span class="string">&quot;<span class="keyword">GET</span> /hpsk_sdk/demo3.html HTTP/1.1&quot;</span> <span class="number">200</span> <span class="number">1024</span></span><br><span class="line"><span class="number">192.168.88.100</span> <span class="string">[08/Nov/2020:20:19:26 +0800]</span> <span class="string">&quot;<span class="keyword">GET</span> /hpsk_sdk/demo2.html HTTP/1.1&quot;</span> <span class="number">200</span> <span class="number">854</span></span><br><span class="line"><span class="number">192.168.88.100</span> <span class="string">[08/Nov/2020:20:19:27 +0800]</span> <span class="string">&quot;<span class="keyword">GET</span> /hpsk_sdk/demo.html HTTP/1.1&quot;</span> <span class="number">200</span> <span class="number">485</span></span><br><span class="line"><span class="number">192.168.88.134</span> <span class="string">[08/Nov/2020:20:26:51 +0800]</span> <span class="string">&quot;<span class="keyword">GET</span> / HTTP/1.1&quot;</span> <span class="number">404</span> <span class="number">951</span></span><br><span class="line"><span class="number">192.168.88.134</span> <span class="string">[08/Nov/2020:20:29:08 +0800]</span> <span class="string">&quot;<span class="keyword">GET</span> / HTTP/1.1&quot;</span> <span class="number">404</span> <span class="number">951</span></span><br><span class="line"><span class="number">192.168.88.100</span> <span class="string">[08/Nov/2020:20:31:27 +0800]</span> <span class="string">&quot;<span class="keyword">GET</span> /hpsk_sdk/demo5.html HTTP/1.1&quot;</span> <span class="number">200</span> <span class="number">5333</span></span><br><span class="line"><span class="number">192.168.88.100</span> <span class="string">[08/Nov/2020:20:32:59 +0800]</span> <span class="string">&quot;<span class="keyword">GET</span> /hpsk_sdk/demo5.html HTTP/1.1&quot;</span> <span class="number">200</span> <span class="number">5333</span></span><br><span class="line"><span class="number">192.168.88.100</span> <span class="string">[08/Nov/2020:20:32:59 +0800]</span> <span class="string">&quot;<span class="keyword">GET</span> /hpsk_sdk/js/analytics.js HTTP/1.1&quot;</span> <span class="number">200</span> <span class="number">11082</span></span><br><span class="line"><span class="number">192.168.88.100</span> <span class="string">[08/Nov/2020:20:32:59 +0800]</span> <span class="string">&quot;<span class="keyword">GET</span> /favicon.ico HTTP/1.1&quot;</span> <span class="number">404</span> <span class="number">973</span></span><br><span class="line"><span class="number">192.168.88.100</span> <span class="string">[08/Nov/2020:20:33:01 +0800]</span> <span class="string">&quot;<span class="keyword">GET</span> /hpsk_sdk/demo3.html HTTP/1.1&quot;</span> <span class="number">200</span> <span class="number">1024</span></span><br><span class="line"><span class="number">192.168.88.100</span> <span class="string">[08/Nov/2020:20:34:25 +0800]</span> <span class="string">&quot;<span class="keyword">GET</span> /hpsk_sdk/demo2.html HTTP/1.1&quot;</span> <span class="number">200</span> <span class="number">854</span></span><br><span class="line"><span class="number">192.168.88.100</span> <span class="string">[08/Nov/2020:20:34:25 +0800]</span> <span class="string">&quot;<span class="keyword">GET</span> /hpsk_sdk/js/analytics.js HTTP/1.1&quot;</span> <span class="number">304</span> -</span><br><span class="line"><span class="number">192.168.88.100</span> <span class="string">[08/Nov/2020:20:34:28 +0800]</span> <span class="string">&quot;<span class="keyword">GET</span> /hpsk_sdk/demo4.html HTTP/1.1&quot;</span> <span class="number">200</span> <span class="number">982</span></span><br><span class="line"><span class="number">192.168.88.100</span> <span class="string">[08/Nov/2020:20:35:05 +0800]</span> <span class="string">&quot;<span class="keyword">GET</span> /hpsk_sdk/demo.html HTTP/1.1&quot;</span> <span class="number">200</span> <span class="number">485</span></span><br><span class="line"><span class="number">192.168.88.100</span> <span class="string">[08/Nov/2020:20:35:05 +0800]</span> <span class="string">&quot;<span class="keyword">GET</span> /hpsk_sdk/js/analytics.js HTTP/1.1&quot;</span> <span class="number">304</span> -</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="解决方案一：替换分割符"><a href="#解决方案一：替换分割符" class="headerlink" title="解决方案一：替换分割符"></a>解决方案一：替换分割符</h5><p>如果数据中的分隔符是多字节分隔符，可以使用程序提前将数据中的多字节分隔符替换为单字节分隔符，然后使用Hive加载，就可以实现正确加载对应的数据。</p>
<ol>
<li><p>创建Maven工程，编写对应MapReduce代码</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-example<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-exec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--只包含该项目代码中用到的jar,在父项目中引入了，但在当前模块中没有用到就会被删掉--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">minimizeJar</span>&gt;</span>true<span class="tag">&lt;/<span class="name">minimizeJar</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">artifact</span>&gt;</span>*:*<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.SF<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.DSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.RSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hadoop.changesplit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configured;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.TextInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.Tool;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.ToolRunner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现Tool接口，目的是为了 hadoop 命令调用保证可以传入一些与程序入参无关的命令行参数</span></span><br><span class="line"><span class="comment"> * Configured的getConf获取环境变量实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeSplitCharMR</span> <span class="keyword">extends</span> <span class="title">Configured</span> <span class="keyword">implements</span> <span class="title">Tool</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] strings)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 构建Job</span></span><br><span class="line">        Job job = Job.getInstance(<span class="keyword">this</span>.getConf(), <span class="string">&quot;changeSplit&quot;</span>);</span><br><span class="line">        job.setJarByClass(ChangeSplitCharMR.class);</span><br><span class="line">        <span class="comment">// 2. 配置Job</span></span><br><span class="line">        <span class="comment">// input</span></span><br><span class="line">        job.setInputFormatClass(TextInputFormat.class);</span><br><span class="line">        Path inputPath = <span class="keyword">new</span> Path(strings[<span class="number">0</span>]);</span><br><span class="line">        FileInputFormat.setInputPaths(job, inputPath);</span><br><span class="line">        <span class="comment">// map</span></span><br><span class="line">        job.setMapperClass(ChangeSplitMapper.class);</span><br><span class="line">        <span class="comment">// 设置输出类型</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(NullWritable.class);</span><br><span class="line">        <span class="comment">// reduce：不需要 Reduce 过程</span></span><br><span class="line">        job.setNumReduceTasks(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// output</span></span><br><span class="line">        job.setOutputFormatClass(TextOutputFormat.class);</span><br><span class="line">        Path outputPath = <span class="keyword">new</span> Path(strings[<span class="number">1</span>]);</span><br><span class="line">        FileOutputFormat.setOutputPath(job, outputPath);</span><br><span class="line">        <span class="comment">// 提交 job</span></span><br><span class="line">        <span class="keyword">return</span> job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        <span class="keyword">int</span> status = ToolRunner.run(conf, <span class="keyword">new</span> ChangeSplitCharMR(), args);</span><br><span class="line">        System.exit(status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hadoop.changesplit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeSplitMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Text outputKey = <span class="keyword">new</span> Text();</span><br><span class="line">    <span class="keyword">private</span> NullWritable outputValue = NullWritable.get();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        String line = value.toString();</span><br><span class="line">        outputKey.set(line.replace(<span class="string">&quot;||&quot;</span>,<span class="string">&quot;|&quot;</span>));</span><br><span class="line">        context.write(outputKey,outputValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>打包并上传</p>
<p>修改不带依赖的jar包为<strong>change-split.jar</strong>，并拷贝到虚拟机中</p>
</li>
<li><p>运行hadoop程序进行数据清洗</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[eitan@hadoop103 ~]$ hadoop fs -put documents/txt/test01.txt /tmp/hive_export</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[eitan@hadoop103 ~]$ hadoop jar change-split.jar cn.itcast.hadoop.changesplit.ChangeSplitCharMR /tmp/hive_export/test01.txt /tmp/hive_export/test01_wash.txt</span><br></pre></td></tr></table></figure></li>
<li><p>结果</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220516141542.png" alt="image-20220516141538027"></p>
</li>
</ol>
<h5 id="解决方案二：RegexSerDe正则加载"><a href="#解决方案二：RegexSerDe正则加载" class="headerlink" title="解决方案二：RegexSerDe正则加载"></a>解决方案二：RegexSerDe正则加载</h5><p>RegexSerde是Hive中专门为了满足复杂数据场景所提供的正则加载和解析数据的接口，使用RegexSerde可以指定正则表达式加载数据，根据正则表达式匹配每一列数据。</p>
<ol>
<li><p>分析数据</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.88.100 [08/Nov/2020:10:44:33 +0800] &quot;GET /hpsk_sdk/index.html HTTP/1.1&quot; 200 328</span><br></pre></td></tr></table></figure></li>
<li><p>正则表达式定义每一列</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">([^ ]*) ([^&#125;]*) ([^ ]*) ([^ ]*) ([^ ]*) ([0-9]*) ([^ ]*)</span><br></pre></td></tr></table></figure></li>
<li><p>创建表</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> apachelog</span><br><span class="line">(</span><br><span class="line">    ip     string, <span class="comment">--IP地址</span></span><br><span class="line">    stime  string, <span class="comment">--时间</span></span><br><span class="line">    mothed string, <span class="comment">--请求方式</span></span><br><span class="line">    url    string, <span class="comment">--请求地址</span></span><br><span class="line">    policy string, <span class="comment">--请求协议</span></span><br><span class="line">    stat   string, <span class="comment">--请求状态</span></span><br><span class="line">    body   string  <span class="comment">--字节大小</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">--指定使用RegexSerde加载数据</span></span><br><span class="line"><span class="type">ROW</span> FORMAT SERDE <span class="string">&#x27;org.apache.hadoop.hive.serde2.RegexSerDe&#x27;</span></span><br><span class="line"><span class="comment">--指定正则表达式</span></span><br><span class="line"><span class="keyword">WITH</span> SERDEPROPERTIES (</span><br><span class="line">  &quot;input.regex&quot; <span class="operator">=</span> &quot;([^ ]*) ([^&#125;]*) ([^ ]*) ([^ ]*) ([^ ]*) ([0-9]*) ([^ ]*)&quot;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">LOAD DATA INPATH &quot;/tmp/hive_export/apache_web_access.log&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> apachelog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> apachelog;</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="解决方案三：自定义InputFormat"><a href="#解决方案三：自定义InputFormat" class="headerlink" title="解决方案三：自定义InputFormat"></a>解决方案三：自定义InputFormat</h5><p>暂无手动实现。</p>
<h4 id="URL解析函数及侧视图"><a href="#URL解析函数及侧视图" class="headerlink" title="URL解析函数及侧视图"></a>URL解析函数及侧视图</h4><h5 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1	http://facebook.com/path/p1.php?query=1</span><br><span class="line">2	http://tongji.baidu.com/news/index.jsp?uuid=allen&amp;age=18</span><br><span class="line">3	http://www.jdwz.com/index?source=baidu</span><br><span class="line">4	http://www.itcast.cn/index?source=alibaba</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> t_url</span><br><span class="line">(</span><br><span class="line">    id  <span class="type">int</span>,</span><br><span class="line">    url string</span><br><span class="line">) <span class="type">ROW</span> FORMAT DELIMITED</span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"></span><br><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INPATH &quot;/home/eitan/documents/txt/url.txt&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> t_url;</span><br></pre></td></tr></table></figure>

<h5 id="parse-url"><a href="#parse-url" class="headerlink" title="parse_url"></a>parse_url</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,</span><br><span class="line">       parse_url(url, &quot;PROTOCOL&quot;) <span class="keyword">AS</span> protocol,</span><br><span class="line">       parse_url(url, &quot;HOST&quot;)     <span class="keyword">AS</span> host,</span><br><span class="line">       parse_url(url, &quot;PATH&quot;)     <span class="keyword">AS</span> path,</span><br><span class="line">       parse_url(url, &quot;QUERY&quot;)    <span class="keyword">AS</span> query</span><br><span class="line"><span class="keyword">FROM</span> t_url;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-----------+-------------------+------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> id  <span class="operator">|</span> protocol  <span class="operator">|</span>       host        <span class="operator">|</span>       path       <span class="operator">|</span>       query        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-----------+-------------------+------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>   <span class="operator">|</span> http      <span class="operator">|</span> facebook.com      <span class="operator">|</span> <span class="operator">/</span>path<span class="operator">/</span>p1.php     <span class="operator">|</span> query<span class="operator">=</span><span class="number">1</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>   <span class="operator">|</span> http      <span class="operator">|</span> tongji.baidu.com  <span class="operator">|</span> <span class="operator">/</span>news<span class="operator">/</span>index.jsp  <span class="operator">|</span> uuid<span class="operator">=</span>allen<span class="operator">&amp;</span>age<span class="operator">=</span><span class="number">18</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>   <span class="operator">|</span> http      <span class="operator">|</span> www.jdwz.com      <span class="operator">|</span> <span class="operator">/</span>index           <span class="operator">|</span> source<span class="operator">=</span>baidu       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>   <span class="operator">|</span> http      <span class="operator">|</span> www.itcast.cn     <span class="operator">|</span> <span class="operator">/</span>index           <span class="operator">|</span> source<span class="operator">=</span>alibaba     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-----------+-------------------+------------------+--------------------+</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>缺点：parse_url函数每次只能解析一个参数，导致需要经过多个函数调用才能构建多列，开发角度较为麻烦，实现过程性能也相对较差，需要对同一列做多次计算处理，我们希望能实现调用一次函数，就可以将多个参数进行解析，得到多列结果</p>
</blockquote>
<h5 id="parse-url-tuple"><a href="#parse-url-tuple" class="headerlink" title="parse_url_tuple"></a>parse_url_tuple</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.id,</span><br><span class="line">       b.protocol,</span><br><span class="line">       b.host,</span><br><span class="line">       b.path,</span><br><span class="line">       b.query</span><br><span class="line"><span class="keyword">FROM</span> t_url a</span><br><span class="line">         <span class="keyword">LATERAL</span> <span class="keyword">VIEW</span> parse_url_tuple(url, &quot;PROTOCOL&quot;, &quot;HOST&quot;, &quot;PATH&quot;, &quot;QUERY&quot;) b <span class="keyword">AS</span> protocol, host, path, query;</span><br></pre></td></tr></table></figure>

<h4 id="行列转换应用"><a href="#行列转换应用" class="headerlink" title="行列转换应用"></a>行列转换应用</h4><h5 id="行转列：多行转多列"><a href="#行转列：多行转多列" class="headerlink" title="行转列：多行转多列"></a>行转列：多行转多列</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表并导入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> row2singlecol</span><br><span class="line">(</span><br><span class="line">    col1 string,</span><br><span class="line">    col2 string,</span><br><span class="line">    col3 <span class="type">int</span></span><br><span class="line">) <span class="type">ROW</span> FORMAT DELIMITED</span><br><span class="line">    FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"></span><br><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INPATH &quot;/home/eitan/documents/txt/r2c1.txt&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> row2singlecol;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 数据展示</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> row2singlecol;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+---------------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> row2singlecol.col1  <span class="operator">|</span> row2singlecol.col2  <span class="operator">|</span> row2singlecol.col3  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+---------------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> a                   <span class="operator">|</span> c                   <span class="operator">|</span> <span class="number">1</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> a                   <span class="operator">|</span> d                   <span class="operator">|</span> <span class="number">2</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> a                   <span class="operator">|</span> e                   <span class="operator">|</span> <span class="number">3</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> b                   <span class="operator">|</span> c                   <span class="operator">|</span> <span class="number">4</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> b                   <span class="operator">|</span> d                   <span class="operator">|</span> <span class="number">5</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> b                   <span class="operator">|</span> e                   <span class="operator">|</span> <span class="number">6</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+---------------------+---------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 多行转多列</span></span><br><span class="line"><span class="keyword">SELECT</span> col1,</span><br><span class="line">       <span class="built_in">max</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> col2 <span class="operator">=</span> &quot;c&quot; <span class="keyword">THEN</span> col3 <span class="keyword">END</span>) <span class="keyword">AS</span> c,</span><br><span class="line">       <span class="built_in">max</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> col2 <span class="operator">=</span> &quot;d&quot; <span class="keyword">THEN</span> col3 <span class="keyword">END</span>) <span class="keyword">AS</span> d,</span><br><span class="line">       <span class="built_in">max</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> col2 <span class="operator">=</span> &quot;e&quot; <span class="keyword">THEN</span> col3 <span class="keyword">END</span>) <span class="keyword">AS</span> e</span><br><span class="line"><span class="keyword">FROM</span> row2singlecol <span class="keyword">GROUP</span> <span class="keyword">BY</span> col1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+----+----+----+</span></span><br><span class="line"><span class="operator">|</span> col1  <span class="operator">|</span> c  <span class="operator">|</span> d  <span class="operator">|</span> e  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+----+----+----+</span></span><br><span class="line"><span class="operator">|</span> a     <span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> b     <span class="operator">|</span> <span class="number">4</span>  <span class="operator">|</span> <span class="number">5</span>  <span class="operator">|</span> <span class="number">6</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+----+----+----+</span></span><br></pre></td></tr></table></figure>

<h5 id="行转列：多行转单列"><a href="#行转列：多行转单列" class="headerlink" title="行转列：多行转单列"></a>行转列：多行转单列</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表并导入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> row2multicol</span><br><span class="line">(</span><br><span class="line">    col1 string,</span><br><span class="line">    col2 string,</span><br><span class="line">    col3 <span class="type">int</span></span><br><span class="line">) <span class="type">ROW</span> FORMAT DELIMITED</span><br><span class="line">    FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"></span><br><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INPATH &quot;/home/eitan/documents/txt/r2c2.txt&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> row2multicol;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 数据展示</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> row2multicol;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+--------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> row2multicol.col1  <span class="operator">|</span> row2multicol.col2  <span class="operator">|</span> row2multicol.col3  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+--------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> a                  <span class="operator">|</span> b                  <span class="operator">|</span> <span class="number">1</span>                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> a                  <span class="operator">|</span> b                  <span class="operator">|</span> <span class="number">2</span>                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> a                  <span class="operator">|</span> b                  <span class="operator">|</span> <span class="number">3</span>                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> c                  <span class="operator">|</span> d                  <span class="operator">|</span> <span class="number">4</span>                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> c                  <span class="operator">|</span> d                  <span class="operator">|</span> <span class="number">5</span>                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> c                  <span class="operator">|</span> d                  <span class="operator">|</span> <span class="number">6</span>                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+--------------------+--------------------+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 多行转单列</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">       col1,</span><br><span class="line">       col2,</span><br><span class="line">       concat_ws(<span class="string">&#x27;,&#x27;</span>, collect_list(<span class="built_in">cast</span>(col3 <span class="keyword">as</span> string))) <span class="keyword">AS</span> col3</span><br><span class="line"><span class="keyword">FROM</span> row2multicol</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> col1, col2;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> col1  <span class="operator">|</span> col2  <span class="operator">|</span>  col3  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> a     <span class="operator">|</span> b     <span class="operator">|</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> c     <span class="operator">|</span> d     <span class="operator">|</span> <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+--------+</span></span><br></pre></td></tr></table></figure>

<h5 id="列转行：多列转多行"><a href="#列转行：多列转多行" class="headerlink" title="列转行：多列转多行"></a>列转行：多列转多行</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表并导入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> col2multirow</span><br><span class="line">(</span><br><span class="line">    col1 string,</span><br><span class="line">    col2 <span class="type">int</span>,</span><br><span class="line">    col3 <span class="type">int</span>,</span><br><span class="line">    col4 <span class="type">int</span></span><br><span class="line">) <span class="type">ROW</span> FORMAT DELIMITED</span><br><span class="line">    FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INPATH &quot;/home/eitan/documents/txt/c2r2.txt&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> col2multirow;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 多列转单行</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> col2multirow;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+--------------------+--------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> col2multirow.col1  <span class="operator">|</span> col2multirow.col2  <span class="operator">|</span> col2multirow.col3  <span class="operator">|</span> col2multirow.col4  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+--------------------+--------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> a                  <span class="operator">|</span> <span class="number">1</span>                  <span class="operator">|</span> <span class="number">2</span>                  <span class="operator">|</span> <span class="number">3</span>                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> b                  <span class="operator">|</span> <span class="number">4</span>                  <span class="operator">|</span> <span class="number">5</span>                  <span class="operator">|</span> <span class="number">6</span>                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+--------------------+--------------------+--------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> col1,&quot;a&quot; <span class="keyword">AS</span> col2,col2 <span class="keyword">AS</span> col3 <span class="keyword">FROM</span> col2multirow</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> col1,&quot;b&quot; <span class="keyword">AS</span> col2,col3 <span class="keyword">AS</span> col3 <span class="keyword">FROM</span> col2multirow</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> col1,&quot;c&quot; <span class="keyword">AS</span> col2,col4 <span class="keyword">AS</span> col3 <span class="keyword">FROM</span> col2multirow;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> _u1.col1  <span class="operator">|</span> _u1.col2  <span class="operator">|</span> _u1.col3  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> a         <span class="operator">|</span> a         <span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> a         <span class="operator">|</span> b         <span class="operator">|</span> <span class="number">2</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> a         <span class="operator">|</span> c         <span class="operator">|</span> <span class="number">3</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> b         <span class="operator">|</span> a         <span class="operator">|</span> <span class="number">4</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> b         <span class="operator">|</span> b         <span class="operator">|</span> <span class="number">5</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> b         <span class="operator">|</span> c         <span class="operator">|</span> <span class="number">6</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+-----------+</span></span><br></pre></td></tr></table></figure>

<h5 id="列转行：单列转多行"><a href="#列转行：单列转多行" class="headerlink" title="列转行：单列转多行"></a>列转行：单列转多行</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表并导入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> singlecol2row</span><br><span class="line">(</span><br><span class="line">    col1 string,</span><br><span class="line">    col2 string,</span><br><span class="line">    col3 string</span><br><span class="line">) <span class="type">ROW</span> FORMAT DELIMITED</span><br><span class="line">    FIELDS TERMINATED <span class="keyword">BY</span> &quot;\t&quot;;</span><br><span class="line"></span><br><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INPATH &quot;/home/eitan/documents/txt/c2r2.txt&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> singlecol2row;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 单列转多行</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> singlecol2row;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+---------------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> singlecol2row.col1  <span class="operator">|</span> singlecol2row.col2  <span class="operator">|</span> singlecol2row.col3  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+---------------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> a                   <span class="operator">|</span> b                   <span class="operator">|</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> c                   <span class="operator">|</span> d                   <span class="operator">|</span> <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+---------------------+---------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> a.col1,</span><br><span class="line">       a.col2,</span><br><span class="line">       b.col3</span><br><span class="line"><span class="keyword">FROM</span> singlecol2row a</span><br><span class="line">         <span class="keyword">LATERAL</span> <span class="keyword">VIEW</span> explode(split(col3, &quot;,&quot;)) b <span class="keyword">AS</span> col3;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+---------+</span></span><br><span class="line"><span class="operator">|</span> a.col1  <span class="operator">|</span> a.col2  <span class="operator">|</span> b.col3  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+---------+</span></span><br><span class="line"><span class="operator">|</span> a       <span class="operator">|</span> b       <span class="operator">|</span> <span class="number">1</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> a       <span class="operator">|</span> b       <span class="operator">|</span> <span class="number">2</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> a       <span class="operator">|</span> b       <span class="operator">|</span> <span class="number">3</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> c       <span class="operator">|</span> d       <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> c       <span class="operator">|</span> d       <span class="operator">|</span> <span class="number">5</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> c       <span class="operator">|</span> d       <span class="operator">|</span> <span class="number">6</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+---------+</span></span><br></pre></td></tr></table></figure>

<h4 id="JSON数据处理"><a href="#JSON数据处理" class="headerlink" title="JSON数据处理"></a>JSON数据处理</h4><h5 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h5><p>将json文件每一个字段解析成对应的表字段</p>
<h5 id="方法一：使用JSON解析函数"><a href="#方法一：使用JSON解析函数" class="headerlink" title="方法一：使用JSON解析函数"></a>方法一：使用JSON解析函数</h5><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">-- 建表并导入数据</span><br><span class="line">CREATE TABLE t_json_method1</span><br><span class="line">(</span><br><span class="line">    json string</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">LOAD DATA LOCAL INPATH <span class="string">&quot;/home/eitan/documents/txt/device.json&quot;</span> INTO TABLE t_json_method1;</span><br><span class="line"></span><br><span class="line">-- 查询</span><br><span class="line">SELECT json_tuple(json, <span class="string">&quot;device&quot;</span>, <span class="string">&quot;deviceType&quot;</span>, <span class="string">&quot;signal&quot;</span>, <span class="string">&quot;time&quot;</span>)</span><br><span class="line">           AS (device, deviceType, signal, stime)</span><br><span class="line">FROM t_json_method1;</span><br><span class="line"></span><br><span class="line">+------------+-------------+---------+----------------+</span><br><span class="line">|<span class="string">   device   </span>|<span class="string"> devicetype  </span>|<span class="string"> signal  </span>|<span class="string">     stime      </span>|</span><br><span class="line">+------------+-------------+---------+----------------+</span><br><span class="line">|<span class="string"> device_30  </span>|<span class="string"> kafka       </span>|<span class="string"> 98.0    </span>|<span class="string"> 1616817201390  </span>|</span><br><span class="line">|<span class="string"> device_40  </span>|<span class="string"> route       </span>|<span class="string"> 99.0    </span>|<span class="string"> 1616817201887  </span>|</span><br><span class="line">|<span class="string"> device_21  </span>|<span class="string"> bigdata     </span>|<span class="string"> 77.0    </span>|<span class="string"> 1616817202142  </span>|</span><br><span class="line">|<span class="string"> device_31  </span>|<span class="string"> kafka       </span>|<span class="string"> 98.0    </span>|<span class="string"> 1616817202405  </span>|</span><br><span class="line">|<span class="string"> device_20  </span>|<span class="string"> bigdata     </span>|<span class="string"> 12.0    </span>|<span class="string"> 1616817202513  </span>|</span><br><span class="line">|<span class="string"> device_54  </span>|<span class="string"> bigdata     </span>|<span class="string"> 14.0    </span>|<span class="string"> 1616817202913  </span>|</span><br><span class="line">|<span class="string"> device_10  </span>|<span class="string"> db          </span>|<span class="string"> 39.0    </span>|<span class="string"> 1616817203356  </span>|</span><br><span class="line">|<span class="string"> device_94  </span>|<span class="string"> bigdata     </span>|<span class="string"> 59.0    </span>|<span class="string"> 1616817203771  </span>|</span><br><span class="line">|<span class="string"> device_32  </span>|<span class="string"> kafka       </span>|<span class="string"> 52.0    </span>|<span class="string"> 1616817204010  </span>|</span><br><span class="line">|<span class="string"> device_21  </span>|<span class="string"> bigdata     </span>|<span class="string"> 85.0    </span>|<span class="string"> 1616817204229  </span>|</span><br><span class="line">|<span class="string"> device_74  </span>|<span class="string"> bigdata     </span>|<span class="string"> 27.0    </span>|<span class="string"> 1616817204720  </span>|</span><br><span class="line">|<span class="string"> device_91  </span>|<span class="string"> bigdata     </span>|<span class="string"> 50.0    </span>|<span class="string"> 1616817205164  </span>|</span><br><span class="line">|<span class="string"> device_62  </span>|<span class="string"> db          </span>|<span class="string"> 89.0    </span>|<span class="string"> 1616817205328  </span>|</span><br><span class="line">|<span class="string"> device_21  </span>|<span class="string"> bigdata     </span>|<span class="string"> 25.0    </span>|<span class="string"> 1616817205457  </span>|</span><br><span class="line">|<span class="string"> device_76  </span>|<span class="string"> bigdata     </span>|<span class="string"> 62.0    </span>|<span class="string"> 1616817205984  </span>|</span><br><span class="line">|<span class="string"> device_74  </span>|<span class="string"> bigdata     </span>|<span class="string"> 44.0    </span>|<span class="string"> 1616817206571  </span>|</span><br><span class="line">|<span class="string"> device_42  </span>|<span class="string"> route       </span>|<span class="string"> 43.0    </span>|<span class="string"> 1616817206681  </span>|</span><br><span class="line">|<span class="string"> device_32  </span>|<span class="string"> kafka       </span>|<span class="string"> 65.0    </span>|<span class="string"> 1616817207131  </span>|</span><br><span class="line">|<span class="string"> device_32  </span>|<span class="string"> kafka       </span>|<span class="string"> 95.0    </span>|<span class="string"> 1616817207714  </span>|</span><br><span class="line">|<span class="string"> device_71  </span>|<span class="string"> bigdata     </span>|<span class="string"> 45.0    </span>|<span class="string"> 1616817207907  </span>|</span><br><span class="line">|<span class="string"> device_32  </span>|<span class="string"> kafka       </span>|<span class="string"> 81.0    </span>|<span class="string"> 1616817208320  </span>|</span><br><span class="line">|<span class="string"> device_10  </span>|<span class="string"> db          </span>|<span class="string"> 81.0    </span>|<span class="string"> 1616817208907  </span>|</span><br><span class="line">|<span class="string"> device_20  </span>|<span class="string"> bigdata     </span>|<span class="string"> 69.0    </span>|<span class="string"> 1616817209287  </span>|</span><br><span class="line">|<span class="string"> device_61  </span>|<span class="string"> db          </span>|<span class="string"> 98.0    </span>|<span class="string"> 1616817209785  </span>|</span><br><span class="line">|<span class="string"> device_30  </span>|<span class="string"> kafka       </span>|<span class="string"> 95.0    </span>|<span class="string"> 1616817210104  </span>|</span><br><span class="line">|<span class="string"> device_43  </span>|<span class="string"> route       </span>|<span class="string"> 57.0    </span>|<span class="string"> 1616817210540  </span>|</span><br><span class="line">|<span class="string"> device_10  </span>|<span class="string"> db          </span>|<span class="string"> 36.0    </span>|<span class="string"> 1616817211134  </span>|</span><br><span class="line">|<span class="string"> device_20  </span>|<span class="string"> bigdata     </span>|<span class="string"> 75.0    </span>|<span class="string"> 1616817211248  </span>|</span><br><span class="line">|<span class="string"> device_64  </span>|<span class="string"> db          </span>|<span class="string"> 68.0    </span>|<span class="string"> 1616817211812  </span>|</span><br><span class="line">|<span class="string"> device_53  </span>|<span class="string"> bigdata     </span>|<span class="string"> 60.0    </span>|<span class="string"> 1616817212237  </span>|</span><br><span class="line">|<span class="string"> device_52  </span>|<span class="string"> bigdata     </span>|<span class="string"> 57.0    </span>|<span class="string"> 1616817212709  </span>|</span><br><span class="line">|<span class="string"> device_30  </span>|<span class="string"> kafka       </span>|<span class="string"> 75.0    </span>|<span class="string"> 1616817213073  </span>|</span><br><span class="line">|<span class="string"> device_31  </span>|<span class="string"> kafka       </span>|<span class="string"> 83.0    </span>|<span class="string"> 1616817213614  </span>|</span><br><span class="line">|<span class="string"> device_93  </span>|<span class="string"> bigdata     </span>|<span class="string"> 54.0    </span>|<span class="string"> 1616817214101  </span>|</span><br><span class="line">|<span class="string"> device_20  </span>|<span class="string"> bigdata     </span>|<span class="string"> 84.0    </span>|<span class="string"> 1616817214639  </span>|</span><br><span class="line">+------------+-------------+---------+----------------+</span><br></pre></td></tr></table></figure>

<h5 id="方法二：指定解析JSON的SerDe"><a href="#方法二：指定解析JSON的SerDe" class="headerlink" title="方法二：指定解析JSON的SerDe"></a>方法二：指定解析JSON的SerDe</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表并指定序列化和反序列化的类</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_json_method2</span><br><span class="line">(</span><br><span class="line">    device     string,</span><br><span class="line">    deviceType string,</span><br><span class="line">    signal     <span class="keyword">double</span>,</span><br><span class="line"> 	`<span class="type">time</span>`       string</span><br><span class="line">) <span class="type">ROW</span> FORMAT SERDE <span class="string">&#x27;org.apache.hive.hcatalog.data.JsonSerDe&#x27;</span></span><br><span class="line">    STORED <span class="keyword">AS</span> TEXTFILE;</span><br><span class="line"></span><br><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INPATH &quot;/home/eitan/documents/txt/device.json&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> t_json_method2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_json_method2;</span><br></pre></td></tr></table></figure>

<h4 id="窗口函数应用实例"><a href="#窗口函数应用实例" class="headerlink" title="窗口函数应用实例"></a>窗口函数应用实例</h4><h5 id="连续登陆用户"><a href="#连续登陆用户" class="headerlink" title="连续登陆用户"></a>连续登陆用户</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表并加载数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_login</span><br><span class="line">(</span><br><span class="line">    userid    string,</span><br><span class="line">    logintime string</span><br><span class="line">) <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"></span><br><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INPATH &quot;/home/eitan/documents/txt/login.log&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> t_login;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_login;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> t_login.userid  <span class="operator">|</span> t_login.logintime  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> A               <span class="operator">|</span> <span class="number">2021</span><span class="number">-03</span><span class="number">-22</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> B               <span class="operator">|</span> <span class="number">2021</span><span class="number">-03</span><span class="number">-22</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> C               <span class="operator">|</span> <span class="number">2021</span><span class="number">-03</span><span class="number">-22</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> A               <span class="operator">|</span> <span class="number">2021</span><span class="number">-03</span><span class="number">-23</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> C               <span class="operator">|</span> <span class="number">2021</span><span class="number">-03</span><span class="number">-23</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> A               <span class="operator">|</span> <span class="number">2021</span><span class="number">-03</span><span class="number">-24</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> B               <span class="operator">|</span> <span class="number">2021</span><span class="number">-03</span><span class="number">-24</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 连续两天登入的用户</span></span><br><span class="line"><span class="keyword">WITH</span> t1 <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> userid,</span><br><span class="line">           logintime,</span><br><span class="line">           <span class="built_in">lead</span>(logintime, <span class="number">1</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> userid <span class="keyword">ORDER</span> <span class="keyword">BY</span> logintime) <span class="keyword">as</span> nexttime</span><br><span class="line">    <span class="keyword">FROM</span> t_login</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> userid <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> date_add(logintime, <span class="number">1</span>) <span class="operator">=</span><span class="operator">=</span> nexttime;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 连续三天登入的用户</span></span><br><span class="line"><span class="keyword">WITH</span> t1 <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> userid,</span><br><span class="line">           date_add(logintime, <span class="number">2</span>)                                           <span class="keyword">AS</span> nextday,</span><br><span class="line">           <span class="built_in">lead</span>(logintime, <span class="number">2</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> userid <span class="keyword">ORDER</span> <span class="keyword">BY</span> logintime) <span class="keyword">as</span> nextlogin</span><br><span class="line">    <span class="keyword">FROM</span> t_login</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> userid <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> nextday <span class="operator">=</span> nextlogin;</span><br></pre></td></tr></table></figure>

<h5 id="级联累加求和"><a href="#级联累加求和" class="headerlink" title="级联累加求和"></a>级联累加求和</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表加载数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_money</span><br><span class="line">(</span><br><span class="line">    userid string,</span><br><span class="line">    mth    string,</span><br><span class="line">    money  <span class="type">int</span></span><br><span class="line">) <span class="type">ROW</span> FORMAT DELIMITED</span><br><span class="line">    FIELDS TERMINATED <span class="keyword">BY</span> &quot;\t&quot;;</span><br><span class="line"></span><br><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INPATH &quot;/home/eitan/documents/txt/money.tsv&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> t_money;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_money;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> t_money.userid  <span class="operator">|</span> t_money.mth  <span class="operator">|</span> t_money.money  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> A               <span class="operator">|</span> <span class="number">2021</span><span class="number">-01</span>      <span class="operator">|</span> <span class="number">5</span>              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> A               <span class="operator">|</span> <span class="number">2021</span><span class="number">-01</span>      <span class="operator">|</span> <span class="number">15</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> B               <span class="operator">|</span> <span class="number">2021</span><span class="number">-01</span>      <span class="operator">|</span> <span class="number">5</span>              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> A               <span class="operator">|</span> <span class="number">2021</span><span class="number">-01</span>      <span class="operator">|</span> <span class="number">8</span>              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> B               <span class="operator">|</span> <span class="number">2021</span><span class="number">-01</span>      <span class="operator">|</span> <span class="number">25</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> A               <span class="operator">|</span> <span class="number">2021</span><span class="number">-01</span>      <span class="operator">|</span> <span class="number">5</span>              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> A               <span class="operator">|</span> <span class="number">2021</span><span class="number">-02</span>      <span class="operator">|</span> <span class="number">4</span>              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> A               <span class="operator">|</span> <span class="number">2021</span><span class="number">-02</span>      <span class="operator">|</span> <span class="number">6</span>              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> B               <span class="operator">|</span> <span class="number">2021</span><span class="number">-02</span>      <span class="operator">|</span> <span class="number">10</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> B               <span class="operator">|</span> <span class="number">2021</span><span class="number">-02</span>      <span class="operator">|</span> <span class="number">5</span>              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> A               <span class="operator">|</span> <span class="number">2021</span><span class="number">-03</span>      <span class="operator">|</span> <span class="number">7</span>              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> B               <span class="operator">|</span> <span class="number">2021</span><span class="number">-03</span>      <span class="operator">|</span> <span class="number">9</span>              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> A               <span class="operator">|</span> <span class="number">2021</span><span class="number">-03</span>      <span class="operator">|</span> <span class="number">11</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> B               <span class="operator">|</span> <span class="number">2021</span><span class="number">-03</span>      <span class="operator">|</span> <span class="number">6</span>              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------+----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询每月消费金额和累计消费金额</span></span><br><span class="line"><span class="keyword">WITH</span> t1 <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> userid,</span><br><span class="line">           mth,</span><br><span class="line">           <span class="built_in">sum</span>(money) <span class="keyword">AS</span> m_money</span><br><span class="line">    <span class="keyword">FROM</span> t_money <span class="keyword">GROUP</span> <span class="keyword">BY</span> userid, mth</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> userid, mth, m_money, <span class="built_in">sum</span>(m_money) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> userid <span class="keyword">ORDER</span> <span class="keyword">BY</span> mth) <span class="keyword">FROM</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------+----------+---------------+</span></span><br><span class="line"><span class="operator">|</span> userid  <span class="operator">|</span>   mth    <span class="operator">|</span> m_money  <span class="operator">|</span> sum_window_0  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------+----------+---------------+</span></span><br><span class="line"><span class="operator">|</span> A       <span class="operator">|</span> <span class="number">2021</span><span class="number">-01</span>  <span class="operator">|</span> <span class="number">33</span>       <span class="operator">|</span> <span class="number">33</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> A       <span class="operator">|</span> <span class="number">2021</span><span class="number">-02</span>  <span class="operator">|</span> <span class="number">10</span>       <span class="operator">|</span> <span class="number">43</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> A       <span class="operator">|</span> <span class="number">2021</span><span class="number">-03</span>  <span class="operator">|</span> <span class="number">18</span>       <span class="operator">|</span> <span class="number">61</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> B       <span class="operator">|</span> <span class="number">2021</span><span class="number">-01</span>  <span class="operator">|</span> <span class="number">30</span>       <span class="operator">|</span> <span class="number">30</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> B       <span class="operator">|</span> <span class="number">2021</span><span class="number">-02</span>  <span class="operator">|</span> <span class="number">15</span>       <span class="operator">|</span> <span class="number">45</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> B       <span class="operator">|</span> <span class="number">2021</span><span class="number">-03</span>  <span class="operator">|</span> <span class="number">15</span>       <span class="operator">|</span> <span class="number">60</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+----------+----------+---------------+</span></span><br></pre></td></tr></table></figure>

<h5 id="分组TopN"><a href="#分组TopN" class="headerlink" title="分组TopN"></a>分组TopN</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表并载入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_emp</span><br><span class="line">(</span><br><span class="line">    empno     string,</span><br><span class="line">    ename     string,</span><br><span class="line">    job       string,</span><br><span class="line">    managerid string,</span><br><span class="line">    hiredate  string,</span><br><span class="line">    salary    <span class="keyword">double</span>,</span><br><span class="line">    bonus     <span class="keyword">double</span>,</span><br><span class="line">    deptno    string</span><br><span class="line">) <span class="type">ROW</span> FORMAT DELIMITED</span><br><span class="line">    FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"></span><br><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INPATH &quot;/home/eitan/documents/txt/emp.txt&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> t_emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> empno,ename,salary,deptno <span class="keyword">FROM</span> t_emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+---------+---------+</span></span><br><span class="line"><span class="operator">|</span> empno  <span class="operator">|</span>  ename  <span class="operator">|</span> salary  <span class="operator">|</span> deptno  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+---------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7369</span>   <span class="operator">|</span> SMITH   <span class="operator">|</span> <span class="number">800.0</span>   <span class="operator">|</span> <span class="number">20</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7499</span>   <span class="operator">|</span> ALLEN   <span class="operator">|</span> <span class="number">1600.0</span>  <span class="operator">|</span> <span class="number">30</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7521</span>   <span class="operator">|</span> WARD    <span class="operator">|</span> <span class="number">1250.0</span>  <span class="operator">|</span> <span class="number">30</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7566</span>   <span class="operator">|</span> JONES   <span class="operator">|</span> <span class="number">2975.0</span>  <span class="operator">|</span> <span class="number">20</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7654</span>   <span class="operator">|</span> MARTIN  <span class="operator">|</span> <span class="number">1250.0</span>  <span class="operator">|</span> <span class="number">30</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7698</span>   <span class="operator">|</span> BLAKE   <span class="operator">|</span> <span class="number">2850.0</span>  <span class="operator">|</span> <span class="number">30</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7782</span>   <span class="operator">|</span> CLARK   <span class="operator">|</span> <span class="number">2450.0</span>  <span class="operator">|</span> <span class="number">10</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7788</span>   <span class="operator">|</span> SCOTT   <span class="operator">|</span> <span class="number">3000.0</span>  <span class="operator">|</span> <span class="number">20</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7839</span>   <span class="operator">|</span> KING    <span class="operator">|</span> <span class="number">5000.0</span>  <span class="operator">|</span> <span class="number">10</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7844</span>   <span class="operator">|</span> TURNER  <span class="operator">|</span> <span class="number">1500.0</span>  <span class="operator">|</span> <span class="number">30</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7876</span>   <span class="operator">|</span> ADAMS   <span class="operator">|</span> <span class="number">1100.0</span>  <span class="operator">|</span> <span class="number">20</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7900</span>   <span class="operator">|</span> JAMES   <span class="operator">|</span> <span class="number">950.0</span>   <span class="operator">|</span> <span class="number">30</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7902</span>   <span class="operator">|</span> FORD    <span class="operator">|</span> <span class="number">3000.0</span>  <span class="operator">|</span> <span class="number">20</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7934</span>   <span class="operator">|</span> MILLER  <span class="operator">|</span> <span class="number">1300.0</span>  <span class="operator">|</span> <span class="number">10</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+---------+---------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询每个部分薪水前2名</span></span><br><span class="line"><span class="keyword">WITH</span> t1 <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> empno,</span><br><span class="line">           ename,</span><br><span class="line">           salary,</span><br><span class="line">           deptno,</span><br><span class="line">           <span class="built_in">row_number</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> deptno <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>) <span class="keyword">AS</span> rn</span><br><span class="line">    <span class="keyword">FROM</span> t_emp</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> rn <span class="operator">&lt;</span> <span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+------------+------------+--------+</span></span><br><span class="line"><span class="operator">|</span> t1.empno  <span class="operator">|</span> t1.ename  <span class="operator">|</span> t1.salary  <span class="operator">|</span> t1.deptno  <span class="operator">|</span> t1.rn  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+------------+------------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7839</span>      <span class="operator">|</span> KING      <span class="operator">|</span> <span class="number">5000.0</span>     <span class="operator">|</span> <span class="number">10</span>         <span class="operator">|</span> <span class="number">1</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7782</span>      <span class="operator">|</span> CLARK     <span class="operator">|</span> <span class="number">2450.0</span>     <span class="operator">|</span> <span class="number">10</span>         <span class="operator">|</span> <span class="number">2</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7788</span>      <span class="operator">|</span> SCOTT     <span class="operator">|</span> <span class="number">3000.0</span>     <span class="operator">|</span> <span class="number">20</span>         <span class="operator">|</span> <span class="number">1</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7902</span>      <span class="operator">|</span> FORD      <span class="operator">|</span> <span class="number">3000.0</span>     <span class="operator">|</span> <span class="number">20</span>         <span class="operator">|</span> <span class="number">2</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7698</span>      <span class="operator">|</span> BLAKE     <span class="operator">|</span> <span class="number">2850.0</span>     <span class="operator">|</span> <span class="number">30</span>         <span class="operator">|</span> <span class="number">1</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7499</span>      <span class="operator">|</span> ALLEN     <span class="operator">|</span> <span class="number">1600.0</span>     <span class="operator">|</span> <span class="number">30</span>         <span class="operator">|</span> <span class="number">2</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+------------+------------+--------+</span></span><br></pre></td></tr></table></figure>

<h4 id="拉链表的设计与实现"><a href="#拉链表的设计与实现" class="headerlink" title="拉链表的设计与实现"></a>拉链表的设计与实现</h4><h5 id="功能与应用场景"><a href="#功能与应用场景" class="headerlink" title="功能与应用场景"></a>功能与应用场景</h5><p>拉链表专门用于解决在数据仓库中数据发生变化如何实现数据存储的问题，如果直接覆盖历史状态，会导致无法查询历史状态，如果将所有数据单独切片存储，会导致存储大量非更新数据的问题。</p>
<p>拉链表的设计是将更新的数据进行状态记录，没有发生更新的数据不进行状态存储，用于存储所有数据在不同时间上的所有状态，通过时间进行标记每个状态的生命周期，查询时，根据需求可以获取指定时间范围状态的数据，默认用9999-12-31等最大值来表示最新状态。</p>
<h5 id="拉链表实现"><a href="#拉链表实现" class="headerlink" title="拉链表实现"></a>拉链表实现</h5><ol>
<li><p>创建表并插入数据</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dw_zipper</span><br><span class="line">(</span><br><span class="line">    userid    string,</span><br><span class="line">    phone     string,</span><br><span class="line">    nick      string,</span><br><span class="line">    gender    <span class="type">int</span>,</span><br><span class="line">    addr      string,</span><br><span class="line">    starttime string,</span><br><span class="line">    endtime   string</span><br><span class="line">) <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"></span><br><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INPATH &quot;/home/eitan/documents/txt/zipper.txt&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> dw_zipper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> dw_zipper;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220518172138.png" alt="image-20220518172133066"></p>
</li>
<li><p>创建ods层增量表，模拟增量</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ods_zipper_update</span><br><span class="line">(</span><br><span class="line">    userid    string,</span><br><span class="line">    phone     string,</span><br><span class="line">    nick      string,</span><br><span class="line">    gender    <span class="type">int</span>,</span><br><span class="line">    addr      string,</span><br><span class="line">    starttime string,</span><br><span class="line">    endtime   string</span><br><span class="line">) <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"></span><br><span class="line">LOAD DATA <span class="keyword">LOCAL</span> INPATH &quot;/home/eitan/documents/txt/update.txt&quot; <span class="keyword">INTO</span> <span class="keyword">TABLE</span> ods_zipper_update;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> ods_zipper_update;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220518172819.png" alt="image-20220518172817709"></p>
</li>
<li><p>合并数据</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建零时表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tmp_zipper</span><br><span class="line">(</span><br><span class="line">    userid    string,</span><br><span class="line">    phone     string,</span><br><span class="line">    nick      string,</span><br><span class="line">    gender    <span class="type">int</span>,</span><br><span class="line">    addr      string,</span><br><span class="line">    starttime string,</span><br><span class="line">    endtime   string</span><br><span class="line">) <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 合并拉链表与增量表</span></span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> tmp_zipper</span><br><span class="line"><span class="keyword">SELECT</span> userid,</span><br><span class="line">       phone,</span><br><span class="line">       nick,</span><br><span class="line">       gender,</span><br><span class="line">       addr,</span><br><span class="line">       starttime,</span><br><span class="line">       endtime</span><br><span class="line"><span class="keyword">FROM</span> ods_zipper_update</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> a.userid,</span><br><span class="line">       a.phone,</span><br><span class="line">       a.nick,</span><br><span class="line">       a.gender,</span><br><span class="line">       a.addr,</span><br><span class="line">       a.starttime,</span><br><span class="line">       if(b.userid <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">OR</span> a.endtime <span class="operator">&lt;</span> &quot;9999-12-31&quot;, a.endtime, date_sub(b.starttime, <span class="number">1</span>)) <span class="keyword">AS</span> endtime</span><br><span class="line"><span class="keyword">FROM</span> dw_zipper a</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> ods_zipper_update b <span class="keyword">ON</span> a.userid <span class="operator">=</span> b.userid;</span><br></pre></td></tr></table></figure></li>
<li><p>覆盖拉链表</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> dw_zipper</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tmp_zipper <span class="keyword">ORDER</span> <span class="keyword">BY</span> userid;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Hive性能优化"><a href="#Hive性能优化" class="headerlink" title="Hive性能优化"></a>Hive性能优化</h3><h4 id="Hive表设计优化"><a href="#Hive表设计优化" class="headerlink" title="Hive表设计优化"></a>Hive表设计优化</h4><h5 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h5><p>根据查询的需求，将数据按照查询的条件【一般都以时间】进行划分分区存储，将不同分区的数据单独使用一个HDFS目录来进行存储，当底层实现计算时，根据查询的条件，只读取对应分区的数据作为输入，减少不必要的数据加载，提高程序的性能。</p>
<h5 id="分桶表"><a href="#分桶表" class="headerlink" title="分桶表"></a>分桶表</h5><p>分桶表的设计有别于分区表的设计，分区表是将数据划分不同的目录进行存储，而分桶表是将数据划分不同的文件进行存储。分桶表的设计是按照一定的规则【通过MapReduce中的多个Reduce来实现】将数据划分到不同的文件中进行存储，构建分桶表。</p>
<p>如果有两张表按照相同的划分规则【按照Join的关联字段】将各自的数据进行划分，在Join时，就可以实现Bucket与Bucket的Join，避免不必要的比较。</p>
<h4 id="Hive表数据优化"><a href="#Hive表数据优化" class="headerlink" title="Hive表数据优化"></a>Hive表数据优化</h4><h5 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h5><table>
<thead>
<tr>
<th>文件格式</th>
<th>优点</th>
<th>缺点</th>
<th>应用场景</th>
</tr>
</thead>
<tbody><tr>
<td>TextFIle（默认）</td>
<td>1. 最简单的数据格式，不需要经过处理，可以直接查看<br />2. 可以使用任意的分隔符进行分割<br />3. 可以搭配Gzip、Bzip2、Snappy等压缩一起使用</td>
<td>1. 耗费存储空间，I/O性能较低<br />2. 结合压缩时Hive不进行数据切分合并，不能进行并行操作，查询效率低<br />3. 按行存储，读取列的性能差</td>
<td>1. 适合于小量数据的存储查询<br />2. 一般用于做第一层数据加载和测试使用</td>
</tr>
<tr>
<td>SequenceFile</td>
<td>1. 以二进制的KV形式存储数据，与底层交互更加友好，性能更快<br />2. 可压缩、可分割，优化磁盘利用率和I/O<br />3. 可并行操作数据，查询效率高<br />4. SequenceFile也可以用于存储多个小文件</td>
<td>1. 存储空间消耗最大<br />2. 与非Hadoop生态系统之外的工具不兼容<br />3. n 构建SequenceFile需要通过TextFile文件转化加载</td>
<td>1. 适合于小量数据，但是查询列比较多的场景</td>
</tr>
<tr>
<td>Parquet</td>
<td>1. 更高效的压缩和编码<br />2. 可用于多种数据处理框架</td>
<td>1. 不支持update, insert, delete, ACID</td>
<td>1. 适用于字段数非常多，无更新，只取部分列的查询</td>
</tr>
<tr>
<td>ORC（OptimizedRC File）</td>
<td>1. 列式存储，存储效率非常高<br />2. 可压缩，高效的列存取<br />3. 查询效率较高，支持索引<br />4. 支持矢量化查询</td>
<td>1. 加载时性能消耗较大<br />2. 需要通过text文件转化生成<br />3. 读取全量数据时性能较差</td>
<td>1. 适用于Hive中大型的存储、查询</td>
</tr>
</tbody></table>
<h5 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h5><ol>
<li><p>压缩的优点</p>
<ul>
<li>减小文件存储所占空间</li>
<li>加快文件传输效率，从而提高系统的处理速度</li>
<li>降低IO读写的次数</li>
</ul>
</li>
<li><p>压缩的缺点</p>
<ul>
<li>使用数据时需要先对文件解压，加重CPU负荷，压缩算法越复杂，解压时间越长</li>
</ul>
</li>
<li><p>压缩配置</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--开启输出压缩</span></span><br><span class="line"><span class="keyword">set</span> mapreduce.output.fileoutputformat.compress<span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line"><span class="comment">--配置压缩类型为Snappy</span></span><br><span class="line"><span class="keyword">set</span> mapreduce.output.fileoutputformat.compress.codec<span class="operator">=</span>org.apache.hadoop.io.compress.SnappyCodec;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 中间结果压缩</span></span><br><span class="line"><span class="keyword">set</span> hive.exec.compress.intermediate<span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line"><span class="keyword">set</span> hive.intermediate.compression.codec<span class="operator">=</span>org.apache.hadoop.io.compress.SnappyCodec;</span><br><span class="line"><span class="comment">-- 输出结果压缩</span></span><br><span class="line"><span class="keyword">set</span> hive.exec.compress.output<span class="operator">=</span><span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>永久配置：</p>
<ol>
<li><p>将以上MapReduce的配置写入mapred-site.xml中，重启Hadoop</p>
</li>
<li><p>将以上Hive的配置写入hive-site.xml中，重启Hive</p>
</li>
</ol>
</blockquote>
</li>
</ol>
<h5 id="存储优化"><a href="#存储优化" class="headerlink" title="存储优化"></a>存储优化</h5><ol>
<li><p>避免小文件的生成</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 如果hive的程序，只有maptask，将MapTask产生的所有小文件进行合并</span></span><br><span class="line"><span class="keyword">set</span> hive.merge.mapfiles<span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line"><span class="comment">-- 如果hive的程序，有Map和ReduceTask,将ReduceTask产生的所有小文件进行合并</span></span><br><span class="line"><span class="keyword">set</span> hive.merge.mapredfiles<span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line"><span class="comment">-- 每一个合并的文件的大小</span></span><br><span class="line"><span class="keyword">set</span> hive.merge.size.per.task<span class="operator">=</span><span class="number">256000000</span>;</span><br><span class="line"><span class="comment">-- 平均每个文件的大小，如果小于这个值就会进行合并</span></span><br><span class="line"><span class="keyword">set</span> hive.merge.smallfiles.avgsize<span class="operator">=</span><span class="number">16000000</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>读取小文件</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 设置Hive中底层MapReduce读取数据的输入类：将所有文件合并为一个大文件作为输入</span></span><br><span class="line"><span class="keyword">set</span> hive.input.format<span class="operator">=</span>org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;</span><br></pre></td></tr></table></figure></li>
<li><p>ORC文件索引</p>
<p>一个ORC文件包含一个或多个stripes(groups of row data)，每个stripe中包含了每个column的min/max值的索引数据，<strong>当查询中有&lt;,&gt;,=的操作时，会根据min/max值，跳过扫描不包含的stripes</strong>。而其中为<strong>每个stripe建立的包含min/max值的索引，就称为Row Group Index行组索引</strong>。</p>
<p>为了使Row Group Index有效利用，向表中加载数据时，<strong>必须对需要使用索引的字段进行排序</strong>，否则，min/max会失去意义。另外，<strong>这种索引主要用于数值型字段的范围查询过滤优化上</strong>。</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 开启索引配置</span></span><br><span class="line"><span class="keyword">set</span> hive.optimize.index.filter<span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表，并指定构建索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_sogou_orc_index</span><br><span class="line">stored <span class="keyword">as</span> orc tblproperties (&quot;orc.create.index&quot;<span class="operator">=</span>&quot;true&quot;)</span><br><span class="line"><span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_sogou_source</span><br><span class="line">distribute <span class="keyword">by</span> stime</span><br><span class="line">sort <span class="keyword">by</span> stime;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 当进行范围或者等值查询（&lt;,&gt;,=）时就可以基于构建的索引进行查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_sogou_orc_index <span class="keyword">where</span> stime <span class="operator">&gt;</span> <span class="string">&#x27;12:00:00&#x27;</span> <span class="keyword">and</span> stime <span class="operator">&lt;</span> <span class="string">&#x27;18:00:00&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>建表时候，通过表参数”orc.bloom.filter.columns”=”columnName……”来指定为哪些字段建立BloomFilter索引，这样，在生成数据的时候，会在每个stripe中，为该字段建立BloomFilter的数据结构，当查<strong>询条件中包含对该字段的=号过滤时候</strong>，先从BloomFilter中获取以下是否包含该值，如果不包含，则跳过该stripe。</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表指定创建布隆索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_sogou_orc_bloom</span><br><span class="line">stored <span class="keyword">as</span> orc tblproperties (&quot;orc.create.index&quot;<span class="operator">=</span>&quot;true&quot;,&quot;orc.bloom.filter.columns&quot;<span class="operator">=</span>&quot;stime,userid&quot;)</span><br><span class="line"><span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_sogou_source</span><br><span class="line">distribute <span class="keyword">by</span> stime</span><br><span class="line">sort <span class="keyword">by</span> stime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- stime的范围过滤可以走row group index，userid的过滤可以走bloom filter index</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">from</span> tb_sogou_orc_index</span><br><span class="line"><span class="keyword">where</span> stime <span class="operator">&gt;</span> <span class="string">&#x27;12:00:00&#x27;</span> <span class="keyword">and</span> stime <span class="operator">&lt;</span> <span class="string">&#x27;18:00:00&#x27;</span></span><br><span class="line">    <span class="keyword">and</span> userid <span class="operator">=</span> <span class="string">&#x27;3933365481995287&#x27;</span> ;</span><br></pre></td></tr></table></figure></li>
<li><p>ORC矢量化查询</p>
<p>Hive的默认查询执行引擎一次处理一行，而矢量化查询执行是一种Hive针对ORC文件操作的特性，目的是按照每批1024行读取数据，并且一次性对整个记录整合（而不是对单条记录）应用操作，提升了像过滤, 联合, 聚合等等操作的性能。</p>
<p>注意：要使用矢量化查询执行，就必须以<strong>ORC格式</strong>存储数据。</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> hive.vectorized.execution.enabled <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">set</span> hive.vectorized.execution.reduce.enabled <span class="operator">=</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="计算Job执行优化"><a href="#计算Job执行优化" class="headerlink" title="计算Job执行优化"></a>计算Job执行优化</h4><h5 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h5><p>常用语法命令如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN [FORMATTED<span class="operator">|</span>EXTENDED<span class="operator">|</span>DEPENDENCY<span class="operator">|</span><span class="keyword">AUTHORIZATION</span><span class="operator">|</span>]  query</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>FORMATTED：对执行计划进行格式化，返回JSON格式的执行计划</li>
<li>EXTENDED：提供一些额外的信息，比如文件的路径信息</li>
<li>DEPENDENCY：以JSON格式返回查询所依赖的表和分区的列表 </li>
<li>AUTHORIZATION：列出需要被授权的条目，包括输入与输出</li>
</ul>
</blockquote>
<h5 id="MapReduce属性优化"><a href="#MapReduce属性优化" class="headerlink" title="MapReduce属性优化"></a>MapReduce属性优化</h5><ol>
<li><p>本地模式</p>
<p>使用Hive的过程中，有一些数据量不大的表也会转换为MapReduce处理，提交到集群时，需要申请资源，等待资源分配，启动JVM进程，再运行Task，一系列的过程比较繁琐，本身数据量并不大，提交到YARN运行返回会导致性能较差的问题。</p>
<p>Hive为了解决这个问题，延用了MapReduce中的设计，提供本地计算模式，允许程序不提交给YARN，直接在本地运行，以便于提高小数据量程序的性能。</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 开启本地模式</span></span><br><span class="line"><span class="keyword">set</span> hive.exec.mode.local.auto <span class="operator">=</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果以下任意一个条件不满足，那么即使开启了本地模式，将依旧会提交给YARN集群运行：</p>
<ul>
<li>处理的数据量不超过128M</li>
<li>MapTask的个数不超过4个</li>
<li>ReduceTask的个数不超过1个</li>
</ul>
</blockquote>
</li>
<li><p>JVM重用</p>
<p>JVM正常指代一个Java进程，Hadoop默认使用派生的JVM来执行map-reducer，如果一个MapReduce程序中有100个Map，10个Reduce，Hadoop默认会为每个Task启动一个JVM来运行，那么就会启动100个JVM来运行MapTask，在JVM启动时内存开销大，尤其是Job大数据量情况，如果单个Task数据量比较小，也会申请JVM资源，这就导致了资源紧张及浪费的情况。</p>
<p>为了解决上述问题，MapReduce中提供了JVM重用机制来解决，JVM重用可以使得JVM实例在同一个job中重新使用N次，当一个Task运行结束以后，JVM不会进行释放，而是继续供下一个Task运行，直到运行了N个Task以后，就会释放，N的值可以在Hadoop的mapred-site.xml文件中进行配置，通常在10-20之间。</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Hadoop3之前的配置，在mapred-site.xml中添加以下参数</span></span><br><span class="line"><span class="comment">-- Hadoop3中已不再支持该选项</span></span><br><span class="line">mapreduce.job.jvm.numtasks<span class="operator">=</span><span class="number">10</span> </span><br></pre></td></tr></table></figure></li>
<li><p>并行执行</p>
<p>Hive在实现HQL计算运行时，会解析为多个Stage，有时候Stage彼此之间有依赖关系，只能挨个执行，但是在一些别的场景下，很多的Stage之间是没有依赖关系的，例如Union语句，Join语句等等，这些Stage没有依赖关系，但是Hive依旧默认挨个执行每个Stage，这样会导致性能非常差，我们可以通过修改参数，开启并行执行，当多个Stage之间没有依赖关系时，允许多个Stage并行执行，提高性能。</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 开启Stage并行化，默认为false</span></span><br><span class="line"><span class="keyword">SET</span> hive.exec.parallel<span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line"><span class="comment">-- 指定并行化线程数，默认为8</span></span><br><span class="line"><span class="keyword">SET</span> hive.exec.parallel.thread.number<span class="operator">=</span><span class="number">16</span>; </span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="Join优化"><a href="#Join优化" class="headerlink" title="Join优化"></a>Join优化</h5><ol>
<li><p>Map Join</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Hive中小表的大小限制</span></span><br><span class="line"><span class="comment">-- 2.0版本之前的控制属性</span></span><br><span class="line">hive.mapjoin.smalltable.filesize<span class="operator">=</span><span class="number">25</span>M</span><br><span class="line"><span class="comment">-- 2.0版本开始由以下参数控制</span></span><br><span class="line">hive.auto.convert.join.noconditionaltask.size<span class="operator">=</span><span class="number">512000000</span></span><br></pre></td></tr></table></figure></li>
<li><p>Reduce Join</p>
</li>
<li><p>Bucket Join</p>
<ol>
<li><p><strong>Bucket Join</strong></p>
<p>语法：<strong>clustered by colName</strong></p>
<p>参数：<strong>set</strong> hive.optimize.bucketmapjoin = <strong>true</strong>;</p>
<p>要求：分桶字段 = Join字段 ，桶的个数相等或者成倍数</p>
</li>
<li><p><strong>Sort Merge Bucket Join（SMB）</strong>：基于有序的数据Join</p>
<p>语法：<strong>clustered by colName sorted by (colName)</strong></p>
<p>参数：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 开启分桶SMB join</span></span><br><span class="line"><span class="keyword">set</span> hive.optimize.bucketmapjoin <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">set</span> hive.auto.convert.sortmerge.join<span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line"><span class="keyword">set</span> hive.optimize.bucketmapjoin.sortedmerge <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">set</span> hive.auto.convert.sortmerge.join.noconditionaltask<span class="operator">=</span><span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>要求：分桶字段 = Join字段 = 排序字段 ，桶的个数相等或者成倍数</p>
</li>
</ol>
</li>
</ol>
<h5 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h5><ol>
<li><p>关联优化</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 对有关联关系的操作进行解析时，可以尽量放在同一个MapReduce中实现</span></span><br><span class="line"><span class="keyword">set</span> hive.optimize.correlation<span class="operator">=</span><span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>优化引擎</p>
<ol>
<li><p><strong>RBO</strong></p>
<ul>
<li>rule basic optimise：基于规则的优化器</li>
<li>根据设定好的规则来对程序进行优化</li>
</ul>
</li>
<li><p><strong>CBO</strong></p>
<ul>
<li>cost basic optimise：基于代价的优化器</li>
<li>根据不同场景所需要付出的代价来合适选择优化的方案</li>
<li>对数据的分布的信息【数值出现的次数，条数，分布】来综合判断用哪种处理的方案是最佳方案</li>
</ul>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> hive.cbo.enable<span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line"><span class="keyword">set</span> hive.compute.query.using.stats<span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line"><span class="keyword">set</span> hive.stats.fetch.column.stats<span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line"><span class="keyword">set</span> hive.stats.fetch.partition.stats<span class="operator">=</span><span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><p>要想使用CBO引擎，必须构建数据的元数据【表行数、列的信息、分区的信息……】</p>
</li>
<li><p>提前获取这些信息，CBO才能基于代价选择合适的处理计划</p>
</li>
<li><p>所以CBO引擎一般搭配analyze分析优化器一起使用</p>
</li>
</ul>
</blockquote>
</li>
</ol>
</li>
<li><p>Analyze分析优化器</p>
<p>用于提前运行一个MapReduce程序将表或者分区的信息构建一些元数据【表的信息、分区信息、列的信息】，搭配CBO引擎一起使用。</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 构建分区信息元数据</span></span><br><span class="line">ANALYZE <span class="keyword">TABLE</span> tablename</span><br><span class="line">  [<span class="keyword">PARTITION</span>(partcol1[<span class="operator">=</span>val1], partcol2[<span class="operator">=</span>val2], ...)]</span><br><span class="line">  COMPUTE STATISTICS [noscan];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 构建列的元数据</span></span><br><span class="line">ANALYZE <span class="keyword">TABLE</span> tablename</span><br><span class="line">  [<span class="keyword">PARTITION</span>(partcol1[<span class="operator">=</span>val1], partcol2[<span class="operator">=</span>val2], ...)]</span><br><span class="line">  COMPUTE STATISTICS <span class="keyword">FOR</span> COLUMNS ( columns name1, columns name2...) [noscan];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看元数据</span></span><br><span class="line"><span class="keyword">DESC</span> FORMATTED [tablename] [columnname];</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="谓词下推（PPD）"><a href="#谓词下推（PPD）" class="headerlink" title="谓词下推（PPD）"></a>谓词下推（PPD）</h5><p>谓词下推 Predicate Pushdown（PPD）的思想简单点说就是在不影响最终结果的情况下，尽量将过滤条件提前执行。谓词下推后，过滤条件在map端执行，减少了map端的输出，降低了数据在集群上传输的量，降低了Reduce端的数据负载，节约了集群的资源，也提升了任务的性能。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 默认自动开启谓词下推</span></span><br><span class="line">hive.optimize.ppd<span class="operator">=</span><span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220519235158.png" alt="image-20220519235156534"></p>
<blockquote>
<ul>
<li>Inner Join和Full outer Join，条件写在on后面，还是where后面，性能上面没有区别</li>
<li>Left outer Join时 ，右侧的表写在on后面，左侧的表写在where后面，性能上有提高</li>
<li>Right outer Join时，左侧的表写在on后面、右侧的表写在where后面，性能上有提高</li>
<li>如果SQL语句中出现不确定结果的函数，也无法实现下推</li>
</ul>
</blockquote>
<h5 id="数据倾斜"><a href="#数据倾斜" class="headerlink" title="数据倾斜"></a>数据倾斜</h5><ol>
<li><p>group By的数据倾斜</p>
<p>当程序中出现group by或者count（distinct）等分组聚合的场景时，如果数据本身是倾斜的根据MapReduce的Hash分区规则，肯定会出现数据倾斜的现象。根本原因是因为分区规则导致的，所以我们可以通过以下几种方案来解决group by导致的数据倾斜的问题。</p>
<p><strong>方案一：开启Map端聚合</strong></p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 开启Map端聚合：Combiner</span></span><br><span class="line">hive.map.aggr<span class="operator">=</span><span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过减少Reduce的输入量，避免每个Task数据差异过大导致数据倾斜</p>
</blockquote>
<p><strong>方案二：实现随机分区</strong></p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- SQL中避免数据倾斜，构建随机分区</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> distribute <span class="keyword">by</span> rand();</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><p>distribute by用于指定底层的MapReduce按照哪个字段作为Key实现分区、分组等</p>
</li>
<li><p>默认由Hive自己选择，我们可以通过distribute by自己指定，通过rank函数随机值实现随机分区，避免数据倾斜</p>
</li>
</ul>
</blockquote>
<p><strong>方案三：自动构建随机分区并自动聚合</strong></p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 开启随机分区，走两个MapReduce </span></span><br><span class="line">hive.groupby.skewindata<span class="operator">=</span><span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><p>开启该参数以后，当前程序会自动通过两个MapReduce来运行</p>
</li>
<li><p>第一个MapReduce自动进行随机分区，然后实现聚合</p>
</li>
<li><p>第二个MapReduce将聚合的结果再按照业务进行处理，得到结果</p>
</li>
</ul>
</blockquote>
</li>
<li><p>Join的数据倾斜</p>
<p>实际业务需求中往往需要构建两张表的Join实现，如果两张表比较大，无法实现Map Join，只能走Reduce Join，那么当关联字段中某一种值过多的时候依旧会导致数据倾斜的问题，面对Join产生的数据倾斜，我们核心的思想是尽量避免Reduce Join的产生，优先使用Map Join来实现，但往往很多的Join场景不满足Map Join的需求，那么我们可以以下几种方案来解决Join产生的数据倾斜问题：</p>
<p><strong>方案一：提前过滤，将大数据变成小数据，实现Map Join</strong></p>
<p><strong>方案二：使用Bucket Join</strong></p>
<p><strong>方案三：使用Skew Join</strong></p>
<p>Skew Join是Hive中一种专门为了避免数据倾斜而设计的特殊的Join过程，这种Join的原理是将Map Join和Reduce Join进行合并，如果某个值出现了数据倾斜，就会将产生数据倾斜的数据单独使用Map Join来实现，其他没有产生数据倾斜的数据由Reduce Join来实现，这样就避免了Reduce Join中产生数据倾斜的问题，最终将Map Join的结果和Reduce Join的结果进行Union合并</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 开启运行过程中skewjoin</span></span><br><span class="line"><span class="keyword">set</span> hive.optimize.skewjoin<span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line"><span class="comment">-- 如果这个key的出现的次数超过这个范围</span></span><br><span class="line"><span class="keyword">set</span> hive.skewjoin.key<span class="operator">=</span><span class="number">100000</span>;</span><br><span class="line"><span class="comment">-- 在编译时判断是否会产生数据倾斜</span></span><br><span class="line"><span class="keyword">set</span> hive.optimize.skewjoin.compiletime<span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line"><span class="comment">-- 不合并，提升性能</span></span><br><span class="line"><span class="keyword">set</span> hive.optimize.union.remove<span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line"><span class="comment">-- 如果Hive的底层走的是MapReduce，必须开启这个属性，才能实现不合并</span></span><br><span class="line"><span class="keyword">set</span> mapreduce.input.fileinputformat.input.dir.recursive<span class="operator">=</span><span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Big Data</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark（二）：SparkCore</title>
    <url>/2022/05/22/Spark%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9ASparkCore/</url>
    <content><![CDATA[<p>本文为学习笔记，对应视频教程来自<a href="https://www.bilibili.com/video/BV11A411L7CK">尚硅谷大数据Spark教程从入门到精通</a></p>
<h2 id="Spark运行架构"><a href="#Spark运行架构" class="headerlink" title="Spark运行架构"></a>Spark运行架构</h2><h3 id="运行架构"><a href="#运行架构" class="headerlink" title="运行架构"></a>运行架构</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220522095955.png" alt="image-20220522095950890"></p>
<span id="more"></span>

<h3 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h3><h4 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h4><p>Spark 驱动器节点，用于执行 Spark 任务中的 main 方法，负责实际代码的执行工作。Driver 在 Spark 作业执行时主要负责：</p>
<ul>
<li>将用户程序转化为作业（job）</li>
<li>在 Executor 之间调度任务(task)</li>
<li>跟踪 Executor 的执行情况</li>
<li>通过 UI 展示查询运行情况</li>
</ul>
<h4 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h4><p>Spark Executor 是集群中工作节点（Worker）中的一个 JVM 进程，负责在 Spark 作业中运行具体任务（Task），任务彼此之间相互独立。Spark 应用启动时，Executor 节点被同时启动，并且始终伴随着整个 Spark 应用的生命周期而存在。如果有 Executor 节点发生了故障或崩溃，Spark 应用也可以继续执行，会将出错节点上的任务调度到其他 Executor 节点上继续运行。Executor 有两个核心功能：</p>
<ul>
<li>负责运行组成 Spark 应用的任务，并将结果返回给驱动器进程</li>
<li>它们通过自身的块管理器（Block Manager）为用户程序中要求缓存的 RDD 提供内存式存储。RDD 是直接缓存在 Executor 进程内的，因此任务可以在运行时充分利用缓存数据加速运算。</li>
</ul>
<h4 id="ApplicationMaster"><a href="#ApplicationMaster" class="headerlink" title="ApplicationMaster"></a>ApplicationMaster</h4><p>Hadoop 用户向 YARN 集群提交应用程序时,提交程序中应该包含 ApplicationMaster，用于向资源调度器申请执行任务的资源容器 Container，运行用户自己的程序任务 job，监控整个任务的执行，跟踪整个任务的状态，处理任务失败等异常情况。说的简单点就是，ResourceManager（资源）和 Driver（计算）之间的解耦合靠的就是 ApplicationMaster。</p>
<h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><h4 id="Executor-与-与-Core"><a href="#Executor-与-与-Core" class="headerlink" title="Executor 与 与 Core"></a>Executor 与 与 Core</h4><p>Spark Executor 是集群中运行在工作节点（Worker）中的一个 JVM 进程，是整个集群中的专门用于计算的节点。在提交应用中，可以提供参数指定计算节点的个数，以及对应的资源。这里的资源一般指的是工作节点 Executor 的内存大小和使用的虚拟 CPU 核（Core）数量。应用程序相关启动参数如下：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>–num-executors</td>
<td>配置 Executor 的数量</td>
</tr>
<tr>
<td>–executor-memory</td>
<td>配置每个 Executor 的内存大小</td>
</tr>
<tr>
<td>–executor-cores</td>
<td>配置每个 Executor 的虚拟 CPU core 数量</td>
</tr>
</tbody></table>
<h4 id="并行度（Parallelism-）"><a href="#并行度（Parallelism-）" class="headerlink" title="并行度（Parallelism ）"></a>并行度（Parallelism ）</h4><p>在分布式计算框架中一般都是多个任务同时执行，由于任务分布在不同的计算节点进行计算，所以能够真正地实现多任务并行执行。这里我们将整个集群并行执行任务的数量称之为并行度。</p>
<h3 id="提交流程"><a href="#提交流程" class="headerlink" title="提交流程"></a>提交流程</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220522105535.png" alt="image-20220522105532798"></p>
<h4 id="Yarn-Client-模式"><a href="#Yarn-Client-模式" class="headerlink" title="Yarn Client 模式"></a>Yarn Client 模式</h4><p>Client 模式将用于监控和调度的 Driver 模块在客户端执行，而不是在 Yarn 中，所以一般用于测试。</p>
<ul>
<li>Driver 在任务提交的本地机器上运行</li>
<li>Driver 启动后会和 ResourceManager 通讯申请启动 ApplicationMaster</li>
<li>ResourceManager 分配 container，在合适的 NodeManager 上启动 ApplicationMaster，负责向 ResourceManager 申请 Executor 内存</li>
<li>ResourceManager 接到 ApplicationMaster 的资源申请后会分配 container，然后 ApplicationMaster 在资源分配指定的 NodeManager 上启动 Executor 进程</li>
<li>Executor 进程启动后会向 Driver 反向注册，Executor 全部注册完成后 Driver 开始执行main 函数</li>
<li>之后执行到 Action 算子时，触发一个 Job，并根据宽依赖开始划分 stage，每个 stage 生成对应的 TaskSet，之后将 task 分发到各个 Executor 上执行</li>
</ul>
<h4 id="Yarn-Cluster-模式"><a href="#Yarn-Cluster-模式" class="headerlink" title="Yarn Cluster 模式"></a>Yarn Cluster 模式</h4><p>Cluster 模式将用于监控和调度的 Driver 模块启动在 Yarn 集群资源中执行。一般应用于实际生产环境。</p>
<ul>
<li>在 YARN Cluster 模式下，任务提交后会和 ResourceManager 通讯申请启动 ApplicationMaster</li>
<li>随后 ResourceManager 分配 container，在合适的 NodeManager 上启动 ApplicationMaster，此时的 ApplicationMaster 就是 Driver</li>
<li>Driver 启动后向 ResourceManager 申请 Executor 内存，ResourceManager 接到 ApplicationMaster 的资源申请后会分配container，然后在合适的 NodeManager 上启动 Executor 进程</li>
<li>Executor 进程启动后会向 Driver 反向注册，Executor 全部注册完成后 Driver 开始执行 main 函数</li>
<li>之后执行到 Action 算子时，触发一个 Job，并根据宽依赖开始划分 stage，每个 stage 生成对应的 TaskSet，之后将 task 分发到各个 Executor 上执行</li>
</ul>
<h2 id="Spark-核心编程"><a href="#Spark-核心编程" class="headerlink" title="Spark 核心编程"></a>Spark 核心编程</h2><p>Spark 计算框架为了能够进行高并发和高吞吐的数据处理，封装了三大数据结构，用于处理不同的应用场景。三大数据结构分别是：</p>
<ul>
<li>RDD : 弹性分布式数据集</li>
<li>累加器：分布式共享只写变量</li>
<li>广播变量：分布式共享只读变量</li>
</ul>
<h2 id="RDD"><a href="#RDD" class="headerlink" title="RDD"></a>RDD</h2><h3 id="RDD-概述"><a href="#RDD-概述" class="headerlink" title="RDD 概述"></a>RDD 概述</h3><p>RDD（Resilient Distributed Dataset）叫做弹性分布式数据集，是 Spark 中最基本的数据处理模型。代码中是一个抽象类，它代表一个弹性的、不可变、可分区、里面的元素可并行计算的集合。</p>
<blockquote>
<ul>
<li>弹性</li>
<li>存储的弹性：内存与磁盘的自动切换；</li>
<li>容错的弹性：数据丢失可以自动恢复；</li>
<li>计算的弹性：计算出错重试机制；</li>
<li>分片的弹性：可根据需要重新分片。</li>
<li>分布式：数据存储在大数据集群不同节点上</li>
<li>数据集：RDD 封装了计算逻辑，并不保存数据</li>
<li>数据抽象：RDD 是一个抽象类，需要子类具体实现</li>
<li>不可变：RDD 封装了计算逻辑，是不可以改变的，想要改变，只能产生新的 RDD，在新的 RDD 里面封装计算逻辑</li>
</ul>
</blockquote>
<h3 id="核心属性"><a href="#核心属性" class="headerlink" title="核心属性"></a>核心属性</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Internally, each RDD is characterized by five main properties:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  - A list of partitions</span></span><br><span class="line"><span class="comment"> *  - A function for computing each split</span></span><br><span class="line"><span class="comment"> *  - A list of dependencies on other RDDs</span></span><br><span class="line"><span class="comment"> *  - Optionally, a Partitioner for key-value RDDs (e.g. to say that the RDD is hash-partitioned)</span></span><br><span class="line"><span class="comment"> *  - Optionally, a list of preferred locations to compute each split on (e.g. block locations for</span></span><br><span class="line"><span class="comment"> *    an HDFS file)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h4 id="分区列表"><a href="#分区列表" class="headerlink" title="分区列表"></a>分区列表</h4><p>RDD 数据结构中存在分区列表，用于执行任务时并行计算，是实现分布式计算的重要属性。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implemented by subclasses to return the set of partitions in this RDD. This method will only</span></span><br><span class="line"><span class="comment"> * be called once, so it is safe to implement a time-consuming computation in it.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The partitions in this array must satisfy the following property:</span></span><br><span class="line"><span class="comment"> *   `rdd.partitions.zipWithIndex.forall &#123; case (partition, index) =&gt; partition.index == index &#125;`</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">def</span> <span class="title">getPartitions</span></span>: <span class="type">Array</span>[<span class="type">Partition</span>]</span><br></pre></td></tr></table></figure>

<h4 id="分区计算函数"><a href="#分区计算函数" class="headerlink" title="分区计算函数"></a>分区计算函数</h4><p>Spark 在计算时，是使用分区函数对每一个分区进行计算</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * :: DeveloperApi ::</span></span><br><span class="line"><span class="comment"> * Implemented by subclasses to compute a given partition.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeveloperApi</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute</span></span>(split: <span class="type">Partition</span>, context: <span class="type">TaskContext</span>): <span class="type">Iterator</span>[<span class="type">T</span>]</span><br></pre></td></tr></table></figure>

<h4 id="RDD-之间的依赖关系"><a href="#RDD-之间的依赖关系" class="headerlink" title="RDD 之间的依赖关系"></a>RDD 之间的依赖关系</h4><p>RDD 是计算模型的封装，当需求中需要将多个计算模型进行组合时，就需要将多个 RDD 建立依赖关系</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implemented by subclasses to return how this RDD depends on parent RDDs. This method will only</span></span><br><span class="line"><span class="comment"> * be called once, so it is safe to implement a time-consuming computation in it.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">def</span> <span class="title">getDependencies</span></span>: <span class="type">Seq</span>[<span class="type">Dependency</span>[_]] = deps</span><br></pre></td></tr></table></figure>

<h4 id="分区器（可选）"><a href="#分区器（可选）" class="headerlink" title="分区器（可选）"></a>分区器（可选）</h4><p>当数据为 KV 类型数据时，可以通过设定分区器自定义数据的分区</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Optionally overridden by subclasses to specify how they are partitioned. */</span></span><br><span class="line"><span class="meta">@transient</span> <span class="keyword">val</span> partitioner: <span class="type">Option</span>[<span class="type">Partitioner</span>] = <span class="type">None</span></span><br></pre></td></tr></table></figure>

<h4 id="首选位置（可选）"><a href="#首选位置（可选）" class="headerlink" title="首选位置（可选）"></a>首选位置（可选）</h4><p>计算数据时，可以根据计算节点的状态选择不同的节点位置进行计算</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Optionally overridden by subclasses to specify placement preferences.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">def</span> <span class="title">getPreferredLocations</span></span>(split: <span class="type">Partition</span>): <span class="type">Seq</span>[<span class="type">String</span>] = <span class="type">Nil</span></span><br></pre></td></tr></table></figure>

<h3 id="RDD-的执行流程"><a href="#RDD-的执行流程" class="headerlink" title="RDD 的执行流程"></a>RDD 的执行流程</h3><p>启动 Yarn 集群环境</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220522162734.png" alt="image-20220522162731363"></p>
<p>Spark 通过申请资源创建调度节点和计算节点</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220522163018.png" alt="image-20220522163016911"></p>
<p>Spark 框架根据需求将计算逻辑根据分区划分成不同的任务</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220522163530.png" alt="image-20220522163528738"></p>
<p>调度节点将任务根据计算节点状态发送到对应的计算节点进行计算</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220522164119.png" alt="image-20220522164117888"></p>
<h3 id="基础编程"><a href="#基础编程" class="headerlink" title="基础编程"></a>基础编程</h3><h4 id="RDD-的创建"><a href="#RDD-的创建" class="headerlink" title="RDD 的创建"></a>RDD 的创建</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark02_RDD_File</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// TODO 准备环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;RDD&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 创建RDD</span></span><br><span class="line">    <span class="comment">// 本地文件</span></span><br><span class="line">    <span class="keyword">val</span> localRdd: <span class="type">RDD</span>[<span class="type">String</span>] = sparkContext.textFile(<span class="string">&quot;data/1.txt&quot;</span>)</span><br><span class="line">    <span class="comment">// 分布式文件</span></span><br><span class="line">    <span class="keyword">val</span> hdfsRdd: <span class="type">RDD</span>[<span class="type">String</span>] = sparkContext.textFile(<span class="string">&quot;hdfs://spark152:8020/data/1.txt&quot;</span>)</span><br><span class="line">    <span class="comment">// textFile：以行为单位读取数据</span></span><br><span class="line">    <span class="comment">// wholeTextFiles：以文件为单位读取数据</span></span><br><span class="line">    <span class="keyword">val</span> wholeTextRdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">String</span>)] = sparkContext.wholeTextFiles(<span class="string">&quot;hdfs://spark152:8020/data&quot;</span>)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;================ localRdd ================&quot;</span>)</span><br><span class="line">    localRdd.collect().foreach(println)</span><br><span class="line">    println(<span class="string">&quot;================ hdfsRdd ================&quot;</span>)</span><br><span class="line">    hdfsRdd.collect().foreach(println)</span><br><span class="line">    println(<span class="string">&quot;================ wholeTextRdd ================&quot;</span>)</span><br><span class="line">    wholeTextRdd.collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 关闭环境</span></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">================ localRdd ================</span><br><span class="line">Hello World</span><br><span class="line">Hello Spark</span><br><span class="line">================ hdfsRdd ================</span><br><span class="line">Hello World</span><br><span class="line">Hello Spark</span><br><span class="line">================ wholeTextRdd ================</span><br><span class="line">(hdfs:<span class="regexp">//</span>spark152:<span class="number">8020</span><span class="regexp">/data/</span><span class="number">1</span>.txt,Hello World</span><br><span class="line">Hello Spark)</span><br><span class="line">(hdfs:<span class="regexp">//</span>spark152:<span class="number">8020</span><span class="regexp">/data/</span><span class="number">2</span>.txt,Hello World</span><br><span class="line">Hello Spark)</span><br></pre></td></tr></table></figure>

<h4 id="RDD-并行度与分区"><a href="#RDD-并行度与分区" class="headerlink" title="RDD 并行度与分区"></a>RDD 并行度与分区</h4><p>Spark 可以将一个作业切分多个任务后，发送给 Executor 节点并行计算，而能够并行计算的任务数量我们称之为并行度。这个数量可以在构建 RDD 时指定。这里的并行执行的任务数量，并不是指的切分任务的数量。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// Sequences need to be sliced at the same set of index positions for operations</span></span><br><span class="line">  <span class="comment">// like RDD.zip() to behave as expected</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">positions</span></span>(length: <span class="type">Long</span>, numSlices: <span class="type">Int</span>): <span class="type">Iterator</span>[(<span class="type">Int</span>, <span class="type">Int</span>)] = &#123;</span><br><span class="line">    (<span class="number">0</span> until numSlices).iterator.map &#123; i =&gt;</span><br><span class="line">      <span class="keyword">val</span> start = ((i * length) / numSlices).toInt</span><br><span class="line">      <span class="keyword">val</span> end = (((i + <span class="number">1</span>) * length) / numSlices).toInt</span><br><span class="line">      (start, end)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">slice</span></span>(from: <span class="type">Int</span>, until: <span class="type">Int</span>): <span class="type">Array</span>[<span class="type">T</span>] = &#123;</span><br><span class="line">   <span class="keyword">val</span> reprVal = repr</span><br><span class="line">   <span class="keyword">val</span> lo = math.max(from, <span class="number">0</span>)</span><br><span class="line">   <span class="keyword">val</span> hi = math.min(math.max(until, <span class="number">0</span>), reprVal.length)</span><br><span class="line">   <span class="keyword">val</span> size = math.max(hi - lo, <span class="number">0</span>)</span><br><span class="line">   <span class="keyword">val</span> result = java.lang.reflect.<span class="type">Array</span>.newInstance(elementClass, size)</span><br><span class="line">   <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="type">Array</span>.copy(reprVal, lo, result, <span class="number">0</span>, size)</span><br><span class="line">   &#125;</span><br><span class="line">   result.asInstanceOf[<span class="type">Array</span>[<span class="type">T</span>]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>内存数据的分区规则源码：</p>
<ol>
<li>length = 集合长度，numSlices = 分区个数</li>
<li>该函数将返回大小为 numSlices 的元组</li>
<li>元组的每一项开始位置 start = ((i * length) / numSlices).toInt</li>
<li>元组的每一项结束位置  end = (((i + 1) * length) / numSlices).toInt</li>
<li>将元组的每一项传入 slice(from: Int, until: Int) 实现左闭右开的分区规则</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> InputSplit[] getSplits(JobConf job, <span class="keyword">int</span> numSplits)</span><br><span class="line">  <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  StopWatch sw = <span class="keyword">new</span> StopWatch().start();</span><br><span class="line">  FileStatus[] stats = listStatus(job);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Save the number of input files for metrics/loadgen</span></span><br><span class="line">  job.setLong(NUM_INPUT_FILES, stats.length);</span><br><span class="line">  <span class="keyword">long</span> totalSize = <span class="number">0</span>;                           <span class="comment">// compute total size</span></span><br><span class="line">  <span class="keyword">boolean</span> ignoreDirs = !job.getBoolean(INPUT_DIR_RECURSIVE, <span class="keyword">false</span>)</span><br><span class="line">    &amp;&amp; job.getBoolean(INPUT_DIR_NONRECURSIVE_IGNORE_SUBDIRS, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">  List&lt;FileStatus&gt; files = <span class="keyword">new</span> ArrayList&lt;&gt;(stats.length);</span><br><span class="line">  <span class="keyword">for</span> (FileStatus file: stats) &#123;                <span class="comment">// check we have valid files</span></span><br><span class="line">    <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!ignoreDirs) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;Not a file: &quot;</span>+ file.getPath());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      files.add(file);</span><br><span class="line">      totalSize += file.getLen();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">long</span> goalSize = totalSize / (numSplits == <span class="number">0</span> ? <span class="number">1</span> : numSplits);</span><br><span class="line">  <span class="keyword">long</span> minSize = Math.max(job.getLong(org.apache.hadoop.mapreduce.lib.input.</span><br><span class="line">    FileInputFormat.SPLIT_MINSIZE, <span class="number">1</span>), minSplitSize);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// generate splits</span></span><br><span class="line">  ArrayList&lt;FileSplit&gt; splits = <span class="keyword">new</span> ArrayList&lt;FileSplit&gt;(numSplits);</span><br><span class="line">  NetworkTopology clusterMap = <span class="keyword">new</span> NetworkTopology();</span><br><span class="line">  <span class="keyword">for</span> (FileStatus file: files) &#123;</span><br><span class="line">    Path path = file.getPath();</span><br><span class="line">    <span class="keyword">long</span> length = file.getLen();</span><br><span class="line">    <span class="keyword">if</span> (length != <span class="number">0</span>) &#123;</span><br><span class="line">      FileSystem fs = path.getFileSystem(job);</span><br><span class="line">      BlockLocation[] blkLocations;</span><br><span class="line">      <span class="keyword">if</span> (file <span class="keyword">instanceof</span> LocatedFileStatus) &#123;</span><br><span class="line">        blkLocations = ((LocatedFileStatus) file).getBlockLocations();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        blkLocations = fs.getFileBlockLocations(file, <span class="number">0</span>, length);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (isSplitable(fs, path)) &#123;</span><br><span class="line">        <span class="keyword">long</span> blockSize = file.getBlockSize();</span><br><span class="line">        <span class="keyword">long</span> splitSize = computeSplitSize(goalSize, minSize, blockSize);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> bytesRemaining = length;</span><br><span class="line">        <span class="keyword">while</span> (((<span class="keyword">double</span>) bytesRemaining)/splitSize &gt; SPLIT_SLOP) &#123;</span><br><span class="line">          String[][] splitHosts = getSplitHostsAndCachedHosts(blkLocations,</span><br><span class="line">              length-bytesRemaining, splitSize, clusterMap);</span><br><span class="line">          splits.add(makeSplit(path, length-bytesRemaining, splitSize,</span><br><span class="line">              splitHosts[<span class="number">0</span>], splitHosts[<span class="number">1</span>]));</span><br><span class="line">          bytesRemaining -= splitSize;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bytesRemaining != <span class="number">0</span>) &#123;</span><br><span class="line">          String[][] splitHosts = getSplitHostsAndCachedHosts(blkLocations, length</span><br><span class="line">              - bytesRemaining, bytesRemaining, clusterMap);</span><br><span class="line">          splits.add(makeSplit(path, length - bytesRemaining, bytesRemaining,</span><br><span class="line">              splitHosts[<span class="number">0</span>], splitHosts[<span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">          <span class="comment">// Log only if the file is big enough to be splitted</span></span><br><span class="line">          <span class="keyword">if</span> (length &gt; Math.min(file.getBlockSize(), minSize)) &#123;</span><br><span class="line">            LOG.debug(<span class="string">&quot;File is not splittable so no parallelization &quot;</span></span><br><span class="line">                + <span class="string">&quot;is possible: &quot;</span> + file.getPath());</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String[][] splitHosts = getSplitHostsAndCachedHosts(blkLocations,<span class="number">0</span>,length,clusterMap);</span><br><span class="line">        splits.add(makeSplit(path, <span class="number">0</span>, length, splitHosts[<span class="number">0</span>], splitHosts[<span class="number">1</span>]));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">      <span class="comment">//Create empty hosts array for zero length files</span></span><br><span class="line">      splits.add(makeSplit(path, <span class="number">0</span>, length, <span class="keyword">new</span> String[<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sw.stop();</span><br><span class="line">  <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">    LOG.debug(<span class="string">&quot;Total # of splits generated by getSplits: &quot;</span> + splits.size()</span><br><span class="line">        + <span class="string">&quot;, TimeTaken: &quot;</span> + sw.now(TimeUnit.MILLISECONDS));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> splits.toArray(<span class="keyword">new</span> FileSplit[splits.size()]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>文件数据的分区规则源码：</p>
<ol>
<li>这段代码只能分析出部分实现逻辑，但是并不能完全解释文件数据的分区行为</li>
<li>totalSize = 数据的总长度，goalSize = totalSize / numSplits  为每片分区的目标长度</li>
<li>splitSize = Math.max(minSize, Math.min(goalSize, blockSize)) 实际分片大小</li>
<li>start = length-bytesRemaining，bytesRemaining -= splitSize</li>
</ol>
</blockquote>
<h4 id="RDD-转换算子"><a href="#RDD-转换算子" class="headerlink" title="RDD 转换算子"></a>RDD 转换算子</h4><h5 id="Value-类型"><a href="#Value-类型" class="headerlink" title="Value 类型"></a>Value 类型</h5><h6 id="map"><a href="#map" class="headerlink" title="map"></a>map</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从服务器日志数据 apache.log 中获取用户请求 URL 资源路径</span></span><br><span class="line"><span class="comment"> * 83.149.9.216 - - 17/05/2015:10:05:03 +0000 GET /presentations/logstash-monitorama-2013/images/kibana-search.png</span></span><br><span class="line"><span class="comment"> * 83.149.9.216 - - 17/05/2015:10:05:43 +0000 GET /presentations/logstash-monitorama-2013/images/kibana-dashboard3.png</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_RDD_Operator_Transform_Example</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">String</span>] = sparkContext.textFile(<span class="string">&quot;data/apache.log&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> mapRdd: <span class="type">RDD</span>[<span class="type">String</span>] = rdd.map(</span><br><span class="line">      line =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> array: <span class="type">Array</span>[<span class="type">String</span>] = line.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">        array(<span class="number">6</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    mapRdd.collect().foreach(println)</span><br><span class="line">    </span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="mapPartitions"><a href="#mapPartitions" class="headerlink" title="mapPartitions"></a>mapPartitions</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取每个分区的最大值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_RDD_Operator_Transform_MapPartitions</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>),<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> mapPartitionsRdd: <span class="type">RDD</span>[<span class="type">Int</span>] = rdd.mapPartitions(</span><br><span class="line">      iterator =&gt; <span class="type">List</span>(iterator.max).iterator</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    mapPartitionsRdd.collect().foreach(println)</span><br><span class="line">    </span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>map 和 mapPartitions 的区别：</p>
<ol>
<li><p>数据处理角度</p>
<p>Map 算子是分区内一个数据一个数据的执行，类似于串行操作。而 mapPartitions 算子是以分区为单位进行批处理操作。</p>
</li>
<li><p>功能的角度</p>
<p>Map 算子主要目的将数据源中的数据进行转换和改变。但是不会减少或增多数据。MapPartitions 算子需要传递一个迭代器，返回一个迭代器，没有要求的元素的个数保持不变，所以可以增加或减少数据</p>
</li>
<li><p>性能的角度</p>
<p>Map 算子因为类似于串行操作，所以性能比较低，而是 mapPartitions 算子类似于批处理，所以性能较高。但是 mapPartitions 算子会长时间占用内存，那么这样会导致内存可能不够用，出现内存溢出的错误。</p>
</li>
</ol>
</blockquote>
<h6 id="mapPartitionsWithIndex"><a href="#mapPartitionsWithIndex" class="headerlink" title="mapPartitionsWithIndex"></a>mapPartitionsWithIndex</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取第二个数据分区的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark04_RDD_Operator_Transform_MapPartitionsWithIndex</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> mapPartitionWithIndexRdd: <span class="type">RDD</span>[<span class="type">Int</span>] = rdd.mapPartitionsWithIndex(</span><br><span class="line">      (index, iterator) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">1</span>) &#123;</span><br><span class="line">          iterator</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">          <span class="type">Nil</span>.iterator</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    mapPartitionWithIndexRdd.collect().foreach(println)</span><br><span class="line">    </span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对字符串扁平化处理为单词集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark05_RDD_Operator_Transform_FlatMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">String</span>] = sparkContext.makeRDD(<span class="type">List</span>(<span class="string">&quot;Hello World&quot;</span>, <span class="string">&quot;Hello Spark&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> flatMapRdd: <span class="type">RDD</span>[<span class="type">String</span>] = rdd.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"></span><br><span class="line">    flatMapRdd.collect().foreach(println)</span><br><span class="line">    </span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="glom"><a href="#glom" class="headerlink" title="glom"></a>glom</h6><p>将同一个分区的数据直接转换为相同类型的内存数组进行处理，分区不变</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算所有分区最大值求和（分区内取最大值，分区间最大值求和）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">object</span> Spark06_RDD_Operator_Transform_Glom &#123;</span><br><span class="line"></span><br><span class="line">  def main(args: Array<span class="literal">[S<span class="identifier">tring</span>]</span>): Unit = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: SparkConf = <span class="keyword">new</span> <span class="constructor">SparkConf()</span>.set<span class="constructor">Master(<span class="string">&quot;local[*]&quot;</span>)</span>.set<span class="constructor">AppName(<span class="string">&quot;Operator&quot;</span>)</span></span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="constructor">SparkContext(<span class="params">sparkConf</span>)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: RDD<span class="literal">[I<span class="identifier">nt</span>]</span> = sparkContext.make<span class="constructor">RDD(List(1, 2, 3, 4)</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> glomRdd: RDD<span class="literal">[A<span class="identifier">rray</span>[I<span class="identifier">nt</span>]</span>] = rdd.glom<span class="literal">()</span></span><br><span class="line">    <span class="keyword">val</span> mapRdd: RDD<span class="literal">[I<span class="identifier">nt</span>]</span> = glomRdd.map(<span class="module-access"><span class="module"><span class="identifier">_</span>.</span></span>max)</span><br><span class="line"></span><br><span class="line">    println(mapRdd.collect<span class="literal">()</span>.sum)</span><br><span class="line">    </span><br><span class="line">    sparkContext.stop<span class="literal">()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy"></a>groupBy</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将 List(&quot;Hello&quot;, &quot;hive&quot;, &quot;hbase&quot;, &quot;Hadoop&quot;) 根据单词首写字母进行分组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark07_RDD_Operator_Transform_GroupBy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">String</span>] = sparkContext.makeRDD(<span class="type">List</span>(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;hive&quot;</span>, <span class="string">&quot;hbase&quot;</span>, <span class="string">&quot;Hadoop&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> groupRdd: <span class="type">RDD</span>[(<span class="type">Char</span>, <span class="type">Iterable</span>[<span class="type">String</span>])] = rdd.groupBy(_.charAt(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    groupRdd.collect().foreach(println)</span><br><span class="line">    </span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将数据根据指定的规则进行分组，分区默认不变，但是数据会被打乱重新组合，我们将这样的操作称之为 shuffle；</p>
<p>一个组的数据被放到一个分区当中，但是并不是说一个分区之中只有一个组。</p>
</blockquote>
<h6 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从服务器日志数据 apache.log 中获取 2015 年 5 月 17 日的数据</span></span><br><span class="line"><span class="comment"> * 83.149.9.216 - - 17/05/2015:10:05:03 +0000 GET /presentations/logstash-monitorama-2013/images/kibana-search.png</span></span><br><span class="line"><span class="comment"> * 83.149.9.216 - - 17/05/2015:10:05:43 +0000 GET /presentations/logstash-monitorama-2013/images/kibana-dashboard3.png</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark08_RDD_Operator_Transform_Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">String</span>] = sparkContext.textFile(<span class="string">&quot;data/apache.log&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> filterRdd: <span class="type">RDD</span>[<span class="type">String</span>] = rdd.filter(</span><br><span class="line">      line =&gt; &#123;</span><br><span class="line">        line.split(<span class="string">&quot; &quot;</span>)(<span class="number">3</span>).startsWith(<span class="string">&quot;17/05/2015&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    filterRdd.collect().foreach(println)</span><br><span class="line">    </span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return a sampled subset of this RDD.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param withReplacement can elements be sampled multiple times (replaced when sampled out)</span></span><br><span class="line"><span class="comment"> * @param fraction expected size of the sample as a fraction of this RDD&#x27;s size</span></span><br><span class="line"><span class="comment"> *  without replacement: probability that each element is chosen; fraction must be [0, 1]</span></span><br><span class="line"><span class="comment"> *  with replacement: expected number of times each element is chosen; fraction must be greater</span></span><br><span class="line"><span class="comment"> *  than or equal to 0</span></span><br><span class="line"><span class="comment"> * @param seed seed for the random number generator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @note This is NOT guaranteed to provide exactly the fraction of the count</span></span><br><span class="line"><span class="comment"> * of the given [[RDD]].</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sample</span></span>(</span><br><span class="line">    withReplacement: <span class="type">Boolean</span>,</span><br><span class="line">    fraction: <span class="type">Double</span>,</span><br><span class="line">    seed: <span class="type">Long</span> = <span class="type">Utils</span>.random.nextLong)</span><br></pre></td></tr></table></figure>

<h6 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark09_RDD_Operator_Transform_Distinct</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 去重通过 RDD 的 partitioner 逻辑：map(x =&gt; (x, null)).reduceByKey((x, _) =&gt; x, numPartitions).map(_._1)</span></span><br><span class="line">    rdd.distinct().collect().foreach(println)</span><br><span class="line">    </span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="coalesce"><a href="#coalesce" class="headerlink" title="coalesce"></a>coalesce</h6><p>根据数据量缩减分区，用于大数据集过滤后，提高小数据集的执行效率当 spark 程序中，存在过多的小任务的时候，可以通过 coalesce 方法，收缩合并分区，减少分区的个数，减小任务调度成本</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return a new RDD that is reduced into `numPartitions` partitions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This results in a narrow dependency, e.g. if you go from 1000 partitions</span></span><br><span class="line"><span class="comment"> * to 100 partitions, there will not be a shuffle, instead each of the 100</span></span><br><span class="line"><span class="comment"> * new partitions will claim 10 of the current partitions. If a larger number</span></span><br><span class="line"><span class="comment"> * of partitions is requested, it will stay at the current number of partitions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * However, if you&#x27;re doing a drastic coalesce, e.g. to numPartitions = 1,</span></span><br><span class="line"><span class="comment"> * this may result in your computation taking place on fewer nodes than</span></span><br><span class="line"><span class="comment"> * you like (e.g. one node in the case of numPartitions = 1). To avoid this,</span></span><br><span class="line"><span class="comment"> * you can pass shuffle = true. This will add a shuffle step, but means the</span></span><br><span class="line"><span class="comment"> * current upstream partitions will be executed in parallel (per whatever</span></span><br><span class="line"><span class="comment"> * the current partitioning is).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @note With shuffle = true, you can actually coalesce to a larger number</span></span><br><span class="line"><span class="comment"> * of partitions. This is useful if you have a small number of partitions,</span></span><br><span class="line"><span class="comment"> * say 100, potentially with a few partitions being abnormally large. Calling</span></span><br><span class="line"><span class="comment"> * coalesce(1000, shuffle = true) will result in 1000 partitions with the</span></span><br><span class="line"><span class="comment"> * data distributed using a hash partitioner. The optional partition coalescer</span></span><br><span class="line"><span class="comment"> * passed in must be serializable.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coalesce</span></span>(numPartitions: <span class="type">Int</span>, shuffle: <span class="type">Boolean</span> = <span class="literal">false</span>,</span><br><span class="line">             partitionCoalescer: <span class="type">Option</span>[<span class="type">PartitionCoalescer</span>] = <span class="type">Option</span>.empty)</span><br><span class="line">            (<span class="keyword">implicit</span> ord: <span class="type">Ordering</span>[<span class="type">T</span>] = <span class="literal">null</span>)</span><br></pre></td></tr></table></figure>

<h6 id="repartition"><a href="#repartition" class="headerlink" title="repartition"></a>repartition</h6><p>该操作内部其实执行的是 coalesce 操作，参数 shuffle 的默认值为 true。无论是将分区数多的 RDD 转换为分区数少的 RDD，还是将分区数少的 RDD 转换为分区数多的 RDD，repartition 操作都可以完成，因为无论如何都会经 shuffle 过程。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return a new RDD that has exactly numPartitions partitions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Can increase or decrease the level of parallelism in this RDD. Internally, this uses</span></span><br><span class="line"><span class="comment"> * a shuffle to redistribute data.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If you are decreasing the number of partitions in this RDD, consider using `coalesce`,</span></span><br><span class="line"><span class="comment"> * which can avoid performing a shuffle.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repartition</span></span>(numPartitions: <span class="type">Int</span>)(<span class="keyword">implicit</span> ord: <span class="type">Ordering</span>[<span class="type">T</span>] = <span class="literal">null</span>): <span class="type">RDD</span>[<span class="type">T</span>] = withScope &#123;</span><br><span class="line">  coalesce(numPartitions, shuffle = <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="sortBy"><a href="#sortBy" class="headerlink" title="sortBy"></a>sortBy</h6><p>该操作用于排序数据，默认为升序排列，第二个参数可以改变排序方式。排序后新产生的 RDD 的分区数与原 RDD 的分区数一致,中间存在 shuffle 的过。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark10_RDD_Operator_Transform_SortBy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">Int</span>)] = sparkContext.makeRDD(<span class="type">List</span>((<span class="number">1</span>, <span class="number">9</span>), (<span class="number">2</span>, <span class="number">8</span>), (<span class="number">3</span>, <span class="number">7</span>)))</span><br><span class="line">    </span><br><span class="line">    rdd.sortBy(_._1).collect().foreach(println)</span><br><span class="line">    </span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="双-Value-类型"><a href="#双-Value-类型" class="headerlink" title="双 Value 类型"></a>双 Value 类型</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark11_RDD_Operator_Transform</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd1: <span class="type">RDD</span>[<span class="type">Int</span>] = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">    <span class="keyword">val</span> rdd2: <span class="type">RDD</span>[<span class="type">Int</span>] = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// intersection 交集</span></span><br><span class="line">    println(rdd1.intersection(rdd2).collect().mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// union 并集</span></span><br><span class="line">    println(rdd1.union(rdd2).collect().mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// subtract 差集</span></span><br><span class="line">    println(rdd1.subtract(rdd2).collect().mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// zip 拉链：将两个 RDD 中的元素，以键值对的形式进行合并。</span></span><br><span class="line">    println(rdd1.zip(rdd2).collect().mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    </span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Key-Value-类型"><a href="#Key-Value-类型" class="headerlink" title="Key - Value 类型"></a>Key - Value 类型</h5><h6 id="partitionBy"><a href="#partitionBy" class="headerlink" title="partitionBy"></a>partitionBy</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark12_RDD_Operator_Transform_PartitionBy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    rdd.map((_, <span class="number">1</span>)).</span><br><span class="line">      partitionBy(<span class="keyword">new</span> <span class="type">HashPartitioner</span>(<span class="number">2</span>)).</span><br><span class="line">      saveAsTextFile(<span class="string">&quot;output&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="reduceByKey"><a href="#reduceByKey" class="headerlink" title="reduceByKey"></a>reduceByKey</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将数据按照相同的 Key 对 Value 进行聚合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark13_RDD_Operator_Transform_ReduceByKey</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sparkContext.makeRDD(<span class="type">List</span>(</span><br><span class="line">      (<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">3</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">4</span>)</span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reduceByKey 中如果 Key 的数据只有一个，是不会参与运算的</span></span><br><span class="line">    rdd.reduceByKey((x, y) =&gt; &#123;</span><br><span class="line">      println(<span class="string">s&quot;x = <span class="subst">$&#123;x&#125;</span>, y = <span class="subst">$&#123;y&#125;</span>&quot;</span>)</span><br><span class="line">      x + y</span><br><span class="line">    &#125;).collect.foreach(println)</span><br><span class="line">    </span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="groupByKey"><a href="#groupByKey" class="headerlink" title="groupByKey"></a>groupByKey</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将数据按照相同的 Key 对 Value 进行聚合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark14_RDD_Operator_Transform_GroupByKey</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sparkContext.makeRDD(<span class="type">List</span>(</span><br><span class="line">      (<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">3</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">4</span>)</span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// groupByKey：将数据源中，相同 Key 的数据分在一个组中，形成一个对偶元组</span></span><br><span class="line">    <span class="keyword">val</span> groupRdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Iterable</span>[<span class="type">Int</span>])] = rdd.groupByKey()</span><br><span class="line"></span><br><span class="line">    groupRdd.collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="aggregateByKey"><a href="#aggregateByKey" class="headerlink" title="aggregateByKey"></a>aggregateByKey</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将数据根据不同的规则进行分区内计算和分区间计算</span></span><br><span class="line"><span class="comment"> * 需求：分区内求最大值，分区间相加</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark15_RDD_Operator_Transform_AggregateByKey</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sparkContext.makeRDD(<span class="type">List</span>(</span><br><span class="line">      (<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">3</span>),</span><br><span class="line">      (<span class="string">&quot;b&quot;</span>, <span class="number">4</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">5</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">6</span>)</span><br><span class="line">    ), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// aggregateByKey 存在两个柯里化，有两个参数列表</span></span><br><span class="line">    <span class="comment">// 第一个参数列表需要传入一个参数表示初始值</span></span><br><span class="line">    <span class="comment">// 第二个参数列表需要传递两个参数</span></span><br><span class="line">    <span class="comment">//    第一个参数表示分区内计算规则</span></span><br><span class="line">    <span class="comment">//    第二个参数表示分区间计算规则</span></span><br><span class="line">    rdd.aggregateByKey(<span class="type">Int</span>.<span class="type">MinValue</span>)(</span><br><span class="line">      math.max(_, _),</span><br><span class="line">      _ + _</span><br><span class="line">    ).collect.foreach(println)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需求：求不同 Key 的 Value 平均值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark15_RDD_Operator_Transform_AggregateByKey_Average</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sparkContext.makeRDD(<span class="type">List</span>(</span><br><span class="line">      (<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">3</span>),</span><br><span class="line">      (<span class="string">&quot;b&quot;</span>, <span class="number">4</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">5</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">6</span>)</span><br><span class="line">    ), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (K, V) -&gt; (K, (V, 1)) -&gt; (K, (sum(V), sum(1))) -&gt; (Key, sum(V)/ sum(1))</span></span><br><span class="line">    println(<span class="string">&quot;---------- method one ----------&quot;</span>)</span><br><span class="line">    rdd.map(</span><br><span class="line">      tuple =&gt; &#123;</span><br><span class="line">        (tuple._1, (tuple._2, <span class="number">1</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    ).reduceByKey((t1, t2) =&gt; &#123;</span><br><span class="line">      (t1._1 + t2._1, t1._2 + t2._2)</span><br><span class="line">    &#125;).map(</span><br><span class="line">      tuple =&gt; &#123;</span><br><span class="line">        (tuple._1, tuple._2._1 / tuple._2._2)</span><br><span class="line">      &#125;</span><br><span class="line">    ).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (K, V) -&gt; (K, (sum(1), sum(V)) -&gt; (K, sum(V) / sum(1)</span></span><br><span class="line">    println(<span class="string">&quot;---------- method two ----------&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> aggRdd: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">Int</span>, <span class="type">Int</span>))] = rdd.aggregateByKey((<span class="number">0</span>, <span class="number">0</span>))(</span><br><span class="line">      (t, v) =&gt; &#123;</span><br><span class="line">        (t._1 + <span class="number">1</span>, t._2 + v)</span><br><span class="line">      &#125;,</span><br><span class="line">      (t1, t2) =&gt; &#123;</span><br><span class="line">        (t1._1 + t2._1, t1._2 + t2._2)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    aggRdd.map(</span><br><span class="line">      t =&gt; &#123;</span><br><span class="line">        (t._1, t._2._2 / t._2._1)</span><br><span class="line">      &#125;</span><br><span class="line">    ).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="foldByKey"><a href="#foldByKey" class="headerlink" title="foldByKey"></a>foldByKey</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当分区内计算规则和分区间计算规则相同时，aggregateByKey 就可以简化为 foldByKey</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark16_RDD_Operator_Transform_FoldByKey</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sparkContext.makeRDD(<span class="type">List</span>(</span><br><span class="line">      (<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">3</span>),</span><br><span class="line">      (<span class="string">&quot;b&quot;</span>, <span class="number">4</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">5</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">6</span>)</span><br><span class="line">    ), <span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    rdd.foldByKey(<span class="type">Int</span>.<span class="type">MinValue</span>)(_ + _).collect.foreach(println)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="combineByKey"><a href="#combineByKey" class="headerlink" title="combineByKey"></a>combineByKey</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将数据 List((&quot;a&quot;, 1), (&quot;a&quot;, 2), (&quot;b&quot;, 3), (&quot;b&quot;, 4), (&quot;b&quot;, 5), (&quot;a&quot;, 6))求每个 key 的平均值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark17_RDD_Operator_Transform_CombineByKey</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sparkContext.makeRDD(<span class="type">List</span>(</span><br><span class="line">      (<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">3</span>),</span><br><span class="line">      (<span class="string">&quot;b&quot;</span>, <span class="number">4</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">5</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">6</span>)</span><br><span class="line">    ), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> combineRdd: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">Int</span>, <span class="type">Int</span>))] = rdd.combineByKey(</span><br><span class="line">      (_, <span class="number">1</span>),</span><br><span class="line">      (x: (<span class="type">Int</span>, <span class="type">Int</span>), y) =&gt; &#123;</span><br><span class="line">        (x._1 + y, x._2 + <span class="number">1</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      (x: (<span class="type">Int</span>, <span class="type">Int</span>), y: (<span class="type">Int</span>, <span class="type">Int</span>)) =&gt; &#123;</span><br><span class="line">        (x._1 + y._1, x._2 + y._2)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    combineRdd.map(</span><br><span class="line">      x =&gt; &#123;</span><br><span class="line">        (x._1, x._2._1 / x._2._2)</span><br><span class="line">      &#125;</span><br><span class="line">    ).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>reduceByKey、foldByKey、aggregateByKey、combineByKey 的区别？</p>
<ul>
<li>reduceByKey: 相同 key 的第一个数据不进行任何计算，分区内和分区间计算规则相同</li>
<li>FoldByKey: 相同 key 的第一个数据和初始值进行分区内计算，分区内和分区间计算规则相同</li>
<li>AggregateByKey：相同 key 的第一个数据和初始值进行分区内计算，分区内和分区间计算规则可以不相同</li>
<li>CombineByKey:当计算时，发现数据结构不满足要求时，可以让第一个数据转换结构。分区内和分区间计算规则不相同。</li>
</ul>
</blockquote>
<h6 id="sortByKey"><a href="#sortByKey" class="headerlink" title="sortByKey"></a>sortByKey</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在一个(K,V)的 RDD 上调用，K 必须实现 Ordered 接口(特质)，返回一个按照 key 进行排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark18_RDD_Operator_Transform_SortByKey</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sparkContext.makeRDD(<span class="type">List</span>(</span><br><span class="line">      (<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">3</span>),</span><br><span class="line">      (<span class="string">&quot;b&quot;</span>, <span class="number">4</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">5</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">6</span>)</span><br><span class="line">    ), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;ascending = true&quot;</span>)</span><br><span class="line">    rdd.sortByKey(<span class="literal">true</span>).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;ascending = false&quot;</span>)</span><br><span class="line">    rdd.sortByKey(<span class="literal">false</span>).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="join"><a href="#join" class="headerlink" title="join"></a>join</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * -------- join --------</span></span><br><span class="line"><span class="comment"> * (a,(1,4))</span></span><br><span class="line"><span class="comment"> * (b,(2,5))</span></span><br><span class="line"><span class="comment"> * -------- leftOuterJoin --------</span></span><br><span class="line"><span class="comment"> * (a,(1,Some(4)))</span></span><br><span class="line"><span class="comment"> * (b,(2,Some(5)))</span></span><br><span class="line"><span class="comment"> * (c,(3,None))</span></span><br><span class="line"><span class="comment"> * -------- rightOuterJoin --------</span></span><br><span class="line"><span class="comment"> * (a,(Some(1),4))</span></span><br><span class="line"><span class="comment"> * (b,(Some(2),5))</span></span><br><span class="line"><span class="comment"> * (d,(None,6))</span></span><br><span class="line"><span class="comment"> * (d,(None,7))</span></span><br><span class="line"><span class="comment"> * -------- cogroup --------</span></span><br><span class="line"><span class="comment"> * (a,(CompactBuffer(1),CompactBuffer(4)))</span></span><br><span class="line"><span class="comment"> * (b,(CompactBuffer(2),CompactBuffer(5)))</span></span><br><span class="line"><span class="comment"> * (c,(CompactBuffer(3),CompactBuffer()))</span></span><br><span class="line"><span class="comment"> * (d,(CompactBuffer(),CompactBuffer(6, 7)))</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark19_RDD_Operator_Transform_Join</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd1: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sparkContext.makeRDD(<span class="type">List</span>((<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;c&quot;</span>, <span class="number">3</span>)))</span><br><span class="line">    <span class="keyword">val</span> rdd2: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sparkContext.makeRDD(<span class="type">List</span>((<span class="string">&quot;a&quot;</span>, <span class="number">4</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">5</span>), (<span class="string">&quot;d&quot;</span>, <span class="number">6</span>), (<span class="string">&quot;d&quot;</span>, <span class="number">7</span>)))</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;-------- join --------&quot;</span>)</span><br><span class="line">    rdd1.join(rdd2).collect().foreach(println)</span><br><span class="line">    println(<span class="string">&quot;-------- leftOuterJoin --------&quot;</span>)</span><br><span class="line">    rdd1.leftOuterJoin(rdd2).collect().foreach(println)</span><br><span class="line">    println(<span class="string">&quot;-------- rightOuterJoin --------&quot;</span>)</span><br><span class="line">    rdd1.rightOuterJoin(rdd2).collect().foreach(println)</span><br><span class="line">    println(<span class="string">&quot;-------- cogroup --------&quot;</span>)</span><br><span class="line">    rdd1.cogroup(rdd2).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="案例实操"><a href="#案例实操" class="headerlink" title="案例实操"></a>案例实操</h5><h6 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h6><p>agent.log：时间戳，省份，城市，用户，广告，中间字段使用空格分隔</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1516609143867 6 7 64 16</span><br><span class="line">1516609143869 9 4 75 18</span><br><span class="line">1516609143869 1 7 87 12</span><br><span class="line">1516609143869 2 8 92 9</span><br><span class="line">1516609143869 6 7 84 24</span><br><span class="line">1516609143869 1 8 95 5</span><br><span class="line">1516609143869 8 1 90 29</span><br><span class="line">1516609143869 3 3 36 16</span><br></pre></td></tr></table></figure>

<h6 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h6><p>统计出每一个省份 每个广告被点击数量排行的 Top3</p>
<h6 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark20_RDD_Operator_Transform_Case</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">String</span>] = sparkContext.textFile(<span class="string">&quot;data/agent.log&quot;</span>)</span><br><span class="line">    rdd.map(</span><br><span class="line">      line =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> data: <span class="type">Array</span>[<span class="type">String</span>] = line.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">        ((data(<span class="number">1</span>), data(<span class="number">4</span>)), <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ).reduceByKey(_ + _)</span><br><span class="line">      .map(</span><br><span class="line">        data =&gt; &#123;</span><br><span class="line">          (data._1._1, (data._1._2, data._2))</span><br><span class="line">        &#125;</span><br><span class="line">      ).groupByKey()</span><br><span class="line">      .mapValues(</span><br><span class="line">        _.toList.sortBy(_._2)(<span class="type">Ordering</span>.<span class="type">Int</span>.reverse).take(<span class="number">3</span>)</span><br><span class="line">      ).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="RDD-行动算子"><a href="#RDD-行动算子" class="headerlink" title="RDD 行动算子"></a>RDD 行动算子</h4><h6 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聚集 RDD 中的所有元素，先聚合分区内数据，再聚合分区间数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_RDD_Operator_Action_Reduce</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO - 行动算子</span></span><br><span class="line">    <span class="comment">// 所谓的行动算子，其实就是触发作业（Job）执行的方法</span></span><br><span class="line">    <span class="comment">// 底层调用的是环境对象的 runJob 方法</span></span><br><span class="line">    <span class="comment">// 底层代码中会创建 ActiveJob，并提交执行</span></span><br><span class="line">    println(rdd.reduce(_ + _))</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以数组 Array 的形式返回数据集的所有元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark02_RDD_Operator_Action_Collect</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">    rdd.collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="count"><a href="#count" class="headerlink" title="count"></a>count</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回 RDD 中元素的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark03_RDD_Operator_Action_Count</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">    println(rdd.count())</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="first"><a href="#first" class="headerlink" title="first"></a>first</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回 RDD 中的第一个元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark04_RDD_Operator_Action_First</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">    println(rdd.first())</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="take"><a href="#take" class="headerlink" title="take"></a>take</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个由 RDD 的前 n 个元素组成的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark05_RDD_Operator_Action_Take</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">    rdd.take(<span class="number">3</span>).foreach(println)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="takeOrdered"><a href="#takeOrdered" class="headerlink" title="takeOrdered"></a>takeOrdered</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回该 RDD 排序后的前 n 个元素组成的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark05_RDD_Operator_Action_TakeOrdered</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    rdd.takeOrdered(<span class="number">3</span>)(<span class="type">Ordering</span>.<span class="type">Int</span>.reverse).foreach(println)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="aggregate"><a href="#aggregate" class="headerlink" title="aggregate"></a>aggregate</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分区的数据通过初始值和分区内的数据进行聚合，然后再和初始值进行分区间的数据聚合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark06_RDD_Operator_Action_Aggregate</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>), <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// aggregateByKey：初始值只会参与分区内计算</span></span><br><span class="line">    <span class="comment">// aggregate：初始值会参与分区内计算，也会参与分区间计算</span></span><br><span class="line">    println(rdd.aggregate(<span class="number">0</span>)(_ + _, _ + _))</span><br><span class="line">    println(rdd.aggregate(<span class="number">10</span>)(_ + _, _ + _))</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="fold"><a href="#fold" class="headerlink" title="fold"></a>fold</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 折叠操作，aggregate 的简化版操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark06_RDD_Operator_Action_Fold</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>), <span class="number">8</span>)</span><br><span class="line">    </span><br><span class="line">    println(rdd.fold(<span class="number">0</span>)(_ + _))</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="countByKey"><a href="#countByKey" class="headerlink" title="countByKey"></a>countByKey</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统计每种 key 的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark08_RDD_Operator_Action_CountByKey</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;---------- countByValue ----------&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> rdd1: <span class="type">RDD</span>[<span class="type">Int</span>] = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">    <span class="keyword">val</span> intToLong: collection.<span class="type">Map</span>[<span class="type">Int</span>, <span class="type">Long</span>] = rdd1.countByValue()</span><br><span class="line">    println(intToLong)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;---------- countByKey ----------&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> rdd2: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sparkContext.makeRDD(<span class="type">List</span>(</span><br><span class="line">      (<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">3</span>), (<span class="string">&quot;d&quot;</span>, <span class="number">4</span>)</span><br><span class="line">    ))</span><br><span class="line">    <span class="keyword">val</span> stringToLong: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Long</span>] = rdd2.countByKey()</span><br><span class="line">    println(stringToLong)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="save-相关算子"><a href="#save-相关算子" class="headerlink" title="save 相关算子"></a>save 相关算子</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保存成 Text 文件</span></span><br><span class="line">rdd.saveAsTextFile(<span class="string">&quot;output&quot;</span>)</span><br><span class="line"><span class="comment">// 序列化成对象保存到文件</span></span><br><span class="line">rdd.saveAsObjectFile(<span class="string">&quot;output1&quot;</span>)</span><br><span class="line"><span class="comment">// 保存成 Sequencefile 文件</span></span><br><span class="line">rdd.map((_,<span class="number">1</span>)).saveAsSequenceFile(<span class="string">&quot;output2&quot;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分布式遍历 RDD 中的每一个元素，调用指定函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark09_RDD_Operator_Action_Foreach</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Driver 端内存集合的循环遍历方法</span></span><br><span class="line">    rdd.collect().foreach(println)</span><br><span class="line">    println(<span class="string">&quot;================&quot;</span>)</span><br><span class="line">    <span class="comment">// Executor 端内存数据的循环遍历</span></span><br><span class="line">    rdd.foreach(println)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="RDD-序列化"><a href="#RDD-序列化" class="headerlink" title="RDD 序列化"></a>RDD 序列化</h4><h5 id="闭包检查"><a href="#闭包检查" class="headerlink" title="闭包检查"></a>闭包检查</h5><p>从计算的角度, <strong>算子以外的代码都是在 Driver 端执行, 算子里面的代码都是在 Executor 端执行</strong>。那么在 scala 的函数式编程中，就会导致算子内经常会用到算子外的数据，这样就形成了闭包的效果，如果使用的算子外的数据无法序列化，就意味着无法传值给 Executor 端执行，就会发生错误，所以需要在执行任务计算前，检测闭包内的对象是否可以进行序列化，这个操作我们称之为闭包检测。Scala2.12 版本后闭包编译方式发生了改变</p>
<h5 id="序列化方法和属性"><a href="#序列化方法和属性" class="headerlink" title="序列化方法和属性"></a>序列化方法和属性</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_RDD_Serial</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Serial&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">String</span>] = sparkContext.makeRDD(<span class="type">Array</span>(<span class="string">&quot;hello world&quot;</span>, <span class="string">&quot;hello spark&quot;</span>, <span class="string">&quot;hive&quot;</span>, <span class="string">&quot;atguigu&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> search = <span class="keyword">new</span> <span class="type">Search</span>(<span class="string">&quot;h&quot;</span>)</span><br><span class="line"></span><br><span class="line">    search.getMatch1(rdd).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 类的构造参数其实是类的属性，所以需要闭包检测</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Search</span>(<span class="params">query: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span></span>(s: <span class="type">String</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">      s.contains(query)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数序列化案例</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMatch1</span></span>(rdd: <span class="type">RDD</span>[<span class="type">String</span>]): <span class="type">RDD</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">      rdd.filter(isMatch)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 属性序列化案例</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMatch2</span></span>(rdd: <span class="type">RDD</span>[<span class="type">String</span>]): <span class="type">RDD</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">      rdd.filter(x =&gt; x.contains(query))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Kryo-序列化框架"><a href="#Kryo-序列化框架" class="headerlink" title="Kryo 序列化框架"></a>Kryo 序列化框架</h5><p>参考地址: <a href="https://github.com/EsotericSoftware/kryo">https://github.com/EsotericSoftware/kryo</a><br>Java 的序列化能够序列化任何的类。但是比较重（字节多），序列化后，对象的提交也比较大。Spark 出于性能的考虑，Spark2.0 开始支持另外一种 Kryo 序列化机制。Kryo 速度是 Serializable 的 10 倍。当 RDD 在 Shuffle 数据的时候，简单数据类型、数组和字符串类型已经在 Spark 内部使用 Kryo 来序列化。<br>注意：即使使用 Kryo 序列化，也要继承 Serializable 接口</p>
<h4 id="RDD-依赖关系"><a href="#RDD-依赖关系" class="headerlink" title="RDD 依赖关系"></a>RDD 依赖关系</h4><h5 id="RDD-血缘关系"><a href="#RDD-血缘关系" class="headerlink" title="RDD 血缘关系"></a>RDD 血缘关系</h5><p>RDD 只支持粗粒度转换，即在大量记录上执行的单个操作。将创建 RDD 的一系列 Lineage（血统）记录下来，以便恢复丢失的分区。RDD 的 Lineage 会记录 RDD 的元数据信息和转换行为，当该 RDD 的部分分区数据丢失时，它可以根据这些信息来重新运算和恢复丢失的数据分区。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ---------------- lines ----------------</span></span><br><span class="line"><span class="comment"> * (2) data\1.txt,data\2.txt MapPartitionsRDD[1] at textFile at Spark01_RDD_Dependence.scala:11 []</span></span><br><span class="line"><span class="comment"> *  |  data\1.txt,data\2.txt HadoopRDD[0] at textFile at Spark01_RDD_Dependence.scala:11 []</span></span><br><span class="line"><span class="comment"> * ---------------- words ----------------</span></span><br><span class="line"><span class="comment"> * (2) MapPartitionsRDD[2] at flatMap at Spark01_RDD_Dependence.scala:15 []</span></span><br><span class="line"><span class="comment"> *  |  data\1.txt,data\2.txt MapPartitionsRDD[1] at textFile at Spark01_RDD_Dependence.scala:11 []</span></span><br><span class="line"><span class="comment"> *  |  data\1.txt,data\2.txt HadoopRDD[0] at textFile at Spark01_RDD_Dependence.scala:11 []</span></span><br><span class="line"><span class="comment"> * ---------------- wordToOne ----------------</span></span><br><span class="line"><span class="comment"> * (2) MapPartitionsRDD[3] at map at Spark01_RDD_Dependence.scala:19 []</span></span><br><span class="line"><span class="comment"> *  |  MapPartitionsRDD[2] at flatMap at Spark01_RDD_Dependence.scala:15 []</span></span><br><span class="line"><span class="comment"> *  |  data\1.txt,data\2.txt MapPartitionsRDD[1] at textFile at Spark01_RDD_Dependence.scala:11 []</span></span><br><span class="line"><span class="comment"> *  |  data\1.txt,data\2.txt HadoopRDD[0] at textFile at Spark01_RDD_Dependence.scala:11 []</span></span><br><span class="line"><span class="comment"> * ---------------- wordToSum ----------------</span></span><br><span class="line"><span class="comment"> * (2) ShuffledRDD[4] at reduceByKey at Spark01_RDD_Dependence.scala:23 []</span></span><br><span class="line"><span class="comment"> *  +-(2) MapPartitionsRDD[3] at map at Spark01_RDD_Dependence.scala:19 []</span></span><br><span class="line"><span class="comment"> *     |  MapPartitionsRDD[2] at flatMap at Spark01_RDD_Dependence.scala:15 []</span></span><br><span class="line"><span class="comment"> *     |  data\1.txt,data\2.txt MapPartitionsRDD[1] at textFile at Spark01_RDD_Dependence.scala:11 []</span></span><br><span class="line"><span class="comment"> *     |  data\1.txt,data\2.txt HadoopRDD[0] at textFile at Spark01_RDD_Dependence.scala:11 []</span></span><br><span class="line"><span class="comment"> * (Hello,4)</span></span><br><span class="line"><span class="comment"> * (World,2)</span></span><br><span class="line"><span class="comment"> * (Spark,2)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_RDD_Dependence</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local&quot;</span>).setAppName(<span class="string">&quot;Dependence&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> lines: <span class="type">RDD</span>[<span class="type">String</span>] = sparkContext.textFile(<span class="string">&quot;data\\1.txt,data\\2.txt&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;---------------- lines ----------------&quot;</span>)</span><br><span class="line">    println(lines.toDebugString)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> words: <span class="type">RDD</span>[<span class="type">String</span>] = lines.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">    println(<span class="string">&quot;---------------- words ----------------&quot;</span>)</span><br><span class="line">    println(words.toDebugString)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> wordToOne: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = words.map((_, <span class="number">1</span>))</span><br><span class="line">    println(<span class="string">&quot;---------------- wordToOne ----------------&quot;</span>)</span><br><span class="line">    println(wordToOne.toDebugString)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> wordToSum: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordToOne.reduceByKey(_ + _)</span><br><span class="line">    println(<span class="string">&quot;---------------- wordToSum ----------------&quot;</span>)</span><br><span class="line">    println(wordToSum.toDebugString)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> array: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordToSum.collect()</span><br><span class="line">    array.foreach(println)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="RDD-依赖关系-1"><a href="#RDD-依赖关系-1" class="headerlink" title="RDD 依赖关系"></a>RDD 依赖关系</h5><p>这里所谓的依赖关系，其实就是两个相邻 RDD 之间的关系</p>
<h5 id="RDD-窄依赖"><a href="#RDD-窄依赖" class="headerlink" title="RDD 窄依赖"></a>RDD 窄依赖</h5><p>窄依赖表示每一个父(上游)RDD 的 Partition 最多被子（下游）RDD 的一个 Partition 使用。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OneToOneDependency</span>[<span class="type">T</span>](<span class="params">rdd: <span class="type">RDD</span>[<span class="type">T</span>]</span>) <span class="keyword">extends</span> <span class="title">NarrowDependency</span>[<span class="type">T</span>](<span class="params">rdd</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getParents</span></span>(partitionId: <span class="type">Int</span>): <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(partitionId)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="RDD-宽依赖"><a href="#RDD-宽依赖" class="headerlink" title="RDD 宽依赖"></a>RDD 宽依赖</h5><p>宽依赖表示同一个父（上游）RDD 的 Partition 被多个子（下游）RDD 的 Partition 依赖，会引起 Shuffle.</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * :: DeveloperApi ::</span></span><br><span class="line"><span class="comment"> * Represents a dependency on the output of a shuffle stage. Note that in the case of shuffle,</span></span><br><span class="line"><span class="comment"> * the RDD is transient since we don&#x27;t need it on the executor side.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param _rdd the parent RDD</span></span><br><span class="line"><span class="comment"> * @param partitioner partitioner used to partition the shuffle output</span></span><br><span class="line"><span class="comment"> * @param serializer [[org.apache.spark.serializer.Serializer Serializer]] to use. If not set</span></span><br><span class="line"><span class="comment"> *                   explicitly then the default serializer, as specified by `spark.serializer`</span></span><br><span class="line"><span class="comment"> *                   config option, will be used.</span></span><br><span class="line"><span class="comment"> * @param keyOrdering key ordering for RDD&#x27;s shuffles</span></span><br><span class="line"><span class="comment"> * @param aggregator map/reduce-side aggregator for RDD&#x27;s shuffle</span></span><br><span class="line"><span class="comment"> * @param mapSideCombine whether to perform partial aggregation (also known as map-side combine)</span></span><br><span class="line"><span class="comment"> * @param shuffleWriterProcessor the processor to control the write behavior in ShuffleMapTask</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShuffleDependency</span>[<span class="type">K</span>: <span class="type">ClassTag</span>, <span class="type">V</span>: <span class="type">ClassTag</span>, <span class="type">C</span>: <span class="type">ClassTag</span>](<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="class">    @transient private val _rdd: <span class="type">RDD</span>[_ &lt;: <span class="type">Product2</span>[<span class="type">K</span>, <span class="type">V</span>]],</span></span></span><br><span class="line"><span class="params"><span class="class">    val partitioner: <span class="type">Partitioner</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">    val serializer: <span class="type">Serializer</span> = <span class="type">SparkEnv</span>.get.serializer,</span></span></span><br><span class="line"><span class="params"><span class="class">    val keyOrdering: <span class="type">Option</span>[<span class="type">Ordering</span>[<span class="type">K</span>]] = <span class="type">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">    val aggregator: <span class="type">Option</span>[<span class="type">Aggregator</span>[<span class="type">K</span>, <span class="type">V</span>, <span class="type">C</span>]] = <span class="type">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">    val mapSideCombine: <span class="type">Boolean</span> = false,</span></span></span><br><span class="line"><span class="params"><span class="class">    val shuffleWriterProcessor: <span class="type">ShuffleWriteProcessor</span> = new <span class="type">ShuffleWriteProcessor</span></span>)</span></span><br><span class="line">  <span class="keyword">extends</span> <span class="type">Dependency</span>[<span class="type">Product2</span>[<span class="type">K</span>, <span class="type">V</span>]] <span class="keyword">with</span> <span class="type">Logging</span> </span><br></pre></td></tr></table></figure>

<h5 id="RDD-阶段划分"><a href="#RDD-阶段划分" class="headerlink" title="RDD 阶段划分"></a>RDD 阶段划分</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a ResultStage associated with the provided jobId.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">createResultStage</span></span>(</span><br><span class="line">    rdd: <span class="type">RDD</span>[_],</span><br><span class="line">    func: (<span class="type">TaskContext</span>, <span class="type">Iterator</span>[_]) =&gt; _,</span><br><span class="line">    partitions: <span class="type">Array</span>[<span class="type">Int</span>],</span><br><span class="line">    jobId: <span class="type">Int</span>,</span><br><span class="line">    callSite: <span class="type">CallSite</span>): <span class="type">ResultStage</span> = &#123;</span><br><span class="line">  <span class="keyword">val</span> (shuffleDeps, resourceProfiles) = getShuffleDependenciesAndResourceProfiles(rdd)</span><br><span class="line">  <span class="keyword">val</span> resourceProfile = mergeResourceProfilesForStage(resourceProfiles)</span><br><span class="line">  checkBarrierStageWithDynamicAllocation(rdd)</span><br><span class="line">  checkBarrierStageWithNumSlots(rdd, resourceProfile)</span><br><span class="line">  checkBarrierStageWithRDDChainPattern(rdd, partitions.toSet.size)</span><br><span class="line">  <span class="keyword">val</span> parents = getOrCreateParentStages(shuffleDeps, jobId)</span><br><span class="line">  <span class="keyword">val</span> id = nextStageId.getAndIncrement()</span><br><span class="line">  <span class="keyword">val</span> stage = <span class="keyword">new</span> <span class="type">ResultStage</span>(id, rdd, func, partitions, parents, jobId,</span><br><span class="line">    callSite, resourceProfile.id)</span><br><span class="line">  stageIdToStage(id) = stage</span><br><span class="line">  updateJobIdStageIdMaps(jobId, stage)</span><br><span class="line">  stage</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get or create the list of parent stages for the given shuffle dependencies. The new</span></span><br><span class="line"><span class="comment"> * Stages will be created with the provided firstJobId.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">getOrCreateParentStages</span></span>(shuffleDeps: <span class="type">HashSet</span>[<span class="type">ShuffleDependency</span>[_, _, _]],</span><br><span class="line">    firstJobId: <span class="type">Int</span>): <span class="type">List</span>[<span class="type">Stage</span>] = &#123;</span><br><span class="line">  shuffleDeps.map &#123; shuffleDep =&gt;</span><br><span class="line">    getOrCreateShuffleMapStage(shuffleDep, firstJobId)</span><br><span class="line">  &#125;.toList</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>提交 Job 时，会查找当前 RDD 有无 shuffleDeps</li>
<li>为每个 shuffleDeps 创建对应的 shuffleMapStage</li>
<li>不管有没有 shuffleDeps 都会创建 ResultStage</li>
</ol>
</blockquote>
<h5 id="RDD-任务划分"><a href="#RDD-任务划分" class="headerlink" title="RDD 任务划分"></a>RDD 任务划分</h5><p>RDD 任务切分中间分为：Application、Job、Stage 和 Task</p>
<ul>
<li>Application：初始化一个 SparkContext 即生成一个 Application；</li>
<li>Job：一个 Action 算子就会生成一个 Job；</li>
<li>Stage：Stage 等于宽依赖(ShuffleDependency)的个数加 1；</li>
<li>Task：一个 Stage 阶段中，最后一个 RDD 的分区个数就是 Task 的个数。</li>
</ul>
<blockquote>
<p>注意：Application-&gt;Job-&gt;Stage-&gt;Task 每一层都是 1 对 n 的关系。</p>
</blockquote>
<h4 id="RDD-持久化"><a href="#RDD-持久化" class="headerlink" title="RDD 持久化"></a>RDD 持久化</h4><h5 id="RDD-Cache-缓存"><a href="#RDD-Cache-缓存" class="headerlink" title="RDD Cache 缓存"></a>RDD Cache 缓存</h5><p>RDD 通过 Cache 或者 Persist 方法将前面的计算结果缓存，默认情况下会把数据以缓存在 JVM 的堆内存中。但是并不是这两个方法被调用时立即缓存，而是触发后面的 action 算子时，该 RDD 将会被缓存在计算节点的内存中，并供后面重用。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RDD 不存储数据，如果一个 RDD 需要重复使用，那么需要从头再次执行来获取数据</span></span><br><span class="line"><span class="comment"> * // mapRdd.cache()                mapRdd.cache()</span></span><br><span class="line"><span class="comment"> * ------ map ------                ------ map ------</span></span><br><span class="line"><span class="comment"> * ------ map ------                ------ map ------</span></span><br><span class="line"><span class="comment"> * ------ map ------                ------ map ------</span></span><br><span class="line"><span class="comment"> * ------ map ------                ------ map ------</span></span><br><span class="line"><span class="comment"> * (Hello,2)                        (Hello,2)</span></span><br><span class="line"><span class="comment"> * (Spark,1)                        (Spark,1)</span></span><br><span class="line"><span class="comment"> * (World,1)                        (Spark,1)</span></span><br><span class="line"><span class="comment"> * ====================             ====================</span></span><br><span class="line"><span class="comment"> * ------ map ------                (Hello,2)</span></span><br><span class="line"><span class="comment"> * ------ map ------                (Spark,1)</span></span><br><span class="line"><span class="comment"> * ------ map ------                (Spark,1)</span></span><br><span class="line"><span class="comment"> * ------ map ------</span></span><br><span class="line"><span class="comment"> * (Hello,2)</span></span><br><span class="line"><span class="comment"> * (Spark,1)</span></span><br><span class="line"><span class="comment"> * (World,1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_RDD_Cache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Cache&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">String</span>] = sparkContext.makeRDD(<span class="type">Array</span>(<span class="string">&quot;Hello World&quot;</span>, <span class="string">&quot;Hello Spark&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> flatMapRdd: <span class="type">RDD</span>[<span class="type">String</span>] = rdd.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> mapRdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = flatMapRdd.map(</span><br><span class="line">      word =&gt; &#123;</span><br><span class="line">        println(<span class="string">&quot;------ map ------&quot;</span>)</span><br><span class="line">        (word, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    mapRdd.cache()</span><br><span class="line"></span><br><span class="line">    mapRdd.reduceByKey(_ + _).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;====================&quot;</span>)</span><br><span class="line"></span><br><span class="line">    mapRdd.aggregateByKey(<span class="number">0</span>)(_ + _, _ + _).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="persist-更改存储级别"><a href="#persist-更改存储级别" class="headerlink" title="persist 更改存储级别"></a>persist 更改存储级别</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark02_RDD_Persist</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Persist&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">String</span>] = sparkContext.makeRDD(<span class="type">Array</span>(<span class="string">&quot;Hello World&quot;</span>, <span class="string">&quot;Hello Spark&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> flatMapRdd: <span class="type">RDD</span>[<span class="type">String</span>] = rdd.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> mapRdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = flatMapRdd.map(</span><br><span class="line">      word =&gt; &#123;</span><br><span class="line">        println(<span class="string">&quot;------ map ------&quot;</span>)</span><br><span class="line">        (word, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以更改存储级别</span></span><br><span class="line">    mapRdd.persist(<span class="type">StorageLevel</span>.<span class="type">DISK_ONLY</span>)</span><br><span class="line"></span><br><span class="line">    mapRdd.reduceByKey(_ + _).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;====================&quot;</span>)</span><br><span class="line"></span><br><span class="line">    mapRdd.aggregateByKey(<span class="number">0</span>)(_ + _, _ + _).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>级别</th>
<th>使用的空间</th>
<th>CPU时间</th>
<th>是否在内存中</th>
<th>是否在磁盘上</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>MEMORY_ONLY</td>
<td>高</td>
<td>低</td>
<td>是</td>
<td>否</td>
<td></td>
</tr>
<tr>
<td>MEMORY_ONLY_SER</td>
<td>低</td>
<td>高</td>
<td>是</td>
<td>否</td>
<td></td>
</tr>
<tr>
<td>MEMORY_AND_DISK</td>
<td>高</td>
<td>中等</td>
<td>部分</td>
<td>部分</td>
<td>如果数据在内存中放不下，则溢写到磁盘上</td>
</tr>
<tr>
<td>MEMORY_AND_DISK_SER</td>
<td>低</td>
<td>高</td>
<td>部分</td>
<td>部分·</td>
<td>如果数据在内存中放不下，则溢写到磁盘上。在内存中存放序列化后的数据</td>
</tr>
<tr>
<td>DISK_ONLY</td>
<td>低</td>
<td>高</td>
<td>否</td>
<td>是</td>
<td></td>
</tr>
</tbody></table>
<h5 id="RDD-CheckPoint-检查点"><a href="#RDD-CheckPoint-检查点" class="headerlink" title="RDD CheckPoint 检查点"></a>RDD CheckPoint 检查点</h5><p>所谓的检查点其实就是通过将 RDD 中间结果写入磁盘由于血缘依赖过长会造成容错成本过高，这样就不如在中间阶段做检查点容错，如果检查点之后有节点出现问题，可以从检查点开始重做血缘，减少了开销。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark03_RDD_CheckPoint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;CheckPoint&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line">    sparkContext.setCheckpointDir(<span class="string">&quot;checkpoint&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">String</span>] = sparkContext.makeRDD(<span class="type">Array</span>(<span class="string">&quot;Hello World&quot;</span>, <span class="string">&quot;Hello Spark&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> flatMapRdd: <span class="type">RDD</span>[<span class="type">String</span>] = rdd.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> mapRdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = flatMapRdd.map(</span><br><span class="line">      word =&gt; &#123;</span><br><span class="line">        println(<span class="string">&quot;------ map ------&quot;</span>)</span><br><span class="line">        (word, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// checkpoint 需要落盘，需要指定检查点保存路径</span></span><br><span class="line">    <span class="comment">// 检查点路径保存的文件，当作业执行完毕后不会被删除</span></span><br><span class="line">    mapRdd.checkpoint()</span><br><span class="line"></span><br><span class="line">    mapRdd.reduceByKey(_ + _).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;====================&quot;</span>)</span><br><span class="line"></span><br><span class="line">    mapRdd.aggregateByKey(<span class="number">0</span>)(_ + _, _ + _).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="缓存和检查点区别"><a href="#缓存和检查点区别" class="headerlink" title="缓存和检查点区别"></a>缓存和检查点区别</h5><ol>
<li>Cache 缓存只是将数据保存起来，不切断血缘依赖。Checkpoint 检查点切断血缘依赖；</li>
<li>Cache 缓存的数据通常存储在磁盘、内存等地方，可靠性低。Checkpoint 的数据通常存储在 HDFS 等容错、高可用的文件系统，可靠性高；</li>
<li>建议对 checkpoint() 的 RDD 使用 Cache 缓存，这样 checkpoint 的 job 只需从 Cache 缓存中读取数据即可，否则需要再从头计算一次 RDD。</li>
</ol>
<h4 id="RDD-分区器"><a href="#RDD-分区器" class="headerlink" title="RDD 分区器"></a>RDD 分区器</h4><p>Spark 目前支持 Hash 分区和 Range 分区，和用户自定义分区。Hash 分区为当前的默认分区。分区器直接决定了 RDD 中分区的个数、RDD 中每条数据经过 Shuffle 后进入哪个分区，进而决定了 Reduce 的个数。</p>
<ul>
<li>只有 Key-Value 类型的 RDD 才有分区器，非 Key-Value 类型的 RDD 分区的值是 None；</li>
<li>每个 RDD 的分区 ID 范围：0 ~ (numPartitions - 1)，决定这个值是属于那个分区的。</li>
</ul>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_RDD_Partitioner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Partitioner&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">String</span>)] = sparkContext.makeRDD(<span class="type">Array</span>(</span><br><span class="line">      (<span class="string">&quot;湖北&quot;</span>, <span class="string">&quot;武汉&quot;</span>), (<span class="string">&quot;福建&quot;</span>, <span class="string">&quot;厦门&quot;</span>), (<span class="string">&quot;上海&quot;</span>, <span class="string">&quot;上海&quot;</span>),</span><br><span class="line">      (<span class="string">&quot;福建&quot;</span>, <span class="string">&quot;福州&quot;</span>), (<span class="string">&quot;福建&quot;</span>, <span class="string">&quot;三明&quot;</span>), (<span class="string">&quot;湖北&quot;</span>, <span class="string">&quot;十堰&quot;</span>)</span><br><span class="line">    ),<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    rdd.partitionBy(<span class="keyword">new</span> <span class="type">MyHashPartitioner</span>).saveAsTextFile(<span class="string">&quot;output&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 自定义分区器</span></span><br><span class="line"><span class="comment">   * 1. 继承 Partitioner</span></span><br><span class="line"><span class="comment">   * 2. 重写方法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyPartitioner</span> <span class="keyword">extends</span> <span class="title">Partitioner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">numPartitions</span></span>: <span class="type">Int</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getPartition</span></span>(key: <span class="type">Any</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">      key <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;福建&quot;</span> =&gt; <span class="number">0</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;湖北&quot;</span> =&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;上海&quot;</span> =&gt; <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="文件读取与保存"><a href="#文件读取与保存" class="headerlink" title="文件读取与保存"></a>文件读取与保存</h4><h5 id="text-文件"><a href="#text-文件" class="headerlink" title="text 文件"></a>text 文件</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取输入文件</span></span><br><span class="line"><span class="keyword">val</span> inputRDD: <span class="type">RDD</span>[<span class="type">String</span>] = sc.textFile(<span class="string">&quot;input/1.txt&quot;</span>)</span><br><span class="line"><span class="comment">// 保存数据</span></span><br><span class="line">inputRDD.saveAsTextFile(<span class="string">&quot;output&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="sequence-文件"><a href="#sequence-文件" class="headerlink" title="sequence 文件"></a>sequence 文件</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保存数据为 SequenceFile</span></span><br><span class="line">dataRDD.saveAsSequenceFile(<span class="string">&quot;output&quot;</span>)</span><br><span class="line"><span class="comment">// 读取 SequenceFile 文件</span></span><br><span class="line">sc.sequenceFile[<span class="type">Int</span>,<span class="type">Int</span>](<span class="string">&quot;output&quot;</span>).collect().foreach(println)</span><br></pre></td></tr></table></figure>

<h5 id="object-对象"><a href="#object-对象" class="headerlink" title="object 对象"></a>object 对象</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保存数据</span></span><br><span class="line">dataRDD.saveAsObjectFile(<span class="string">&quot;output&quot;</span>)</span><br><span class="line"><span class="comment">// 读取数据</span></span><br><span class="line">sc.objectFile[<span class="type">Int</span>](<span class="string">&quot;output&quot;</span>).collect().foreach(println)</span><br></pre></td></tr></table></figure>

<h3 id="累加器"><a href="#累加器" class="headerlink" title="累加器"></a>累加器</h3><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>累加器用来把 Executor 端变量信息聚合到 Driver 端。在 Driver 程序中定义的变量，在Executor 端的每个 Task 都会得到这个变量的一份新的副本，每个 task 更新这些副本的值后，传回 Driver 端进行 merge。</p>
<h4 id="基础编程-1"><a href="#基础编程-1" class="headerlink" title="基础编程"></a>基础编程</h4><h5 id="系统累加器"><a href="#系统累加器" class="headerlink" title="系统累加器"></a>系统累加器</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_Accumulator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Accumulator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取系统累加器</span></span><br><span class="line">    <span class="keyword">val</span> sumAcc: <span class="type">LongAccumulator</span> = sparkContext.longAccumulator(<span class="string">&quot;sum&quot;</span>)</span><br><span class="line"></span><br><span class="line">    rdd.foreach(sumAcc.add(_))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取累加器的值</span></span><br><span class="line">    println(sumAcc.value)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意细节：</p>
<ul>
<li>少加：转换算子中调用累加器，如果没用调用行动算子，那么变不会执行，导致累加器少加</li>
<li>多加：行动算子多次调用，则累加器多次被调用造成多加</li>
<li>一般情况下，累加器放在行动算子中进行操作</li>
</ul>
</blockquote>
<h5 id="自定义累加器"><a href="#自定义累加器" class="headerlink" title="自定义累加器"></a>自定义累加器</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark02_Accumulator_WordCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Accumulator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">String</span>] = sparkContext.makeRDD(<span class="type">List</span>(<span class="string">&quot;Hello Spark&quot;</span>, <span class="string">&quot;Hello World&quot;</span>, <span class="string">&quot;Hello Scala&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建累加器</span></span><br><span class="line">    <span class="keyword">val</span> wordCountAccumulator = <span class="keyword">new</span> <span class="type">WordCountAccumulator</span></span><br><span class="line">    <span class="comment">// 注册累加器到 sparkContext</span></span><br><span class="line">    sparkContext.register(wordCountAccumulator, <span class="string">&quot;wordCountAccumulator&quot;</span>)</span><br><span class="line"></span><br><span class="line">    rdd.flatMap(_.split(<span class="string">&quot; &quot;</span>)).foreach(wordCountAccumulator.add(_))</span><br><span class="line"></span><br><span class="line">    println(wordCountAccumulator.value)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">WordCountAccumulator</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">AccumulatorV2</span>[<span class="type">String</span>, mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>]] </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> wcMap: mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>] = mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否为初始状态</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">isZero</span></span>: <span class="type">Boolean</span> = &#123;</span><br><span class="line">      wcMap.isEmpty</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复制累加器</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">copy</span></span>(): <span class="type">AccumulatorV2</span>[<span class="type">String</span>, mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>]] = &#123;</span><br><span class="line">      <span class="keyword">val</span> copy = <span class="keyword">new</span> <span class="type">WordCountAccumulator</span>()</span><br><span class="line">      copy.wcMap = <span class="keyword">this</span>.wcMap</span><br><span class="line">      copy</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重置累加器</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">reset</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">      wcMap.clear()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  获取累加器要计算的值</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(v: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> newCount: <span class="type">Int</span> = wcMap.getOrElse(v, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">      wcMap.update(v, newCount)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Driver合并多个累加器</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(other: <span class="type">AccumulatorV2</span>[<span class="type">String</span>, mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>]]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> map1: mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>] = other.value</span><br><span class="line">      <span class="keyword">val</span> map2: mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>] = <span class="keyword">this</span>.value</span><br><span class="line"></span><br><span class="line">      map1.foreach(</span><br><span class="line">        t =&gt; &#123;</span><br><span class="line">          <span class="keyword">val</span> newCount: <span class="type">Int</span> = map2.getOrElse(t._1, <span class="number">0</span>) + t._2</span><br><span class="line">          map2.update(t._1, newCount)</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 累加器结果</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">value</span></span>: mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>] = &#123;</span><br><span class="line">      wcMap</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="广播变量"><a href="#广播变量" class="headerlink" title="广播变量"></a>广播变量</h3><h4 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h4><p>广播变量用来高效分发较大的对象。向所有工作节点发送一个较大的只读值，以供一个或多个 Spark 操作使用。比如，如果你的应用需要向所有节点发送一个较大的只读查询表，广播变量用起来都很顺手。在多个并行操作中使用同一个变量，但是 Spark 会为每个任务分别发送。</p>
<p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220526155540.png" alt="image-20220526155535133"></p>
<h4 id="基础编程-2"><a href="#基础编程-2" class="headerlink" title="基础编程"></a>基础编程</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark03_Broadcast</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Broadcast&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sparkContext.makeRDD(<span class="type">List</span>(</span><br><span class="line">      (<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;c&quot;</span>, <span class="number">3</span>)</span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> map: mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>] = mutable.<span class="type">Map</span>(</span><br><span class="line">      (<span class="string">&quot;a&quot;</span>, <span class="number">3</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">4</span>), (<span class="string">&quot;c&quot;</span>, <span class="number">5</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 声明广播变量</span></span><br><span class="line">    <span class="keyword">val</span> broadcast: <span class="type">Broadcast</span>[mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>]] = sparkContext.broadcast(map)</span><br><span class="line"></span><br><span class="line">    rdd.map &#123;</span><br><span class="line">      <span class="keyword">case</span> (k, v) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 使用广播变量</span></span><br><span class="line">        <span class="keyword">val</span> value: <span class="type">Int</span> = broadcast.value.getOrElse(k, <span class="number">0</span>)</span><br><span class="line">        (k, (v, value))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;.collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Spark-案例实操"><a href="#Spark-案例实操" class="headerlink" title="Spark 案例实操"></a>Spark 案例实操</h3><h4 id="数据准备-1"><a href="#数据准备-1" class="headerlink" title="数据准备"></a>数据准备</h4><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220526165853.png" alt="image-20220526165850309"></p>
<p>上面的数据图是从数据文件中截取的一部分内容，表示为电商网站的用户行为数据，主要包含用户的 4 种行为：<strong>搜索，点击，下单，支付</strong>。数据规则如下：</p>
<ol>
<li>数据文件中每行数据采用下划线分隔数据</li>
<li>每一行数据表示用户的一次行为，这个行为只能是 4 种行为的一种</li>
<li>如果搜索关键字为 null,表示数据不是搜索数据</li>
<li>如果点击的品类 ID 和产品 ID 为-1，表示数据不是点击数据</li>
<li>针对于下单行为，一次可以下单多个商品，所以品类 ID 和产品 ID 可以是多个，id 之间采用逗号分隔，如果本次不是下单行为，则数据采用 null 表示</li>
<li>支付行为和下单行为类似</li>
</ol>
<h4 id="详细字段说明"><a href="#详细字段说明" class="headerlink" title="详细字段说明"></a>详细字段说明</h4><table>
<thead>
<tr>
<th>编码</th>
<th>字段名称</th>
<th>字段类型</th>
<th>字段含义</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>date</td>
<td>String</td>
<td>用户点击行为的日期</td>
</tr>
<tr>
<td>2</td>
<td>user_id</td>
<td>Long</td>
<td>用户的 ID</td>
</tr>
<tr>
<td>3</td>
<td>session_id</td>
<td>String</td>
<td>Session 的 ID</td>
</tr>
<tr>
<td>4</td>
<td>page_id</td>
<td>Long</td>
<td>某个页面的 ID</td>
</tr>
<tr>
<td>5</td>
<td>action_time</td>
<td>String</td>
<td>动作的时间点</td>
</tr>
<tr>
<td>6</td>
<td>search_key</td>
<td>String</td>
<td>用户搜索的关键词</td>
</tr>
<tr>
<td>7</td>
<td>click_category_id</td>
<td>Long</td>
<td>某一个商品品类的 ID</td>
</tr>
<tr>
<td>8</td>
<td>click_product_id</td>
<td>Long</td>
<td>某一个商品的 ID</td>
</tr>
<tr>
<td>9</td>
<td>order_category_ids</td>
<td>String</td>
<td>一次订单中所有品类的 ID 集合</td>
</tr>
<tr>
<td>10</td>
<td>order_product_ids</td>
<td>String</td>
<td>一次订单中所有商品的 ID 集合</td>
</tr>
<tr>
<td>11</td>
<td>pay_category_ids</td>
<td>String</td>
<td>一次支付中所有品类的 ID 集合</td>
</tr>
<tr>
<td>12</td>
<td>pay_product_ids</td>
<td>String</td>
<td>一次支付中所有商品的 ID 集合</td>
</tr>
<tr>
<td>13</td>
<td>city_id</td>
<td>Long</td>
<td>城市 ID</td>
</tr>
</tbody></table>
<h4 id="需求一-：Top10-热门品类"><a href="#需求一-：Top10-热门品类" class="headerlink" title="需求一 ：Top10 热门品类"></a>需求一 ：Top10 热门品类</h4><h5 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h5><p>先按照点击数排名，靠前的就排名高；如果点击数相同，再比较下单数；下单数再相同，就比较支付数</p>
<h5 id="实现一"><a href="#实现一" class="headerlink" title="实现一"></a>实现一</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_HotCategoryTop10</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Case&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 读取原始日志数据</span></span><br><span class="line">    <span class="keyword">val</span> actionRDD: <span class="type">RDD</span>[<span class="type">String</span>] = sparkContext.textFile(<span class="string">&quot;data\\user_visit_action.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 统计品类的点击数量：（品类ID，点击数量）</span></span><br><span class="line">    <span class="keyword">val</span> clickActionRdd: <span class="type">RDD</span>[<span class="type">String</span>] = actionRDD.filter(_.split(<span class="string">&quot;_&quot;</span>)(<span class="number">6</span>) != <span class="string">&quot;-1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> clickCountRdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = clickActionRdd.map(</span><br><span class="line">      action =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> datas: <span class="type">Array</span>[<span class="type">String</span>] = action.split(<span class="string">&quot;_&quot;</span>)</span><br><span class="line">        (datas(<span class="number">6</span>), <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ).reduceByKey(_ + _)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 统计品类的下单数量：（品类ID，下单数量）</span></span><br><span class="line">    <span class="keyword">val</span> orderActionRdd: <span class="type">RDD</span>[<span class="type">String</span>] = actionRDD.filter(_.split(<span class="string">&quot;_&quot;</span>)(<span class="number">8</span>) != <span class="string">&quot;null&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> orderCountRdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = orderActionRdd.flatMap(</span><br><span class="line">      action =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> datas: <span class="type">Array</span>[<span class="type">String</span>] = action.split(<span class="string">&quot;_&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> cidStr: <span class="type">String</span> = datas(<span class="number">8</span>)</span><br><span class="line">        <span class="keyword">val</span> cids: <span class="type">Array</span>[<span class="type">String</span>] = cidStr.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        cids.map((_, <span class="number">1</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    ).reduceByKey(_ + _)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 统计品类的支付数量：（品类ID，支付数量）</span></span><br><span class="line">    <span class="keyword">val</span> payActionRdd: <span class="type">RDD</span>[<span class="type">String</span>] = actionRDD.filter(_.split(<span class="string">&quot;_&quot;</span>)(<span class="number">10</span>) != <span class="string">&quot;null&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> payCountRdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = payActionRdd.flatMap(</span><br><span class="line">      action =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> datas: <span class="type">Array</span>[<span class="type">String</span>] = action.split(<span class="string">&quot;_&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> cidStr: <span class="type">String</span> = datas(<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">val</span> cids: <span class="type">Array</span>[<span class="type">String</span>] = cidStr.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        cids.map((_, <span class="number">1</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    ).reduceByKey(_ + _)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 将品类进行排序</span></span><br><span class="line">    <span class="comment">//    元组排序：先比较第一个，再比较第二个，再比较第三，以此类推</span></span><br><span class="line">    <span class="comment">//    （品类ID,（点击数量，下单数量，支付数量））</span></span><br><span class="line">    <span class="keyword">val</span> cogroupRdd: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">Iterable</span>[<span class="type">Int</span>], <span class="type">Iterable</span>[<span class="type">Int</span>], <span class="type">Iterable</span>[<span class="type">Int</span>]))] = clickCountRdd.cogroup(orderCountRdd, payCountRdd)</span><br><span class="line"></span><br><span class="line">    cogroupRdd.mapValues &#123;</span><br><span class="line">      <span class="keyword">case</span> (clickIter, orderIter, payIter) =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> clickCount: <span class="type">Int</span> = <span class="keyword">if</span> (clickIter.iterator.hasNext) clickIter.iterator.next() <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">val</span> orderCount: <span class="type">Int</span> = <span class="keyword">if</span> (orderIter.iterator.hasNext) orderIter.iterator.next() <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">val</span> payCount: <span class="type">Int</span> = <span class="keyword">if</span> (payIter.iterator.hasNext) payIter.iterator.next() <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        (clickCount, orderCount, payCount)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;.sortBy(_._2, <span class="literal">false</span>).take(<span class="number">10</span>).foreach(println)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="实现二"><a href="#实现二" class="headerlink" title="实现二"></a>实现二</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark02_HotCategoryTop10</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Case&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 读取原始日志数据</span></span><br><span class="line">    <span class="keyword">val</span> actionRDD: <span class="type">RDD</span>[<span class="type">String</span>] = sparkContext.textFile(<span class="string">&quot;data\\user_visit_action.txt&quot;</span>)</span><br><span class="line">    actionRDD.cache()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 统计品类的点击数量：（品类ID，点击数量）</span></span><br><span class="line">    <span class="keyword">val</span> clickActionRdd: <span class="type">RDD</span>[<span class="type">String</span>] = actionRDD.filter(_.split(<span class="string">&quot;_&quot;</span>)(<span class="number">6</span>) != <span class="string">&quot;-1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> clickCountRdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = clickActionRdd.map(</span><br><span class="line">      action =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> datas: <span class="type">Array</span>[<span class="type">String</span>] = action.split(<span class="string">&quot;_&quot;</span>)</span><br><span class="line">        (datas(<span class="number">6</span>), <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ).reduceByKey(_ + _)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 统计品类的下单数量：（品类ID，下单数量）</span></span><br><span class="line">    <span class="keyword">val</span> orderActionRdd: <span class="type">RDD</span>[<span class="type">String</span>] = actionRDD.filter(_.split(<span class="string">&quot;_&quot;</span>)(<span class="number">8</span>) != <span class="string">&quot;null&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> orderCountRdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = orderActionRdd.flatMap(</span><br><span class="line">      action =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> datas: <span class="type">Array</span>[<span class="type">String</span>] = action.split(<span class="string">&quot;_&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> cidStr: <span class="type">String</span> = datas(<span class="number">8</span>)</span><br><span class="line">        <span class="keyword">val</span> cids: <span class="type">Array</span>[<span class="type">String</span>] = cidStr.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        cids.map((_, <span class="number">1</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    ).reduceByKey(_ + _)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 统计品类的支付数量：（品类ID，支付数量）</span></span><br><span class="line">    <span class="keyword">val</span> payActionRdd: <span class="type">RDD</span>[<span class="type">String</span>] = actionRDD.filter(_.split(<span class="string">&quot;_&quot;</span>)(<span class="number">10</span>) != <span class="string">&quot;null&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> payCountRdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = payActionRdd.flatMap(</span><br><span class="line">      action =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> datas: <span class="type">Array</span>[<span class="type">String</span>] = action.split(<span class="string">&quot;_&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> cidStr: <span class="type">String</span> = datas(<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">val</span> cids: <span class="type">Array</span>[<span class="type">String</span>] = cidStr.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        cids.map((_, <span class="number">1</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    ).reduceByKey(_ + _)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> clickCountFormatRdd: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>))] = clickCountRdd.map(x =&gt; (x._1, (x._2, <span class="number">0</span>, <span class="number">0</span>)))</span><br><span class="line">    <span class="keyword">val</span> orderCountFormatRdd: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>))] = orderCountRdd.map(x =&gt; (x._1, (<span class="number">0</span>, x._2, <span class="number">0</span>)))</span><br><span class="line">    <span class="keyword">val</span> payCountFormatRdd: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>))] = payCountRdd.map(x =&gt; (x._1, (<span class="number">0</span>, <span class="number">0</span>, x._2)))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 将品类进行排序</span></span><br><span class="line">    <span class="comment">//    元组排序：先比较第一个，再比较第二个，再比较第三，以此类推</span></span><br><span class="line">    <span class="comment">//    （品类ID,（点击数量，下单数量，支付数量））</span></span><br><span class="line">    clickCountFormatRdd.union(orderCountFormatRdd).union(payCountFormatRdd).reduceByKey(</span><br><span class="line">      (v1, v2) =&gt; &#123;</span><br><span class="line">        (v1._1 + v2._1, v1._2 + v2._2, v1._3 + v2._3)</span><br><span class="line">      &#125;</span><br><span class="line">    ).sortBy(_._2, <span class="literal">false</span>).take(<span class="number">10</span>).foreach(println)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="实现三"><a href="#实现三" class="headerlink" title="实现三"></a>实现三</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark03_HotCategoryTop10</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Case&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 读取原始日志数据</span></span><br><span class="line">    <span class="keyword">val</span> actionRDD: <span class="type">RDD</span>[<span class="type">String</span>] = sparkContext.textFile(<span class="string">&quot;data\\user_visit_action.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 将数据转换结构</span></span><br><span class="line">    <span class="comment">// 点击：（品类ID，（1，0，0））</span></span><br><span class="line">    <span class="comment">// 下单：（品类ID，（0，1，0））</span></span><br><span class="line">    <span class="comment">// 支付：（品类ID，（0，0，1））</span></span><br><span class="line">    <span class="keyword">val</span> flatmapRdd: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>))] = actionRDD.flatMap(</span><br><span class="line">      line =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> data: <span class="type">Array</span>[<span class="type">String</span>] = line.split(<span class="string">&quot;_&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> (data(<span class="number">6</span>) != <span class="string">&quot;-1&quot;</span>) &#123;</span><br><span class="line">          <span class="type">List</span>((data(<span class="number">6</span>), (<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)))</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data(<span class="number">8</span>) != <span class="string">&quot;null&quot;</span>) &#123;</span><br><span class="line">          data(<span class="number">8</span>).split(<span class="string">&quot;,&quot;</span>).map((_, (<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>)))</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data(<span class="number">10</span>) != <span class="string">&quot;null&quot;</span>) &#123;</span><br><span class="line">          data(<span class="number">10</span>).split(<span class="string">&quot;,&quot;</span>).map((_, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="type">Nil</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 将相同的品类ID数据进行分组聚合</span></span><br><span class="line">    <span class="keyword">val</span> analysisRdd: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>))] = flatmapRdd.reduceByKey(</span><br><span class="line">      (v1, v2) =&gt; &#123;</span><br><span class="line">        (v1._1 + v2._1, v1._2 + v2._2, v1._3 + v2._3)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 将统计数据排序并打印</span></span><br><span class="line">    analysisRdd.sortBy(_._2, <span class="literal">false</span>).take(<span class="number">10</span>).foreach(println)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="实现四"><a href="#实现四" class="headerlink" title="实现四"></a>实现四</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark04_HotCategoryTop10</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Case&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 读取原始日志数据</span></span><br><span class="line">    <span class="keyword">val</span> actionRDD: <span class="type">RDD</span>[<span class="type">String</span>] = sparkContext.textFile(<span class="string">&quot;data\\user_visit_action.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 声明累加器</span></span><br><span class="line">    <span class="keyword">val</span> accumulator = <span class="keyword">new</span> <span class="type">HotCategoryAccumulator</span></span><br><span class="line">    sparkContext.register(accumulator, <span class="string">&quot;hotCategoryAccumulator&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 遍历累加</span></span><br><span class="line">    actionRDD.foreach(</span><br><span class="line">      line =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> data: <span class="type">Array</span>[<span class="type">String</span>] = line.split(<span class="string">&quot;_&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> (data(<span class="number">6</span>) != <span class="string">&quot;-1&quot;</span>) &#123;</span><br><span class="line">          accumulator.add(data(<span class="number">6</span>), <span class="string">&quot;click&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data(<span class="number">8</span>) != <span class="string">&quot;null&quot;</span>) &#123;</span><br><span class="line">          data(<span class="number">8</span>).split(<span class="string">&quot;,&quot;</span>).foreach(</span><br><span class="line">            accumulator.add(_, <span class="string">&quot;order&quot;</span>)</span><br><span class="line">          )</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data(<span class="number">10</span>) != <span class="string">&quot;null&quot;</span>) &#123;</span><br><span class="line">          data(<span class="number">10</span>).split(<span class="string">&quot;,&quot;</span>).foreach(</span><br><span class="line">            accumulator.add(_, <span class="string">&quot;pay&quot;</span>)</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 使用累加器</span></span><br><span class="line">    <span class="keyword">val</span> accVal: mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">HotCategory</span>] = accumulator.value</span><br><span class="line">    <span class="keyword">val</span> list: <span class="type">List</span>[<span class="type">HotCategory</span>] = accVal.map(_._2).toList</span><br><span class="line"></span><br><span class="line">    list.sortWith(</span><br><span class="line">      (left, right) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (left.clickCnt &gt; right.clickCnt) &#123;</span><br><span class="line">          <span class="literal">true</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left.clickCnt == right.clickCnt &amp;&amp; left.orderCnt &gt; right.orderCnt) &#123;</span><br><span class="line">          <span class="literal">true</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left.clickCnt == right.clickCnt &amp;&amp; left.orderCnt == right.orderCnt &amp;&amp; left.payCnt &gt; right.payCnt) &#123;</span><br><span class="line">          <span class="literal">true</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ).take(<span class="number">10</span>).foreach(println)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">HotCategory</span>(<span class="params">cid: <span class="type">String</span>, var clickCnt: <span class="type">Int</span>, var orderCnt: <span class="type">Int</span>, var payCnt: <span class="type">Int</span></span>)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 自定义累加器</span></span><br><span class="line"><span class="comment">   * 1. 继承 AccumulatorV2，定义泛型</span></span><br><span class="line"><span class="comment">   * IN：（品类ID，行为类型）</span></span><br><span class="line"><span class="comment">   * OUT：mutable.Map[String, HotCategory]</span></span><br><span class="line"><span class="comment">   * 2. 重写方法</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">HotCategoryAccumulator</span> <span class="keyword">extends</span> <span class="title">AccumulatorV2</span>[(<span class="type">String</span>, <span class="type">String</span>), mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">HotCategory</span>]] </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> hcMap = mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">HotCategory</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">isZero</span></span>: <span class="type">Boolean</span> = &#123;</span><br><span class="line">      hcMap.isEmpty</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">copy</span></span>(): <span class="type">AccumulatorV2</span>[(<span class="type">String</span>, <span class="type">String</span>), mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">HotCategory</span>]] = &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="type">HotCategoryAccumulator</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">reset</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">      hcMap.clear()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(v: (<span class="type">String</span>, <span class="type">String</span>)): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> cid: <span class="type">String</span> = v._1</span><br><span class="line">      <span class="keyword">val</span> actionType: <span class="type">String</span> = v._2</span><br><span class="line">      <span class="keyword">val</span> category: <span class="type">HotCategory</span> = hcMap.getOrElse(cid, <span class="keyword">new</span> <span class="type">HotCategory</span>(cid, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">      <span class="keyword">if</span> (actionType == <span class="string">&quot;click&quot;</span>) &#123;</span><br><span class="line">        category.clickCnt += <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (actionType == <span class="string">&quot;order&quot;</span>) &#123;</span><br><span class="line">        category.orderCnt += <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (actionType == <span class="string">&quot;pay&quot;</span>) &#123;</span><br><span class="line">        category.payCnt += <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      hcMap.update(cid, category)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(other: <span class="type">AccumulatorV2</span>[(<span class="type">String</span>, <span class="type">String</span>), mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">HotCategory</span>]]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> map1: mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">HotCategory</span>] = <span class="keyword">this</span>.value</span><br><span class="line">      <span class="keyword">val</span> map2: mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">HotCategory</span>] = other.value</span><br><span class="line"></span><br><span class="line">      map2.foreach &#123;</span><br><span class="line">        <span class="keyword">case</span> (cid, hc) =&gt; &#123;</span><br><span class="line">          <span class="keyword">val</span> category: <span class="type">HotCategory</span> = map1.getOrElse(cid, <span class="keyword">new</span> <span class="type">HotCategory</span>(cid, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">          category.clickCnt += hc.clickCnt</span><br><span class="line">          category.orderCnt += hc.orderCnt</span><br><span class="line">          category.payCnt += hc.payCnt</span><br><span class="line">          map1.update(cid, category)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">value</span></span>: mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">HotCategory</span>] = hcMap</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="需求二：Top10-热门品类中每个品类的-的-Top10-活跃-Session-统计"><a href="#需求二：Top10-热门品类中每个品类的-的-Top10-活跃-Session-统计" class="headerlink" title="需求二：Top10 热门品类中每个品类的 的 Top10 活跃 Session 统计"></a>需求二：Top10 热门品类中每个品类的 的 Top10 活跃 Session 统计</h4><h5 id="需求说明-1"><a href="#需求说明-1" class="headerlink" title="需求说明"></a>需求说明</h5><p>在需求一的基础上，增加每个品类用户 session 的点击统计</p>
<h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark05_HotCategoryAndSessionTop10</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Case&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.读取原始日志数据</span></span><br><span class="line">    <span class="keyword">val</span> actionRDD: <span class="type">RDD</span>[<span class="type">String</span>] = sparkContext.textFile(<span class="string">&quot;data\\user_visit_action.txt&quot;</span>)</span><br><span class="line">    actionRDD.cache()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 获取热门品类Top10的ID</span></span><br><span class="line">    <span class="keyword">val</span> ids: <span class="type">Array</span>[<span class="type">String</span>] = hotCategoryIDsTop10(actionRDD)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.过滤原始数据保留前10品类的点击数据</span></span><br><span class="line">    <span class="keyword">val</span> filterActionRdd: <span class="type">RDD</span>[<span class="type">String</span>] = actionRDD.filter(</span><br><span class="line">      line =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> data: <span class="type">Array</span>[<span class="type">String</span>] = line.split(<span class="string">&quot;_&quot;</span>)</span><br><span class="line">        ids.contains(data(<span class="number">6</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.根据品类ID和session进行点击量统计</span></span><br><span class="line">    <span class="keyword">val</span> reduceRdd: <span class="type">RDD</span>[((<span class="type">String</span>, <span class="type">String</span>), <span class="type">Int</span>)] = filterActionRdd.map(</span><br><span class="line">      line =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> data: <span class="type">Array</span>[<span class="type">String</span>] = line.split(<span class="string">&quot;_&quot;</span>)</span><br><span class="line">        ((data(<span class="number">6</span>), data(<span class="number">2</span>)), <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ).reduceByKey(_ + _)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.将统计结果结构转换</span></span><br><span class="line">    <span class="keyword">val</span> mapRdd: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">String</span>, <span class="type">Int</span>))] = reduceRdd.map &#123;</span><br><span class="line">      <span class="keyword">case</span> ((cid, sid), sum) =&gt; &#123;</span><br><span class="line">        (cid, (sid, sum))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.相同品类分组</span></span><br><span class="line">    <span class="keyword">val</span> groupRdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Iterable</span>[(<span class="type">String</span>, <span class="type">Int</span>)])] = mapRdd.groupByKey()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7.将分组后的数据取前10</span></span><br><span class="line">    <span class="keyword">val</span> resultRdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">List</span>[(<span class="type">String</span>, <span class="type">Int</span>)])] = groupRdd.mapValues(</span><br><span class="line">      iter =&gt; &#123;</span><br><span class="line">        iter.toList.sortBy(_._2)(<span class="type">Ordering</span>.<span class="type">Int</span>.reverse).take(<span class="number">10</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    resultRdd.collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hotCategoryIDsTop10</span></span>(actionRDD: <span class="type">RDD</span>[<span class="type">String</span>]) = &#123;</span><br><span class="line">    <span class="keyword">val</span> flatmapRdd: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>))] = actionRDD.flatMap(</span><br><span class="line">      line =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> data: <span class="type">Array</span>[<span class="type">String</span>] = line.split(<span class="string">&quot;_&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> (data(<span class="number">6</span>) != <span class="string">&quot;-1&quot;</span>) &#123;</span><br><span class="line">          <span class="type">List</span>((data(<span class="number">6</span>), (<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)))</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data(<span class="number">8</span>) != <span class="string">&quot;null&quot;</span>) &#123;</span><br><span class="line">          data(<span class="number">8</span>).split(<span class="string">&quot;,&quot;</span>).map((_, (<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>)))</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data(<span class="number">10</span>) != <span class="string">&quot;null&quot;</span>) &#123;</span><br><span class="line">          data(<span class="number">10</span>).split(<span class="string">&quot;,&quot;</span>).map((_, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="type">Nil</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> analysisRdd: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>))] = flatmapRdd.reduceByKey(</span><br><span class="line">      (v1, v2) =&gt; &#123;</span><br><span class="line">        (v1._1 + v2._1, v1._2 + v2._2, v1._3 + v2._3)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    analysisRdd.sortBy(_._2, <span class="literal">false</span>).take(<span class="number">10</span>).map(_._1)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="需求三：页面单跳转换率统计"><a href="#需求三：页面单跳转换率统计" class="headerlink" title="需求三：页面单跳转换率统计"></a>需求三：页面单跳转换率统计</h4><h5 id="需求说明-2"><a href="#需求说明-2" class="headerlink" title="需求说明"></a>需求说明</h5><p>计算页面单跳转化率，什么是页面单跳转换率，比如一个用户在一次 Session 过程中访问的页面路径 3,5,7,9,10,21，那么页面 3 跳到页面 5 叫一次单跳，7-9 也叫一次单跳，那么单跳转化率就是要统计页面点击的概率。<br>比如：计算 3-5 的单跳转化率，先获取符合条件的 Session 对于页面 3 的访问次数（PV）为 A，然后获取符合条件的 Session 中访问了页面 3 又紧接着访问了页面 5 的次数为 B，那么 B/A 就是 3-5 的页面单跳转化率。</p>
<h5 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h5><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220527005735.png"></p>
<h5 id="需求实现"><a href="#需求实现" class="headerlink" title="需求实现"></a>需求实现</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark07_PageFlowAnalysis_Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Case&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> actionRDD: <span class="type">RDD</span>[<span class="type">String</span>] = sparkContext.textFile(<span class="string">&quot;data\\user_visit_action.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> actionDataRdd: <span class="type">RDD</span>[<span class="type">UserVisitAction</span>] = actionRDD.map(</span><br><span class="line">      castToUserVisitAction(_)</span><br><span class="line">    )</span><br><span class="line">    actionDataRdd.cache()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 对指定页面连续跳转进行统计</span></span><br><span class="line">    <span class="comment">// 1-2,2-3,3-4,4-5,5-6,6-7</span></span><br><span class="line">    <span class="keyword">val</span> ids: <span class="type">List</span>[<span class="type">Long</span>] = <span class="type">List</span>[<span class="type">Long</span>](<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line">    <span class="keyword">val</span> wantFlowIds: <span class="type">List</span>[(<span class="type">Long</span>, <span class="type">Long</span>)] = ids.zip(ids.tail)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 计算分母</span></span><br><span class="line">    <span class="keyword">val</span> pageIdToCountMap: <span class="type">Map</span>[<span class="type">Long</span>, <span class="type">Int</span>] = actionDataRdd.filter(</span><br><span class="line">      action =&gt; &#123;</span><br><span class="line">        ids.init.contains(action.page_id)</span><br><span class="line">      &#125;</span><br><span class="line">    ).map(</span><br><span class="line">      action =&gt; &#123;</span><br><span class="line">        (action.page_id, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ).reduceByKey(_ + _).collect().toMap</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 计算分子</span></span><br><span class="line">    <span class="comment">// 根据session进行分组</span></span><br><span class="line">    <span class="keyword">val</span> sessionRdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Iterable</span>[<span class="type">UserVisitAction</span>])] = actionDataRdd.groupBy(_.session_id)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分组后，根据访问时间从小到大排序</span></span><br><span class="line">    <span class="keyword">val</span> mvRdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">List</span>[((<span class="type">Long</span>, <span class="type">Long</span>), <span class="type">Int</span>)])] = sessionRdd.mapValues(</span><br><span class="line">      iter =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> sortList: <span class="type">List</span>[<span class="type">UserVisitAction</span>] = iter.toList.sortBy(_.action_time)</span><br><span class="line">        <span class="keyword">val</span> flowIds: <span class="type">List</span>[<span class="type">Long</span>] = sortList.map(_.page_id)</span><br><span class="line">        <span class="comment">// Sliding：滑窗</span></span><br><span class="line">        <span class="comment">// Zip：拉链</span></span><br><span class="line">        <span class="keyword">val</span> pageFlowIds: <span class="type">List</span>[(<span class="type">Long</span>, <span class="type">Long</span>)] = flowIds.zip(flowIds.tail)</span><br><span class="line">        <span class="comment">// 将不合法的页面过滤</span></span><br><span class="line">        pageFlowIds.filter(</span><br><span class="line">          tuple =&gt; &#123;</span><br><span class="line">            wantFlowIds.contains(tuple)</span><br><span class="line">          &#125;</span><br><span class="line">        ).map(</span><br><span class="line">          tuple =&gt; &#123;</span><br><span class="line">            (tuple, <span class="number">1</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> dataRdd: <span class="type">RDD</span>[((<span class="type">Long</span>, <span class="type">Long</span>), <span class="type">Int</span>)] = mvRdd.map(_._2).flatMap(list =&gt; list).reduceByKey(_ + _)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 计算单调转换率</span></span><br><span class="line">    dataRdd.foreach &#123;</span><br><span class="line">      <span class="keyword">case</span> ((pageId1, pageId2), sum) =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> denominator: <span class="type">Int</span> = pageIdToCountMap.get(pageId1).get</span><br><span class="line">        println(<span class="string">s&quot;页面【<span class="subst">$&#123;pageId1&#125;</span>】到页面【<span class="subst">$&#123;pageId2&#125;</span>】单跳转换率为：&quot;</span> + sum.toDouble / denominator)</span><br><span class="line">        denominator</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">castToUserVisitAction</span></span>(str: <span class="type">String</span>): <span class="type">UserVisitAction</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> data: <span class="type">Array</span>[<span class="type">String</span>] = str.split(<span class="string">&quot;_&quot;</span>)</span><br><span class="line">    <span class="type">UserVisitAction</span>(</span><br><span class="line">      data(<span class="number">0</span>),</span><br><span class="line">      data(<span class="number">1</span>).toLong,</span><br><span class="line">      data(<span class="number">2</span>),</span><br><span class="line">      data(<span class="number">3</span>).toLong,</span><br><span class="line">      data(<span class="number">4</span>),</span><br><span class="line">      data(<span class="number">5</span>),</span><br><span class="line">      data(<span class="number">6</span>).toLong,</span><br><span class="line">      data(<span class="number">7</span>).toLong,</span><br><span class="line">      data(<span class="number">8</span>),</span><br><span class="line">      data(<span class="number">9</span>),</span><br><span class="line">      data(<span class="number">10</span>),</span><br><span class="line">      data(<span class="number">11</span>),</span><br><span class="line">      data(<span class="number">12</span>).toLong</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//用户访问动作表</span></span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVisitAction</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="class">                              date: <span class="type">String</span>, //用户点击行为的日期</span></span></span><br><span class="line"><span class="params"><span class="class">                              user_id: <span class="type">Long</span>, //用户的 <span class="type">ID</span></span></span></span><br><span class="line"><span class="params"><span class="class">                              session_id: <span class="type">String</span>, //<span class="type">Session</span> 的 <span class="type">ID</span></span></span></span><br><span class="line"><span class="params"><span class="class">                              page_id: <span class="type">Long</span>, //某个页面的 <span class="type">ID</span></span></span></span><br><span class="line"><span class="params"><span class="class">                              action_time: <span class="type">String</span>, //动作的时间点</span></span></span><br><span class="line"><span class="params"><span class="class">                              search_keyword: <span class="type">String</span>, //用户搜索的关键词</span></span></span><br><span class="line"><span class="params"><span class="class">                              click_category_id: <span class="type">Long</span>, //某一个商品品类的 <span class="type">ID</span></span></span></span><br><span class="line"><span class="params"><span class="class">                              click_product_id: <span class="type">Long</span>, //某一个商品的 <span class="type">ID</span></span></span></span><br><span class="line"><span class="params"><span class="class">                              order_category_ids: <span class="type">String</span>, //一次订单中所有品类的 <span class="type">ID</span> 集合</span></span></span><br><span class="line"><span class="params"><span class="class">                              order_product_ids: <span class="type">String</span>, //一次订单中所有商品的 <span class="type">ID</span> 集合</span></span></span><br><span class="line"><span class="params"><span class="class">                              pay_category_ids: <span class="type">String</span>, //一次支付中所有品类的 <span class="type">ID</span> 集合</span></span></span><br><span class="line"><span class="params"><span class="class">                              pay_product_ids: <span class="type">String</span>, //一次支付中所有商品的 <span class="type">ID</span> 集合</span></span></span><br><span class="line"><span class="params"><span class="class">                              city_id: <span class="type">Long</span> //城市 id</span></span></span><br><span class="line"><span class="params"><span class="class">                            </span>)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="工程化代码"><a href="#工程化代码" class="headerlink" title="工程化代码"></a>工程化代码</h4><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20220527103550.png" alt="image-20220527103546600"></p>
<h5 id="application"><a href="#application" class="headerlink" title="application"></a>application</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.bigdata.spark.core.framework.application</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eitan.bigdata.spark.core.framework.common.<span class="type">TApplication</span></span><br><span class="line"><span class="keyword">import</span> com.eitan.bigdata.spark.core.framework.controller.<span class="type">WordCountController</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCountApplication</span> <span class="keyword">extends</span> <span class="title">App</span> <span class="keyword">with</span> <span class="title">TApplication</span> </span>&#123;</span><br><span class="line">  start() &#123;</span><br><span class="line">    <span class="keyword">val</span> controller = <span class="keyword">new</span> <span class="type">WordCountController</span></span><br><span class="line">    controller.dispatch()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="common"><a href="#common" class="headerlink" title="common"></a>common</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.bigdata.spark.core.framework.common</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eitan.bigdata.spark.core.framework.util.<span class="type">EnvUtil</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">TApplication</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">start</span></span>(master: <span class="type">String</span> = <span class="string">&quot;local[*]&quot;</span>, app: <span class="type">String</span> = <span class="string">&quot;Application&quot;</span>)(op: =&gt; <span class="type">Unit</span>) = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(master).setAppName(app)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line">    <span class="type">EnvUtil</span>.put(sc)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      op</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> ex =&gt; println(ex.getMessage)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">    <span class="type">EnvUtil</span>.clear()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.bigdata.spark.core.framework.common</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">TController</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span></span>(): <span class="type">Unit</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.bigdata.spark.core.framework.common</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eitan.bigdata.spark.core.framework.util.<span class="type">EnvUtil</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">TDao</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">readFile</span></span>(path: <span class="type">String</span>) = &#123;</span><br><span class="line">    <span class="type">EnvUtil</span>.take().textFile(path)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.bigdata.spark.core.framework.common</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">TService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">dataAnalysis</span></span>(): <span class="type">Any</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.bigdata.spark.core.framework.controller</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eitan.bigdata.spark.core.framework.common.<span class="type">TController</span></span><br><span class="line"><span class="keyword">import</span> com.eitan.bigdata.spark.core.framework.service.<span class="type">WordCountService</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordCountController</span> <span class="keyword">extends</span> <span class="title">TController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> wordCountService = <span class="keyword">new</span> <span class="type">WordCountService</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> array = wordCountService.dataAnalysis()</span><br><span class="line">    array.foreach(println)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.bigdata.spark.core.framework.dao</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eitan.bigdata.spark.core.framework.common.<span class="type">TDao</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordCountDao</span> <span class="keyword">extends</span> <span class="title">TDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="service"><a href="#service" class="headerlink" title="service"></a>service</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.bigdata.spark.core.framework.service</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eitan.bigdata.spark.core.framework.common.<span class="type">TService</span></span><br><span class="line"><span class="keyword">import</span> com.eitan.bigdata.spark.core.framework.dao.<span class="type">WordCountDao</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordCountService</span> <span class="keyword">extends</span> <span class="title">TService</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> wordCountDao = <span class="keyword">new</span> <span class="type">WordCountDao</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数据分析</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">dataAnalysis</span></span>() = &#123;</span><br><span class="line">    <span class="comment">// 读取文件数据</span></span><br><span class="line">    <span class="keyword">val</span> lines: <span class="type">RDD</span>[<span class="type">String</span>] = wordCountDao.readFile(<span class="string">&quot;data\\1.txt,data\\2.txt&quot;</span>)</span><br><span class="line">    <span class="comment">// 将文件中的数据进行分词</span></span><br><span class="line">    <span class="keyword">val</span> words: <span class="type">RDD</span>[<span class="type">String</span>] = lines.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> wordToOne: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = words.map(</span><br><span class="line">      word =&gt; (word, <span class="number">1</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Spark 框架提供了更多功能，可以将分组和聚合使用一个方法实现</span></span><br><span class="line">    <span class="comment">// reduceByKey: 相同Key的数据，可以对value进行reduce聚合</span></span><br><span class="line">    <span class="keyword">val</span> wordToCount: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordToOne.reduceByKey(_ + _)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将转换结果采集到控制台打印出来</span></span><br><span class="line">    wordToCount.collect()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="util"><a href="#util" class="headerlink" title="util"></a>util</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eitan.bigdata.spark.core.framework.util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkContext</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">EnvUtil</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> scLocal = <span class="keyword">new</span> <span class="type">ThreadLocal</span>[<span class="type">SparkContext</span>]</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">put</span></span>(sc: <span class="type">SparkContext</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    scLocal.set(sc)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">take</span></span>(): <span class="type">SparkContext</span> = &#123;</span><br><span class="line">    scLocal.get()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">clear</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    scLocal.remove()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Big Data</category>
      </categories>
      <tags>
        <tag>spark</tag>
      </tags>
  </entry>
</search>
