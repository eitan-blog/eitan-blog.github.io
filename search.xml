<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HashMap（一）</title>
    <url>/2021/05/13/HashMap%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>基于 <em>jkd1.8</em> 源码认识 HashMap。包含以下内容：</p>
<ol>
<li>扰动函数</li>
<li>初始化容量</li>
<li>负载因子</li>
</ol>
<span id="more"></span>

<h2 id="扰动函数"><a href="#扰动函数" class="headerlink" title="扰动函数"></a>扰动函数</h2><p>在 HashMap 存放元素时候有这样一段代码来处理哈希值，用于优化散列效果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-运算符"><a href="#1-运算符" class="headerlink" title="1.运算符"></a>1.运算符</h3><ul>
<li>&gt;&gt;&gt;：无符号右移。无论是正数还是负数，高位通通补0；</li>
<li>^：异或运算符。相同为 0，不同为 1；</li>
<li>&amp;：与运算符。同为 1 时才为 1，否则为 0。</li>
</ul>
<h3 id="2-元素在数组中的位置"><a href="#2-元素在数组中的位置" class="headerlink" title="2.元素在数组中的位置"></a>2.元素在数组中的位置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 找到元素在数组中的位置，n为数组长度。</span></span><br><span class="line">i = (n - <span class="number">1</span>) &amp; hash</span><br></pre></td></tr></table></figure>

<h3 id="3-为什么-HashMap-数组的长度-n-要是2的整数幂"><a href="#3-为什么-HashMap-数组的长度-n-要是2的整数幂" class="headerlink" title="3.为什么 HashMap 数组的长度 n 要是2的整数幂"></a>3.为什么 HashMap 数组的长度 n 要是2的整数幂</h3><p>为使 hash 值散列分布在数组的下标当中。</p>
<p>假设我们有一个长度为16的数组，则他的下标范围为 0~15。而任何一个2的整数幂，减1得到的二进制位全部是1。让 hash 值与其就行与运算，结果将保留 hash 值小于数组下标范围的低位。当 hash 足够散列时，得到的结果必为在数组下标内散列的值。</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">    <span class="number">00100100</span> <span class="number">10100101</span> <span class="number">11000100</span> <span class="number">00100101</span>    // Hash值</span><br><span class="line">&amp;   <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001111</span>    // <span class="number">16</span> - <span class="number">1</span> = <span class="number">15</span></span><br><span class="line">----------------------------------</span><br><span class="line">    <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000101</span>    // 高位全部归零，只保留末四位。</span><br></pre></td></tr></table></figure>

<h3 id="4-扰动函数里为何无符号右移16位"><a href="#4-扰动函数里为何无符号右移16位" class="headerlink" title="4.扰动函数里为何无符号右移16位"></a>4.扰动函数里为何无符号右移16位</h3><p>为使 hash 值的高位也能影响到该元素在数组中的位置，提高散列性。</p>
<p>因为获取元素在数组中的位置时取的是 hash 值在数组下标范围内的低位，则将Hash值的高16位右移并与原Hash值取异或运算（^），混合高16位和低16位的值，会得到一个更加散列的低16位的Hash值。</p>
<h2 id="初始化容量"><a href="#初始化容量" class="headerlink" title="初始化容量"></a>初始化容量</h2><p>在 HashMap 的初始化中，有这样一段方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>其中 <em>threshold</em> 的取值为比 <em>initialCapacity</em> 大的最小2的整数幂：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="负载因子"><a href="#负载因子" class="headerlink" title="负载因子"></a>负载因子</h2><p>负载因子决定了数据量达到多少了以后，hashmap 会进行扩容，默认值为 0.75。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL调优（一）未完成</title>
    <url>/2021/05/14/MySQL%E8%B0%83%E4%BC%98%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Server-处理-Client-的请求过程"><a href="#Server-处理-Client-的请求过程" class="headerlink" title="Server 处理 Client 的请求过程"></a>Server 处理 Client 的请求过程</h2><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210514091718.png" alt="image-20210514091715754"></p>
<span id="more"></span>

<h2 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h2><h3 id="SHOW-PROFILE-分析SQL执行耗时"><a href="#SHOW-PROFILE-分析SQL执行耗时" class="headerlink" title="SHOW PROFILE 分析SQL执行耗时"></a>SHOW PROFILE 分析SQL执行耗时</h3><ol>
<li><p>开启分析</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> profiling<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>运行查询语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> category;</span><br></pre></td></tr></table></figure></li>
<li><p>查看查询语句耗时</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> profiles;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+------------------------+</span></span><br><span class="line"><span class="operator">|</span> Query_ID <span class="operator">|</span> Duration   <span class="operator">|</span> Query                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+------------------------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span> <span class="number">0.00019575</span> <span class="operator">|</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span> <span class="number">0.00018800</span> <span class="operator">|</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> category <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+------------------------+</span></span><br></pre></td></tr></table></figure></li>
<li><p>查询单个语句的详细信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> profile <span class="keyword">for</span> query <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> Status               <span class="operator">|</span> Duration <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> starting             <span class="operator">|</span> <span class="number">0.000052</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> checking permissions <span class="operator">|</span> <span class="number">0.000005</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Opening tables       <span class="operator">|</span> <span class="number">0.000014</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> init                 <span class="operator">|</span> <span class="number">0.000014</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">System</span> lock          <span class="operator">|</span> <span class="number">0.000006</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> optimizing           <span class="operator">|</span> <span class="number">0.000003</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> statistics           <span class="operator">|</span> <span class="number">0.000008</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> preparing            <span class="operator">|</span> <span class="number">0.000006</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> executing            <span class="operator">|</span> <span class="number">0.000002</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Sending data         <span class="operator">|</span> <span class="number">0.000034</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">end</span>                  <span class="operator">|</span> <span class="number">0.000003</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> query <span class="keyword">end</span>            <span class="operator">|</span> <span class="number">0.000004</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> closing tables       <span class="operator">|</span> <span class="number">0.000006</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> freeing items        <span class="operator">|</span> <span class="number">0.000031</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cleaning up          <span class="operator">|</span> <span class="number">0.000008</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+----------+</span></span><br></pre></td></tr></table></figure></li>
<li><p>查看sql相关的所有分析【主要看i/o与cpu】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> profile <span class="keyword">all</span> <span class="keyword">for</span> query <span class="number">1</span> \G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: starting</span><br><span class="line">           Duration: <span class="number">0.000052</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="keyword">NULL</span></span><br><span class="line">        Source_file: <span class="keyword">NULL</span></span><br><span class="line">        Source_line: <span class="keyword">NULL</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">2.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: checking permissions</span><br><span class="line">           Duration: <span class="number">0.000005</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_parse.cc</span><br><span class="line">        Source_line: <span class="number">5266</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">3.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: Opening tables</span><br><span class="line">           Duration: <span class="number">0.000014</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_base.cc</span><br><span class="line">        Source_line: <span class="number">5018</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">4.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: init</span><br><span class="line">           Duration: <span class="number">0.000014</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_select.cc</span><br><span class="line">        Source_line: <span class="number">1050</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">5.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: <span class="keyword">System</span> lock</span><br><span class="line">           Duration: <span class="number">0.000006</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: lock.cc</span><br><span class="line">        Source_line: <span class="number">304</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">6.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: optimizing</span><br><span class="line">           Duration: <span class="number">0.000003</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_optimizer.cc</span><br><span class="line">        Source_line: <span class="number">138</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">7.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: statistics</span><br><span class="line">           Duration: <span class="number">0.000008</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_optimizer.cc</span><br><span class="line">        Source_line: <span class="number">362</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">8.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: preparing</span><br><span class="line">           Duration: <span class="number">0.000006</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_optimizer.cc</span><br><span class="line">        Source_line: <span class="number">485</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">9.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: executing</span><br><span class="line">           Duration: <span class="number">0.000002</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_executor.cc</span><br><span class="line">        Source_line: <span class="number">110</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">10.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: Sending data</span><br><span class="line">           Duration: <span class="number">0.000034</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_executor.cc</span><br><span class="line">        Source_line: <span class="number">190</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">11.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: <span class="keyword">end</span></span><br><span class="line">           Duration: <span class="number">0.000003</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_select.cc</span><br><span class="line">        Source_line: <span class="number">1105</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">12.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: query <span class="keyword">end</span></span><br><span class="line">           Duration: <span class="number">0.000004</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_parse.cc</span><br><span class="line">        Source_line: <span class="number">4965</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">13.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: closing tables</span><br><span class="line">           Duration: <span class="number">0.000006</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_parse.cc</span><br><span class="line">        Source_line: <span class="number">5013</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">14.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: freeing items</span><br><span class="line">           Duration: <span class="number">0.000031</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_parse.cc</span><br><span class="line">        Source_line: <span class="number">6404</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">15.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             Status: cleaning up</span><br><span class="line">           Duration: <span class="number">0.000008</span></span><br><span class="line">           CPU_user: <span class="number">0.000000</span></span><br><span class="line">         CPU_system: <span class="number">0.000000</span></span><br><span class="line">  Context_voluntary: <span class="keyword">NULL</span></span><br><span class="line">Context_involuntary: <span class="keyword">NULL</span></span><br><span class="line">       Block_ops_in: <span class="keyword">NULL</span></span><br><span class="line">      Block_ops_out: <span class="keyword">NULL</span></span><br><span class="line">      Messages_sent: <span class="keyword">NULL</span></span><br><span class="line">  Messages_received: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_major: <span class="keyword">NULL</span></span><br><span class="line">  Page_faults_minor: <span class="keyword">NULL</span></span><br><span class="line">              Swaps: <span class="keyword">NULL</span></span><br><span class="line">    Source_function: <span class="operator">&lt;</span><span class="literal">unknown</span><span class="operator">&gt;</span></span><br><span class="line">        Source_file: sql_parse.cc</span><br><span class="line">        Source_line: <span class="number">1772</span></span><br></pre></td></tr></table></figure></li>
<li><p>关闭分析</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> profiling<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="MySQL-Performance-Schema"><a href="#MySQL-Performance-Schema" class="headerlink" title="MySQL Performance Schema"></a>MySQL Performance Schema</h3><p>详细可以查看<a href="https://dev.mysql.com/doc/refman/8.0/en/performance-schema.html">官方文档</a></p>
<h3 id="查看线程连接个数-SHOW-PROCESSLIST"><a href="#查看线程连接个数-SHOW-PROCESSLIST" class="headerlink" title="查看线程连接个数 SHOW PROCESSLIST"></a>查看线程连接个数 SHOW PROCESSLIST</h3><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">+----+------+-----------------+----------+---------+------+-------+------------------+</span><br><span class="line">|<span class="string"> Id </span>|<span class="string"> User </span>|<span class="string"> Host            </span>|<span class="string"> db       </span>|<span class="string"> Command </span>|<span class="string"> Time </span>|<span class="string"> State </span>|<span class="string"> Info             </span>|</span><br><span class="line">+----+------+-----------------+----------+---------+------+-------+------------------+</span><br><span class="line">|<span class="string"> 45 </span>|<span class="string"> root </span>|<span class="string"> localhost:11156 </span>|<span class="string"> bugstack </span>|<span class="string"> Sleep   </span>|<span class="string">  210 </span>|<span class="string">       </span>|<span class="string"> NULL             </span>|</span><br><span class="line">|<span class="string"> 46 </span>|<span class="string"> root </span>|<span class="string"> localhost:13537 </span>|<span class="string"> NULL     </span>|<span class="string"> Query   </span>|<span class="string">    0 </span>|<span class="string"> init  </span>|<span class="string"> show processlist </span>|</span><br><span class="line">+----+------+-----------------+----------+---------+------+-------+------------------+</span><br></pre></td></tr></table></figure>

<ul>
<li>id：表示session id</li>
<li>user：表示操作的用户</li>
<li>host：表示操作的主机</li>
<li>db：表示操作的数据库</li>
<li>command：表示命令类型</li>
<li>info：表示详细的sql语句</li>
<li>time：表示相应命令执行时间</li>
<li>state：表示命令执行状态</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ（一）</title>
    <url>/2021/05/17/RocketMQ%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul>
<li>编译安装</li>
<li>HelloWorld</li>
</ul>
<h3 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h3><p><a href="http://rocketmq.apache.org/">http://rocketmq.apache.org/</a></p>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><p><a href="https://github.com/apache/rocketmq">https://github.com/apache/rocketmq</a></p>
<span id="more"></span>



<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="在-Linux-上安装-JDK"><a href="#在-Linux-上安装-JDK" class="headerlink" title="在 Linux 上安装 JDK"></a>在 Linux 上安装 JDK</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum search jdk</span><br><span class="line"></span><br><span class="line">yum install java-1.8.0-openjdk.x86_64</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 找到安装位置</span></span><br><span class="line">java -verbose</span><br><span class="line"></span><br><span class="line">[Loaded java.lang.Shutdown from /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.292.b10-1.el7_9.x86_64/jre/lib/rt.jar]</span><br><span class="line">[Loaded java.lang.Shutdown$Lock from /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.292.b10-1.el7_9.x86_64/jre/lib/rt.jar]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置 JAVA_HOME</span></span><br><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="在-Linux-上安装-Maven"><a href="#在-Linux-上安装-Maven" class="headerlink" title="在 Linux 上安装 Maven"></a>在 Linux 上安装 Maven</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载压缩包</span></span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -zxvf apache-maven-3.6.3-bin.tar.gz</span><br><span class="line"></span><br><span class="line">mv apache-maven-3.6.3 /usr/local/</span><br><span class="line"></span><br><span class="line">vim /usr/local/apache-maven-3.6.3/conf/settings.xml</span><br><span class="line">   &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;aliyun-maven&lt;/id&gt;</span><br><span class="line">      &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">      &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">    </span><br><span class="line">vim /etc/profile</span><br><span class="line">export MAVEN_HOME=/usr/local/apache-maven-3.6.3</span><br><span class="line">export PATH=$PATH:$MAVEN_HAOM/bin</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="安装-RocketMQ"><a href="#安装-RocketMQ" class="headerlink" title="安装 RocketMQ"></a>安装 RocketMQ</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.8.0/rocketmq-all-4.8.0-source-release.zip</span><br><span class="line"></span><br><span class="line">unzip rocketmq-all-4.8.0-source-release.zip</span><br><span class="line"></span><br><span class="line">mvn -Prelease-all -DskipTests clean install -U</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">./mqnamesrv</span><br><span class="line">./mqbroker</span><br><span class="line"></span><br><span class="line"># 测试</span><br><span class="line">./tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br></pre></td></tr></table></figure>

<p>若遇到错误：linux No compiler is provided in this environment. Perhaps you are running on a JRE rather than a JDK，则执行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install java-devel</span><br></pre></td></tr></table></figure>

<p>启动报错：Native memory allocation (mmap) failed to map 2147483648 bytes for committing reserved memory</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/local/rocketmq-4.8.0/bin/runserver.sh</span><br><span class="line">vim /usr/local/rocketmq-4.8.0/bin/runbroker.sh</span><br><span class="line"></span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改为</span></span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span><br></pre></td></tr></table></figure>

<p>测试报错：connect to null failed</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim tools.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 放在 JVM Configuration 之前</span></span><br><span class="line">export NAMESRV_ADDR=localhost:9876</span><br></pre></td></tr></table></figure>

<p>测试报错：org.apache.rocketmq.client.exception.MQClientException: No route info of this topic: TopicTest</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动broker指定连接的ip：port</span></span><br><span class="line">./mqbroker -n localhost:9876</span><br></pre></td></tr></table></figure>

<h3 id="控制台rocketmq-console编译安装"><a href="#控制台rocketmq-console编译安装" class="headerlink" title="控制台rocketmq-console编译安装"></a>控制台rocketmq-console编译安装</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><a href="https://github.com/apache/rocketmq-externals">github仓库</a></p>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>

<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar rocketmq-console-ng-2.0.0.jar --rocketmq.config.namesrvAddr=172.17.0.2:9876</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中Bean的生命周期</title>
    <url>/2021/06/30/Spring%E4%B8%ADBean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h2 id="Bean的生命周期概述图"><a href="#Bean的生命周期概述图" class="headerlink" title="Bean的生命周期概述图"></a>Bean的生命周期概述图</h2><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210630110630.png" alt="image-20210630110625527"></p>
<span id="more"></span>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中SPI的使用</title>
    <url>/2021/06/25/Spring%E4%B8%ADSPI%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="什么是SPI"><a href="#什么是SPI" class="headerlink" title="什么是SPI"></a>什么是SPI</h3><p>SPI 全程叫 <strong>Service Provider Interface</strong> 服务提供接口，它可以通过一个指定的接口 / 抽象类，寻找到预先配置好的实现类（并创建实现类对象）。</p>
<p>Spring 通过 <em>SpringFactoriesLoader</em> 读取放在 <em>META-INF</em> 目录下名为 <em>spring.factories</em> 的文件，获取文件中的权限定类名转化为实体对象。</p>
<span id="more"></span>

<h3 id="spring-factories"><a href="#spring-factories" class="headerlink" title="spring.factories"></a>spring.factories</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">com.eitan.spring.spi.dao.DemoDao</span>=<span class="string">\</span></span><br><span class="line"><span class="string">  com.eitan.spring.spi.daoImpl.MysqlDemoDao,\</span></span><br><span class="line"><span class="string">  com.eitan.spring.spi.daoImpl.OracleDemoDao</span></span><br></pre></td></tr></table></figure>



<h3 id="接口和实现类"><a href="#接口和实现类" class="headerlink" title="接口和实现类"></a>接口和实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoDao</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlDemoDao</span> <span class="keyword">implements</span> <span class="title">DemoDao</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OracleDemoDao</span> <span class="keyword">implements</span> <span class="title">DemoDao</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="SpringApplication"><a href="#SpringApplication" class="headerlink" title="SpringApplication"></a>SpringApplication</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;DemoDao&gt; demoDaoList = SpringFactoriesLoader.loadFactories(DemoDao.class, SpringApplication.class.getClassLoader());</span><br><span class="line">        demoDaoList.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; factoryNames = SpringFactoriesLoader.loadFactoryNames(DemoDao.class, SpringApplication.class.getClassLoader());</span><br><span class="line">        factoryNames.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">com<span class="selector-class">.eitan</span><span class="selector-class">.spring</span><span class="selector-class">.spi</span><span class="selector-class">.daoImpl</span>.MysqlDemoDao@f2a0b8e</span><br><span class="line">com<span class="selector-class">.eitan</span><span class="selector-class">.spring</span><span class="selector-class">.spi</span><span class="selector-class">.daoImpl</span>.OracleDemoDao@<span class="number">593634</span>ad</span><br><span class="line">com<span class="selector-class">.eitan</span><span class="selector-class">.spring</span><span class="selector-class">.spi</span><span class="selector-class">.daoImpl</span><span class="selector-class">.MysqlDemoDao</span></span><br><span class="line">com<span class="selector-class">.eitan</span><span class="selector-class">.spring</span><span class="selector-class">.spi</span><span class="selector-class">.daoImpl</span>.OracleDemoDao</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中bean的几种注入方式</title>
    <url>/2021/06/30/Spring%E4%B8%ADbean%E7%9A%84%E5%87%A0%E7%A7%8D%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="声明式注入"><a href="#声明式注入" class="headerlink" title="声明式注入"></a>声明式注入</h3><h4 id="Configuration-Bean"><a href="#Configuration-Bean" class="headerlink" title="@Configuration + @Bean"></a>@Configuration + @Bean</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickstartConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Component-ComponentScan"><a href="#Component-ComponentScan" class="headerlink" title="@Component + @ComponentScan"></a>@Component + @ComponentScan</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.linkedbear.spring.annotation.c_scan&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComponentScanConfiguration</span></span></span><br></pre></td></tr></table></figure>

<h4 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Boss.class, BartenderConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableTavern</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="配置式注入"><a href="#配置式注入" class="headerlink" title="配置式注入"></a>配置式注入</h3><h4 id="lt-bean-gt-标签声明"><a href="#lt-bean-gt-标签声明" class="headerlink" title="&lt;bean&gt;标签声明"></a>&lt;bean&gt;标签声明</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.linkedbear.spring.basic_dl.a_quickstart_byname.bean.Person&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编程式注入-BeanDefinition"><a href="#编程式注入-BeanDefinition" class="headerlink" title="编程式注入 BeanDefinition"></a>编程式注入 <em>BeanDefinition</em></h3><h4 id="ImportBeanDefinitionRegistrar"><a href="#ImportBeanDefinitionRegistrar" class="headerlink" title="ImportBeanDefinitionRegistrar"></a>ImportBeanDefinitionRegistrar</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaiterRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.registerBeanDefinition(<span class="string">&quot;waiter&quot;</span>, <span class="keyword">new</span> RootBeanDefinition(Waiter.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="手动构造-BeanDefinition-注入"><a href="#手动构造-BeanDefinition-注入" class="headerlink" title="手动构造 BeanDefinition 注入"></a>手动构造 <em>BeanDefinition</em> 注入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationConfigApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line"></span><br><span class="line">BeanDefinition personDefinition = BeanDefinitionBuilder.rootBeanDefinition(Person.class)</span><br><span class="line">        .addPropertyValue(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>).getBeanDefinition();</span><br><span class="line">ctx.registerBeanDefinition(<span class="string">&quot;person&quot;</span>, personDefinition);</span><br><span class="line"></span><br><span class="line">ctx.refresh();</span><br></pre></td></tr></table></figure>

<h4 id="借助-BeanDefinitionRegistryPostProcessor-注入"><a href="#借助-BeanDefinitionRegistryPostProcessor-注入" class="headerlink" title="借助 BeanDefinitionRegistryPostProcessor 注入"></a>借助 BeanDefinitionRegistryPostProcessor 注入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    registry.registerBeanDefinition(<span class="string">&quot;animalNameSetterPostProcessor&quot;</span>, </span><br><span class="line">            <span class="keyword">new</span> RootBeanDefinition(AnimalNameSetterPostProcessor.class));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中三种后置处理器对比</title>
    <url>/2021/06/24/Spring%E4%B8%AD%E4%B8%89%E7%A7%8D%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th></th>
<th>BeanPostProcessor</th>
<th>BeanFactoryPostProcessor</th>
<th>BeanDefinitionRegistryPostProcessor</th>
</tr>
</thead>
<tbody><tr>
<td>处理目标</td>
<td>bean 实例</td>
<td>BeanDefinition</td>
<td>BeanDefinition、.class 文件等</td>
</tr>
<tr>
<td>执行时机</td>
<td>bena 的初始化阶段前后（已创建出 bean 对象）</td>
<td>BeanDefinition解析完毕并注册进 BeanFactory 之后（此时 bean 未实例化）</td>
<td>配置文件、配置类已解析完毕并注册进 BeanFactory，但还未被 BeanFactoryPostProcessor 处理</td>
</tr>
<tr>
<td>可操作空间</td>
<td>对 bean 的属性赋值、创建代理对象等</td>
<td>给 BeanDefinition 中增删属性，移除 BeanDefinition 等</td>
<td>向 BeanFactory 中注册新的 BeanDefinition 和 BeanFactoryPostProcessor</td>
</tr>
</tbody></table>
<span id="more"></span>

<h3 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="function"><span class="keyword">default</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="function"><span class="keyword">default</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>入参中的 <em>bean</em> 为根据 <em>BeanDefinition</em> 生成的 bean</p>
<p>出参中的 <em>bean</em>，如果不为 null 则会替换掉 BeanFactory 中传入的 <em>bean</em></p>
<p>如果该 bean，是通过 <em>factoryBean</em> 生成的，则不会执行 <em>postProcesserBeforeInitialization</em> 方法</p>
</blockquote>
<h3 id="BeanFactoryPostProcessor"><a href="#BeanFactoryPostProcessor" class="headerlink" title="BeanFactoryPostProcessor"></a>BeanFactoryPostProcessor</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Modify the application context&#x27;s internal bean factory after its standard</span></span><br><span class="line"><span class="comment">	 * initialization. All bean definitions will have been loaded, but no beans</span></span><br><span class="line"><span class="comment">	 * will have been instantiated yet. This allows for overriding or adding</span></span><br><span class="line"><span class="comment">	 * properties even to eager-initializing beans.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> beanFactory the bean factory used by the application context</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过入参 <em>beanfactory</em> 就可以获取到对应的 <em>beanDefinition</em></p>
</blockquote>
<h3 id="BeanDefinitionRegistryPostProcessor"><a href="#BeanDefinitionRegistryPostProcessor" class="headerlink" title="BeanDefinitionRegistryPostProcessor"></a>BeanDefinitionRegistryPostProcessor</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinitionRegistryPostProcessor</span> <span class="keyword">extends</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Modify the application context&#x27;s internal bean definition registry after its</span></span><br><span class="line"><span class="comment">	 * standard initialization. All regular bean definitions will have been loaded,</span></span><br><span class="line"><span class="comment">	 * but no beans will have been instantiated yet. This allows for adding further</span></span><br><span class="line"><span class="comment">	 * bean definitions before the next post-processing phase kicks in.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> registry the bean definition registry used by the application context</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过 <em>BeanDefinitionRegistry</em> 的 <em>registerBeanDefinition</em> 方法就可以向容器中注入 <em>beanDefinition</em></p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中事件广播原理</title>
    <url>/2021/06/25/Spring%E4%B8%AD%E4%BA%8B%E4%BB%B6%E5%B9%BF%E6%92%AD%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="SpringFramework-的事件模型"><a href="#SpringFramework-的事件模型" class="headerlink" title="SpringFramework 的事件模型"></a>SpringFramework 的事件模型</h2><ul>
<li>ApplicationEventPublisher：事件发布器，是用来接受事件，并交给事件广播器处理</li>
<li>ApplicationEventMulticaster：事件广播器，拿到事件发布器的事件，并广播给监听器</li>
</ul>
<blockquote>
<p><em>ApplicationContext</em> 接口继承了 <em>ApplicationEventPublisher</em> ，拥有事件发布的功能；<em>ApplicationContext</em> 的第一个抽象实现类 <em>AbstractApplicationContext</em> 组合了一个 <em>ApplicationEventMulticaster</em> ，拥有事件广播的能力。综合来看，<em>ApplicationContext</em> 的落地实现就已经能够完成事件驱动模型中的 “观察者” 身份了</p>
</blockquote>
<span id="more"></span>



<h2 id="publishEvent"><a href="#publishEvent" class="headerlink" title="publishEvent()"></a>publishEvent()</h2><p>该方法的实现在 <em>AbstractApplicationContext</em> 中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">publishEvent</span><span class="params">(Object event, <span class="meta">@Nullable</span> ResolvableType eventType)</span> </span>&#123;</span><br><span class="line">    Assert.notNull(event, <span class="string">&quot;Event must not be null&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decorate event as an ApplicationEvent if necessary</span></span><br><span class="line">    <span class="comment">// 这里要给普通的对象封装为PayloadApplicationEvent</span></span><br><span class="line">    ApplicationEvent applicationEvent;</span><br><span class="line">    <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationEvent) &#123;</span><br><span class="line">        applicationEvent = (ApplicationEvent) event;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        applicationEvent = <span class="keyword">new</span> PayloadApplicationEvent&lt;&gt;(<span class="keyword">this</span>, event);</span><br><span class="line">        <span class="keyword">if</span> (eventType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            eventType = ((PayloadApplicationEvent&lt;?&gt;) applicationEvent).getResolvableType();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Multicast right now if possible - or lazily once the multicaster is initialized</span></span><br><span class="line">    <span class="comment">// 添加事件广播（earlyApplicationEvents太过于复杂，会考虑后续加餐内容解释）</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.earlyApplicationEvents != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.earlyApplicationEvents.add(applicationEvent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        getApplicationEventMulticaster().multicastEvent(applicationEvent, eventType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Publish event via parent context as well...</span></span><br><span class="line">    <span class="comment">// 通知父容器发布事件</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.parent <span class="keyword">instanceof</span> AbstractApplicationContext) &#123;</span><br><span class="line">            ((AbstractApplicationContext) <span class="keyword">this</span>.parent).publishEvent(event, eventType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.parent.publishEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>广播事件的行为可以分为三部分：</p>
<ol>
<li>适配 payload 类型的 <em>ApplicationEvent</em>，即如果入参不是 <em>Event</em> 的子类则包装成 <em>PayloadApplicationEvent</em></li>
<li>在本容器中广播事件</li>
<li>通知父容器发布事件（正好知道了为什么子容器的事件会广播到父容器）</li>
</ol>
</blockquote>
<h2 id="multicastEvent"><a href="#multicastEvent" class="headerlink" title="multicastEvent()"></a>multicastEvent()</h2><p>该方法位于 <em>ApplicationEventMulticaster</em> 的唯一落地实现类 <em>SimpleApplicationEventMulticaster</em> 中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multicastEvent</span><span class="params">(<span class="keyword">final</span> ApplicationEvent event, <span class="meta">@Nullable</span> ResolvableType eventType)</span> </span>&#123;</span><br><span class="line">    ResolvableType type = (eventType != <span class="keyword">null</span> ? eventType : resolveDefaultEventType(event));</span><br><span class="line">    Executor executor = getTaskExecutor();</span><br><span class="line">    <span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : getApplicationListeners(event, type)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (executor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            executor.execute(() -&gt; invokeListener(listener, event));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            invokeListener(listener, event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ResolvableType type = (eventType != null ? eventType : resolveDefaultEventType(event))：包装 <em>ApplicationEvent</em> 的具体类型，目的是可以更方便的获取对象和类的一些信息（父类、接口、泛型等）</li>
<li>getApplicationListeners(event, type)：获取该事件对应的 <em>Listeners</em></li>
<li>invokeListener(listener, event)：调用 <em>doInvokeListener(listener, event)</em> 方法，最终调用 <em>Listener</em> 的 <em>onApplicationEvent(E event)</em> 方法实现监听器方法的调用</li>
</ul>
<h2 id="getApplicationListeners-event-type"><a href="#getApplicationListeners-event-type" class="headerlink" title="getApplicationListeners(event, type)"></a>getApplicationListeners(event, type)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Collection&lt;ApplicationListener&lt;?&gt;&gt; getApplicationListeners(</span><br><span class="line">			ApplicationEvent event, ResolvableType eventType) &#123;</span><br><span class="line"></span><br><span class="line">		Object source = event.getSource();</span><br><span class="line">		Class&lt;?&gt; sourceType = (source != <span class="keyword">null</span> ? source.getClass() : <span class="keyword">null</span>);</span><br><span class="line">		ListenerCacheKey cacheKey = <span class="keyword">new</span> ListenerCacheKey(eventType, sourceType);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Potential new retriever to populate</span></span><br><span class="line">		CachedListenerRetriever newRetriever = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Quick check for existing entry on ConcurrentHashMap</span></span><br><span class="line">		CachedListenerRetriever existingRetriever = <span class="keyword">this</span>.retrieverCache.get(cacheKey);</span><br><span class="line">		<span class="keyword">if</span> (existingRetriever == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">// Caching a new ListenerRetriever if possible</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.beanClassLoader == <span class="keyword">null</span> ||</span><br><span class="line">					(ClassUtils.isCacheSafe(event.getClass(), <span class="keyword">this</span>.beanClassLoader) &amp;&amp;</span><br><span class="line">							(sourceType == <span class="keyword">null</span> || ClassUtils.isCacheSafe(sourceType, <span class="keyword">this</span>.beanClassLoader)))) &#123;</span><br><span class="line">				newRetriever = <span class="keyword">new</span> CachedListenerRetriever();</span><br><span class="line">				existingRetriever = <span class="keyword">this</span>.retrieverCache.putIfAbsent(cacheKey, newRetriever);</span><br><span class="line">				<span class="keyword">if</span> (existingRetriever != <span class="keyword">null</span>) &#123;</span><br><span class="line">					newRetriever = <span class="keyword">null</span>;  <span class="comment">// no need to populate it in retrieveApplicationListeners</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (existingRetriever != <span class="keyword">null</span>) &#123;</span><br><span class="line">			Collection&lt;ApplicationListener&lt;?&gt;&gt; result = existingRetriever.getApplicationListeners();</span><br><span class="line">			<span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> result;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// If result is null, the existing retriever is not fully populated yet by another thread.</span></span><br><span class="line">			<span class="comment">// Proceed like caching wasn&#x27;t possible for this current local attempt.</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> retrieveApplicationListeners(eventType, sourceType, newRetriever);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>先从 <em>retrieverCache</em> 中获取，如果能获取到则直接返回</li>
<li>获取不到则调用 <em>retrieveApplicationListeners(eventType, sourceType, newRetriever)</em> ，并将结果放入 <em>retrieverCache</em> 中</li>
</ul>
</blockquote>
<h2 id="retrieveApplicationListeners-eventType-sourceType-newRetriever"><a href="#retrieveApplicationListeners-eventType-sourceType-newRetriever" class="headerlink" title="retrieveApplicationListeners(eventType, sourceType, newRetriever)"></a>retrieveApplicationListeners(eventType, sourceType, newRetriever)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Collection&lt;ApplicationListener&lt;?&gt;&gt; retrieveApplicationListeners(</span><br><span class="line">		ResolvableType eventType, <span class="meta">@Nullable</span> Class&lt;?&gt; sourceType, <span class="meta">@Nullable</span> CachedListenerRetriever retriever) &#123;</span><br><span class="line"></span><br><span class="line">	List&lt;ApplicationListener&lt;?&gt;&gt; allListeners = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	Set&lt;ApplicationListener&lt;?&gt;&gt; filteredListeners = (retriever != <span class="keyword">null</span> ? <span class="keyword">new</span> LinkedHashSet&lt;&gt;() : <span class="keyword">null</span>);</span><br><span class="line">	Set&lt;String&gt; filteredListenerBeans = (retriever != <span class="keyword">null</span> ? <span class="keyword">new</span> LinkedHashSet&lt;&gt;() : <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">	Set&lt;ApplicationListener&lt;?&gt;&gt; listeners;</span><br><span class="line">	Set&lt;String&gt; listenerBeans;</span><br><span class="line">	<span class="keyword">synchronized</span> (<span class="keyword">this</span>.defaultRetriever) &#123;</span><br><span class="line">		listeners = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="keyword">this</span>.defaultRetriever.applicationListeners);</span><br><span class="line">		listenerBeans = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="keyword">this</span>.defaultRetriever.applicationListenerBeans);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Add programmatically registered listeners, including ones coming</span></span><br><span class="line">	<span class="comment">// from ApplicationListenerDetector (singleton beans and inner beans).</span></span><br><span class="line">	<span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : listeners) &#123;</span><br><span class="line">		<span class="keyword">if</span> (supportsEvent(listener, eventType, sourceType)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (retriever != <span class="keyword">null</span>) &#123;</span><br><span class="line">				filteredListeners.add(listener);</span><br><span class="line">			&#125;</span><br><span class="line">			allListeners.add(listener);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Add listeners by bean name, potentially overlapping with programmatically</span></span><br><span class="line">	<span class="comment">// registered listeners above - but here potentially with additional metadata.</span></span><br><span class="line">	<span class="keyword">if</span> (!listenerBeans.isEmpty()) &#123;</span><br><span class="line">		ConfigurableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">		<span class="keyword">for</span> (String listenerBeanName : listenerBeans) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> (supportsEvent(beanFactory, listenerBeanName, eventType)) &#123;</span><br><span class="line">					ApplicationListener&lt;?&gt; listener =</span><br><span class="line">							beanFactory.getBean(listenerBeanName, ApplicationListener.class);</span><br><span class="line">					<span class="keyword">if</span> (!allListeners.contains(listener) &amp;&amp; supportsEvent(listener, eventType, sourceType)) &#123;</span><br><span class="line">						<span class="keyword">if</span> (retriever != <span class="keyword">null</span>) &#123;</span><br><span class="line">							<span class="keyword">if</span> (beanFactory.isSingleton(listenerBeanName)) &#123;</span><br><span class="line">								filteredListeners.add(listener);</span><br><span class="line">							&#125;</span><br><span class="line">							<span class="keyword">else</span> &#123;</span><br><span class="line">								filteredListenerBeans.add(listenerBeanName);</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">						allListeners.add(listener);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">// Remove non-matching listeners that originally came from</span></span><br><span class="line">					<span class="comment">// ApplicationListenerDetector, possibly ruled out by additional</span></span><br><span class="line">					<span class="comment">// BeanDefinition metadata (e.g. factory method generics) above.</span></span><br><span class="line">					Object listener = beanFactory.getSingleton(listenerBeanName);</span><br><span class="line">					<span class="keyword">if</span> (retriever != <span class="keyword">null</span>) &#123;</span><br><span class="line">						filteredListeners.remove(listener);</span><br><span class="line">					&#125;</span><br><span class="line">					allListeners.remove(listener);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">				<span class="comment">// Singleton listener instance (without backing bean definition) disappeared -</span></span><br><span class="line">				<span class="comment">// probably in the middle of the destruction phase</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	AnnotationAwareOrderComparator.sort(allListeners);</span><br><span class="line">	<span class="keyword">if</span> (retriever != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (filteredListenerBeans.isEmpty()) &#123;</span><br><span class="line">			retriever.applicationListeners = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(allListeners);</span><br><span class="line">			retriever.applicationListenerBeans = filteredListenerBeans;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			retriever.applicationListeners = filteredListeners;</span><br><span class="line">			retriever.applicationListenerBeans = filteredListenerBeans;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> allListeners;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>筛选出由<strong>编程式</strong>注入到 IOC 容器的，监听当前发布事件的监听器</li>
<li>筛选出由<strong>声明式 / 配置式</strong>注入到 IOC 容器的，监听当前发布事件的监听器</li>
<li>监听器排序</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中控制Bean生命周期的三种方式</title>
    <url>/2021/06/22/Spring%E4%B8%AD%E6%8E%A7%E5%88%B6Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th></th>
<th>@PostConstruct &amp; @PreDestroy</th>
<th>InitializingBean &amp; DisposableBean</th>
<th>init-method &amp; destory-method</th>
</tr>
</thead>
<tbody><tr>
<td>执行顺序</td>
<td>最先</td>
<td>中间</td>
<td>最后</td>
</tr>
<tr>
<td>组件耦合度</td>
<td>与 JSR 规范耦合</td>
<td>与 SpringFramework 耦合</td>
<td>无侵入（只有 <code>&lt;bean&gt;</code> 和 <code>@Bean</code> 中使用）</td>
</tr>
<tr>
<td>容器支持</td>
<td>注解原生支持，xml需开启注解驱动</td>
<td>xml 、注解原生支持</td>
<td>xml 、注解原生支持</td>
</tr>
<tr>
<td>单实例Bean</td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td>原型Bean</td>
<td>✔</td>
<td>✔</td>
<td>只支持 init-method</td>
</tr>
</tbody></table>
<span id="more"></span>

<h3 id="Pen"><a href="#Pen" class="headerlink" title="Pen"></a>Pen</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pen</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;initMethod...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destoryMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destoryMethod...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postConstruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postConstruct...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preDestroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;disposableBean&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;initializingBean&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="LifecycleConfiguration"><a href="#LifecycleConfiguration" class="headerlink" title="LifecycleConfiguration"></a>LifecycleConfiguration</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(initMethod = &quot;initMethod&quot;,destroyMethod = &quot;destoryMethod&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pen <span class="title">pen</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="LifecycleApplication"><a href="#LifecycleApplication" class="headerlink" title="LifecycleApplication"></a>LifecycleApplication</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(LifecycleConfiguration.class);</span><br><span class="line">        applicationContext.getBean(Pen.class);</span><br><span class="line">        applicationContext.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">postConstruct</span></span>...</span><br><span class="line">initializingBean</span><br><span class="line"><span class="function"><span class="title">initMethod</span></span>...</span><br><span class="line"><span class="function"><span class="title">preDestroy</span></span>...</span><br><span class="line">disposableBean</span><br><span class="line"><span class="function"><span class="title">destoryMethod</span></span>...</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Tags Testing Article</title>
    <url>/2021/05/11/Tags-Testing-Article/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/xyq-material/blog/master/LeetCode/20210512131715.png" alt="逸"></p>
]]></content>
      <tags>
        <tag>Testing</tag>
        <tag>Another Tag</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中模块装配的三种方式</title>
    <url>/2021/06/25/Spring%E4%B8%AD%E6%A8%A1%E5%9D%97%E8%A3%85%E9%85%8D%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h3><p>可直接导入普通类、配置类、ImportSeletor 的实现类和 ImportBeanDefinitionRegistrar 的实现类，通常情况下是写在自定义注解上</p>
<h3 id="编写-ImportSeletor-的实现类"><a href="#编写-ImportSeletor-的实现类" class="headerlink" title="编写 ImportSeletor 的实现类"></a>编写 ImportSeletor 的实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Select and return the names of which class(es) should be imported based on</span></span><br><span class="line"><span class="comment">	 * the &#123;<span class="doctag">@link</span> AnnotationMetadata&#125; of the importing @&#123;<span class="doctag">@link</span> Configuration&#125; class.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the class names, or an empty array if none</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	String[] selectImports(AnnotationMetadata importingClassMetadata);</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> Predicate&lt;String&gt; <span class="title">getExclusionFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过 selectImports 方法导入对象，返回的是一组需要导入的类的全限定类名</p>
</blockquote>
<span id="more"></span>

<h3 id="编写-ImportBeanDefinitionRegistrar-的实现类"><a href="#编写-ImportBeanDefinitionRegistrar-的实现类" class="headerlink" title="编写 ImportBeanDefinitionRegistrar 的实现类"></a>编写 ImportBeanDefinitionRegistrar 的实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry,</span></span></span><br><span class="line"><span class="params"><span class="function">			BeanNameGenerator importBeanNameGenerator)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		registerBeanDefinitions(importingClassMetadata, registry);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>直接通过 BeanDefinitionRegistry 的 registerBeanDefinition 方法注册 BeanDefinition 到容器中</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/05/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>算法题-查询给定目录下的文件数量</title>
    <url>/2021/05/19/%E7%AE%97%E6%B3%95%E9%A2%98-%E6%9F%A5%E8%AF%A2%E7%BB%99%E5%AE%9A%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%E6%95%B0%E9%87%8F/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ol>
<li>给定一个文件目录的路径，写一个函数统计这个目录下的所有文件</li>
<li>隐藏文件也算，但是文件夹不算</li>
</ol>
<span id="more"></span>

<h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getFileNumber</span><span class="params">(String folderPath)</span> </span>&#123;</span><br><span class="line">    File root = <span class="keyword">new</span> File(folderPath);</span><br><span class="line">    <span class="keyword">if</span> (!root.isDirectory() &amp;&amp; !root.isFile()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root.isFile()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack&lt;File&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    stack.add(root);</span><br><span class="line">    <span class="keyword">int</span> files = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        File folder = stack.pop();</span><br><span class="line">        <span class="keyword">for</span> (File next : folder.listFiles()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (next.isFile()) &#123;</span><br><span class="line">                files++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (next.isDirectory()) &#123;</span><br><span class="line">                stack.push(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> files;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> mySolution(String path) &#123;</span><br><span class="line">    <span class="keyword">int</span> fileNumber = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(path);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">file</span>.exists()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">file</span>.isFile()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">file</span>.isDirectory()) &#123;</span><br><span class="line">        <span class="keyword">File</span>[] files = <span class="keyword">file</span>.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">File</span> f : files) &#123;</span><br><span class="line">            fileNumber = fileNumber + mySolution(f.getPath());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fileNumber;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>算法题-实现LRU缓存机制</title>
    <url>/2021/05/26/%E7%AE%97%E6%B3%95%E9%A2%98-%E5%AE%9E%E7%8E%B0LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/lru-cache/">leetcode第146题</a></p>
<p>运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制 。<br>实现 LRUCache 类：</p>
<ul>
<li>LRUCache(int capacity) 以正整数作为容量 capacity 初始化 LRU 缓存</li>
<li>int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。</li>
<li>void put(int key, int value) 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">输入</span><br><span class="line">[<span class="string">&quot;LRUCache&quot;</span>, <span class="string">&quot;put&quot;</span>, <span class="string">&quot;put&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;put&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;put&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;get&quot;</span>]</span><br><span class="line">[[<span class="number">2</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">1</span>], [<span class="number">3</span>, <span class="number">3</span>], [<span class="number">2</span>], [<span class="number">4</span>, <span class="number">4</span>], [<span class="number">1</span>], [<span class="number">3</span>], [<span class="number">4</span>]]</span><br><span class="line">输出</span><br><span class="line">[<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">1</span>, <span class="literal">null</span>, <span class="number">-1</span>, <span class="literal">null</span>, <span class="number">-1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">LRUCache lRUCache = <span class="keyword">new</span> <span class="type">LRUCache</span>(<span class="number">2</span>);</span><br><span class="line">lRUCache.put(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">// 缓存是 &#123;1=1&#125;</span></span><br><span class="line">lRUCache.put(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">// 缓存是 &#123;1=1, 2=2&#125;</span></span><br><span class="line">lRUCache.<span class="keyword">get</span>(<span class="number">1</span>);    <span class="comment">// 返回 1</span></span><br><span class="line">lRUCache.put(<span class="number">3</span>, <span class="number">3</span>); <span class="comment">// 该操作会使得关键字 2 作废，缓存是 &#123;1=1, 3=3&#125;</span></span><br><span class="line">lRUCache.<span class="keyword">get</span>(<span class="number">2</span>);    <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">lRUCache.put(<span class="number">4</span>, <span class="number">4</span>); <span class="comment">// 该操作会使得关键字 1 作废，缓存是 &#123;4=4, 3=3&#125;</span></span><br><span class="line">lRUCache.<span class="keyword">get</span>(<span class="number">1</span>);    <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">lRUCache.<span class="keyword">get</span>(<span class="number">3</span>);    <span class="comment">// 返回 3</span></span><br><span class="line">lRUCache.<span class="keyword">get</span>(<span class="number">4</span>);    <span class="comment">// 返回 4</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>使用 map 来实现 get(int key) 方法的 O(1) 时间复杂度</li>
<li>使用一个链表来维护数据的使用时间</li>
<li>当调用 put(int key, int value) 方法时，先无脑往 map 里添加数据，再判断大小是否超过 capacity，超过了就删除链表中最后一个元素</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LRUNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> key;</span><br><span class="line">        <span class="keyword">int</span> value;</span><br><span class="line">        LRUNode prev;</span><br><span class="line">        LRUNode next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LRUNode</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LRUNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">int</span> currentSize = <span class="number">0</span>;</span><br><span class="line">    LRUNode start = <span class="keyword">new</span> LRUNode();</span><br><span class="line">    LRUNode end = <span class="keyword">new</span> LRUNode();</span><br><span class="line">    Map&lt;Integer, LRUNode&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;Integer, LRUNode&gt;(capacity);</span><br><span class="line">        start.next = end;</span><br><span class="line">        end.prev = start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        LRUNode node = map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        remove(node);</span><br><span class="line">        moveToHead(node);</span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        LRUNode node = map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            node = <span class="keyword">new</span> LRUNode(key, value);</span><br><span class="line">            moveToHead(node);</span><br><span class="line">            map.put(key, node);</span><br><span class="line">            currentSize++;</span><br><span class="line">            <span class="keyword">if</span> (currentSize &gt; capacity) &#123;</span><br><span class="line">                map.remove(end.prev.key);</span><br><span class="line">                remove(end.prev);</span><br><span class="line">                currentSize--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.value = value;</span><br><span class="line">            remove(node);</span><br><span class="line">            moveToHead(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveToHead</span><span class="params">(LRUNode node)</span> </span>&#123;</span><br><span class="line">        node.next = start.next;</span><br><span class="line">        node.prev = start;</span><br><span class="line">        start.next.prev = node;</span><br><span class="line">        start.next = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(LRUNode node)</span> </span>&#123;</span><br><span class="line">        node.prev.next = node.next;</span><br><span class="line">        node.next.prev = node.prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LRUCache lruCache = <span class="keyword">new</span> LRUCache(<span class="number">2</span>);</span><br><span class="line">        lruCache.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        lruCache.put(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(lruCache.get(<span class="number">1</span>));</span><br><span class="line">        lruCache.put(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>通过 LRU 如何实现一个 LFU？</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ul>
<li>使用一个 Map&lt;int, LFUNode&gt; 来保存元素</li>
<li>再使用一个 Map&lt;int, LRUNode&gt; 维护使用频率，其中 key 为使用频率，value 为一个维护使用时间的链表</li>
<li>在 LFUNode 中需要存储当前元素的使用频率，在调取 get(int key) 方法时，将其从原链表移除，更新该node的频率并将其添加至新频率所在的链表</li>
</ul>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>算法题-线段点最多覆盖</title>
    <url>/2021/05/19/%E7%AE%97%E6%B3%95%E9%A2%98-%E7%BA%BF%E6%AE%B5%E7%82%B9%E6%9C%80%E5%A4%9A%E8%A6%86%E7%9B%96/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ol>
<li>给定一个有序数组 arr ，代表坐落在 X 轴上的点</li>
<li>给定一个正数K，代表绳子的长度</li>
<li>返回绳子最多压中几个点，即使绳子边缘处被盖住了也算盖住</li>
</ol>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li>采用左右指针，指针为数组下标</li>
<li>右指针 - 左指针 = 当前覆盖点数</li>
<li>右指针指向的值 - 左指针指向的值代表坐落在 X 轴上的点的跨度，要小于对于绳子长度</li>
</ol>
<h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mySolution</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; arr.length) &#123;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; arr.length &amp;&amp; arr[right] - arr[left] &lt;= l) &#123;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        max = Math.max(max, right - left++);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>系统调用的大致过程</title>
    <url>/2021/05/13/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E5%A4%A7%E8%87%B4%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p>操作系统(operating system)内核中有一组实现系统功能的代码，系统调用就是对上述代码的调用。程序利用系统调用，向OS提出服务请求，由OS代为完成。</p>
<h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><p>中断是一种使CPU中止正在执行的程序而转去处理特殊事件的操作，这些引起中断的事件称为中断源，它们可能是来自外设的输入输出请求，也可能是计算机的一些异常事故或其它内部原因。</p>
<span id="more"></span>

<h2 id="系统调用过程"><a href="#系统调用过程" class="headerlink" title="系统调用过程"></a>系统调用过程</h2><ol>
<li>触发中断：硬件或软件发出中断请求（电信号），要求CPU暂停当前工作转手处理更重要的事情。</li>
<li>查询中断向量表：通过中断传来的参数 <em>int 0x80</em>，在 kernel 里的中断向量表中找到对应方法</li>
<li>切换用户态到内核态：保护现场，切换用户态到内核态</li>
<li>执行对应方法</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>system call</tag>
      </tags>
  </entry>
  <entry>
    <title>网络IO-tcp是怎么建立通信的</title>
    <url>/2021/05/25/%E7%BD%91%E7%BB%9CIO-tcp%E6%98%AF%E6%80%8E%E4%B9%88%E5%BB%BA%E7%AB%8B%E9%80%9A%E4%BF%A1%E7%9A%84/</url>
    <content><![CDATA[<p>学习马士兵课程-内存与IO，通过 <em>netstat</em>、<em>lsof</em>、<em>tcpdump</em> 观察tcp连接时内核在每一步都就行了什么相应的操作。</p>
<p>本文资料来自于马士兵MAC课程-内存与IO。</p>
<p>通过 netstat、lsof、tcpdump 观察 tcp 连接时内核在每一步都就行了什么相应的操作。</p>
<p>阅读本文，你可以知道在编写 java 代码时的每一步对应内核会产生哪些操作，其探究范围在客户端、服务端代码启动到客户端、服务端建立连接。</p>
<span id="more"></span>

<h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 马士兵教育</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-05-17 05:34</span></span><br><span class="line"><span class="comment"> * BIO  多线程的方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketIOPropertites</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//server socket listen property:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RECEIVE_BUFFER = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SO_TIMEOUT = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> REUSE_ADDR = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BACK_LOG = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//client socket listen property on server endpoint:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> CLI_KEEPALIVE = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> CLI_OOB = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CLI_REC_BUF = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> CLI_REUSE_ADDR = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CLI_SEND_BUF = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> CLI_LINGER = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CLI_LINGER_N = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CLI_TIMEOUT = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> CLI_NO_DELAY = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    StandardSocketOptions.TCP_NODELAY</span></span><br><span class="line"><span class="comment">    StandardSocketOptions.SO_KEEPALIVE</span></span><br><span class="line"><span class="comment">    StandardSocketOptions.SO_LINGER</span></span><br><span class="line"><span class="comment">    StandardSocketOptions.SO_RCVBUF</span></span><br><span class="line"><span class="comment">    StandardSocketOptions.SO_SNDBUF</span></span><br><span class="line"><span class="comment">    StandardSocketOptions.SO_REUSEADDR</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ServerSocket server = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server = <span class="keyword">new</span> ServerSocket();</span><br><span class="line">            server.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9090</span>), BACK_LOG);</span><br><span class="line">            server.setReceiveBufferSize(RECEIVE_BUFFER);</span><br><span class="line">            server.setReuseAddress(REUSE_ADDR);</span><br><span class="line">            server.setSoTimeout(SO_TIMEOUT);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;server up use 9090!&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                System.in.read();  <span class="comment">//分水岭：</span></span><br><span class="line"></span><br><span class="line">                Socket client = server.accept();  <span class="comment">//阻塞的，没有 -1  一直卡着不动  accept(4,</span></span><br><span class="line">                System.out.println(<span class="string">&quot;client port: &quot;</span> + client.getPort());</span><br><span class="line"></span><br><span class="line">                client.setKeepAlive(CLI_KEEPALIVE);</span><br><span class="line">                client.setOOBInline(CLI_OOB);</span><br><span class="line">                client.setReceiveBufferSize(CLI_REC_BUF);</span><br><span class="line">                client.setReuseAddress(CLI_REUSE_ADDR);</span><br><span class="line">                client.setSendBufferSize(CLI_SEND_BUF);</span><br><span class="line">                client.setSoLinger(CLI_LINGER, CLI_LINGER_N);</span><br><span class="line">                client.setSoTimeout(CLI_TIMEOUT);</span><br><span class="line">                client.setTcpNoDelay(CLI_NO_DELAY);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//client.read   //阻塞   没有  -1 0</span></span><br><span class="line">                <span class="keyword">new</span> Thread(</span><br><span class="line">                        () -&gt; &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                InputStream in = client.getInputStream();</span><br><span class="line">                                BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">                                <span class="keyword">char</span>[] data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">                                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">int</span> num = reader.read(data);</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                        System.out.println(<span class="string">&quot;client read some data is :&quot;</span> + num + <span class="string">&quot; val :&quot;</span> + <span class="keyword">new</span> String(data, <span class="number">0</span>, num));</span><br><span class="line">                                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">                                        System.out.println(<span class="string">&quot;client readed nothing!&quot;</span>);</span><br><span class="line">                                        <span class="keyword">continue</span>;</span><br><span class="line">                                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                        System.out.println(<span class="string">&quot;client readed -1...&quot;</span>);</span><br><span class="line">                                        System.in.read();</span><br><span class="line">                                        client.close();</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                ).start();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                server.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 马士兵教育</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-05-17 16:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Socket client = <span class="keyword">new</span> Socket(<span class="string">&quot;192.168.150.11&quot;</span>,<span class="number">9090</span>);</span><br><span class="line"></span><br><span class="line">            client.setSendBufferSize(<span class="number">20</span>);</span><br><span class="line">            client.setTcpNoDelay(<span class="keyword">true</span>);</span><br><span class="line">            OutputStream out = client.getOutputStream();</span><br><span class="line"></span><br><span class="line">            InputStream in = System.in;</span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                String line = reader.readLine();</span><br><span class="line">                <span class="keyword">if</span>(line != <span class="keyword">null</span> )&#123;</span><br><span class="line">                    <span class="keyword">byte</span>[] bb = line.getBytes();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">byte</span> b : bb) &#123;</span><br><span class="line">                        out.write(b);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在服务器端启动但客户端未连接时"><a href="#在服务器端启动但客户端未连接时" class="headerlink" title="在服务器端启动但客户端未连接时"></a>在服务器端启动但客户端未连接时</h2><ul>
<li><p>启动服务器端代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javac SocketIOPropertites.java</span><br><span class="line">java SocketIOPropertites</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时客户端创建了 serverSocket 并绑定了端口9090，阻塞在 System.in.read() 处</p>
</blockquote>
</li>
<li><p>netstat</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-a 显示所有状态的socket  </span><br><span class="line">-n 不做名字解析，不加此参数，80端口会显示成http,127.0.0.1显示成localhost,uid为0显示成root等等    </span><br><span class="line">-e 显示更多信息如用户，inode</span><br><span class="line">-p 显示pid和程序名字</span><br><span class="line">-t 显示tcp链接</span><br><span class="line">-u 显示udp链接</span><br><span class="line">-x 显示unix套接字</span><br></pre></td></tr></table></figure>
<p>通过 netstat 可以看出系统中多了一行监听9090端口的tcp连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -natp</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      7631/sshd           </span><br><span class="line">tcp        0      0 192.168.203.133:22      192.168.203.1:3137      ESTABLISHED 7846/sshd: root@pts </span><br><span class="line">tcp        0      0 192.168.203.133:22      192.168.203.1:7070      ESTABLISHED 15711/sshd: root@pt </span><br><span class="line">tcp        0     36 192.168.203.133:22      192.168.203.1:6022      ESTABLISHED 7942/sshd: root@pts </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      7631/sshd           </span><br><span class="line">tcp6       0      0 :::9090                 :::*                    LISTEN      15853/java</span><br></pre></td></tr></table></figure></li>
<li><p>lsof</p>
<p>通过 lsof 观察到运行java代码的进程出现了一个文件描述符处于Listen状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsof -p 15853</span><br><span class="line">COMMAND   PID USER   FD   TYPE             DEVICE  SIZE/OFF   NODE NAME</span><br><span class="line">...</span><br><span class="line">java    15853 root    6u  IPv6              53184       0t0    TCP *:websm (LISTEN)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="客户端请求连接但服务器端未accept"><a href="#客户端请求连接但服务器端未accept" class="headerlink" title="客户端请求连接但服务器端未accept"></a>客户端请求连接但服务器端未accept</h2><ul>
<li><p>启动客户端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javac SocketClient.java</span><br><span class="line">java SocketClient</span><br></pre></td></tr></table></figure></li>
<li><p>解决异常<em>java.net.NoRouteToHostException: 没有到主机的路由</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure></li>
<li><p>tcpdump</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump -nn -i ens33 port 9090</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on ens33, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">15:00:49.829735 IP 192.168.203.132.37058 &gt; 192.168.203.133.9090: Flags [S], seq 493363808, win 29200, options [mss 1460,sackOK,TS val 14267030 ecr 0,nop,wscale 7], length 0</span><br><span class="line">15:00:49.829764 IP 192.168.203.133.9090 &gt; 192.168.203.132.37058: Flags [S.], seq 2693402151, ack 493363809, win 1152, options [mss 1460,sackOK,TS val 15102986 ecr 14267030,nop,wscale 0], length 0</span><br><span class="line">15:00:49.829979 IP 192.168.203.132.37058 &gt; 192.168.203.133.9090: Flags [.], ack 1, win 229, options [nop,nop,TS val 14267031 ecr 15102986], length 0</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以发现已经发生了三次握手</p>
</blockquote>
</li>
<li><p>netstat</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -natp</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      7631/sshd           </span><br><span class="line">tcp        0      0 192.168.203.133:22      192.168.203.1:3137      ESTABLISHED 7846/sshd: root@pts </span><br><span class="line">tcp        0      0 192.168.203.133:22      192.168.203.1:7070      ESTABLISHED 15711/sshd: root@pt </span><br><span class="line">tcp        0     36 192.168.203.133:22      192.168.203.1:6022      ESTABLISHED 7942/sshd: root@pts </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      7631/sshd           </span><br><span class="line">tcp6       1      0 :::9090                 :::*                    LISTEN      16423/java          </span><br><span class="line">tcp6       0      0 192.168.203.133:9090    192.168.203.132:37058   ESTABLISHED -                   </span><br></pre></td></tr></table></figure>

<blockquote>
<p>在内核层面已经建立起了socket连接，并且当客户端发出信息后，服务器端是已经被接受了，即使这个连接没有分配给任何一个进程</p>
</blockquote>
</li>
</ul>
<h2 id="当服务器端accept后"><a href="#当服务器端accept后" class="headerlink" title="当服务器端accept后"></a>当服务器端accept后</h2><ul>
<li><p>netstat</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -natp</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      7631/sshd           </span><br><span class="line">tcp        0      0 192.168.203.133:22      192.168.203.1:3137      ESTABLISHED 7846/sshd: root@pts </span><br><span class="line">tcp        0      0 192.168.203.133:22      192.168.203.1:7070      ESTABLISHED 15711/sshd: root@pt </span><br><span class="line">tcp        0     36 192.168.203.133:22      192.168.203.1:6022      ESTABLISHED 7942/sshd: root@pts </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      7631/sshd           </span><br><span class="line">tcp6       0      0 :::9090                 :::*                    LISTEN      16423/java          </span><br><span class="line">tcp6       0      0 192.168.203.133:9090    192.168.203.132:37058   ESTABLISHED 16423/java </span><br></pre></td></tr></table></figure>

<blockquote>
<p>该连接已经分配给了对应进程</p>
</blockquote>
</li>
<li><p>lsof</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsof -p 16423</span><br><span class="line">COMMAND   PID USER   FD   TYPE             DEVICE  SIZE/OFF   NODE NAME</span><br><span class="line">...</span><br><span class="line">java    16423 root    7u  IPv6              70977       0t0    TCP CentOS7.6:websm-&gt;192.168.203.132:37058 (ESTABLISHED)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以发现该进程已经被分配了文件描述符</p>
</blockquote>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>socket本质是一个四元组，通过 CIP_CPORT + SIP_SPORT 能确认唯一socket</li>
<li>new ServerSocket() 在内核层面的操作就是开启了一个监听 port 的 socket</li>
<li>当两台服务器之间建立连接时并未将此 socket 分配给进程，即进程并未分配对应的文件描述符 fd，但服务器之间已经可以就行信息传递</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>io</tag>
      </tags>
  </entry>
  <entry>
    <title>网络IO-探究poll和epoll在内核层面的不同</title>
    <url>/2021/06/03/%E7%BD%91%E7%BB%9CIO-%E6%8E%A2%E7%A9%B6poll%E5%92%8Cepoll%E5%9C%A8%E5%86%85%E6%A0%B8%E5%B1%82%E9%9D%A2%E7%9A%84%E4%B8%8D%E5%90%8C/</url>
    <content><![CDATA[<p>代码、资料来自于马士兵MAC课程。</p>
<p>本文通过 strace 命令来监控使用 poll 和 epoll 不同模型的同一代码在内核方法调用上的不同。</p>
<p>阅读本文，你将切实体会到 poll 和 epoll 的不同实现方式。对于两种模型的介绍推荐阅读：<a href="https://eitan-blog.github.io/2021/05/26/%E7%BD%91%E7%BB%9CIO-IO%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%BC%94%E5%8F%98/">网络IO-IO模型的演变</a>。</p>
<h2 id="前置：如何用同一段代码使用-poll-和-epoll-两种不同模型"><a href="#前置：如何用同一段代码使用-poll-和-epoll-两种不同模型" class="headerlink" title="前置：如何用同一段代码使用 poll 和 epoll 两种不同模型"></a>前置：如何用同一段代码使用 poll 和 epoll 两种不同模型</h2><p>代码 <em>Selector selector = Selector.open();</em> 在 poll 和 epoll 模型都支持的情况下优先选择 epoll。</p>
<p>可以通过 JVM 参数 <em>-Djava.nio.channels.spi.SelectorProvider=sun.nio.ch.PollSelectorProvider</em> 手动选择 poll 模型。</p>
<span id="more"></span>



<h2 id="代码-SocketMultiplexingSingleThread"><a href="#代码-SocketMultiplexingSingleThread" class="headerlink" title="代码 - SocketMultiplexingSingleThread"></a>代码 - SocketMultiplexingSingleThread</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketMultiplexingSingleThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServerSocketChannel server;</span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port = <span class="number">9090</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立监听，并注册进 selector</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server = ServerSocketChannel.open();</span><br><span class="line">            server.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            server.bind(<span class="keyword">new</span> InetSocketAddress(port));</span><br><span class="line"></span><br><span class="line">            selector = Selector.open();</span><br><span class="line">            server.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        initServer();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器初始化完成...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                Set&lt;SelectionKey&gt; keys = selector.keys();</span><br><span class="line">                System.out.println(keys.size() + <span class="string">&quot; size&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (selector.select() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">                    Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                        SelectionKey key = iterator.next();</span><br><span class="line">                        iterator.remove();</span><br><span class="line">                        <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                            acceptHandler(key);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                            readHandler(key);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、建立 socket</span></span><br><span class="line"><span class="comment">     * 2、将指向这个 socket 注册进 select</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">acceptHandler</span><span class="params">(SelectionKey key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel();</span><br><span class="line">            SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">            socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">8192</span>);</span><br><span class="line">            socketChannel.register(selector, SelectionKey.OP_READ, buffer);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;-------------------------------------------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;新客户端：&quot;</span> + socketChannel.getRemoteAddress());</span><br><span class="line">            System.out.println(<span class="string">&quot;-------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readHandler</span><span class="params">(SelectionKey key)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;read handler...&quot;</span>);</span><br><span class="line">        SocketChannel client = (SocketChannel) key.channel();</span><br><span class="line">        ByteBuffer buffer = (ByteBuffer) key.attachment();</span><br><span class="line">        buffer.clear();</span><br><span class="line">        <span class="keyword">int</span> read = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                read = client.read(buffer);</span><br><span class="line">                <span class="keyword">if</span> (read &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    buffer.flip();</span><br><span class="line">                    <span class="keyword">while</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">                        client.write(buffer);</span><br><span class="line">                    &#125;</span><br><span class="line">                    buffer.clear();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (read == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    client.close();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SocketMultiplexingSingleThread socketMultiplexingSingleThread = <span class="keyword">new</span> SocketMultiplexingSingleThread();</span><br><span class="line">        socketMultiplexingSingleThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="用-strace-追踪两种模型"><a href="#用-strace-追踪两种模型" class="headerlink" title="用 strace 追踪两种模型"></a>用 strace 追踪两种模型</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">strace -ff -o poll java -Djava.nio.channels.spi.SelectorProvider=sun.nio.ch.PollSelectorProvider SocketMultiplexingSingleThread</span><br><span class="line"></span><br><span class="line">strace -ff -o epoll java SocketMultiplexingSingleThread</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 nc 命令连接 java 代码并发送一条数据</span></span><br><span class="line">nc 192.168.203.133 9090</span><br></pre></td></tr></table></figure>

<p>这时在文件架下将会出现以下文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-rw-r--r--. 1 root root  13893 6月   3 13:27 epoll.8306</span><br><span class="line">-rw-r--r--. 1 root root 227300 6月   3 13:27 epoll.8307</span><br><span class="line">-rw-r--r--. 1 root root  18207 6月   3 13:27 epoll.8308</span><br><span class="line">-rw-r--r--. 1 root root   1005 6月   3 13:27 epoll.8309</span><br><span class="line">-rw-r--r--. 1 root root   1128 6月   3 13:27 epoll.8310</span><br><span class="line">-rw-r--r--. 1 root root   2166 6月   3 13:27 epoll.8311</span><br><span class="line">-rw-r--r--. 1 root root  11073 6月   3 13:27 epoll.8312</span><br><span class="line">-rw-r--r--. 1 root root   8025 6月   3 13:27 epoll.8313</span><br><span class="line">-rw-r--r--. 1 root root   1004 6月   3 13:27 epoll.8314</span><br><span class="line">-rw-r--r--. 1 root root 182136 6月   3 13:27 epoll.8315</span><br><span class="line">-rw-r--r--. 1 root root   1925 6月   3 13:27 epoll.8317</span><br><span class="line">-rw-r--r--. 1 root root  13932 6月   3 13:26 poll.8292</span><br><span class="line">-rw-r--r--. 1 root root 213812 6月   3 13:26 poll.8293</span><br><span class="line">-rw-r--r--. 1 root root  11598 6月   3 13:26 poll.8294</span><br><span class="line">-rw-r--r--. 1 root root   1005 6月   3 13:26 poll.8295</span><br><span class="line">-rw-r--r--. 1 root root   1128 6月   3 13:26 poll.8296</span><br><span class="line">-rw-r--r--. 1 root root   2166 6月   3 13:26 poll.8297</span><br><span class="line">-rw-r--r--. 1 root root   7734 6月   3 13:26 poll.8298</span><br><span class="line">-rw-r--r--. 1 root root   4650 6月   3 13:26 poll.8299</span><br><span class="line">-rw-r--r--. 1 root root   1004 6月   3 13:26 poll.8300</span><br><span class="line">-rw-r--r--. 1 root root  76215 6月   3 13:26 poll.8301</span><br><span class="line">-rw-r--r--. 1 root root   1925 6月   3 13:26 poll.8303</span><br><span class="line">-rw-r--r--. 1 root root   3574 6月   3 12:48 SocketMultiplexingSingleThread.class</span><br><span class="line">-rw-r--r--. 1 root root   3773 6月   3 11:43 SocketMultiplexingSingleThread.java</span><br></pre></td></tr></table></figure>

<p>我们观察 <em>poll.8293</em> 和 <em>epoll.8307</em> 这两个文件。</p>
<h3 id="poll-8293-的内核方法调用"><a href="#poll-8293-的内核方法调用" class="headerlink" title="poll.8293 的内核方法调用"></a>poll.8293 的内核方法调用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ServerSocketChannel.open()</span></span><br><span class="line">socket(AF_INET6, SOCK_STREAM, IPPROTO_IP) = 5</span><br><span class="line"><span class="meta">#</span><span class="bash"> server.configureBlocking(<span class="literal">false</span>)</span></span><br><span class="line">fcntl(5, F_SETFL, O_RDWR|O_NONBLOCK)    = 0</span><br><span class="line">bind(5, &#123;sa_family=AF_INET6, sin6_port=htons(9090), inet_pton(AF_INET6, &quot;::&quot;, &amp;sin6_addr), sin6_flowinfo=htonl(0), sin6_scope_id=0&#125;, 28) = 0</span><br><span class="line">listen(5, 50)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> selector.select() 这里就是把想要监听的 fds 全传给内核，让内核进行遍历返回可用的 fd</span></span><br><span class="line">poll([&#123;fd=6, events=POLLIN&#125;, &#123;fd=5, events=POLLIN&#125;], 2, -1) = 1 ([&#123;fd=5, revents=POLLIN&#125;])</span><br><span class="line"><span class="meta">#</span><span class="bash"> SocketChannel socketChannel = serverSocketChannel.accept()</span></span><br><span class="line">accept(5, &#123;sa_family=AF_INET6, sin6_port=htons(35202), inet_pton(AF_INET6, &quot;::ffff:192.168.203.133&quot;, &amp;sin6_addr), sin6_flowinfo=htonl(0), sin6_scope_id=0&#125;, [28]) = 8</span><br><span class="line"><span class="meta">#</span><span class="bash"> socketChannel.configureBlocking(<span class="literal">false</span>)</span></span><br><span class="line">fcntl(8, F_SETFL, O_RDWR|O_NONBLOCK)    = 0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次进行 selector.select() 时也就会把 fd8 也放入参数当中监听是否有数据</span></span><br><span class="line">poll([&#123;fd=6, events=POLLIN&#125;, &#123;fd=5, events=POLLIN&#125;, &#123;fd=8, events=POLLIN&#125;], 3, -1) = 1 ([&#123;fd=8, revents=POLLIN&#125;])</span><br></pre></td></tr></table></figure>

<h3 id="epoll-8307-的内核方法调用"><a href="#epoll-8307-的内核方法调用" class="headerlink" title="epoll.8307 的内核方法调用"></a>epoll.8307 的内核方法调用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ServerSocketChannel.open()</span></span><br><span class="line">socket(AF_INET6, SOCK_STREAM, IPPROTO_IP) = 5</span><br><span class="line"><span class="meta">#</span><span class="bash"> server.configureBlocking(<span class="literal">false</span>)</span></span><br><span class="line">fcntl(5, F_SETFL, O_RDWR|O_NONBLOCK)    = 0</span><br><span class="line">bind(5, &#123;sa_family=AF_INET6, sin6_port=htons(9090), inet_pton(AF_INET6, &quot;::&quot;, &amp;sin6_addr), sin6_flowinfo=htonl(0), sin6_scope_id=0&#125;, 28) = 0</span><br><span class="line">listen(5, 50)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> selector = Selector.open();</span></span><br><span class="line">epoll_create(256)                       = 8</span><br><span class="line"><span class="meta">#</span><span class="bash"> server.register(selector, SelectionKey.OP_ACCEPT);</span></span><br><span class="line">epoll_ctl(8, EPOLL_CTL_ADD, 5, &#123;EPOLLIN, &#123;u32=5, u64=9512930623052840965&#125;&#125;) = 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> selector.select()</span></span><br><span class="line">epoll_wait(8, [&#123;EPOLLIN, &#123;u32=5, u64=9512930623052840965&#125;&#125;], 4096, -1) = 1</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>io</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义动态代理与JDK动态代理</title>
    <url>/2021/05/13/%E5%B0%8F%E7%AA%A5JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="什么是动态代理"><a href="#什么是动态代理" class="headerlink" title="什么是动态代理"></a>什么是动态代理</h2><p>动态代理是在运行期利用 <em>JVM</em> 的反射机制生成代理类，可以在不需要知道具体被代理类的情况下编写代理规则，能避免因大量使用静态代理造成的类的急剧膨胀。</p>
<span id="more"></span>

<h2 id="自定义动态代理"><a href="#自定义动态代理" class="headerlink" title="自定义动态代理"></a>自定义动态代理</h2><h3 id="MyProxy"><a href="#MyProxy" class="headerlink" title="MyProxy"></a>MyProxy</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.custom.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.tools.JavaCompiler;</span><br><span class="line"><span class="keyword">import</span> javax.tools.StandardJavaFileManager;</span><br><span class="line"><span class="keyword">import</span> javax.tools.ToolProvider;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String Ln = <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String Tab = <span class="string">&quot;\t&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(MyClassLoader loader,</span></span></span><br><span class="line"><span class="params"><span class="function">                                          Class&lt;?&gt;[] interfaceName,</span></span></span><br><span class="line"><span class="params"><span class="function">                                          MyInvocationHandler h)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、动态生成一个.java的源文件</span></span><br><span class="line">        String proxy = generateCode(interfaceName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、把生成的这个.java源文件保存在磁盘上</span></span><br><span class="line">        String filePath = MyProxy.class.getResource(<span class="string">&quot;&quot;</span>).getPath();</span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath + <span class="string">&quot;$Proxy0.java&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists())&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                file.createNewFile();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        FileWriter fileWriter = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileWriter = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">            fileWriter.write(proxy);</span><br><span class="line">            fileWriter.flush();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3、把这个.java源文件编译成.class文件</span></span><br><span class="line">            <span class="comment">// 创建一个java文件编译器对象</span></span><br><span class="line">            JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();</span><br><span class="line">            <span class="comment">// java源代码文件管理器</span></span><br><span class="line">            StandardJavaFileManager fileManager = compiler.getStandardFileManager(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// java源文件的一个迭代器对象</span></span><br><span class="line">            Iterable iterable = fileManager.getJavaFileObjects(file);</span><br><span class="line">            <span class="comment">// 获取一个编译的任务</span></span><br><span class="line">            JavaCompiler.CompilationTask task = compiler.getTask(<span class="keyword">null</span>, fileManager, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, iterable);</span><br><span class="line">            <span class="comment">// 执行编译</span></span><br><span class="line">            task.call();</span><br><span class="line">            <span class="comment">// 关闭文件管理器</span></span><br><span class="line">            fileManager.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4、把编译后的.class文件加载到jvm内存中</span></span><br><span class="line">            Class clazz = loader.findClass(<span class="string">&quot;$Proxy0&quot;</span>);</span><br><span class="line">            </span><br><span class="line"><span class="comment">//			  不采用自定义ClassLoader的方式加载</span></span><br><span class="line"><span class="comment">//            URLClassLoader urlClassLoader = new URLClassLoader(new URL[]&#123;new URL(&quot;file:D:\\ideawork\\MySpring\\SpringDemo\\proxyCustom\\target\\classes&quot;)&#125;);</span></span><br><span class="line"><span class="comment">//            Class clazz = urlClassLoader.loadClass(&quot;com.custom.proxy.$Proxy0&quot;);</span></span><br><span class="line">            <span class="comment">//5、根据加载到jvm中的.class字节码文件生成Class类，然后创建Class类的对象</span></span><br><span class="line">            Constructor constructor = clazz.getConstructor(MyInvocationHandler.class);</span><br><span class="line">            <span class="keyword">return</span> constructor.newInstance(h);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileWriter.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateCode</span><span class="params">(Class&lt;?&gt;[] interfances)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        sb.append(<span class="string">&quot;package com.custom.proxy;&quot;</span> + Ln);</span><br><span class="line">        sb.append(<span class="string">&quot;import java.lang.reflect.Method;&quot;</span> + Ln);</span><br><span class="line">        sb.append(<span class="string">&quot;import com.custom.proxy.MyInvocationHandler;&quot;</span> + Ln);</span><br><span class="line">        sb.append(<span class="string">&quot;public class $Proxy0 implements &quot;</span> + interfances[<span class="number">0</span>].getName() + <span class="string">&quot;&#123;&quot;</span> + Ln);</span><br><span class="line">        sb.append(Tab + <span class="string">&quot;private MyInvocationHandler h;&quot;</span> + Ln);</span><br><span class="line">        sb.append(Tab + <span class="string">&quot;public $Proxy0(MyInvocationHandler h)&#123;&quot;</span> + Ln);</span><br><span class="line">        sb.append(Tab + Tab + <span class="string">&quot;this.h = h;&quot;</span> + Ln);</span><br><span class="line">        sb.append(Tab + <span class="string">&quot;&#125;&quot;</span> + Ln);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Method m : interfances[<span class="number">0</span>].getMethods()) &#123;</span><br><span class="line">            sb.append(Tab + <span class="string">&quot;public &quot;</span> + m.getReturnType().getName() + <span class="string">&quot; &quot;</span> + m.getName() + <span class="string">&quot;() &#123;&quot;</span> + Ln);</span><br><span class="line">            sb.append(Tab + Tab + <span class="string">&quot;try &#123;&quot;</span> + Ln);</span><br><span class="line">            sb.append(Tab + Tab + Tab + <span class="string">&quot;Method m = &quot;</span> + interfances[<span class="number">0</span>].getName() + <span class="string">&quot;.class.getMethod(\&quot;&quot;</span> + m.getName() + <span class="string">&quot;\&quot;);&quot;</span> + Ln);</span><br><span class="line">            sb.append(Tab + Tab + Tab + <span class="string">&quot;h.invoke(this, m, null);&quot;</span> + Ln);</span><br><span class="line"><span class="comment">//            sb.append(Tab + Tab + Tab + &quot;return (&quot; + m.getReturnType().getName() + &quot;)h.invoke(this, m, null);&quot; + Ln);</span></span><br><span class="line">            sb.append(Tab + Tab + <span class="string">&quot;&#125; catch (Throwable e) &#123;&quot;</span> + Ln);</span><br><span class="line">            sb.append(Tab + Tab + Tab + <span class="string">&quot;e.printStackTrace();&quot;</span> + Ln);</span><br><span class="line">            sb.append(Tab + Tab + <span class="string">&quot;&#125;&quot;</span> + Ln);</span><br><span class="line">            sb.append(Tab + <span class="string">&quot;&#125;&quot;</span> + Ln);</span><br><span class="line">            sb.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="MyClassLoader"><a href="#MyClassLoader" class="headerlink" title="MyClassLoader"></a>MyClassLoader</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.custom.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义一个类加载器</span></span><br><span class="line"><span class="comment"> * bootstrap ClassLoader  --jdk/jre/目录下的jar包加载</span></span><br><span class="line"><span class="comment"> * ext ClassLoader  --jdk/ext/目录下的jar包加载</span></span><br><span class="line"><span class="comment"> * App ClassLoader  --我们应用的ClassLoader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> File classPathFile;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String classPath = MyClassLoader.class.getResource(<span class="string">&quot;&quot;</span>).getPath();</span><br><span class="line">        <span class="keyword">this</span>.classPathFile = <span class="keyword">new</span> File(classPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (classPathFile != <span class="keyword">null</span>) &#123;</span><br><span class="line">            File classFile = <span class="keyword">new</span> File(classPathFile + <span class="string">&quot;\\&quot;</span> + name.replace(<span class="string">&quot;\\.&quot;</span>, <span class="string">&quot;/&quot;</span>) + <span class="string">&quot;.class&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (classFile.exists()) &#123;</span><br><span class="line">                FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">                ByteArrayOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis = <span class="keyword">new</span> FileInputStream(classFile);</span><br><span class="line">                    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</span><br><span class="line">                    bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                    <span class="keyword">int</span> len;</span><br><span class="line">                    <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        bos.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> defineClass(<span class="keyword">null</span>, bos.toByteArray(), <span class="number">0</span>, bos.size());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        fis.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bos.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="MyInvocationHandler"><a href="#MyInvocationHandler" class="headerlink" title="MyInvocationHandler"></a>MyInvocationHandler</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.custom.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="JDK动态代理源码分析"><a href="#JDK动态代理源码分析" class="headerlink" title="JDK动态代理源码分析"></a>JDK动态代理源码分析</h2><h3 id="Object-proxy-Proxy-newProxyInstance"><a href="#Object-proxy-Proxy-newProxyInstance" class="headerlink" title="Object proxy = Proxy.newProxyInstance(..);"></a>Object proxy = Proxy.newProxyInstance(..);</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span></span><br><span class="line"><span class="params"><span class="function">                                         Class&lt;?&gt;[] interfaces,</span></span></span><br><span class="line"><span class="params"><span class="function">                                         InvocationHandler h)</span></span></span><br><span class="line"><span class="function">       <span class="keyword">throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       Objects.requireNonNull(h);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class="line">       <span class="keyword">final</span> SecurityManager sm = System.getSecurityManager();</span><br><span class="line">       <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">           checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 查找或生成指定的代理类</span></span><br><span class="line"><span class="comment">        * Look up or generate the designated proxy class.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 使用指定的调用处理程序调用其构造函数</span></span><br><span class="line"><span class="comment">        * Invoke its constructor with the designated invocation handler.</span></span><br><span class="line"><span class="comment">        * 解释：将使用者写的InvacationHandler h 作为构造函数的参数传给代理对象</span></span><br><span class="line"><span class="comment">        * 		代理对象调用h.invoke()方法实现对target的代理和方法的增强</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">//检查创建代理类所需的权限</span></span><br><span class="line">               checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class="line">           <span class="keyword">final</span> InvocationHandler ih = h;</span><br><span class="line">           <span class="keyword">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class="line">               AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                   <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                       cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> cons.newInstance(<span class="keyword">new</span> Object[]&#123;h&#125;);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IllegalAccessException|InstantiationException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">           Throwable t = e.getCause();</span><br><span class="line">           <span class="keyword">if</span> (t <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">               <span class="keyword">throw</span> (RuntimeException) t;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(t.toString(), t);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Class-lt-gt-cl-getProxyClass0-loader-intfs"><a href="#Class-lt-gt-cl-getProxyClass0-loader-intfs" class="headerlink" title="Class&lt;?&gt; cl = getProxyClass0(loader, intfs);"></a>Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成代理类。在调用之前必须调用checkProxyAccess方法来执行权限检查</span></span><br><span class="line"><span class="comment">    * Generate a proxy class.  Must call the checkProxyAccess method</span></span><br><span class="line"><span class="comment">    * to perform permission checks before calling this.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; getProxyClass0(ClassLoader loader,</span><br><span class="line">                                          Class&lt;?&gt;... interfaces) &#123;</span><br><span class="line">       <span class="keyword">if</span> (interfaces.length &gt; <span class="number">65535</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;interface limit exceeded&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// If the proxy class defined by the given loader implementing</span></span><br><span class="line">       <span class="comment">// the given interfaces exists, this will simply return the cached copy;</span></span><br><span class="line">       <span class="comment">// otherwise, it will create the proxy class via the ProxyClassFactory</span></span><br><span class="line">       <span class="comment">// 简单所就是有缓存读缓存，没缓存就生成</span></span><br><span class="line">       <span class="keyword">return</span> proxyClassCache.get(loader, interfaces);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="proxyClassCache-get-loader-interfaces"><a href="#proxyClassCache-get-loader-interfaces" class="headerlink" title="proxyClassCache.get(loader, interfaces);"></a>proxyClassCache.get(loader, interfaces);</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Look-up the value through the cache. This always evaluates the</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> subKeyFactory&#125; function and optionally evaluates</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> valueFactory&#125; function if there is no entry in the cache for given</span></span><br><span class="line"><span class="comment">    * pair of (key, subKey) or the entry has already been cleared.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> key       possibly null key</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> parameter parameter used together with key to create sub-key and</span></span><br><span class="line"><span class="comment">    *                  value (should not be null)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the cached value (never null)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> parameter&#125; passed in or</span></span><br><span class="line"><span class="comment">    *                              &#123;<span class="doctag">@code</span> sub-key&#125; calculated by</span></span><br><span class="line"><span class="comment">    *                              &#123;<span class="doctag">@code</span> subKeyFactory&#125; or &#123;<span class="doctag">@code</span> value&#125;</span></span><br><span class="line"><span class="comment">    *                              calculated by &#123;<span class="doctag">@code</span> valueFactory&#125; is null.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key, P parameter)</span> </span>&#123;</span><br><span class="line">       Objects.requireNonNull(parameter);</span><br><span class="line"></span><br><span class="line">       expungeStaleEntries();</span><br><span class="line"></span><br><span class="line">       Object cacheKey = CacheKey.valueOf(key, refQueue);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// lazily install the 2nd level valuesMap for the particular cacheKey</span></span><br><span class="line">       ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; valuesMap = map.get(cacheKey);</span><br><span class="line">       <span class="keyword">if</span> (valuesMap == <span class="keyword">null</span>) &#123;</span><br><span class="line">           ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; oldValuesMap</span><br><span class="line">               = map.putIfAbsent(cacheKey,</span><br><span class="line">                                 valuesMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;());</span><br><span class="line">           <span class="keyword">if</span> (oldValuesMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">               valuesMap = oldValuesMap;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// create subKey and retrieve the possible Supplier&lt;V&gt; stored by that</span></span><br><span class="line">       <span class="comment">// subKey from valuesMap</span></span><br><span class="line">       Object subKey = Objects.requireNonNull(subKeyFactory.apply(key, parameter));</span><br><span class="line">       Supplier&lt;V&gt; supplier = valuesMap.get(subKey);</span><br><span class="line">       Factory factory = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (supplier != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">// supplier might be a Factory or a CacheValue&lt;V&gt; instance</span></span><br><span class="line">               <span class="comment">// 这一步为获得代理对象的Class</span></span><br><span class="line">               V value = supplier.get();</span><br><span class="line">               <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">return</span> value;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// else no supplier in cache</span></span><br><span class="line">           <span class="comment">// or a supplier that returned null (could be a cleared CacheValue</span></span><br><span class="line">           <span class="comment">// or a Factory that wasn&#x27;t successful in installing the CacheValue)</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">// lazily construct a Factory</span></span><br><span class="line">           <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">               factory = <span class="keyword">new</span> Factory(key, parameter, subKey, valuesMap);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (supplier == <span class="keyword">null</span>) &#123;</span><br><span class="line">               supplier = valuesMap.putIfAbsent(subKey, factory);</span><br><span class="line">               <span class="keyword">if</span> (supplier == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="comment">// successfully installed Factory</span></span><br><span class="line">                   supplier = factory;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// else retry with winning supplier</span></span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (valuesMap.replace(subKey, supplier, factory)) &#123;</span><br><span class="line">                   <span class="comment">// successfully replaced</span></span><br><span class="line">                   <span class="comment">// cleared CacheEntry / unsuccessful Factory</span></span><br><span class="line">                   <span class="comment">// with our Factory</span></span><br><span class="line">                   supplier = factory;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="comment">// retry with current supplier</span></span><br><span class="line">                   supplier = valuesMap.get(subKey);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="V-value-supplier-get"><a href="#V-value-supplier-get" class="headerlink" title="V value = supplier.get();"></a>V value = supplier.get();</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//WeakCache的内部类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> <span class="keyword">implements</span> <span class="title">Supplier</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">final</span> K key;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">final</span> P parameter;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">final</span> Object subKey;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; valuesMap;</span><br><span class="line"></span><br><span class="line">       Factory(K key, P parameter, Object subKey,</span><br><span class="line">               ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; valuesMap) &#123;</span><br><span class="line">           <span class="keyword">this</span>.key = key;</span><br><span class="line">           <span class="keyword">this</span>.parameter = parameter;</span><br><span class="line">           <span class="keyword">this</span>.subKey = subKey;</span><br><span class="line">           <span class="keyword">this</span>.valuesMap = valuesMap;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="comment">// serialize access</span></span><br><span class="line">           <span class="comment">// re-check</span></span><br><span class="line">           Supplier&lt;V&gt; supplier = valuesMap.get(subKey);</span><br><span class="line">           <span class="keyword">if</span> (supplier != <span class="keyword">this</span>) &#123;</span><br><span class="line">               <span class="comment">// something changed while we were waiting:</span></span><br><span class="line">               <span class="comment">// might be that we were replaced by a CacheValue</span></span><br><span class="line">               <span class="comment">// or were removed because of failure -&gt;</span></span><br><span class="line">               <span class="comment">// return null to signal WeakCache.get() to retry</span></span><br><span class="line">               <span class="comment">// the loop</span></span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// else still us (supplier == this)</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">// create new value</span></span><br><span class="line">           V value = <span class="keyword">null</span>;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">//Objects.requireNonNull()只是判断是否非空</span></span><br><span class="line">               <span class="comment">//valueFactory.apply(key, parameter)中key为类加载器，parameter为接口的类对象</span></span><br><span class="line">               value = Objects.requireNonNull(valueFactory.apply(key, parameter));</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123; <span class="comment">// remove us on failure</span></span><br><span class="line">                   valuesMap.remove(subKey, <span class="keyword">this</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// the only path to reach here is with non-null value</span></span><br><span class="line">           <span class="keyword">assert</span> value != <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// wrap value with CacheValue (WeakReference)</span></span><br><span class="line">           CacheValue&lt;V&gt; cacheValue = <span class="keyword">new</span> CacheValue&lt;&gt;(value);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// put into reverseMap</span></span><br><span class="line">           reverseMap.put(cacheValue, Boolean.TRUE);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// try replacing us with CacheValue (this should always succeed)</span></span><br><span class="line">           <span class="keyword">if</span> (!valuesMap.replace(subKey, <span class="keyword">this</span>, cacheValue)) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">&quot;Should not reach here&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// successfully replaced us with new CacheValue -&gt; return the value</span></span><br><span class="line">           <span class="comment">// wrapped by it</span></span><br><span class="line">           <span class="keyword">return</span> value;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * A factory function that generates, defines and returns the proxy class given</span></span><br><span class="line"><span class="comment">    * the ClassLoader and array of interfaces.</span></span><br><span class="line"><span class="comment">    * 指定类加载器和接口生成代理类.class的工厂</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyClassFactory</span></span></span><br><span class="line"><span class="class">       <span class="keyword">implements</span> <span class="title">BiFunction</span>&lt;<span class="title">ClassLoader</span>, <span class="title">Class</span>&lt;?&gt;[], <span class="title">Class</span>&lt;?&gt;&gt;</span></span><br><span class="line"><span class="class">   </span>&#123;</span><br><span class="line">       <span class="comment">// prefix for all proxy class names</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String proxyClassNamePrefix = <span class="string">&quot;$Proxy&quot;</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// next number to use for generation of unique proxy class names</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicLong nextUniqueNumber = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> Class&lt;?&gt; apply(ClassLoader loader, Class&lt;?&gt;[] interfaces) &#123;</span><br><span class="line"></span><br><span class="line">           Map&lt;Class&lt;?&gt;, Boolean&gt; interfaceSet = <span class="keyword">new</span> IdentityHashMap&lt;&gt;(interfaces.length);</span><br><span class="line">           <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Verify that the class loader resolves the name of this</span></span><br><span class="line"><span class="comment">                * interface to the same Class object.</span></span><br><span class="line"><span class="comment">                * 验证类加载器是否解析此接口名到同一个类对象</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               Class&lt;?&gt; interfaceClass = <span class="keyword">null</span>;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   interfaceClass = Class.forName(intf.getName(), <span class="keyword">false</span>, loader);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (interfaceClass != intf) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                       intf + <span class="string">&quot; is not visible from class loader&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Verify that the Class object actually represents an</span></span><br><span class="line"><span class="comment">                * interface.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="keyword">if</span> (!interfaceClass.isInterface()) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                       interfaceClass.getName() + <span class="string">&quot; is not an interface&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Verify that this interface is not a duplicate.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="keyword">if</span> (interfaceSet.put(interfaceClass, Boolean.TRUE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                       <span class="string">&quot;repeated interface: &quot;</span> + interfaceClass.getName());</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           String proxyPkg = <span class="keyword">null</span>;     <span class="comment">// package to define proxy class in</span></span><br><span class="line">           <span class="keyword">int</span> accessFlags = Modifier.PUBLIC | Modifier.FINAL;</span><br><span class="line"></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Record the package of a non-public proxy interface so that the</span></span><br><span class="line"><span class="comment">            * proxy class will be defined in the same package.  Verify that</span></span><br><span class="line"><span class="comment">            * all non-public proxy interfaces are in the same package.</span></span><br><span class="line"><span class="comment">            * 记录非公共代理接口所在的包，以便将代理类定义在同一包中</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">               <span class="keyword">int</span> flags = intf.getModifiers();</span><br><span class="line">               <span class="keyword">if</span> (!Modifier.isPublic(flags)) &#123;</span><br><span class="line">                   accessFlags = Modifier.FINAL;</span><br><span class="line">                   String name = intf.getName();</span><br><span class="line">                   <span class="keyword">int</span> n = name.lastIndexOf(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">                   String pkg = ((n == -<span class="number">1</span>) ? <span class="string">&quot;&quot;</span> : name.substring(<span class="number">0</span>, n + <span class="number">1</span>));</span><br><span class="line">                   <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                       proxyPkg = pkg;</span><br><span class="line">                   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pkg.equals(proxyPkg)) &#123;</span><br><span class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                           <span class="string">&quot;non-public interfaces from different packages&quot;</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">// if no non-public proxy interfaces, use com.sun.proxy package</span></span><br><span class="line">               proxyPkg = ReflectUtil.PROXY_PACKAGE + <span class="string">&quot;.&quot;</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Choose a name for the proxy class to generate.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="keyword">long</span> num = nextUniqueNumber.getAndIncrement();</span><br><span class="line">           String proxyName = proxyPkg + proxyClassNamePrefix + num;</span><br><span class="line"></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Generate the specified proxy class.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="comment">//动态生成class的byte数组，通过字符串拼接jvm指令</span></span><br><span class="line">           <span class="keyword">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(</span><br><span class="line">               proxyName, interfaces, accessFlags);</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">//将生成的byte数组加载进jvm，此方法为native方法，由C编写</span></span><br><span class="line">               <span class="keyword">return</span> defineClass0(loader, proxyName,</span><br><span class="line">                                   proxyClassFile, <span class="number">0</span>, proxyClassFile.length);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (ClassFormatError e) &#123;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * A ClassFormatError here means that (barring bugs in the</span></span><br><span class="line"><span class="comment">                * proxy class generation code) there was some other</span></span><br><span class="line"><span class="comment">                * invalid aspect of the arguments supplied to the proxy</span></span><br><span class="line"><span class="comment">                * class creation (such as virtual machine limitations</span></span><br><span class="line"><span class="comment">                * exceeded).</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e.toString());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li><p>自定义动态代理：</p>
<p>​    动态拼接字符串生成代理对象的.java文件 -&gt; 将.java文件编译成.class文件 -&gt; 通过类加载器加载.class文件进jvm -&gt; 反射生成代理对象</p>
</li>
<li><p>jdk动态代理：</p>
<p>​    生成.clsss文件的byte[]数组，直接将数组加载进jvm -&gt; 反射生成代理对象</p>
</li>
<li><p>jdk动态代理无需涉及io流，所以比自定义动态代理高效。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title>网络IO-IO模型的演变</title>
    <url>/2021/05/26/%E7%BD%91%E7%BB%9CIO-IO%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%BC%94%E5%8F%98/</url>
    <content><![CDATA[<p>代码、资料来自于马士兵MAC课程。</p>
<p>本文主要讲解了IO模型，由 <em>BIO</em> 到 <em>NIO</em>，再演变到多路复用 <em>select/poll</em> 和 <em>epoll</em> 的过程。</p>
<p>从本文中你可以了解到不同模型是如何解决之前模型所产生的问题，并且会带来什么样的新问题。</p>
<span id="more"></span>

<h2 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h2><h3 id="BIO-服务器端代码"><a href="#BIO-服务器端代码" class="headerlink" title="BIO 服务器端代码"></a>BIO 服务器端代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">9090</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;step1: new ServerSocket(9090) &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">//阻塞</span></span><br><span class="line">        Socket client = server.accept();  </span><br><span class="line">        System.out.println(<span class="string">&quot;step2:client\t&quot;</span> + client.getPort());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                InputStream in = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in = client.getInputStream();</span><br><span class="line">                    BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        <span class="comment">//阻塞</span></span><br><span class="line">                        String dataline = reader.readLine(); </span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">null</span> != dataline) &#123;</span><br><span class="line">                            System.out.println(dataline);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            client.close();</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;客户端断开&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="如何查看java所在位置"><a href="#如何查看java所在位置" class="headerlink" title="如何查看java所在位置"></a>如何查看java所在位置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whereis java</span><br><span class="line">java: /usr/bin/java /usr/lib/java /etc/java /usr/share/java /usr/share/man/man1/java.1.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -l 查看详细 -r 倒叙排序 -t 按时间排序</span></span><br><span class="line">ls -lrt /usr/bin/java</span><br><span class="line">lrwxrwxrwx. 1 root root 22 5月  25 11:11 /usr/bin/java -&gt; /etc/alternatives/java</span><br><span class="line"></span><br><span class="line">/etc/alternatives/java</span><br><span class="line">lrwxrwxrwx. 1 root root 73 5月  25 11:11 /etc/alternatives/java -&gt; /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.292.b10-1.el7_9.x86_64/jre/bin/java</span><br></pre></td></tr></table></figure>

<h3 id="使用strace追踪程序"><a href="#使用strace追踪程序" class="headerlink" title="使用strace追踪程序"></a>使用strace追踪程序</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -ff 监听所有请求，使用 1.4 以前版本才能看到最早 BIO 的系统调用函数</span></span><br><span class="line">strace -ff -o out /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.292.b10-1.el7_9.x86_64/jre/bin/java SocketBIO</span><br></pre></td></tr></table></figure>

<p>这时当前目录下就会生成对应文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ll</span><br><span class="line">总用量 832</span><br><span class="line">-rw-r--r--. 1 root root  13685 5月  26 12:40 out.8696</span><br><span class="line">-rw-r--r--. 1 root root 195208 5月  26 12:40 out.8697</span><br><span class="line">-rw-r--r--. 1 root root  33347 5月  26 12:43 out.8698</span><br><span class="line">-rw-r--r--. 1 root root    975 5月  26 12:40 out.8699</span><br><span class="line">-rw-r--r--. 1 root root   1098 5月  26 12:40 out.8700</span><br><span class="line">-rw-r--r--. 1 root root   1019 5月  26 12:40 out.8701</span><br><span class="line">-rw-r--r--. 1 root root  12260 5月  26 12:43 out.8702</span><br><span class="line">-rw-r--r--. 1 root root   9956 5月  26 12:43 out.8703</span><br><span class="line">-rw-r--r--. 1 root root    974 5月  26 12:40 out.8704</span><br><span class="line">-rw-r--r--. 1 root root 545800 5月  26 12:43 out.8705</span><br><span class="line">-rw-r--r--. 1 root root   1175 5月  26 11:47 SocketBIO$1.class</span><br><span class="line">-rw-r--r--. 1 root root   1104 5月  26 11:47 SocketBIO.class</span><br><span class="line">-rw-r--r--. 1 root root   1505 5月  26 11:47 SocketBIO.java</span><br></pre></td></tr></table></figure>

<p>之后便可以观察具体发生了哪些系统调用</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>系统调用socket(…)=3</li>
<li>系统调用bind(3, …8090…)绑定端口号</li>
<li>系统调用listen(3,…)来监听此端口，此时 netstat -napt 才会显示对应的socket在监听8090端口</li>
<li>主线程阻塞在系统调用accept(3,  处</li>
<li>调用 nc 命令去连接，则主线程通过系统调用clone(…)抛出一个线程去接收信息，此时主线程再次循环阻塞在accept(3,  处，而子线程阻塞在 recv(fd, 处</li>
</ol>
<h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><h3 id="NIO-服务器端代码"><a href="#NIO-服务器端代码" class="headerlink" title="NIO 服务器端代码"></a>NIO 服务器端代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    LinkedList&lt;SocketChannel&gt; clients = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务端开启监听：接受客户端</span></span><br><span class="line">    ServerSocketChannel ss = ServerSocketChannel.open();</span><br><span class="line">    ss.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9090</span>));</span><br><span class="line">    <span class="comment">// 重点  OS  NONBLOCKING!!!  只让接受客户端时不阻塞</span></span><br><span class="line">    ss.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 接受客户端的连接</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// 不会阻塞？  -1 NULL</span></span><br><span class="line">        SocketChannel client = ss.accept(); </span><br><span class="line">        <span class="comment">// accept  调用内核了：1，没有客户端连接进来，返回值？在BIO 的时候一直卡着，但是在NIO ，不卡着，返回-1，NULL</span></span><br><span class="line">        <span class="comment">// 如果来客户端的连接，accept 返回的是这个客户端的fd  5，client  object</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (client == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;null.....&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//重点  socket（服务端的listen socket&lt;连接请求三次握手后，往我这里扔，我去通过accept得到连接的socket&gt;，连接socket&lt;连接后的数据读写使用的&gt; ）</span></span><br><span class="line">            client.configureBlocking(<span class="keyword">false</span>); </span><br><span class="line">            <span class="keyword">int</span> port = client.socket().getPort();</span><br><span class="line">            System.out.println(<span class="string">&quot;client..port: &quot;</span> + port);</span><br><span class="line">            clients.add(client);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//可以在堆里   堆外</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocateDirect(<span class="number">4096</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历已经链接进来的客户端能不能读写数据</span></span><br><span class="line">        <span class="keyword">for</span> (SocketChannel c : clients) &#123;</span><br><span class="line">            <span class="comment">// 不会阻塞，num 的返回值有 &gt;0  -1  0</span></span><br><span class="line">            <span class="keyword">int</span> num = c.read(buffer);  </span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                buffer.flip();</span><br><span class="line">                <span class="keyword">byte</span>[] aaa = <span class="keyword">new</span> <span class="keyword">byte</span>[buffer.limit()];</span><br><span class="line">                buffer.get(aaa);</span><br><span class="line"></span><br><span class="line">                String b = <span class="keyword">new</span> String(aaa);</span><br><span class="line">                System.out.println(c.socket().getPort() + <span class="string">&quot; : &quot;</span> + b);</span><br><span class="line">                buffer.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用strace追踪程序-1"><a href="#使用strace追踪程序-1" class="headerlink" title="使用strace追踪程序"></a>使用strace追踪程序</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -ff 监听所有请求，使用 1.4 以前版本才能看到最早 BIO 的系统调用函数</span></span><br><span class="line">strace -ff -o out java SocketNIO</span><br></pre></td></tr></table></figure>

<h4 id="观察-out-文件，可以发现系统调用-accept-5-0x7f970c13bc70-28-1-EAGAIN-资源暂时不可用-并未发生阻塞，当无服务端连接时直接返回-1"><a href="#观察-out-文件，可以发现系统调用-accept-5-0x7f970c13bc70-28-1-EAGAIN-资源暂时不可用-并未发生阻塞，当无服务端连接时直接返回-1" class="headerlink" title="观察 out 文件，可以发现系统调用 accept(5, 0x7f970c13bc70, [28])         = -1 EAGAIN (资源暂时不可用) 并未发生阻塞，当无服务端连接时直接返回 -1"></a>观察 out 文件，可以发现系统调用 <em>accept(5, 0x7f970c13bc70, [28])         = -1 EAGAIN (资源暂时不可用)</em> 并未发生阻塞，当无服务端连接时直接返回 -1</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail out.9301</span><br><span class="line">mprotect(0x7f970c22d000, 4096, PROT_READ|PROT_WRITE) = 0</span><br><span class="line">futex(0x7f970c04c354, FUTEX_WAIT_BITSET_PRIVATE, 1, &#123;tv_sec=19890, tv_nsec=261222528&#125;, 0xffffffff) = -1 ETIMEDOUT (连接超时)</span><br><span class="line">futex(0x7f970c04c328, FUTEX_WAKE_PRIVATE, 1) = 0</span><br><span class="line">accept(5, 0x7f970c13bc70, [28])         = -1 EAGAIN (资源暂时不可用)</span><br><span class="line">write(1, &quot;null.....&quot;, 9)                = 9</span><br><span class="line">write(1, &quot;\n&quot;, 1)                       = 1</span><br><span class="line">futex(0x7f970c115954, FUTEX_WAKE_OP_PRIVATE, 1, 1, 0x7f970c115950, FUTEX_OP_SET&lt;&lt;28|0&lt;&lt;12|FUTEX_OP_CMP_GT&lt;&lt;24|0x1) = 1</span><br><span class="line">futex(0x7f970c115928, FUTEX_WAKE_PRIVATE, 1) = 0</span><br><span class="line">mprotect(0x7f970c22e000, 4096, PROT_READ|PROT_WRITE) = 0</span><br><span class="line">futex(0x7f970c04c354, FUTEX_WAIT_BITSET_PRIVATE, 1, &#123;tv_sec=19891, tv_nsec=272261757&#125;, 0xffffffff</span><br></pre></td></tr></table></figure>

<h4 id="通过命令-nc-localhost-9090-进行连接，再次观察-out-文件"><a href="#通过命令-nc-localhost-9090-进行连接，再次观察-out-文件" class="headerlink" title="通过命令 nc localhost 9090 进行连接，再次观察 out 文件"></a>通过命令 <em>nc localhost 9090</em> 进行连接，再次观察 out 文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail out.9301</span><br><span class="line">write(1, &quot;null.....&quot;, 9)                = 9</span><br><span class="line">write(1, &quot;\n&quot;, 1)                       = 1</span><br><span class="line">read(6, 0x7f970c2c7a90, 4096)           = -1 EAGAIN (资源暂时不可用)</span><br><span class="line">futex(0x7f970c04c354, FUTEX_WAIT_BITSET_PRIVATE, 1, &#123;tv_sec=20045, tv_nsec=470392585&#125;, 0xffffffff) = -1 ETIMEDOUT (连接超时)</span><br><span class="line">futex(0x7f970c04c328, FUTEX_WAKE_PRIVATE, 1) = 0</span><br><span class="line">accept(5, 0x7f970c13e760, [28])         = -1 EAGAIN (资源暂时不可用)</span><br><span class="line">write(1, &quot;null.....&quot;, 9)                = 9</span><br><span class="line">write(1, &quot;\n&quot;, 1)                       = 1</span><br><span class="line">read(6, 0x7f970c2c8aa0, 4096)           = -1 EAGAIN (资源暂时不可用)</span><br><span class="line">futex(0x7f970c04c354, FUTEX_WAIT_BITSET_PRIVATE, 1, &#123;tv_sec=20046, tv_nsec=479021706&#125;, 0xffffffff</span><br></pre></td></tr></table></figure>

<p>可以发现会调用 <em>read(6, 0x7f970c2c8aa0, 4096)           = -1 EAGAIN (资源暂时不可用)</em> 尝试获取客户端数据，当前没数据时不阻塞直接返回 -1</p>
<h4 id="当客户端输入数据12345时，观察-out-文件"><a href="#当客户端输入数据12345时，观察-out-文件" class="headerlink" title="当客户端输入数据12345时，观察 out 文件"></a>当客户端输入数据<em>12345</em>时，观察 out 文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail out.9301</span><br><span class="line">read(6, 0x7f970c3f7de0, 4096)           = -1 EAGAIN (资源暂时不可用)</span><br><span class="line">futex(0x7f970c04c354, FUTEX_WAIT_BITSET_PRIVATE, 1, &#123;tv_sec=20350, tv_nsec=802512162&#125;, 0xffffffff) = -1 ETIMEDOUT (连接超时)</span><br><span class="line">futex(0x7f970c04c328, FUTEX_WAKE_PRIVATE, 1) = 0</span><br><span class="line">accept(5, 0x7f970c13bc70, [28])         = -1 EAGAIN (资源暂时不可用)</span><br><span class="line">write(1, &quot;null.....&quot;, 9)                = 9</span><br><span class="line">write(1, &quot;\n&quot;, 1)                       = 1</span><br><span class="line">read(6, &quot;12345\n&quot;, 4096)                = 6</span><br><span class="line">write(1, &quot;34706 : 12345\n&quot;, 14)         = 14</span><br><span class="line">write(1, &quot;\n&quot;, 1)                       = 1</span><br><span class="line">futex(0x7f970c04c354, FUTEX_WAIT_BITSET_PRIVATE, 1, &#123;tv_sec=20351, tv_nsec=812756397&#125;, 0xffffffff</span><br></pre></td></tr></table></figure>

<p>可以发现 <em>read(6, “12345\n”, 4096)                = 6</em> 成功接收数据</p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul>
<li>对 <em>ServerSocketChannel</em> 设置 <em>configureBlocking</em> 为 false 时，系统调用 <em>accept(5, 0x7f970c13e760, [28])         = -1 EAGAIN (资源暂时不可用)</em> 将不会被阻塞，当前没有客户端连接时会直接返回 -1</li>
<li>对 <em>SocketChannel</em> 设置 <em>configureBlocking</em> 为 false 时，系统调用  <em>read(6, 0x7f970c2c8aa0, 4096)           = -1 EAGAIN (资源暂时不可用)</em> 尝试获取客户端数据，当前没数据时不阻塞直接返回 -1</li>
<li>NIO 在一个线程内，循环遍历询问是否有新的客户端连接，若有连接将其放进集合 clients 中，再遍历 client 查询这些客户端连接是否有传入数据，如果有则获取到对应数据，没有则返回 -1</li>
<li>NIO 的优势：能够解决 BIO 多次创建线程造成的系统调用频繁的问题</li>
<li>NIO 的问题：在循环 clients 集合是，多次进行 read 系统调用导致内核态用户态频繁切换</li>
</ul>
<h2 id="多路复用-POLL-SELECT"><a href="#多路复用-POLL-SELECT" class="headerlink" title="多路复用 POLL/SELECT"></a>多路复用 POLL/SELECT</h2><h3 id="计算机组成原理之系统来消息了"><a href="#计算机组成原理之系统来消息了" class="headerlink" title="计算机组成原理之系统来消息了"></a>计算机组成原理之系统来消息了</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210601154548.png" alt="image-20210601154546121"></p>
<ol>
<li>当系统接受到消息了，会产生 IO 中断</li>
<li>中断会导致调用 callback，将网卡中发来的数据走网络协议栈最终关联到 FD 的 buffer</li>
<li>所以在某一时间，如果从 app 询问内核某一个或者某些 FD 是否有可 R/W，会有状态返回</li>
</ol>
<h3 id="poll-select-原理"><a href="#poll-select-原理" class="headerlink" title="poll/select 原理"></a>poll/select 原理</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210601155532.png" alt="image-20210601155531168"></p>
<ol>
<li>app 发起软中断，调用内核 select/poll 方法</li>
<li>内核通过 select/poll 方法，轮询 app 传入的参数 fds，会返回可用的 fds</li>
<li>app 获取可用的 fds，再调用内核 read 方法获取数据</li>
</ol>
<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ol>
<li>select/poll 解决了 NIO 对暂无数据的 fd 调用内核 read 方法导致用户态内核态切换频繁的问题</li>
<li>select/poll 在内核层面筛选有数据的 fd 的时间复杂度为 O(n)，且每次调用 select 方法会将所有需要监听的 fd 传给内核</li>
</ol>
<h2 id="EPOLL"><a href="#EPOLL" class="headerlink" title="EPOLL"></a>EPOLL</h2><h3 id="epoll-create、epoll-ctl-和-epoll-wait"><a href="#epoll-create、epoll-ctl-和-epoll-wait" class="headerlink" title="epoll_create、epoll_ctl 和 epoll_wait"></a>epoll_create、epoll_ctl 和 epoll_wait</h3><ul>
<li><p>epoll_create - open an epoll file descriptor</p>
<blockquote>
<p>epoll_create() 返回一个引用新 epoll 实例的文件描述符。该文件描述符用于对epoll接口的所有后续调用。其本质是在内核中开辟一块内存空间，并返回描述该内存空间的 fd。</p>
</blockquote>
</li>
<li><p>epoll_ctl - control interface for an epoll descriptor</p>
<blockquote>
<p>int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);</p>
<p>epfd：即为 epoll_create 返回的 fd</p>
<p>op：表示要进行什么操作，例如 EPOLL_CTL_ADD、EPOLL_CTL_ADD、EPOLL_CTL_DEL</p>
<p>fd：表示这些操作是对这个 fd 进行的</p>
<p>*event：表示这个 fd 可用于什么操作，如 </p>
<p>​                EPOLLIN - The associated file is available for read(2) operations.</p>
<p>​                EPOLLOUT - The associated file is available for write(2) operations.</p>
</blockquote>
</li>
<li><p>epoll_wait - wait for an I/O event on an epoll file descriptor</p>
<blockquote>
<p>epoll_wait 表示等待返回一个可操作的 fd 链表</p>
</blockquote>
</li>
</ul>
<h3 id="epoll-原理"><a href="#epoll-原理" class="headerlink" title="epoll 原理"></a>epoll 原理</h3><p><img src="https://raw.githubusercontent.com/xyq-material/image/master/blog/20210601174206.png" alt="image-20210601174205090"></p>
<ol>
<li>系统调用 <em>epoll_create</em> 在内核中开辟一块内存，并将 FD6 指向该空间</li>
<li>在客户端和服务器端三次握手结束后，并将该 socket 分配给 app 后，app 的线程会产生一个 FD5，并调用 <em>epoll_ctl(fd6,ADD,fd5…</em> 把 fd5 放入 fd6 指向的内核空间中</li>
<li>当系统接受到 IO 中断后，不仅将数据从网卡的 buffer 复制到 fd 的 buffer 中，还会将该 fd 复制到 fd 的链表里</li>
<li>当调用 <em>epoll_wait</em> 方法后，会将 fd 的链表返回。链表里的 fd 都是有数据的</li>
</ol>
<blockquote>
<p>fd4 表示处于 listen 时的 socket，也是会进入红黑树中的</p>
</blockquote>
<h2 id="java-代码实现多路复用"><a href="#java-代码实现多路复用" class="headerlink" title="java 代码实现多路复用"></a>java 代码实现多路复用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketMultiplexingSingleThreadv1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServerSocketChannel server = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// linux 多路复用器（select poll    epoll kqueue） nginx  event&#123;&#125;</span></span><br><span class="line">    <span class="keyword">private</span> Selector selector = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> port = <span class="number">9090</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server = ServerSocketChannel.open();</span><br><span class="line">            server.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            server.bind(<span class="keyword">new</span> InetSocketAddress(port));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果在epoll模型下，open--》  epoll_create -&gt; fd3</span></span><br><span class="line">            <span class="comment">// select  poll  *epoll  优先选择：epoll  但是可以 -D修正</span></span><br><span class="line">            selector = Selector.open();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// server 约等于 listen状态的 fd4</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            register</span></span><br><span class="line"><span class="comment">            如果：</span></span><br><span class="line"><span class="comment">            select，poll：jvm里开辟一个数组 fd4 放进去</span></span><br><span class="line"><span class="comment">            epoll：  epoll_ctl(fd3,ADD,fd4,EPOLLIN</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            server.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        initServer();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器启动了。。。。。&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                Set&lt;SelectionKey&gt; keys = selector.keys();</span><br><span class="line">                System.out.println(keys.size() + <span class="string">&quot;   size&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 1.调用多路复用器(select,poll  or  epoll  (epoll_wait))</span></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                select()是啥意思：</span></span><br><span class="line"><span class="comment">                1.select，poll  其实  内核的select（fd4）  poll(fd4)</span></span><br><span class="line"><span class="comment">                2.epoll：  其实 内核的 epoll_wait()</span></span><br><span class="line"><span class="comment">                参数可以带时间：没有时间，0  ：  阻塞，有时间设置一个超时</span></span><br><span class="line"><span class="comment">                selector.wakeup()  结果返回0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                懒加载：</span></span><br><span class="line"><span class="comment">                其实再触碰到selector.select()调用的时候触发了epoll_ctl的调用</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">while</span> (selector.select() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 返回的有状态的fd集合</span></span><br><span class="line">                    Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();  </span><br><span class="line">                    Iterator&lt;SelectionKey&gt; iter = selectionKeys.iterator();</span><br><span class="line">                    <span class="comment">// so，管你啥多路复用器，你呀只能给我状态，我还得一个一个的去处理他们的R/W。同步好辛苦！！！！！！！！</span></span><br><span class="line">                    <span class="comment">// NIO  自己对着每一个fd调用系统调用，浪费资源，那么你看，这里是不是调用了一次select方法，知道具体的那些可以R/W了？</span></span><br><span class="line">                    <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">                        SelectionKey key = iter.next();</span><br><span class="line">                        <span class="comment">//set  不移除会重复循环处理</span></span><br><span class="line">                        iter.remove(); </span><br><span class="line">                        <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                            <span class="comment">// 看代码的时候，这里是重点，如果要去接受一个新的连接</span></span><br><span class="line">                            <span class="comment">// 语义上，accept接受连接且返回新连接的FD对吧？</span></span><br><span class="line">                            <span class="comment">// 那新的FD怎么办？</span></span><br><span class="line">                            <span class="comment">// select，poll，因为他们内核没有空间，那么在jvm中保存和前边的fd4那个listen的一起</span></span><br><span class="line">                            <span class="comment">// epoll： 我们希望通过epoll_ctl把新的客户端fd注册到内核空间</span></span><br><span class="line">                            acceptHandler(key);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                            readHandler(key);  </span><br><span class="line">                            <span class="comment">//在当前线程，这个方法可能会阻塞  ，如果阻塞了十年，其他的IO早就没电了。。。</span></span><br><span class="line">                            <span class="comment">//所以，为什么提出了 IO THREADS</span></span><br><span class="line">                            <span class="comment">//redis  是不是用了epoll，redis是不是有个io threads的概念 ，redis是不是单线程的</span></span><br><span class="line">                            <span class="comment">//tomcat 8,9  异步的处理方式  IO  和   处理上  解耦</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acceptHandler</span><span class="params">(SelectionKey key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerSocketChannel ssc = (ServerSocketChannel) key.channel();</span><br><span class="line">            <span class="comment">//来啦，目的是调用accept接受客户端  fd7</span></span><br><span class="line">            SocketChannel client = ssc.accept(); </span><br><span class="line">            client.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">8192</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//你看，调用了register</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            select，poll：jvm里开辟一个数组 fd7 放进去</span></span><br><span class="line"><span class="comment">            epoll：  epoll_ctl(fd3,ADD,fd7,EPOLLIN</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            client.register(selector, SelectionKey.OP_READ, buffer);</span><br><span class="line">            System.out.println(<span class="string">&quot;-------------------------------------------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;新客户端：&quot;</span> + client.getRemoteAddress());</span><br><span class="line">            System.out.println(<span class="string">&quot;-------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readHandler</span><span class="params">(SelectionKey key)</span> </span>&#123;</span><br><span class="line">        SocketChannel client = (SocketChannel) key.channel();</span><br><span class="line">        ByteBuffer buffer = (ByteBuffer) key.attachment();</span><br><span class="line">        buffer.clear();</span><br><span class="line">        <span class="keyword">int</span> read = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                read = client.read(buffer);</span><br><span class="line">                <span class="keyword">if</span> (read &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    buffer.flip();</span><br><span class="line">                    <span class="keyword">while</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">                        client.write(buffer);</span><br><span class="line">                    &#125;</span><br><span class="line">                    buffer.clear();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (read == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    client.close();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SocketMultiplexingSingleThreadv1 service = <span class="keyword">new</span> SocketMultiplexingSingleThreadv1();</span><br><span class="line">        service.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><em>Selector selector = Selector.open();</em> 获取多路复用器模型，可以是 epoll、poll、select</li>
<li><em>server.register(selector, SelectionKey.OP_ACCEPT);</em> 如果是 select/poll 模型：jvm里开辟一个数组 fd4 放进去；如果是 epoll 模型：epoll_ctl(fd3,ADD,fd4,EPOLLIN</li>
<li><em>client.register(selector, SelectionKey.OP_READ, buffer);</em> 如果是 select/poll 模型：fd7 放进 jvm 里的一个数组；如果是 epoll 模型：epoll_ctl(fd3,ADD,fd7,EPOLLIN</li>
<li><em>selector.select()</em>  如果是 select，poll 模型其实是调用内核的 *select(fd4)/poll(fd4)*，如果是 epoll 模型则是调用 <em>epoll_wait()</em></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>io</tag>
      </tags>
  </entry>
</search>
